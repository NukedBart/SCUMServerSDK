
/********************************************************
*                                                       *
*   Package generated using UEDumper by Spuckwaffel.    *
*                                                       *
********************************************************/

#pragma once
#include "BasicType.h"
#include "AIModule.h"
#include "AkAudio.h"
#include "BinkMediaPlayer.h"
#include "CinematicCamera.h"
#include "CoreUObject.h"
#include "DcxVehicle.h"
#include "merged_AudioMixer_Engine_UMG_MovieScene_MovieSceneTracks.h"
#include "Foliage.h"
#include "GameplayTags.h"
#include "MIDIDevice.h"
#include "NavigationSystem.h"
#include "Niagara.h"
#include "PhysicsCore.h"
#include "ReplicationGraph.h"
#include "RuntimeAudioImporter.h"
#include "SlateCore.h"
#include "merged_AudioMixer_Engine_UMG_MovieScene_MovieSceneTracks.h"
#include "VICODynamicsPlugin.h"

#pragma pack(push, 0x1)

class AAIDetectionTimerHandler;
class AAbandonedBunker;
class AAbandonedBunkerBCUMemoryModuleTerminal;
class AAbandonedBunkerDialPad;
class AAbandonedBunkerItemContainerBoundToActivation;
class AAbandonedBunkerSwitchboard;
class AAchievementsManagerClient;
class AAchievementsManagerServer;
class AAirplane;
class AAmbientSounds;
class AAmmunitionArrow;
class AAmmunitionBoxItem;
class AAmmunitionExplosiveArrow;
class AAmmunitionItem;
class AAnimal2;
class AAnimalContinuousChargeAttackAIController;
class AAquaticLifeSpawningVolume;
class AArmband;
class AArmedNPCBase;
class AArmedNPCBaseAIController;
class ABCULockItem;
class ABCULockRegistry;
class ABCUMemoryModuleItem;
class ABankATMMinigame;
class ABanker;
class ABarberShop;
class ABasicLadder;
class ABatteryChargerItem;
class ABedroll;
class ABiome;
class ABird2;
class ABird2AIController;
class ABirdTargetPoint;
class ABloodStain;
class ABoat;
class ABombDefusalMinigame;
class ABombDefusalMinigameBase;
class ABowAttachmentSilencer;
class ABowAttachmentStabilizer;
class ABrenner;
class ABrennerAIController;
class ABrokenArrow;
class ABuilding;
class ABuildingInterior;
class ABuildingManager;
class ABunkerBoundsTagActor;
class ACTFBase;
class ACTFFlag;
class ACTFFlagStand;
class ACTFGameEvent;
class ACTFLocationMarker;
class ACargoDropContainer;
class ACargoDropEvent;
class AChainsaw;
class ACharacterCreationMenuGameMode;
class ACharacterModificationRoom;
class AChestItem;
class AChristmasGhost;
class AClothesItem;
class ACombinationLockItem;
class ACompanionCrow;
class AComplexAnimal2;
class AComplexAnimalAIController;
class AConZAIController;
class AConZBase;
class AConZBaseElement;
class AConZBaseManager;
class AConZCameraManager;
class AConZCharacter;
class AConZEconomyManager;
class AConZGameMode;
class AConZGameSession;
class AConZGameState;
class AConZHUD;
class AConZNoiseListenerActor;
class AConZPlayerController;
class AConZPlayerState;
class AConZReverbVolume;
class AConZSpectatorPawn;
class AConZSquad;
class AConZWaterSpline;
class AConZWaterSplineIsland;
class AConZWaterSplineLake;
class AConZWaterSplineOcean;
class AConZWaterSplineRegistry;
class AConZWaterSplineRiver;
class AConZWorldBoundsVolume;
class AConZWorldSettings;
class AConsumableBuffItem;
class ACookedFoodItem;
class ACookingManager;
class ACookingUtilitySlotContainer;
class ACustomMapBorder;
class ADamagingTrapItem;
class ADcxBicycle;
class ADcxBike;
class ADcxMotorcycle;
class ADcxWheeledVehicle;
class ADcxWheeledVehicle4W;
class ADeathmatchGameEvent;
class ADeathmatchLocationMarker;
class ADeer2;
class ADepotItem;
class ADialLockMinigame;
class ADialLockMinigameBase;
class ADialLockSetCombinationMinigame;
class ADialPadMinigame;
class ADistantLevel;
class ADistantLevelManager;
class ADoctor;
class ADogTagItem;
class ADoor;
class ADoubleDoor;
class ADoubleRegularDoorStatic;
class ADoubleSlidingDoorStatic;
class ADrinkItem;
class ADrone;
class ADroneAIController;
class ADroneCameraActor;
class ADropZoneCargo;
class ADropZoneCrate;
class ADropZoneDroppable;
class ADropZoneEquipmentTable;
class ADropZoneGameEvent;
class ADropZoneKey;
class ADropZoneLocationMarker;
class ADropZoneSlot;
class ADropship;
class ADropshipAIController;
class ADynamicNavModifierVolumeActor;
class AEMPGrenadeItem;
class AEffectOverTimeDealer;
class AElectricityGeneratorItem;
class AEncounterStaticZone;
class AEquipmentItem;
class AExplosiveTrapItem;
class AFakeItem;
class AFireItem;
class AFireplaceItem;
class AFireworksItem;
class AFireworksTrapItem;
class AFishSchoolActor;
class AFishingAttachment;
class AFishingAttachmentBait;
class AFishingAttachmentFloater;
class AFishingAttachmentHook;
class AFishingAttachmentReel;
class AFishingAttachmentSinker;
class AFishingAttachmentWire;
class AFishingRod;
class AFishingTrophyActor;
class AFishingZoneIndicator;
class AFlagAreaVisualizer;
class AFlagElementsExpansionItem;
class AFlagSpecificRaidProtectionManager;
class AFlareTrapItem;
class AFlashbangItem;
class AFlashbangItemEffects;
class AFogSphere;
class AFollowsMouseActor;
class AFoodItem;
class AFragGrenadeItem;
class AGameEventBase;
class AGameEventBorder;
class AGameEventLocationMarker;
class AGameEventManager;
class AGameEventTransport;
class AGarden;
class AGardenManager;
class AGasTankItem;
class AGeigerCounter;
class AGib;
class AGlobalAquaticLifeManager;
class AGlobalBirdSpawner2;
class AGlobalEncounterManager;
class AGlobalGuardedZoneManager;
class AGlobalRaidProtectionManager;
class AGrenadeItem;
class AGuardedZoneManager;
class AHUD_John;
class AHalloweenSacrificePit;
class AHandheldLightItem;
class AHandheldSkeletalMeshLightItem;
class AHandheldSkeletalMeshLightItemWithGameResourceSlot;
class AHeadLamp;
class AHeatSourceManager;
class AHeatSourceMarker;
class AHuntingClue;
class AHuntingManager;
class AInfluenceAreaVisualizer;
class AInstrumentItem;
class AInteriorReflEnvCubeSceneCapture;
class AIntroVideoGameMode;
class AItem;
class AItemContainer;
class AItemContainerManager;
class AItemDropPlaceholder;
class AItemSpawnerGroup;
class AItemSpawnerVolume;
class AItemSpawningManager;
class AItemVirtualizationManager;
class AItemWithSkeletalMesh;
class AItemWithText;
class AKillBoxC4SpawnPoint;
class AKillBoxDetectionField;
class AKillBoxSpawnPoint;
class ALadderMarkersRegistry;
class ALargeAquaticAnimal;
class ALevelMarkers;
class ALevelRadiationSource;
class ALockBombDefusalMinigame;
class ALockProtectionItem;
class ALockpickingMinigame;
class AMainMenuGameMode;
class AMainMenuHUD;
class AMainMenuPlayerController;
class AMechanic;
class AMechanoidsManager;
class AMedicationItem;
class AMenuCameraController;
class AMenuPlayerController;
class AMeshSurfaceParticlesEffectActor;
class AMetalDetector;
class AMiniatureZombie;
class AMinigame;
class AMobilePhone;
class AMobilePhoneMinigame;
class AMugshotRoom;
class ANPCDrifter;
class ANPCDrifterAIController;
class ANPCGuard;
class ANPCGuardAIController;
class ANightVisionGogglesItem;
class ANoticeBoard;
class ANoticeBoardMinigame;
class ANotificationsManager;
class AOfflineRaidProtectionManager;
class APersistentCollisionManager;
class APesticideItem;
class APhotoModePawn;
class APlaceableActorBase;
class APlaceableActorBaseBuilding;
class APlaceableActorBaseUpgrade;
class APlaceableActorBlocker;
class APlaceableActorFortifications;
class APlaceableActorGarden;
class APlaceableActorItems;
class APlaceableActorModularBaseBuilding;
class APlaceableActorModularBaseBuildingFoundation;
class APlaceableActorTurret;
class APlantGrowthDisplay;
class APlayerDrone;
class APortableVehicleServiceStation;
class APowerNode;
class APracticeLockpickingItem;
class APracticeTrapItem;
class APrisoner;
class APrisonerCorpse;
class APrisonerHUD;
class APrisonerHallucinationIllusion;
class APrisonerHallucinationIllusion_SeeFirearmsAsSticksAndBananas;
class APrisonerHallucinationIllusion_SeeOtherPlayersExtremelyFatOrSkinny;
class APrisonerHallucinationIllusion_SeeOtherPlayersWithWeirdMasks;
class APrisonerHallucinationIllusion_SpawnCompanionCrow;
class APrisonerHallucinationIllusion_SpawnFakeItemsThatDisappearOnPickup;
class APrisonerHallucinationIllusion_SpawnMiniatureZombies;
class AProjectile;
class AProjectileArrow;
class AProjectileExplosive;
class AProjectileExplosiveArrow;
class AProjectileFlare;
class AProjectileGrenade;
class AProjectileRocket;
class AProjectileShotgun;
class AQuestBook;
class AQuestBookMinigame;
class AQuestDrivingWaypoint;
class AQuestInteractable;
class AQuestManager;
class AQuiver;
class ARabbit2;
class ARabbit2AIController;
class ARackItem;
class ARadiationManager;
class ARadioItem;
class ARadioStation;
class ARagItem;
class ARaidProtectionManager;
class ARazor;
class ARazorAIController;
class ARazorSpawnPoint;
class ARecastNavMesh_Brenner;
class ARecastNavMesh_Humanoids;
class ARecastNavMesh_LargeAnimals;
class ARecastNavMesh_Sentries;
class ARecastNavMesh_SmallAnimals;
class ARefrigeratorItem;
class ARegularDoorStatic;
class ARemoteKeyItem;
class ARemoteSensorItem;
class AReplicatedEffectsActor;
class AReplicatedExplosionEffectsActor;
class AReportingManager;
class ASceneComponentEffectsActor;
class ASedentaryNPC;
class ASentry2;
class ASentryAIController2;
class ASentryGuardVolume2;
class ASentrySpawner2;
class AShark;
class ASharkAIController;
class AShelterItem;
class ASilentAlarmTrapItem;
class ASimpleAnimalAIController;
class ASkeletalWeaponAttachment;
class ASlidingDoorStatic;
class ASmokeGrenadeItem;
class ASoundEmitter;
class ASoundSpline;
class ASpline;
class ASplineSnagGeneratedActor;
class ASplineZone;
class AStartLocation;
class AStartLocationManager;
class AStaticRadioItem;
class ASurgeryRoom;
class ASurvivalStatsHandler;
class ASwitch;
class ASwitchboardMinigame;
class ATeamDeathmatchGameEvent;
class ATeamDeathmatchLocationMarker;
class ATearGasGrenadeItem;
class ATempPlayerStart;
class AThermometer;
class ATimeControllableLight;
class ATimeControllableSpotLight;
class ATimedGiftSpawner;
class ATournament;
class ATrackingMarker2;
class ATradeOutpostBuilding;
class ATradeOutpostManager;
class ATradePost;
class ATrader;
class ATrapItem;
class ATurretInfluenceAreaVisualizer;
class ATurretItem;
class AUnderwaterPostProcessVolume;
class AVehicleAttachmentItem;
class AVehicleBase;
class AVehicleCorpse;
class AVehicleCraftedItem;
class AVehicleItemContainer;
class AVehicleManager;
class AVehicleServiceStation;
class AVehicleSpawner;
class AVehicleTrajectoryVisualizer;
class AVoltageMatchingMinigame;
class AVolumeZone;
class AVoteSystemManager;
class AWeapon;
class AWeaponAttachment;
class AWeaponAttachmentAutoCrossbowMagazine;
class AWeaponAttachmentBayonet;
class AWeaponAttachmentCharm;
class AWeaponAttachmentFlashlight;
class AWeaponAttachmentGhillie;
class AWeaponAttachmentMagazine;
class AWeaponAttachmentNightVisionScope;
class AWeaponAttachmentScope;
class AWeaponAttachmentScopeRail;
class AWeaponAttachmentSight;
class AWeaponAttachmentSuppressor;
class AWeaponAttachmentUniversalFlashlight;
class AWeaponAutoCrossbow;
class AWeaponBow;
class AWeaponCrossbow;
class AWeaponFlamethrower;
class AWeaponHolsterItem;
class AWeaponItem;
class AWeaponRevolver;
class AWeaponRocketLauncher;
class AWeatherAmbientSounds;
class AWeatherController2;
class AWetnessManager;
class AWheelBarrow;
class AWindVane;
class AWorldEvent;
class AWorldEventManager;
class AWorldItemSpawner;
class AWristwatch;
class AZombie2;
class AZombieAIController2;
class AZombieKamikazeDummyTrap;
class UAIManager;
class UAIStatics;
class UATMReplenishableResourceComponent;
class UAbandonedBunkerActivationRegistry;
class UAbandonedBunkerConnectionSetup;
class UAbandonedBunkerDoorComponent;
class UAbandonedBunkerLightComponent;
class UAbandonedBunkerManagerSetup;
class UAbandonedBunkerZoneBoxComponent;
class UAbandonedBunkerZoneCommonData;
class UAbandonedBunkerZoneManagerComponent;
class UActionProgressWidget;
class UActorStatics;
class UActorWithRepGraphPolicy_RelevantToSomeConnections;
class UAdjustableSeparator;
class UAdminCommand;
class UAdminCommandArgumentCompletion;
class UAdminCommandArgumentCompletion_Achievements;
class UAdminCommandArgumentCompletion_Constant;
class UAdminCommandArgumentCompletion_Enum;
class UAdminCommandArgumentCompletion_Player;
class UAdminCommandArgumentCompletion_PrimaryAsset;
class UAdminCommandArgumentCompletion_QuestSetup;
class UAdminCommandArgumentCompletion_Skill;
class UAdminCommandArgumentCompletion_Squad;
class UAdminCommandArgumentCompletion_Widget;
class UAdminCommandArgumentDataTypeBase;
class UAdminCommandArgumentDataType_Bool;
class UAdminCommandArgumentDataType_Location;
class UAdminCommandArgumentDataType_Numeric;
class UAdminCommandArgumentDataType_String;
class UAdminCommandArgumentDataType_Transform;
class UAdminCommandArgumentDataType_TransformOrLocation;
class UAdminCommandCompletionManager;
class UAdminCommandExecutor;
class UAdminCommandRegistry;
class UAdminCommand_AddOrRemoveWidget;
class UAdminCommand_AddPrisonerBodyEffect;
class UAdminCommand_AdminLight;
class UAdminCommand_Announce;
class UAdminCommand_BanPlayer;
class UAdminCommand_BoatDebug;
class UAdminCommand_CancelVote;
class UAdminCommand_ChangeCurrencyBalance;
class UAdminCommand_ChangeCurrencyBalanceToAll;
class UAdminCommand_ChangeCurrencyBalanceToAllOnline;
class UAdminCommand_ChangeFamePoints;
class UAdminCommand_CheckServerTime;
class UAdminCommand_ClearEncounterCooldowns;
class UAdminCommand_ClearFakeName;
class UAdminCommand_CookRecipe;
class UAdminCommand_CrashMajestically;
class UAdminCommand_CreateEntity;
class UAdminCommand_DebugWeapon;
class UAdminCommand_DemolitionSkillDebug;
class UAdminCommand_DestroyAllFlagsForPlayer;
class UAdminCommand_DestroyAllItemsWithinRadius;
class UAdminCommand_DestroyAllRazorsWithinRadius;
class UAdminCommand_DestroyAllVehicles;
class UAdminCommand_DestroyCorpsesWithinRadius;
class UAdminCommand_DestroyEncountersAtPlayerLocation;
class UAdminCommand_DestroyEntity;
class UAdminCommand_DestroyFlag;
class UAdminCommand_DestroyVehicle;
class UAdminCommand_DestroyZombiesWithinRadius;
class UAdminCommand_DisablePrisonerBodyEffects;
class UAdminCommand_DistanceDebug;
class UAdminCommand_DoorDebug;
class UAdminCommand_DrawDebugZombieCapsulesOnLegacySpawnPoints;
class UAdminCommand_DrawNearbyEncounters;
class UAdminCommand_DrawSentryHealthBar;
class UAdminCommand_DumpAllSquadsInfoList;
class UAdminCommand_DumpEncounterManagerData;
class UAdminCommand_DumpWetnessDebug;
class UAdminCommand_EnableAdminViolations;
class UAdminCommand_EnableHuntingClueDebugArrow;
class UAdminCommand_EnableOrDisableServer;
class UAdminCommand_EndTournamentMode;
class UAdminCommand_EnhancedPhotoMode;
class UAdminCommand_EquipParachute;
class UAdminCommand_ExecuteConsoleCommand;
class UAdminCommand_ExecutePrisonerBodyConditionInteraction;
class UAdminCommand_ExportDefaultItemSpawnerPresets;
class UAdminCommand_ExportDefaultItemSpawningCooldownGroups;
class UAdminCommand_ExportDefaultItemSpawningParameters;
class UAdminCommand_ExportItemLootTree;
class UAdminCommand_ExportItemSpawnerPresetsInZone;
class UAdminCommand_ExportQuests;
class UAdminCommand_FindSquadMember;
class UAdminCommand_ForceBBEncounterOnNearbyOwnedBase;
class UAdminCommand_ForceEncounterAtPlayerLocation;
class UAdminCommand_GetMeshInfo;
class UAdminCommand_GetUserID;
class UAdminCommand_GetUserIDByRank;
class UAdminCommand_GrantElevatedStatus;
class UAdminCommand_KickPlayer;
class UAdminCommand_KnockoutPrisoner;
class UAdminCommand_LeaveCorpse;
class UAdminCommand_ListActiveAbandonedBunkers;
class UAdminCommand_ListActiveHunts;
class UAdminCommand_ListActiveSecretBunkers;
class UAdminCommand_ListFlags;
class UAdminCommand_ListItemsSpawnLocations;
class UAdminCommand_ListMutedPlayers;
class UAdminCommand_ListPlayers;
class UAdminCommand_ListPrimaryAssets;
class UAdminCommand_ListPrisonerBodyConditionInteractions;
class UAdminCommand_ListPrisonerBodyEffects;
class UAdminCommand_ListPrisonerForeignSubstances;
class UAdminCommand_ListSilencedPlayers;
class UAdminCommand_ListSpawnedAnimals;
class UAdminCommand_ListSpawnedVehicles;
class UAdminCommand_ListSquadMembers;
class UAdminCommand_ListSquads;
class UAdminCommand_ListWeatherControllerOverrides;
class UAdminCommand_Location;
class UAdminCommand_Loot;
class UAdminCommand_MapTeleport;
class UAdminCommand_MutePlayer;
class UAdminCommand_PlacementDebug;
class UAdminCommand_PlayerInfo;
class UAdminCommand_PrintEntities;
class UAdminCommand_PrintGlobalRaidProtectionRaidTimes;
class UAdminCommand_Quests;
class UAdminCommand_RandomizePriceDeltas;
class UAdminCommand_ReloadCustomMapConfig;
class UAdminCommand_ReloadLootCustomizationsAndResetSpawners;
class UAdminCommand_RemovePrisonerBodyEffect;
class UAdminCommand_RenameVehicle;
class UAdminCommand_ReportDesync;
class UAdminCommand_ResetAchievements;
class UAdminCommand_ResetEconomy;
class UAdminCommand_ResetSquadInfo;
class UAdminCommand_RevokeElevatedStatus;
class UAdminCommand_ScheduleCargoDrop;
class UAdminCommand_ScheduleWorldEvent;
class UAdminCommand_SendNotification;
class UAdminCommand_SetAIInvisibility;
class UAdminCommand_SetAchievementUnlocked;
class UAdminCommand_SetAirplaneMaxVelocity;
class UAdminCommand_SetAllInventoryAccess;
class UAdminCommand_SetCraftingSearch;
class UAdminCommand_SetCurrencyBalance;
class UAdminCommand_SetCurrencyBalanceToAll;
class UAdminCommand_SetCurrencyBalanceToAllOnline;
class UAdminCommand_SetDecayTimeDilation;
class UAdminCommand_SetDeluxeVersion;
class UAdminCommand_SetFakeName;
class UAdminCommand_SetFamePoints;
class UAdminCommand_SetFamePointsToAll;
class UAdminCommand_SetFamePointsToAllOnline;
class UAdminCommand_SetFarmingSimulationSpeed;
class UAdminCommand_SetGardenNutrientsHigh;
class UAdminCommand_SetGardenPlantGrowthStage;
class UAdminCommand_SetGardenPlantingTime;
class UAdminCommand_SetGender;
class UAdminCommand_SetGodMode;
class UAdminCommand_SetHealthToItemInHands;
class UAdminCommand_SetInfiniteAmmo;
class UAdminCommand_SetItemDebugMode;
class UAdminCommand_SetMalfunctionProbability;
class UAdminCommand_SetMountedVehicleProperty;
class UAdminCommand_SetPrisonerAttributes;
class UAdminCommand_SetPrisonerBladderVolume;
class UAdminCommand_SetPrisonerExhaustion;
class UAdminCommand_SetPrisonerImmortality;
class UAdminCommand_SetPrisonerInfiniteOxygen;
class UAdminCommand_SetPrisonerInfiniteStamina;
class UAdminCommand_SetPrisonerMetabolismSimulationSpeed;
class UAdminCommand_SetPrisonerStamina;
class UAdminCommand_SetPrisonerStomachVolume;
class UAdminCommand_SetReplishableResourceAmount;
class UAdminCommand_SetShouldPrintExamineSpawnerPresets;
class UAdminCommand_SetSkillLevel;
class UAdminCommand_SetSuperJump;
class UAdminCommand_SetTime;
class UAdminCommand_SetTimeSpeed;
class UAdminCommand_SetWeather;
class UAdminCommand_SetWeatherControllerOverrideActive;
class UAdminCommand_SetWeatherControllerOverrideValue;
class UAdminCommand_ShouldShowOtherPlayerInfo;
class UAdminCommand_ShouldShowOtherPlayerLocations;
class UAdminCommand_ShowBaseBuildingDebug;
class UAdminCommand_ShowFlagInfo;
class UAdminCommand_ShowFlagLocations;
class UAdminCommand_ShowNameplates;
class UAdminCommand_ShowRespawnTimes;
class UAdminCommand_ShowVehicleDebug;
class UAdminCommand_ShowVehicleInfo;
class UAdminCommand_ShowVehicleLocations;
class UAdminCommand_ShowWeaponInfo;
class UAdminCommand_ShutdownServer;
class UAdminCommand_SilencePlayer;
class UAdminCommand_Sleep;
class UAdminCommand_SpawnAllItems;
class UAdminCommand_SpawnAnimal;
class UAdminCommand_SpawnArmedNPC;
class UAdminCommand_SpawnBrenner;
class UAdminCommand_SpawnDebugAnimalTrack;
class UAdminCommand_SpawnInventoryFullOf;
class UAdminCommand_SpawnItem;
class UAdminCommand_SpawnPrimaryActorAsset;
class UAdminCommand_SpawnRandomAnimal;
class UAdminCommand_SpawnRandomPrimaryActorAsset;
class UAdminCommand_SpawnRandomZombie;
class UAdminCommand_SpawnRazor;
class UAdminCommand_SpawnReflectionSphere;
class UAdminCommand_SpawnVehicle;
class UAdminCommand_SpawnZombie;
class UAdminCommand_StartTournamentMode;
class UAdminCommand_Teleport;
class UAdminCommand_TeleportTo;
class UAdminCommand_TeleportTo3pm;
class UAdminCommand_TeleportToMe;
class UAdminCommand_TeleportToVehicle;
class UAdminCommand_ToggleFamePointsDebugVisualization;
class UAdminCommand_ToggleZombieNavigationLogging;
class UAdminCommand_TrackShotsFired;
class UAdminCommand_TrapsDebug;
class UAdminCommand_UnbanPlayer;
class UAdminCommand_UnmutePlayer;
class UAdminCommand_UnsilencePlayer;
class UAdminCommand_UpgradeBaseBuildingElementsWithinRadius;
class UAdminCommand_VehicleCheat;
class UAdminCommand_VisualizeAnimalLocation;
class UAdminCommand_VisualizeArmedNPCLocation;
class UAdminCommand_VisualizeBulletTrajectories;
class UAdminCommand_VisualizePlayerAiming;
class UAdminCommand_VisualizeVehicleTrajectory;
class UAdminCommand_VisualizeZombieLocation;
class UAdminCommand_Vote;
class UAdminCommandsStatics;
class UAdminLight;
class UAdminPlantPanel;
class UAdvancedBuoyancyComponent;
class UAirplaneAnimInstance;
class UAirplaneElevatorsAnimInstance;
class UAirplaneLeftWingAnimInstance;
class UAirplaneLegsFrontAnimInstance;
class UAirplaneLegsRearInstance;
class UAirplaneRightWingAnimInstance;
class UAkComponentClientOnly;
class UAmmunitionArrowSpawningParams;
class UAmmunitionBoneListAssetData;
class UAnimNotifyState_BoatRow;
class UAnimNotifyState_ChamberWeapon;
class UAnimNotifyState_DrainStamina;
class UAnimNotifyState_Fade;
class UAnimNotifyState_IgnoreUsingHandCorrections;
class UAnimNotifyState_Melee;
class UAnimNotifyState_NoScopingAllowed;
class UAnimNotifyState_PaniniOverride;
class UAnimNotifyState_PhysicalAnimation;
class UAnimNotifyState_PlaySoundOnOwnerRanged;
class UAnimNotifyState_ShowAmmunitionMeshes;
class UAnimNotifyState_WeaponHideMagazine;
class UAnimNotifyState_WeaponRevolverDrumRotationDirection;
class UAnimNotifyState_WeaponRevolverIgnoreDrumRotation;
class UAnimNotifyState_WeaponShowAmmunitionMeshes;
class UAnimNotify_CharacterActionEnd;
class UAnimNotify_CharacterActionMarker;
class UAnimNotify_CharacterActionNotify;
class UAnimNotify_ClimbingFinished;
class UAnimNotify_ConditionalPlayParticleEffectForItem;
class UAnimNotify_FishingActionNotify;
class UAnimNotify_MagazineUpdateAmmunitionMeshes;
class UAnimNotify_MakeNoise;
class UAnimNotify_PaddlingSwitchHands;
class UAnimNotify_PlaySoundBySurface;
class UAnimNotify_PlaySoundOnOwner;
class UAnimNotify_PlaySubtitledSound;
class UAnimNotify_QuestBookMinigameNotify;
class UAnimNotify_SmokableItemEquip;
class UAnimNotify_SmokableItemSwitchMeshParent;
class UAnimNotify_SmokableItemUnequip;
class UAnimNotify_SpawnDefecationEffects;
class UAnimNotify_SpawnDiarrheaEffects;
class UAnimNotify_VehicleDoorOpenOrClose;
class UAnimNotify_WaterPaddle;
class UAnimNotify_WeaponActionNotify;
class UAnimNotify_WeaponChamberBullet;
class UAnimNotify_WeaponChamberBulletInternal;
class UAnimNotify_WeaponEjectCasing;
class UAnimNotify_WeaponUpdateAmmunitionMeshes;
class UAnimStatics;
class UAnimal2AnimInstance;
class UAnimal2MovementComponent;
class UAnimal2SoundComponent;
class UAnimalHandlingItemTag;
class UAnimalHandlingSkill;
class UArcherySkill;
class UArmedNPCActionInsertArrow;
class UArmedNPCActionInsertArrowDescription;
class UArmedNPCActionReloadWeapon;
class UArmedNPCActionReloadWeaponDescription;
class UArmedNPCAimCorrectionsData;
class UArmedNPCBaseAnimInstance;
class UArmedNPCBaseCommonData;
class UArmedNPCBaseEncounterSaveState;
class UArmedNPCBaseMovementComponent;
class UArmedNPCDamageCustomizationData;
class UArmedNPCDifficultyLevelSettings;
class UArmedNPCSoundComponent;
class UArmedNPCVariationsData;
class UArmedNPCVoiceLinesData;
class UArmedNPCWeaponManual;
class UArmedNPCWeaponManualBow;
class UArmedNPCWeaponManualCrossbow;
class UArmedNPCWeaponManualHandgun;
class UArmedNPCWeaponManualRifleAutomatic;
class UArmedNPCWeaponManualRifleManual;
class UArrayStatics;
class UAsepsisItemTag;
class UAttachableItemComponent;
class UAttachmentSocketMountType;
class UAttachmentSocketMountTypePrisonerHand;
class UAudibleButtonComponent;
class UAudioDeviceDisplay;
class UAudioSettingsManager;
class UAudioStatics;
class UAutoCrossbowMagazineAnimInstance;
class UAvailabilityGrid;
class UAviationSkill;
class UAwarenessSkill;
class UBCULockable;
class UBCUUpgradeService;
class UBCUUpgradeSlotWidget;
class UBadAdjustableSeparator;
class UBankATMAccountInfo;
class UBankATMAccountSummary;
class UBankATMBoughtCard;
class UBankATMBuyableCard;
class UBankATMCardManagementOptionsScreen;
class UBankATMCarouselCard;
class UBankATMChooseTransaction;
class UBankATMEnterPin;
class UBankATMErrorPopup;
class UBankATMGoldTrading;
class UBankATMGoldValueGraph;
class UBankATMMainPanel;
class UBankATMManageCards;
class UBankATMMinigameConfiguration;
class UBankATMMoneyTransfer;
class UBankATMMyCardsButton;
class UBankATMPinSlot;
class UBankATMPointingButton;
class UBankATMUIController;
class UBankATMVirtualEditbox;
class UBankATMWelcomeScreen;
class UBankATMYesNoConfirmationScreen;
class UBankAccountRegistry;
class UBankAccountRegistryRequest;
class UBankAccountRegistryResponse;
class UBankAccountRegistryResponseDataObject;
class UBankAccountRegistryStatics;
class UBankCardItemComponent;
class UBankCardOperationRequest;
class UBankCardOperationResponse;
class UBankCardOwnershipRequest;
class UBankCardOwnershipResponse;
class UBankTransactionAssetData;
class UBankTransactionRequest;
class UBankTransactionResponse;
class UBarberShopMenuWidget;
class UBaseBuildingBaseEntitySetup;
class UBaseBuildingComponent;
class UBaseBuildingDetailsPanel;
class UBaseBuildingItemComponent;
class UBaseBuildingPanel;
class UBaseBuildingStatics;
class UBaseBuildingUIContext;
class UBaseBuildingUIController;
class UBaseInteractionComponent;
class UBaseItemContainerWidget;
class UBaseItemTag;
class UBaseItemWidget;
class UBaseMenu;
class UBaseMinigameAnimator;
class UBaseMountPathBlocker;
class UBaseResourceLightAnimator;
class UBasicGameResourceContainerComponent;
class UBasicGameResourceSlotItemComponent;
class UBasicItemDecayEntityComponentSetup;
class UBasicNotification;
class UBasicNotificationDescription;
class UBasicPrisonerBodySymptomNotifier;
class UBasicTextWidget;
class UBatchFuelHeatSource;
class UBatteryEntityComponentSave;
class UBatteryEntityComponentSetup;
class UBatteryItemComponent;
class UBedrollItemEntitySave;
class UBedrollItemEntitySetup;
class UBedrollVirtualizedItemUserData;
class UBigItemCraftingButton;
class UBioChemSkill;
class UBiomeData;
class UBird2AnimInstance;
class UBluntMeleeWeaponItemTag;
class UBoatMountSlot;
class UBombDefusalMinigameConfiguration;
class UBombDefusalWidget;
class UBondageComponent;
class UBondageItemTag;
class UBoxMotionTriggerComponent;
class UBoxingSkill;
class UBrennerAnimInstance;
class UBrennerCommonData;
class UBrennerMovementComponent;
class UBruisingComponent;
class UBruisingData;
class UBuildingEntitySave;
class UBuildingEntitySetup;
class UBuildingHelperComponent;
class UBuriable;
class UBuriableChestItemComponent;
class UBuriableChestItemComponentState;
class UBuriableItemComponent;
class UBuriableItemComponentState;
class UBuriableTrapItemComponent;
class UBurnDamageType;
class UBuryData;
class UBuryToolItemTag;
class UC4PartTag;
class UCCGameUpgradeConditionDisplayWidget;
class UCCNonSelectableTextWidget;
class UCCSkillSliderWidget;
class UCICM_Default;
class UCICM_GameResource;
class UCICM_HealthAsFakeUses;
class UCICM_HealthRatio;
class UCICM_Uses;
class UCPQEM_Default;
class UCPSM_AmmunitionStack;
class UCPSM_Default;
class UCPT_Dirtiness;
class UCPT_GameResource;
class UCPT_Weight;
class UCTFParticipantStats;
class UCamouflageSkill;
class UCannedFoodTag;
class UCarousel;
class UCarouselWithLabel;
class UCentralBuildingPanel;
class UChainsawAnimInstance;
class UChamberCartridge;
class UChangeTextWidget;
class UCharacterAction;
class UCharacterActionComponent;
class UCharacterActionDescription;
class UCharacterCreationMenu;
class UCharacterImpactSoundsData;
class UCharacterItemDragComponent;
class UCharacterMesh;
class UCharacterMeshManager;
class UCharacterNameDisplayWidget;
class UCharacterPainSoundsData;
class UCharacterSelectionWidget;
class UCharacterSlot;
class UCharacterSoundComponent;
class UCharacterSpawnerComponent;
class UCharacterVoiceline;
class UChatNotification;
class UChatNotificationDescription;
class UChatSpamProtectionRules;
class UChatSuggestionWidget;
class UChatText;
class UChatUIController;
class UChatWidget;
class UCheckAmmoMagazineAttached;
class UCheckAmmoMagazineNotAttached;
class UCheckDetectableItemsAction;
class UCheckDetectablePlayersAction;
class UCheckOccludedDetectablePlayersAction;
class UChildEncounterLocationGenerationMethodBase;
class UChildEncounterLocationGenerationMethod_AverageCharacterLocation;
class UChildEncounterLocationGenerationMethod_RandomCharacterLocation;
class UChopItemAction;
class UChoppable;
class UChoppingRecipeDataAsset;
class UChoppingToolItemTag;
class UCircularAreaGroupComponent;
class UCircularMenuDanceToggleInfo;
class UCircularMenuMusicPlayerToggleInfo;
class UCircularMenuSegmentDanceInfo;
class UCircularMenuSegmentGenericInfo;
class UCircularMenuSegmentIcons;
class UCircularMenuSegmentInfo;
class UCircularMenuSegmentInteractionInfo;
class UCircularMenuSegmentSubmenuInfo;
class UCircularMenuSegmentThrowingInfo;
class UCircularMenuSegmentWeaponMalfunctionInfo;
class UCircularMenuSegmentWidget;
class UCircularMenuTooltip;
class UCircularMenuWidget;
class UCircularProgressBar;
class UClaimableWhenKilled;
class UCleaningItemTag;
class UClearBadRound;
class UClearClipPartiallyEjected;
class UClearDoubleFeed;
class UClearRoundNotLoaded;
class UClearSearchButton;
class UClearStovePipe;
class UClearStuckBullet;
class UClientPriceCache;
class UClientSettingsMenu;
class UClientSettingsUIController;
class UClockFaceWidget;
class UClothesItemEntitySetup;
class UClothesModifierItemTag;
class UCodexEntriesDropdownWidget;
class UCodexEntriesPanelWidget;
class UCodexEntry;
class UCodexEntryDetailsPanelWidget;
class UCodexEntryWidget;
class UCodexSurvivalTipEntryWidget;
class UCollapsableColorPicker;
class UCollapsableContainer;
class UCollectObjectAssetData;
class UCollectSeedsItemTag;
class UColorPicker;
class UCombinationLockData;
class UCombinationLockUnlockAttemptRequest;
class UCombinationLockUnlockAttemptResponse;
class UComboBoxStringWithIndexing;
class UComboBoxWrapper;
class UCompanionCrowAnimInstance;
class UCompassItemTag;
class UCompassWidget;
class UComplexAnimal2AnimInstance;
class UConZAIControllerEncounterSaveState;
class UConZAssetManager;
class UConZBoatAnimInstance;
class UConZBorderBase;
class UConZButton;
class UConZCharacterEncounterSaveState;
class UConZCharacterMovementComponent;
class UConZCharacterSkeletalMeshComponent;
class UConZCustomInteractionButton;
class UConZCustomInteractionMultilineEditableText;
class UConZCustomInteractionWidget;
class UConZDoorNavLinkComponent;
class UConZGameInstance;
class UConZNetReplicationGraphConnection;
class UConZNoiseListenSubject;
class UConZNoiseListener;
class UConZNotification;
class UConZPathFollowingComponent;
class UConZPlayerPawn;
class UConZReplicationGraph;
class UConZReplicationGraphNode_AlwaysRelevantToConnection;
class UConZReplicationGraphNode_RelevantToConnectionOnly;
class UConZReverbComponent;
class UConZSettingsMenu;
class UConZSettingsUIController;
class UConZSlider;
class UConZStandardButton;
class UConZUniqueObjectCacher;
class UConZUserWidget;
class UConZVehicleSpringArmComponent;
class UConZWindowNavLinkComponent;
class UConsoleStatics;
class UConstitutionSkill;
class UConsumableDigestionHandler;
class UConsumableUserData;
class UContainerDisplay;
class UContainerItemDescriptor;
class UContinuousFuelConsumptionEntityComponentSave;
class UContinuousFuelConsumptionEntityComponentSetup;
class UContinuousFuelHeatSource;
class UControlMappingWidget;
class UControlMappingsUIController;
class UCookedFoodItemEntitySave;
class UCookedFoodItemEntitySetup;
class UCookingAddRecipeButton;
class UCookingCategoryButtonWidget;
class UCookingCategoryDropdown;
class UCookingCommonData;
class UCookingControlButton;
class UCookingFavouriteButton;
class UCookingFinishedWidget;
class UCookingHeatSourceButton;
class UCookingInfoButton;
class UCookingIngredientInfoWidget;
class UCookingIngredientTooltip;
class UCookingPanel;
class UCookingProgressWidget;
class UCookingRecipe;
class UCookingRecipeButtonWidget;
class UCookingRecipeButtonsContainer;
class UCookingRecipeCategoryPanel;
class UCookingRecipeCollectionItemTag;
class UCookingRecipeDetailsWidget;
class UCookingRecipeRegistry;
class UCookingRecipesPanel;
class UCookingSkill;
class UCookingSortingDropdown;
class UCookingTemperatureControlLinearWidget;
class UCookingTemperatureControlRadialWidget;
class UCookingUIContext;
class UCookingUIController;
class UCookingUtilityFilterDropdown;
class UCookingUtilityItemTag;
class UCookingUtilityOverview;
class UCookingUtilitySlotButton;
class UCookingUtilitySlotsPanel;
class UCookingUtilityUIDataAsset;
class UCraftItemAction;
class UCraftingAvailableItemWidget;
class UCraftingCategoriesTabButtonsContainer;
class UCraftingCategoryTabButton;
class UCraftingComponentTooltip;
class UCraftingComponentWidget;
class UCraftingFamePointsItemTag;
class UCraftingInfoWidget;
class UCraftingIngredientConsumptionMethod;
class UCraftingIngredientTag;
class UCraftingItemTag;
class UCraftingPanelSwitcher;
class UCraftingPanelWidget;
class UCraftingProductQualityApplicationMethod;
class UCraftingProductSpawningMethod;
class UCraftingPropertyTracker;
class UCraftingRecipe;
class UCraftingRecipeButton;
class UCraftingRecipeButtonsContainer;
class UCraftingUIControllerBase;
class UCraftingUIData;
class UCreditsWidget;
class UCriminalRecord;
class UCriminalRecordSkill;
class UCriminalRecordText;
class UCurrencyConversionRequest;
class UCurrencyConversionResponse;
class UCurrencyItemComponent;
class UCursedScrollBar;
class UCustomBorder;
class UCustomZoneDataAsset;
class UCustomZoneRegistry;
class UCustomZoneSettingsApplyNotification;
class UCustomZoneSettingsColorPicker;
class UCustomZoneSettingsConfiguration;
class UCustomZoneSettingsConfigurationDetails;
class UCustomZoneSettingsConfigurationsList;
class UCustomZoneSettingsDetailsDisplay;
class UCustomZoneSettingsEventDisplay;
class UCustomZoneSettingsHandlingMethodSelector;
class UCustomZoneSettingsMap;
class UCustomZoneSettingsMenu;
class UCustomZoneSettingsRegion;
class UCustomZoneSettingsRegionDetails;
class UCustomZoneSettingsRegionsList;
class UCustomZoneSettingsToolTip;
class UCustomZoneSettingsUIController;
class UCutObjectAction;
class UCutObjectAssetData;
class UCutsceneWidget;
class UDamageCustomization;
class UDamageData;
class UDamageDealer;
class UDamageDirectionIndicator;
class UDamageReceiver;
class UDamageStatics;
class UDataSingleton;
class UDbAsyncWorker;
class UDbConnection;
class UDbIdGenerator;
class UDbStatics;
class UDcxBicycleAnimInstance;
class UDcxBicycleDriverMountSlot;
class UDcxBikeAnimInstance;
class UDcxBikeDriverMountSlot;
class UDcxBikePassengerMountSlot;
class UDcxMotorcycleAnimInstance;
class UDcxWheeledVehicleAnimInstance;
class UDcxWheeledVehicleDriveComponent4W;
class UDcxWheeledVehicleEffectsComponent;
class UDcxWheeledVehicleTire;
class UDeathmatchParticipantStats;
class UDebugRpcChannel;
class UDecontaminateData;
class UDedicatedServerRequest;
class UDedicatedServerResponse;
class UDefaultDamageCustomization;
class UDefusalMinigameValidationParams;
class UDefusingCuttingToolItemTag;
class UDemolitionSkill;
class UDepotItemUserData;
class UDerivedWidgetsData;
class UDetectableMetalAssetData;
class UDetectableTag;
class UDexteritySkill;
class UDialLockData;
class UDialLockMinigameConfiguration;
class UDialLockSetConfigurationMinigameConfiguration;
class UDialLockWidget;
class UDialPadButtonAssetData;
class UDialPadMinigameConfiguration;
class UDialPadWidget;
class UDialogButton;
class UDialogueData;
class UDialogueSystemContainerWidget;
class UDialogueSystemUIController;
class UDiegeticLockState;
class UDisablingReason;
class UDisablingReason_EMP;
class UDivingMaskTag;
class UDoorEntitySave;
class UDoorEntitySetup;
class UDoorLockingRegistry;
class UDoorUnlockData;
class UDoorUnlockItemComponent;
class UDoorUpgradeWidget;
class UDrinkWaterAssetData;
class UDrivingSkill;
class UDroneDestructibleItemComponent;
class UDroneSoundComponent;
class UDroneTargetData;
class UDropItemOnStartEntityComponentSetup;
class UDropZoneParticipantStats;
class UDropdownColorPicker;
class UDropdownContainerWithDialogue;
class UDropdownMenuColorSelectionWidget;
class UDropdownMenuSelectionWidget;
class UDropdownMenuTextureSelectionWidget;
class UDropdownMenuWidget;
class UDropshipAIControllerEncounterSaveState;
class UDropshipAnimInstance;
class UDropshipDroppableSentryAnimInstance;
class UDropshipEncounterSaveState;
class UDropshipMovementComponent;
class UDualArcedProgressBar;
class UDummyCollisionCapsule;
class UEconomyManagerRequest;
class UEconomyManagerResponse;
class UEconomyManagerResponseData;
class UEconomySpecificData;
class UEconomyStatics;
class UElectricDoorAssetData;
class UElectricianGlovesTag;
class UEmblemData;
class UEmptySlot;
class UEncounterBBBase;
class UEncounterBBSpawnFlyingAttacker;
class UEncounterBase;
class UEncounterCargoDropEvent;
class UEncounterCargoDropEventFlyingGuardian;
class UEncounterCharacterGroupObject;
class UEncounterCharacterSpawnPreset;
class UEncounterHorde;
class UEncounterManagerCommonData;
class UEncounterManagerHordePreset;
class UEncounterSpawnAirborneCharacters;
class UEncounterSpawnCharacters;
class UEncounterZoneData;
class UEncounterZoneSubZoneBoxComponent;
class UEnduranceSkill;
class UEngineeringSkill;
class UEntityComponentSetup;
class UEntityDebuggerEntitySetup;
class UEntityLifeTimeComponentSetup;
class UEntityOverlapDetectionComponent;
class UEntitySetup;
class UEntitySystem;
class UEntitySystemObjectSetup;
class UEntitySystemSettings;
class UEntitySystemSettingsProvider;
class UEnvironmentDescriptionComponent;
class UEventInsertCartridge;
class UEventInsertMagazine;
class UExamineAction;
class UExamineAssetData;
class UExamineMeshNotify;
class UExamineMeshNotify_BoundToAbandonedBunkerActivation;
class UExaminePrisonerAction;
class UExpandableContainer;
class UExpirableEntityComponentSetup;
class UExpirableItemComponent;
class UExplosionDamageType;
class UExplosionFailurePenalty;
class UExplosiveAmmunitionArrowSpawningParams;
class UExplosiveProtectionItemComponent;
class UExplosiveProtectionItemComponentState;
class UExtendedRichTextBlock;
class UExteriorCharacterSpawnerComponent;
class UExternalMountPath;
class UFadeMinigameAnimator;
class UFailurePenalty;
class UFamePointDebugComponent;
class UFamePointDebugWidget;
class UFamePointSettings;
class UFamePointStatics;
class UFamePointTagSettings;
class UFarmingSkill;
class UFertilizerItemComponent;
class UFillItemWithReplenishableResourceAssetData;
class UFillWaterAction;
class UFireFanningItemTag;
class UFireSourceItemTag;
class UFishInstancedStaticMeshComponent;
class UFishSpawningPreset;
class UFishSpeciesData;
class UFishSpeciesPreset;
class UFishingBarWidget;
class UFishingContainerWidget;
class UFishingReelAnimInstance;
class UFishingRodAnimInstance;
class UFishingTrophyWidget;
class UFishingWireComponent;
class UFlamethrowerComponent;
class UFlareItemComponent;
class UFloatingWidgetCanvas;
class UFocusableWidgetInterface;
class UFoliageAssetData;
class UFoliageInstanceCache;
class UFoliageInstancedBush;
class UFoliageInstancedComponent;
class UFoliageInstancedGrass;
class UFoliageInstancedTree;
class UFoodItemEntitySetup;
class UForceUnlockItemTag;
class UForeignSubstance;
class UFortifiable;
class UFortificationComponent;
class UFortificationEntityComponentSave;
class UFortificationEntityComponentSetup;
class UFortificationManager;
class UFuelItemTag;
class UFueledHeatSource;
class UFundsOverviewUIController;
class UFuseItemTag;
class UGameEventCardWidget;
class UGameEventInfoWidget;
class UGameEventLeaderboardRow;
class UGameEventLeaderboardWidget;
class UGameEventLeftPanel;
class UGameEventLoadoutMenuWidget;
class UGameEventNotificationPanel;
class UGameEventNotificationUIController;
class UGameEventParticipantInfoCardWidget;
class UGameEventParticipantStats;
class UGameEventParticipantStatsWidget;
class UGameEventParticipantStatsWidgetCTF;
class UGameEventParticipantStatsWidgetCTFMini;
class UGameEventParticipantStatsWidgetDeathmatch;
class UGameEventParticipantStatsWidgetDeathmatchMini;
class UGameEventParticipantStatsWidgetDropZone;
class UGameEventParticipantStatsWidgetDropZoneMini;
class UGameEventParticipantStatsWidgetTeamDeathmatch;
class UGameEventParticipantStatsWidgetTeamDeathmatchMini;
class UGameEventRightPanel;
class UGameEventRoundInfoWidget;
class UGameEventRoundInfoWidgetDeathmatch;
class UGameEventRoundInfoWidgetDropZone;
class UGameEventRoundInfoWidgetTeamDeathmatch;
class UGameEventScoreboardWidget;
class UGameEventScoreboardWidgetMini;
class UGameEventTeamHeaderWidget;
class UGameEventTeamHeaderWidgetCTF;
class UGameEventTeamHeaderWidgetDropZone;
class UGameEventTeamHeaderWidgetTeamDeathmatch;
class UGameEventTeamInfoWidget;
class UGameEventsUIController;
class UGamePaymentTransactionRequest;
class UGamePaymentTransactionResponse;
class UGameResourceConsumptionData;
class UGameResourceContainer;
class UGameResourceContainerEntityComponentSave;
class UGameResourceContainerEntityComponentSetup;
class UGameResourceContainerProxyForInfiniteResource;
class UGameResourceContainerProxyForReplenishableResource;
class UGameResourceContainerProxyRegistry;
class UGameResourceItemTag;
class UGameResourceSlotEntityComponentSave;
class UGameResourceSlotEntityComponentSetup;
class UGameResourceType;
class UGameResourceType_Alcohol;
class UGameResourceType_Liquid;
class UGameResourceType_Money;
class UGameResourceType_SoftDrink;
class UGameResourceType_Solid;
class UGameResourceType_Water;
class UGameResourceWashData;
class UGameplayLog;
class UGasMaskTag;
class UGaugeAssetData;
class UGaugeClusterComponent;
class UGaugeLightAssetData;
class UGeigerCounterAnimInstance;
class UGenericTooltip;
class UGhostTrailComponent;
class UGlobalUIData;
class UGloveStatsTag;
class UGradedArcedProgressBar;
class UGraph2DWidget;
class UGraphicsSettingsManager;
class UGrappleActionComponent;
class UGrappleActionParameters;
class UGrapplingWidget;
class UGrenadeAnimInstance;
class UGroupedCharacterSpawnerComponent;
class UHUDHighlightingWidget;
class UHUDNotification;
class UHUDNotificationDescription;
class UHaircutAndMakeupService;
class UHandPanel3;
class UHandgunSkill;
class UHandheldLightItemAnimInstance;
class UHandsCorrectionsData;
class UHandsHolstersWidget2;
class UHasCustomRadialDamageHandler;
class UHasLadderMarkersInterface;
class UHasOwningUser;
class UHasProcessViewRotation;
class UHazmatSuitTag;
class UHealthWidget;
class UHeatSourceDebuggerEntitySetup;
class UHeatSourceEntityComponentSetup;
class UHeatSourceEntityComponentState;
class UHeatSourceItemComponent;
class UHeatSourceItemTag;
class UHeatSourceLinkUserData;
class UHeatSourceMarkersComponent;
class UHitReactComponent;
class UHitReactLandingParams;
class UHitReactMapping;
class UHoverPanelWidget;
class UHudWidget;
class UIgnitableExplosiveItemComponent;
class UIgnitableItemComponent;
class UImageSlotWidget;
class UIndexedHierarchicalInstancedStaticMeshComponent;
class UInfiniteResourceAssetData;
class UIngredientsForRecipeWidget;
class UInjectableSubstance;
class UInsertCartridge;
class UInsertCartridgeIntoMagazine;
class UInsertMagazine;
class UInsertMagazineInsertCartridge;
class UInspectedItemWidget;
class UIntelligenceSkill;
class UInteractableInterface;
class UInteractionAction;
class UInteractionAssetData;
class UInteractionComponent;
class UInteractionContextMenuBase;
class UInteractionContextMenuGroupHeader;
class UInteractionContextMenuLeaf;
class UInteractionContextMenuLeafGroup;
class UInteractionContextMenuSide;
class UInteractionContextMenuUIController;
class UInteractionObject;
class UInteractiveIngredientWidget;
class UInteriorCharacterSpawnerComponent;
class UInteriorStaticMeshComponent;
class UInternalMountPath;
class UIntroVideoMenu;
class UInventoryCentralPanel;
class UInventoryContainer;
class UInventoryContainer2D;
class UInventoryContainer2DLight;
class UInventoryContainerClothes;
class UInventoryContainerGrid;
class UInventoryContainerHandsHolsters;
class UInventoryContainerWidget2;
class UInventoryContainerWidget2Test;
class UInventoryContainerWidgetReborn;
class UInventoryGridWidget;
class UInventoryItemWidget2Test;
class UInventoryNode;
class UInventoryPanel;
class UInventoryPanelSideLayerWidget;
class UInventoryPanelThirdIteration;
class UInventoryPanelWidget2;
class UInventoryPanelWidget2Test;
class UInventoryPositionData;
class UInventoryPositionData2D;
class UInventoryPositionDataClothes;
class UInventoryPositionDataHandsHolsters;
class UInventorySizeData;
class UInventorySizeData2D;
class UInventorySlotUserWidget;
class UInventoryUIController;
class UInventoryUIControllerReborn;
class UIsUnmountedOrMountedOnGroundCondition;
class UItemAction;
class UItemActionDescription;
class UItemActionDescriptionLoadMagazine;
class UItemActionSequence;
class UItemActionSequenceDescription;
class UItemActionSequenceLoadMagazine;
class UItemActionSequenceLoadMagazine_M1Clip;
class UItemActionSequenceLoadMagazine_RPKDrum;
class UItemAnimInstance;
class UItemClassWidget;
class UItemComponent;
class UItemComponentStateBase;
class UItemCraftingRecipe;
class UItemDropCircumstancesItemTag;
class UItemEntitySetup;
class UItemEntitySpawnerRegistrySetup;
class UItemFirstPersonAnimationsDataAsset;
class UItemGroup;
class UItemInventoryDepotWidget2;
class UItemInventoryWidget2;
class UItemLightDisplay;
class UItemMainTooltipPanel;
class UItemObstructionStatics;
class UItemObstructionTestCapsuleComponent;
class UItemOpenerTag;
class UItemPostSpawnAction;
class UItemPostSpawnAction_AbandonedBunkerKeycard;
class UItemPostSpawnAction_Bedroll;
class UItemPostSpawnAction_KillboxKeycard;
class UItemPostSpawnAction_SetAmmoAmount;
class UItemPostSpawnAction_SetCashAmount;
class UItemPostSpawnAction_SetClothesDirtiness;
class UItemPostSpawnAction_SetResourceAmount;
class UItemPostSpawnAction_SetUsage;
class UItemRackSlotComponent;
class UItemRegistry;
class UItemRequirementMountPathBlocker;
class UItemRootComponent;
class UItemSelection;
class UItemSelectionSlotWidget;
class UItemSelectionWidget;
class UItemSpawnerComponent;
class UItemSpawnerEvaluationResultEntityComponentSetup;
class UItemSpawnerPreset;
class UItemSpawnerPreset2;
class UItemSpawningDataRegistry;
class UItemSplitWidget;
class UItemStatics;
class UItemStatusWidget;
class UItemTooltip;
class UItemTooltipPanel;
class UItemTooltipPanelElement;
class UItemTooltipPanelElement_Overview;
class UItemTooltipPanelElement_OverviewText;
class UItemTooltipPanelElement_OverviewTextParameter;
class UItemTooltipTab;
class UItemUnpackingAmmunitionSpawnMethod;
class UItemUnpackingSpawnMethod;
class UItemUserWidget;
class UItemVirtualizationVisitorComponent;
class UItemWidget2;
class UItemWidgetDragDropOperation;
class UItemsCraftingDetailsPanel;
class UItemsCraftingPanel;
class UItemsCraftingUIContext;
class UItemsCraftingUIController;
class UJournalPanelWidget;
class UJournalUIController;
class UKeyBinding;
class UKeyCardItemEntitySetup;
class UKeyboardIllumination;
class UKillBoxTimerWidget;
class UKillFeedNotification;
class UKillFeedNotificationDescription;
class UKillNotificationWidget;
class UKillboxComponent;
class ULWObjectSetup;
class ULadderMarkersComponent;
class ULadderStatics;
class ULandingDamageCustomization;
class ULandingEffects;
class ULargeAquaticAnimalSpeciesData;
class ULaserTriggerComponent;
class ULevelQuadTree;
class ULevelUpNotification;
class ULevelUpNotificationDescription;
class ULevelUpNotificationWidget;
class ULiftComponent;
class ULoadingIconWidget;
class ULoadingScreen;
class ULockBombData;
class ULockBombDefusalMinigameConfiguration;
class ULockData;
class ULockItemTag;
class ULockProtectionTag;
class ULockableItemComponent;
class ULockpickItemTag;
class ULockpickable;
class ULockpickableLocksVisualComponent;
class ULockpickingMinigameConfiguration;
class ULockpickingMinigameValidationParams;
class ULockpickingStatics;
class ULockpickingTensionToolItemTag;
class ULockpickingWidget;
class ULogoutMessageBox;
class UMainMenu;
class UMalfunctionWidget;
class UMalfunctionsContainerWidget;
class UManualEnhancedImageTextWidget;
class UManualEnhancedImageWidget;
class UManualEntriesDropdownWidget;
class UManualEntry;
class UManualEntryWidget;
class UManualPanelWidget;
class UManualStatics;
class UManualUIController;
class UMasterMenu;
class UMasterWidget;
class UMasterWidgetMainMenu;
class UMathStatics;
class UMechanicCommonData;
class UMechanicInstallationService;
class UMechanicRepairService;
class UMedicalItemTag;
class UMedicalService;
class UMedicalSkill;
class UMeleeAttackCollisionCapsule;
class UMeleeCombatComponent;
class UMeleeDetectHitCollisionCapsule;
class UMeleeInterface;
class UMeleeSkill;
class UMeleeSkillAnimationsPreset;
class UMeleeWeaponItemTag;
class UMeleeWeaponsSkill;
class UMenuButton;
class UMenuHelpers;
class UMeshHitZones;
class UMessage;
class UMessageBox;
class UMessageBoxWithCheckBox;
class UMessageBoxWithEditableText;
class UMessageBoxWithList;
class UMessageBoxWithListEntry;
class UMessageBoxWithNote;
class UMessageContainer;
class UMetabolism;
class UMetabolismAdvancedProgressBar;
class UMetabolismBasicInfoPanel;
class UMetabolismBodyEffectProgressBar;
class UMetabolismBodyOverviewPanel;
class UMetabolismBodyReservesPanel;
class UMetabolismBodyStatsPanel;
class UMetabolismCurrentStatDark;
class UMetabolismCurrentStatLight;
class UMetabolismDigestionPanel;
class UMetabolismHealthPanel;
class UMetabolismHumanBodyPanel;
class UMetabolismLightItemDisplayPanel;
class UMetabolismMacronutrientReserve;
class UMetabolismMacronutrientReservesPanel;
class UMetabolismMineralsPanel;
class UMetabolismNutritionPanel;
class UMetabolismPerformanceDataPanel;
class UMetabolismRadialAttributeProgressBar;
class UMetabolismRadialProgressBar;
class UMetabolismRightPanel;
class UMetabolismSave;
class UMetabolismSegmentedProgressBar;
class UMetabolismSkillProgressBar;
class UMetabolismSkillProgressionPanel;
class UMetabolismSkillProgressionTab;
class UMetabolismStatics;
class UMetabolismStatsPanel;
class UMetabolismSymptomTitle;
class UMetabolismTissueGroupCheckbox;
class UMetabolismTitleAndAPB;
class UMetabolismTreatmentPanel;
class UMetabolismVitaminAndMineralReserve;
class UMetabolismVitaminsPanel;
class UMetabolism_BCU_ICU_Monitor;
class UMetabolism_BCU_ICU_StatsPanel;
class UMetabolism_ICU_EKG_Stats;
class UMetabolism_ICU_Expandable_Stats;
class UMetabolism_ICU_GraphWidget;
class UMetabolism_ICU_GraphWidget_EKG;
class UMetabolism_ICU_GraphWidget_RR;
class UMetabolism_ICU_GraphWidget_SPO2;
class UMetabolism_ICU_GraphWidget_ST;
class UMetabolism_ICU_GraphWidget_TEMP;
class UMetabolism_ICU_RR_Stats;
class UMetabolism_ICU_SPO2_Stats;
class UMetabolism_ICU_ST_Stats;
class UMetabolism_ICU_TEMP_Stats;
class UMicInputIndicator;
class UMinigameConfiguration;
class UMinigameValidationParams;
class UMinigameWidget;
class UMiscStatics;
class UMobilePhoneAvailableQuestsPanel;
class UMobilePhoneItemComponent;
class UMobilePhoneMainPanel;
class UMobilePhoneMinigameConfiguration;
class UMobilePhoneQuestDetailsWidget;
class UMobilePhoneQuestEntryWidget;
class UMobilePhoneUIController;
class UModularBaseBuildingComponent;
class UModularBaseBuildingSocketType;
class UModularCodexEntryElement;
class UModularCodexEntryElementData;
class UModularCodexEntryElementData_BulletPoint;
class UModularCodexEntryElementData_HorizontalContainer;
class UModularCodexEntryElementData_Image;
class UModularCodexEntryElementData_Note;
class UModularCodexEntryElementData_Text;
class UModularCodexEntryElementData_Title;
class UModularCodexEntryElementData_VerticalContainer;
class UModularCodexEntryElementData_Video;
class UModularCodexEntryElement_BulletPoint;
class UModularCodexEntryElement_HorizontalContainer;
class UModularCodexEntryElement_Image;
class UModularCodexEntryElement_Note;
class UModularCodexEntryElement_Text;
class UModularCodexEntryElement_Title;
class UModularCodexEntryElement_VerticalContainer;
class UModularCodexEntryElement_Video;
class UModularTooltip;
class UModularTooltipElement;
class UModularTooltipElementData;
class UModularTooltipElementData_AffectedBy;
class UModularTooltipElementData_Affects;
class UModularTooltipElementData_Modifier;
class UModularTooltipElementData_Timer;
class UModularTooltipElementData_Title;
class UModularTooltipElementData_Value;
class UModularTooltipElementData_ValueWithModifier;
class UModularTooltipElementData_ValueWithModifier_Large;
class UModularTooltipElementData_ValueWithModifier_Small;
class UModularTooltipElement_AffectedBy;
class UModularTooltipElement_Affects;
class UModularTooltipElement_Modifier;
class UModularTooltipElement_Timer;
class UModularTooltipElement_Title;
class UModularTooltipElement_Value;
class UModularTooltipElement_ValueWithModifier;
class UModularTooltipSection;
class UMotionTriggerComponent;
class UMotorcycleSkill;
class UMountPath;
class UMountPathBlocker;
class UMountSlot;
class UMountable;
class UMountableVehicleAttachment;
class UMountee;
class UMovableAudioSpline;
class UMovableCollisionFieldComponent;
class UMusicPlayerDisplayWidget;
class UMusicPlayerSegmentSubmenuInfo;
class UNPCControllerState;
class UNPCControllerStateArmedNPCBase;
class UNPCControllerStateArmedNPCBaseAlertedByDamage;
class UNPCControllerStateArmedNPCBaseAlertedByGunshot;
class UNPCControllerStateArmedNPCBaseCombat;
class UNPCControllerStateArmedNPCBaseInvestigateLocation;
class UNPCControllerStateArmedNPCBaseNone;
class UNPCControllerStateArmedNPCBaseOpenDoor;
class UNPCControllerStateBrennerAlerted;
class UNPCControllerStateBrennerBase;
class UNPCControllerStateBrennerCombat;
class UNPCControllerStateBrennerHibernate;
class UNPCControllerStateBrennerHitReact;
class UNPCControllerStateBrennerInvestigateArea;
class UNPCControllerStateBrennerOpenDoor;
class UNPCControllerStateBrennerRage;
class UNPCControllerStateBrennerReturnToHibernation;
class UNPCControllerStateDrifterAlertedByDamage;
class UNPCControllerStateDrifterAlertedByGunshot;
class UNPCControllerStateDrifterCombat;
class UNPCControllerStateDrifterIdle;
class UNPCControllerStateDrifterInvestigateLocation;
class UNPCControllerStateDrifterMoveTowardsTargetLocation;
class UNPCControllerStateDrifterOpenDoor;
class UNPCControllerStateGuardAlertedByDamage;
class UNPCControllerStateGuardAlertedByGunshot;
class UNPCControllerStateGuardCombat;
class UNPCControllerStateGuardIdle;
class UNPCControllerStateGuardInvestigateLocation;
class UNPCControllerStateGuardOpenDoor;
class UNPCControllerStateGuardReturnToPost;
class UNPCInteractionBoxComponent;
class UNPCInventoryComponent;
class UNameableItemComponent;
class UNameableItemComponentState;
class UNetworkDataIdAsset;
class UNetworkPredictionComponent;
class UNetworkStatics;
class UNoticeBoardMinigameConfiguration;
class UNoticeBoardMinigameWidget;
class UNoticeBoardPanelWidget;
class UNoticeBoardQuestEntryWidget;
class UNoticeBoardUIController;
class UNotificationChain;
class UNotificationDescription;
class UNotificationPanelWidget;
class UNotificationWidget;
class UNumberPicker;
class UObjectCondition;
class UObjectStatics;
class UObstuctsEyesItemTag;
class UObstuctsMouthItemTag;
class UOpenItemAction;
class UOutpostEntriesPanelWidget;
class UOutpostInformationDropdownWidget;
class UOutpostTraderDetailsPanelWidget;
class UOutpostTraderEntryWidget;
class UPBCIQR_ApplyBandagesOrDisinfect_ApplyBandages;
class UPBCIQR_ApplyBandagesOrDisinfect_Disinfect;
class UPBCIQR_ApplyGel;
class UPBCTIIT_ApplyBandagesOrDisinfect_ApplyBandages;
class UPBCTIIT_ApplyBandagesOrDisinfect_Disinfect;
class UPBCTIIT_ApplyGel;
class UPaddleItemTag;
class UPaintJobColorsDataAsset;
class UPaintJobStatics;
class UPaintable;
class UParachuteItemTag;
class UPauseMenu;
class UPauseMenuUIController;
class UPersistentInstancedStaticMeshComponent;
class UPersistentLandscapeHeightfieldComponent;
class UPersistentLandscapeMeshComponent;
class UPersistentPhysicalMaterial;
class UPersistentSplineMeshComponent;
class UPersistentStaticMeshComponent;
class UPhoenixTearsComponent;
class UPhotoModeMainPanel;
class UPhysicalSurfacesData;
class UPhysicalSurfacesEffectsData;
class UPhysician;
class UPhysicsStatics;
class UPickupItemAction;
class UPickupItemAssetData;
class UPlaceableActorBaseBuildingReplicatedState;
class UPlaceableActorBaseReplicatedState;
class UPlaceableActorGardenReplicatedState;
class UPlaceableCraftingRecipe;
class UPlaceableElementWidget;
class UPlaceableOnRackItemTag;
class UPlaceableOnRackLargeItemTag;
class UPlaceableOnWallRackItemTag;
class UPlacedPlaceableWidget;
class UPlantDiseaseSpecies;
class UPlantPestSpecies;
class UPlantSeedComponent;
class UPlantSpecies;
class UPlantStatusIndicatorUIController;
class UPlantStatusIndicatorWidget;
class UPlantingPanel;
class UPlantingPanelUIController;
class UPlasticSurgeryDiscountCondition;
class UPlasticSurgeryMenuWidget;
class UPlasticSurgeryMugshot;
class UPlasticSurgeryService;
class UPlayEffectsWhenParticleCollides;
class UPlayableInstrument;
class UPlayerManagementActivePlayer;
class UPlayerManagementActivePlayersList;
class UPlayerManagementMap;
class UPlayerManagementMenu;
class UPlayerManagementUIController;
class UPlayerQuestComponent;
class UPlayerRpcChannel;
class UPlayerRpcChannelServerRequest;
class UPlayerRpcChannelServerResponse;
class UPortableVehicleServiceStationSaveObject;
class UPossibleCookingIngredientWidget;
class UPowerCableMeshSet;
class UPresetColorPicker;
class UPresetColorPickerButton;
class UPreviewAnimationComponent;
class UPreviousNextSwitchWidget;
class UPriceCategory;
class UPrimaryButton;
class UPrisonerAction;
class UPrisonerActionActivateSlot;
class UPrisonerActionActivateSlotDescription;
class UPrisonerActionAddFertilizer;
class UPrisonerActionAddFertilizerDescription;
class UPrisonerActionAddWeaponAttachment;
class UPrisonerActionAddWeaponAttachmentDescription;
class UPrisonerActionAlignTransform;
class UPrisonerActionAlignTransformDescription;
class UPrisonerActionAnalyzeAnimalTrack;
class UPrisonerActionAnalyzeAnimalTrackDescription;
class UPrisonerActionApplyFlagElementsExpansion;
class UPrisonerActionApplyFlagElementsExpansionDescription;
class UPrisonerActionApplyPesticide;
class UPrisonerActionApplyPesticideDescription;
class UPrisonerActionAttachItem;
class UPrisonerActionAttachItemDescription;
class UPrisonerActionAutoCraft;
class UPrisonerActionAutoCraftDescription;
class UPrisonerActionBlowAir;
class UPrisonerActionBlowAirDescription;
class UPrisonerActionBury;
class UPrisonerActionBuryDescription;
class UPrisonerActionChangeStance;
class UPrisonerActionChangeStanceDescription;
class UPrisonerActionChangeStanceWaitEndOnOwningClient;
class UPrisonerActionChangeStanceWaitEndOnOwningClientDescription;
class UPrisonerActionChangeVehicleWeaponAimingStance;
class UPrisonerActionChangeVehicleWeaponAimingStanceDescription;
class UPrisonerActionChangeWeaponFiringMode;
class UPrisonerActionChangeWeaponFiringModeModeDescription;
class UPrisonerActionChargeVehicleBattery;
class UPrisonerActionChargeVehicleBatteryDescription;
class UPrisonerActionCheckChainsawFuelStatus;
class UPrisonerActionCheckChainsawFuelStatusDescription;
class UPrisonerActionCheckItemFuelStatus;
class UPrisonerActionCheckItemFuelStatusDescription;
class UPrisonerActionCheckThermalSensor;
class UPrisonerActionCheckThermalSensorDescription;
class UPrisonerActionCheckTime;
class UPrisonerActionCheckTimeDescription;
class UPrisonerActionCheckWeaponAmmo;
class UPrisonerActionCheckWeaponAmmoDescription;
class UPrisonerActionCheckWeaponFiringMode;
class UPrisonerActionCheckWeaponFiringModeDescription;
class UPrisonerActionChopActor;
class UPrisonerActionChopActorDescription;
class UPrisonerActionChopBaseElement;
class UPrisonerActionChopBaseElementDescription;
class UPrisonerActionClaimKill;
class UPrisonerActionClaimKillDescription;
class UPrisonerActionClean;
class UPrisonerActionClearWeaponMalfunction;
class UPrisonerActionClearWeaponMalfunctionDescription;
class UPrisonerActionClimbOntoLadder;
class UPrisonerActionClimbOntoLadderDescription;
class UPrisonerActionCollectSeeds;
class UPrisonerActionCollectSeedsDescription;
class UPrisonerActionCommitSuicide;
class UPrisonerActionCommitSuicideDescription;
class UPrisonerActionCraftItem;
class UPrisonerActionCraftItemDescription;
class UPrisonerActionCutObject;
class UPrisonerActionCutObjectDescription;
class UPrisonerActionDecontaminate;
class UPrisonerActionDecontaminateDescription;
class UPrisonerActionDecontaminateWithReplenishableResource;
class UPrisonerActionDecontaminateWithReplenishableResourceDescription;
class UPrisonerActionDefecate;
class UPrisonerActionDefecateDescription;
class UPrisonerActionDescription;
class UPrisonerActionDestroyGarden;
class UPrisonerActionDestroyGardenDescription;
class UPrisonerActionDestroyItem;
class UPrisonerActionDestroyItemDescription;
class UPrisonerActionDisinfectItem;
class UPrisonerActionDisinfectItemDescription;
class UPrisonerActionDismountWeaponFromVehicle;
class UPrisonerActionDismountWeaponFromVehicleDescription;
class UPrisonerActionDownloadDataToBCUMemoryModule;
class UPrisonerActionDownloadDataToBCUMemoryModuleDescription;
class UPrisonerActionDrainVehicleFuelIntoItem;
class UPrisonerActionDrainVehicleFuelIntoItemDescription;
class UPrisonerActionDrinkFromReplenishableResource;
class UPrisonerActionDrinkFromReplenishableResourceDescription;
class UPrisonerActionDrinkInteraction;
class UPrisonerActionDrinkInteractionDescription;
class UPrisonerActionEatItem;
class UPrisonerActionEatItemDescription;
class UPrisonerActionEnterCombatMode;
class UPrisonerActionEnterCombatModeDescription;
class UPrisonerActionExecuteBodyConditionInteraction;
class UPrisonerActionExecuteBodyConditionInteractionDescription;
class UPrisonerActionExtinguishFire;
class UPrisonerActionExtinguishFireDescription;
class UPrisonerActionExtinguishItem;
class UPrisonerActionExtinguishItemDescription;
class UPrisonerActionExtractBloodSample;
class UPrisonerActionExtractBloodSampleDescription;
class UPrisonerActionFillGameResourceContainer;
class UPrisonerActionFillGameResourceContainerDescription;
class UPrisonerActionFillGameResourceContainerWithInfiniteResourceDescription;
class UPrisonerActionFillGameResourceContainerWithReplenishableResource;
class UPrisonerActionFillGameResourceContainerWithReplenishableResourceDescription;
class UPrisonerActionFillVehicleFuelWithItem;
class UPrisonerActionFillVehicleFuelWithItemDescription;
class UPrisonerActionFillVehicleFuelWithReplenishableResource;
class UPrisonerActionFillVehicleFuelWithReplenishableResourceDescription;
class UPrisonerActionFillWater;
class UPrisonerActionFillWaterDescription;
class UPrisonerActionFishing;
class UPrisonerActionFishingDescription;
class UPrisonerActionFixTire;
class UPrisonerActionFixTireDescription;
class UPrisonerActionForceUnlock;
class UPrisonerActionForceUnlockDescription;
class UPrisonerActionFuelFire;
class UPrisonerActionFuelFireDescription;
class UPrisonerActionGesture;
class UPrisonerActionGestureDescription;
class UPrisonerActionIgniteItem;
class UPrisonerActionIgniteItemDescription;
class UPrisonerActionInjectSubstance;
class UPrisonerActionInjectSubstanceDescription;
class UPrisonerActionInsertArrow;
class UPrisonerActionInsertArrowDescription;
class UPrisonerActionLeaveCombatMode;
class UPrisonerActionLeaveCombatModeDescription;
class UPrisonerActionLightFire;
class UPrisonerActionLightFireDescription;
class UPrisonerActionLoadAmmoIntoMagazine;
class UPrisonerActionLoadAmmoIntoMagazineDescription;
class UPrisonerActionLootCorpse;
class UPrisonerActionLootCorpseDescription;
class UPrisonerActionLootPrisoner;
class UPrisonerActionLootPrisonerDescription;
class UPrisonerActionManipulateTrap;
class UPrisonerActionManipulateTrapDescription;
class UPrisonerActionManualOpenBlastDoor;
class UPrisonerActionManualOpenBlastDoorDescription;
class UPrisonerActionMinigame;
class UPrisonerActionMinigameDescription;
class UPrisonerActionModifyBaseElementPaintJob;
class UPrisonerActionModifyBaseElementPaintJobDescription;
class UPrisonerActionModifyTurretPaintjob;
class UPrisonerActionModifyTurretPaintjobDescription;
class UPrisonerActionModifyVehicleAttachmentPaintjob;
class UPrisonerActionModifyVehicleAttachmentPaintjobDescription;
class UPrisonerActionModifyWeaponPaintjob;
class UPrisonerActionModifyWeaponPaintjobDescription;
class UPrisonerActionMountWeaponToVehicle;
class UPrisonerActionMountWeaponToVehicleDescription;
class UPrisonerActionMoveToLocation;
class UPrisonerActionMoveToLocationDescription;
class UPrisonerActionOpenItem;
class UPrisonerActionOpenItemDescription;
class UPrisonerActionOperateBondage;
class UPrisonerActionOperateBondageDescription;
class UPrisonerActionPairRemoteKeyAndSensor;
class UPrisonerActionPairRemoteKeyAndSensorDescription;
class UPrisonerActionPickUpVehicle2W;
class UPrisonerActionPickUpVehicle2WDescription;
class UPrisonerActionPlaceItemOnRack;
class UPrisonerActionPlaceItemOnRackDescription;
class UPrisonerActionPlantSeed;
class UPrisonerActionPlantSeedDescription;
class UPrisonerActionPullGrenadePin;
class UPrisonerActionPullGrenadePinDescription;
class UPrisonerActionReloadWeapon;
class UPrisonerActionReloadWeaponDescription;
class UPrisonerActionRemoveItemFromHands;
class UPrisonerActionRemoveItemFromHandsDescription;
class UPrisonerActionRemovePlant;
class UPrisonerActionRemovePlantDescription;
class UPrisonerActionRemoveWeaponAttachment;
class UPrisonerActionRemoveWeaponAttachmentDescription;
class UPrisonerActionRemoveWeed;
class UPrisonerActionRemoveWeedDescription;
class UPrisonerActionRepair;
class UPrisonerActionRepairBaseElement;
class UPrisonerActionRepairBaseElementDescription;
class UPrisonerActionRepairDescription;
class UPrisonerActionRepairFortification;
class UPrisonerActionRepairFortificationDescription;
class UPrisonerActionRepairItem;
class UPrisonerActionRepairItemDescription;
class UPrisonerActionRepairVehicle;
class UPrisonerActionRepairVehicleDescription;
class UPrisonerActionResuscitate;
class UPrisonerActionResuscitateDescription;
class UPrisonerActionRollRevolverDrum;
class UPrisonerActionRollRevolverDrumDescription;
class UPrisonerActionRussianRoulette;
class UPrisonerActionRussianRouletteDescription;
class UPrisonerActionSearchGardenSlot;
class UPrisonerActionSearchGardenSlotDescription;
class UPrisonerActionSearchGround;
class UPrisonerActionSearchGroundDescription;
class UPrisonerActionSearchObject;
class UPrisonerActionSearchObjectDescription;
class UPrisonerActionSearchPrisoner;
class UPrisonerActionSearchPrisonerDescription;
class UPrisonerActionSpill;
class UPrisonerActionSpillAtLocation;
class UPrisonerActionSpillAtLocationDescription;
class UPrisonerActionSpillDescription;
class UPrisonerActionStartCarryingItem;
class UPrisonerActionStartCarryingItemDescription;
class UPrisonerActionStartChainsawEngine;
class UPrisonerActionStartChainsawEngineDescription;
class UPrisonerActionStartPlayingInstrument;
class UPrisonerActionStartPlayingInstrumentDescription;
class UPrisonerActionStartResting;
class UPrisonerActionStartRestingDescription;
class UPrisonerActionStopResting;
class UPrisonerActionStopRestingDescription;
class UPrisonerActionTakeItemInHands;
class UPrisonerActionTakeItemInHandsDescription;
class UPrisonerActionThrowItem;
class UPrisonerActionThrowItemDescription;
class UPrisonerActionTreatPatient;
class UPrisonerActionTreatPatientDescription;
class UPrisonerActionTriggerRemoteKey;
class UPrisonerActionTriggerRemoteKeyDescription;
class UPrisonerActionTuneBow;
class UPrisonerActionTuneBowDescription;
class UPrisonerActionUncraftItem;
class UPrisonerActionUncraftItemDescription;
class UPrisonerActionUnequipWeapon;
class UPrisonerActionUnequipWeaponDescription;
class UPrisonerActionUnloadAmmoFromWeapon;
class UPrisonerActionUnloadAmmoFromWeaponDescription;
class UPrisonerActionUpgradeBCU;
class UPrisonerActionUpgradeBCUDescription;
class UPrisonerActionUrinate;
class UPrisonerActionUrinateDescription;
class UPrisonerActionVoiceline;
class UPrisonerActionVoicelineDescription;
class UPrisonerActionVomit;
class UPrisonerActionVomitDescription;
class UPrisonerActionWashCloth;
class UPrisonerActionWashEyes;
class UPrisonerActionWashEyesDescription;
class UPrisonerActionWashEyesWithInfiniteResourceDescription;
class UPrisonerActionWashEyesWithReplenishableResourceDescription;
class UPrisonerActionWashWithReplenishableResource;
class UPrisonerActionWashWithReplenishableResourceDescription;
class UPrisonerActionWhistle;
class UPrisonerActionWhistleDescription;
class UPrisonerAnimInstance;
class UPrisonerAnimInstance_Aerial;
class UPrisonerAnimInstance_Airplane;
class UPrisonerAnimInstance_Bike;
class UPrisonerAnimInstance_Boat;
class UPrisonerAnimInstance_FemaleCorrections;
class UPrisonerAnimInstance_Fishing;
class UPrisonerAnimInstance_Grappled;
class UPrisonerAnimInstance_Parachute;
class UPrisonerAnimInstance_PrisonerCreation;
class UPrisonerAnimInstance_Quad;
class UPrisonerAnimInstance_VehicleBase;
class UPrisonerAnimInstance_WeightLoad;
class UPrisonerAnimInstance_WheelBarrow;
class UPrisonerAnimNotify_PlayGearSound;
class UPrisonerAnimStatics;
class UPrisonerAppearanceComponent;
class UPrisonerAppearanceDataAsset;
class UPrisonerAppearanceSetDataAsset;
class UPrisonerAppearanceUIController;
class UPrisonerBodyAbrasionsStatics;
class UPrisonerBodyCompositionMorphsComputer;
class UPrisonerBodyCompositionMorphsComputer_CharacterCreationOrMugshot;
class UPrisonerBodyCondition;
class UPrisonerBodyConditionCause;
class UPrisonerBodyConditionCauseUIData;
class UPrisonerBodyConditionCauseUIData_Sepsis;
class UPrisonerBodyConditionCause_Sepsis;
class UPrisonerBodyConditionInteraction;
class UPrisonerBodyConditionInteractionItemTag;
class UPrisonerBodyConditionInteractionQueryResults;
class UPrisonerBodyConditionInteraction_RemoveBandages;
class UPrisonerBodyConditionOrSymptom;
class UPrisonerBodyConditionOrSymptomSideEffect;
class UPrisonerBodyConditionOrSymptomSideEffectUIData;
class UPrisonerBodyConditionOrSymptomSideEffectUIData_AbstractModifier;
class UPrisonerBodyConditionOrSymptomSideEffectUIData_ConstitutionModifier;
class UPrisonerBodyConditionOrSymptomSideEffectUIData_Damage;
class UPrisonerBodyConditionOrSymptomSideEffectUIData_DexterityModifier;
class UPrisonerBodyConditionOrSymptomSideEffectUIData_GroundMovementSpeedModifier;
class UPrisonerBodyConditionOrSymptomSideEffectUIData_HealingSpeedModifier;
class UPrisonerBodyConditionOrSymptomSideEffectUIData_ImmuneSystemEfficiencyModifier;
class UPrisonerBodyConditionOrSymptomSideEffectUIData_IntelligenceModifier;
class UPrisonerBodyConditionOrSymptomSideEffectUIData_MaxMovementPace;
class UPrisonerBodyConditionOrSymptomSideEffectUIData_MaxStaminaModifier;
class UPrisonerBodyConditionOrSymptomSideEffectUIData_PerformanceScoreModifier;
class UPrisonerBodyConditionOrSymptomSideEffectUIData_StrengthModifier;
class UPrisonerBodyConditionOrSymptomSideEffect_AbstractModifier;
class UPrisonerBodyConditionOrSymptomSideEffect_Blackout;
class UPrisonerBodyConditionOrSymptomSideEffect_BloodshotEyes;
class UPrisonerBodyConditionOrSymptomSideEffect_BlurredVision;
class UPrisonerBodyConditionOrSymptomSideEffect_ConstitutionModifier;
class UPrisonerBodyConditionOrSymptomSideEffect_Damage;
class UPrisonerBodyConditionOrSymptomSideEffect_DexterityModifier;
class UPrisonerBodyConditionOrSymptomSideEffect_Disorientation;
class UPrisonerBodyConditionOrSymptomSideEffect_DoubleVision;
class UPrisonerBodyConditionOrSymptomSideEffect_EyePressure;
class UPrisonerBodyConditionOrSymptomSideEffect_Fatigue;
class UPrisonerBodyConditionOrSymptomSideEffect_GroundMovementSpeedModifier;
class UPrisonerBodyConditionOrSymptomSideEffect_Hallucinations;
class UPrisonerBodyConditionOrSymptomSideEffect_HealingSpeedModifier;
class UPrisonerBodyConditionOrSymptomSideEffect_HeightenedSenses;
class UPrisonerBodyConditionOrSymptomSideEffect_ImmuneSystemEfficiencyModifier;
class UPrisonerBodyConditionOrSymptomSideEffect_IntelligenceModifier;
class UPrisonerBodyConditionOrSymptomSideEffect_Leukopenia;
class UPrisonerBodyConditionOrSymptomSideEffect_MaxMovementPace;
class UPrisonerBodyConditionOrSymptomSideEffect_MaxStaminaModifier;
class UPrisonerBodyConditionOrSymptomSideEffect_PerformanceScoreModifier;
class UPrisonerBodyConditionOrSymptomSideEffect_PeriodicAffect;
class UPrisonerBodyConditionOrSymptomSideEffect_StrengthModifier;
class UPrisonerBodyConditionOrSymptomSideEffect_Unconsciousness;
class UPrisonerBodyConditionOrSymptomSideEffect_WaterMovementSpeedModifier;
class UPrisonerBodyConditionOrSymptomSideEffect_Weakness;
class UPrisonerBodyConditionOrSymptomUIData;
class UPrisonerBodyConditionTreatInteraction;
class UPrisonerBodyConditionTreatInteractionItemTag;
class UPrisonerBodyConditionTreatInteraction_ApplyBandagesOrDisinfect;
class UPrisonerBodyConditionTreatInteraction_ApplyGel;
class UPrisonerBodyConditionUIData;
class UPrisonerBodyConditionUIData_Abrasions;
class UPrisonerBodyConditionUIData_AcuteRadiationSyndrome;
class UPrisonerBodyConditionUIData_BleedingInjury;
class UPrisonerBodyConditionUIData_BurnInjury;
class UPrisonerBodyConditionUIData_EnergyDeficiency;
class UPrisonerBodyConditionUIData_Exhaustion;
class UPrisonerBodyConditionUIData_FoodDisgust;
class UPrisonerBodyConditionUIData_ForeignSubstancePoisoning;
class UPrisonerBodyConditionUIData_Hyperthermia;
class UPrisonerBodyConditionUIData_Hypothermia;
class UPrisonerBodyConditionUIData_Infection;
class UPrisonerBodyConditionUIData_InhalationPoisoning;
class UPrisonerBodyConditionUIData_KillBoxGasPoisoning;
class UPrisonerBodyConditionUIData_NutrientDeficiency;
class UPrisonerBodyConditionUIData_Overburdened;
class UPrisonerBodyConditionUIData_RadiationPresence;
class UPrisonerBodyConditionUIData_Sepsis;
class UPrisonerBodyConditionUIData_TrenchFoot;
class UPrisonerBodyConditionUIData_TutorialInjury;
class UPrisonerBodyConditionWithCauses;
class UPrisonerBodyConditionWithCausesUIData;
class UPrisonerBodyCondition_Abrasions;
class UPrisonerBodyCondition_AcuteRadiationSyndrome;
class UPrisonerBodyCondition_BandagesTreatment;
class UPrisonerBodyCondition_BasicInjury;
class UPrisonerBodyCondition_BladderFull;
class UPrisonerBodyCondition_BleedingInjury;
class UPrisonerBodyCondition_BurnInjury;
class UPrisonerBodyCondition_Choking;
class UPrisonerBodyCondition_ColonFull;
class UPrisonerBodyCondition_Drunkenness;
class UPrisonerBodyCondition_EnergyDeficiency;
class UPrisonerBodyCondition_Exhaustion;
class UPrisonerBodyCondition_FoodDisgust;
class UPrisonerBodyCondition_FootAbrasions;
class UPrisonerBodyCondition_ForeignSubstancePoisoning;
class UPrisonerBodyCondition_HandAbrasions;
class UPrisonerBodyCondition_HealthLow;
class UPrisonerBodyCondition_HeavyInjuries;
class UPrisonerBodyCondition_Hyperthermia;
class UPrisonerBodyCondition_Hypothermia;
class UPrisonerBodyCondition_Infection;
class UPrisonerBodyCondition_InhalationPoisoning;
class UPrisonerBodyCondition_Injury;
class UPrisonerBodyCondition_KillBoxGasPoisoning;
class UPrisonerBodyCondition_Knockout;
class UPrisonerBodyCondition_NutrientDeficiency;
class UPrisonerBodyCondition_Overburdened;
class UPrisonerBodyCondition_RadiationPresence;
class UPrisonerBodyCondition_Sepsis;
class UPrisonerBodyCondition_StaminaLow;
class UPrisonerBodyCondition_StomachEmpty;
class UPrisonerBodyCondition_StomachFull;
class UPrisonerBodyCondition_TearGasExposure;
class UPrisonerBodyCondition_TimeDrivenSeverity;
class UPrisonerBodyCondition_TrenchFoot;
class UPrisonerBodyCondition_TutorialInjury;
class UPrisonerBodyEffect;
class UPrisonerBodyEffectUIData;
class UPrisonerBodyEffectUIData_AntibioticsReaction;
class UPrisonerBodyEffectUIData_ExhaustionChange;
class UPrisonerBodyEffect_AntibioticsReaction;
class UPrisonerBodyEffect_Coma;
class UPrisonerBodyEffect_CoolingSwingItem;
class UPrisonerBodyEffect_Death;
class UPrisonerBodyEffect_ExhaustionChange;
class UPrisonerBodyEffect_InfectionController;
class UPrisonerBodyEffect_Limping;
class UPrisonerBodyEffect_NotificationCooldown;
class UPrisonerBodyInfectionStatics;
class UPrisonerBodyMuscleGroupToBurnInjuryClassMappings;
class UPrisonerBodyMuscleGroupToInfectionClassMappings;
class UPrisonerBodySimulationComponent;
class UPrisonerBodySimulationData;
class UPrisonerBodySimulationSave;
class UPrisonerBodySimulationStatics;
class UPrisonerBodySimulationUIData;
class UPrisonerBodySimulationUIDataImpl;
class UPrisonerBodySimulationUIStatics;
class UPrisonerBodySymptom;
class UPrisonerBodySymptomCause;
class UPrisonerBodySymptomCauseUIData;
class UPrisonerBodySymptomCauseUIData_Fatigue;
class UPrisonerBodySymptomCauseUIData_Leukopenia;
class UPrisonerBodySymptomCauseUIData_Weakness;
class UPrisonerBodySymptomCause_Blackout;
class UPrisonerBodySymptomCause_Bleeding;
class UPrisonerBodySymptomCause_BloodshotEyes;
class UPrisonerBodySymptomCause_BlurredVision;
class UPrisonerBodySymptomCause_Burping;
class UPrisonerBodySymptomCause_Diarrhea;
class UPrisonerBodySymptomCause_Disorientation;
class UPrisonerBodySymptomCause_Dizziness;
class UPrisonerBodySymptomCause_DoubleVision;
class UPrisonerBodySymptomCause_EyePressure;
class UPrisonerBodySymptomCause_Farting;
class UPrisonerBodySymptomCause_Fatigue;
class UPrisonerBodySymptomCause_Hallucinations;
class UPrisonerBodySymptomCause_HeightenedSenses;
class UPrisonerBodySymptomCause_Leukopenia;
class UPrisonerBodySymptomCause_Nausea;
class UPrisonerBodySymptomCause_Pain;
class UPrisonerBodySymptomCause_PeriodicAffect;
class UPrisonerBodySymptomCause_PeriodicSound;
class UPrisonerBodySymptomCause_PhoenixTearsPresence;
class UPrisonerBodySymptomCause_StomachGrowling;
class UPrisonerBodySymptomCause_Unconsciousness;
class UPrisonerBodySymptomCause_Vomiting;
class UPrisonerBodySymptomCause_Weakness;
class UPrisonerBodySymptomNotifier;
class UPrisonerBodySymptomUIData;
class UPrisonerBodySymptomUIData_AttributeChange;
class UPrisonerBodySymptomUIData_Bleeding;
class UPrisonerBodySymptomUIData_BlurredVision;
class UPrisonerBodySymptomUIData_BoostOfEnergy;
class UPrisonerBodySymptomUIData_BreathingObstructed;
class UPrisonerBodySymptomUIData_Fatigue;
class UPrisonerBodySymptomUIData_FeelingCold;
class UPrisonerBodySymptomUIData_FeelingHot;
class UPrisonerBodySymptomUIData_Leukopenia;
class UPrisonerBodySymptomUIData_Nausea;
class UPrisonerBodySymptomUIData_Pain;
class UPrisonerBodySymptomUIData_PhoenixTearsPresence;
class UPrisonerBodySymptomUIData_StomachFullness;
class UPrisonerBodySymptomUIData_Weakness;
class UPrisonerBodySymptomUIData_WetFeet;
class UPrisonerBodySymptom_AttributeChange;
class UPrisonerBodySymptom_Blackout;
class UPrisonerBodySymptom_Bleeding;
class UPrisonerBodySymptom_BloodshotEyes;
class UPrisonerBodySymptom_BlurredVision;
class UPrisonerBodySymptom_BoostOfEnergy;
class UPrisonerBodySymptom_BreathingObstructed;
class UPrisonerBodySymptom_Burping;
class UPrisonerBodySymptom_Diarrhea;
class UPrisonerBodySymptom_Disorientation;
class UPrisonerBodySymptom_Dizziness;
class UPrisonerBodySymptom_DoubleVision;
class UPrisonerBodySymptom_EyePressure;
class UPrisonerBodySymptom_Farting;
class UPrisonerBodySymptom_Fatigue;
class UPrisonerBodySymptom_FeelingCold;
class UPrisonerBodySymptom_FeelingHot;
class UPrisonerBodySymptom_Hallucinations;
class UPrisonerBodySymptom_HeightenedSenses;
class UPrisonerBodySymptom_Hunger;
class UPrisonerBodySymptom_Leukopenia;
class UPrisonerBodySymptom_Nausea;
class UPrisonerBodySymptom_NeedToDefecate;
class UPrisonerBodySymptom_NeedToUrinate;
class UPrisonerBodySymptom_Pain;
class UPrisonerBodySymptom_PeriodicAffect;
class UPrisonerBodySymptom_PeriodicSound;
class UPrisonerBodySymptom_PhoenixTearsPresence;
class UPrisonerBodySymptom_StomachFullness;
class UPrisonerBodySymptom_StomachGrowling;
class UPrisonerBodySymptom_Thirst;
class UPrisonerBodySymptom_Unconsciousness;
class UPrisonerBodySymptom_Vomiting;
class UPrisonerBodySymptom_Weakness;
class UPrisonerBodySymptom_WetFeet;
class UPrisonerBuryComponent;
class UPrisonerCharacterMesh;
class UPrisonerCommonData;
class UPrisonerConsumableDigestionHandler_Exhaustion;
class UPrisonerConsumableDigestionHandler_FoodDisgust;
class UPrisonerConsumableDigestionHandler_FoodDisgustAntidote;
class UPrisonerConsumableUserData;
class UPrisonerCreationUIController;
class UPrisonerDebugUI_BodyConditionEntryWidget;
class UPrisonerDebugUI_BodyConditionItem;
class UPrisonerDebugUI_BodyEffectItem;
class UPrisonerDebugUI_BodyStateItem;
class UPrisonerDebugUI_MainWidget;
class UPrisonerDebugUI_SkillEntryWidget;
class UPrisonerDebugUI_SkillItem;
class UPrisonerEntitySetup;
class UPrisonerExcretionUserData;
class UPrisonerFirstPersonSubviewComponent;
class UPrisonerFirstPersonVehicleAimingSubviewComponent;
class UPrisonerFirstPersonViewComponent;
class UPrisonerFishingComponent;
class UPrisonerForeignSubstance;
class UPrisonerForeignSubstanceStatics;
class UPrisonerForeignSubstance_Antibiotics;
class UPrisonerForeignSubstance_AttributeModifier;
class UPrisonerForeignSubstance_Painkillers;
class UPrisonerForeignSubstance_Toxins;
class UPrisonerHallucinationEpisode;
class UPrisonerInventoryComponent;
class UPrisonerLifeIndicatorsSprite;
class UPrisonerLoadout;
class UPrisonerMakeoverUIController;
class UPrisonerMeshManager;
class UPrisonerMetabolismUIData;
class UPrisonerMetabolismUIDataImpl;
class UPrisonerMovementCommonData;
class UPrisonerMovementComponent;
class UPrisonerMovementDebugWidget;
class UPrisonerMovementSettings;
class UPrisonerMusicPlayerComponent;
class UPrisonerNameChangeRequest;
class UPrisonerNameChangeResponse;
class UPrisonerPhotoModeAnimInstance;
class UPrisonerPrisonWalletComponent;
class UPrisonerResponseIdle;
class UPrisonerResponseIdle_BodyConditionOrSymptomPresence;
class UPrisonerResponseIdle_NeedToDefecate;
class UPrisonerResponseIdle_NeedToUrinate;
class UPrisonerResponseIdle_StaminaInRange;
class UPrisonerRestingComponent;
class UPrisonerShotsFiredTrackerComponent;
class UPrisonerSkillComponent;
class UPrisonerSkillUIData;
class UPrisonerSkillUIData_Endurance;
class UPrisonerSkillUIData_Running;
class UPrisonerSkillsUIData;
class UPrisonerSkillsUIDataImpl;
class UPrisonerSoundComponent;
class UPrisonerSpawnEquipment;
class UPrisonerStatics;
class UPrisonerSubview;
class UPrisonerTeleportUserData;
class UPrisonerThirdPersonAerialSubviewComponent;
class UPrisonerThirdPersonSubviewComponent;
class UPrisonerThirdPersonViewComponent;
class UPrisonerThrowComponent;
class UPrisonerTradingComponent;
class UPrisonerTreatmentUIController;
class UPrisonerUIData;
class UPrisonerUIDataController;
class UPrisonerUIDataImpl;
class UPrisonerUIDataRequest;
class UPrisonerUIDataResponse;
class UPrisonerUIDebugData;
class UPrisonerUIDebugDataRequest;
class UPrisonerUIDebugDataResponse;
class UPrisonerUIStatics;
class UPrisonerUITooltipCache;
class UPrisonerVehicleAction_ForcePush;
class UPrisonerVehicleAction_ForcePushDescription;
class UPrisonerVehicleAction_ForceUnmount;
class UPrisonerVehicleAction_ForceUnmountDescription;
class UPrisonerVehicleAction_InstallAttachment;
class UPrisonerVehicleAction_InstallAttachmentDescription;
class UPrisonerVehicleAction_ModifyAttachmentPaintjob;
class UPrisonerVehicleAction_ModifyAttachmentPaintjobDescription;
class UPrisonerVehicleAction_Mount;
class UPrisonerVehicleAction_MountDescription;
class UPrisonerVehicleAction_OpenOrCloseDoor;
class UPrisonerVehicleAction_OpenOrCloseDoorDescription;
class UPrisonerVehicleAction_QuickInstallAttachment;
class UPrisonerVehicleAction_QuickInstallAttachmentDescription;
class UPrisonerVehicleAction_QuickRemoveAttachment;
class UPrisonerVehicleAction_QuickRemoveAttachmentDescription;
class UPrisonerVehicleAction_QuickRepairAttachment;
class UPrisonerVehicleAction_QuickRepairAttachmentDescription;
class UPrisonerVehicleAction_RemoveAttachment;
class UPrisonerVehicleAction_RemoveAttachmentDescription;
class UPrisonerVehicleAction_RepairAttachment;
class UPrisonerVehicleAction_RepairAttachmentDescription;
class UPrisonerVehicleAction_SetupCarJack;
class UPrisonerVehicleAction_SetupCarJackDescription;
class UPrisonerVehicleAction_SwitchMountSlot;
class UPrisonerVehicleAction_SwitchMountSlotDescription;
class UPrisonerVehicleAction_Unmount;
class UPrisonerVehicleAction_UnmountDescription;
class UPrisonerViewComponent;
class UProjectileImpactEffects;
class UProjectilePool;
class UProjectileStatics;
class UQuartalPieProgressBar;
class UQuestBookMinigameConfiguration;
class UQuestBookMinigameWidget;
class UQuestBookPageWidget;
class UQuestBookPagesWidget;
class UQuestCommonData;
class UQuestCondition;
class UQuestCondition_BodyCondition;
class UQuestCondition_CircularMenuOpened;
class UQuestCondition_CircularSubMenuOpened;
class UQuestCondition_ClickUIButton;
class UQuestCondition_CustomZone;
class UQuestCondition_DrivingWaypoint;
class UQuestCondition_Elimination;
class UQuestCondition_HudMode;
class UQuestCondition_InputMapping;
class UQuestCondition_Interactable;
class UQuestCondition_InteractablePersistentMesh;
class UQuestCondition_InteractableUserData;
class UQuestCondition_ItemEquipped;
class UQuestCondition_ItemSet;
class UQuestCondition_ItemsInVicinity;
class UQuestCondition_PlaceableActor;
class UQuestCondition_PrisonerAction;
class UQuestCondition_PrisonerActionMatcher;
class UQuestCondition_PrisonerActionMatcher_ChopObject;
class UQuestCondition_PrisonerActionMatcher_CraftItem;
class UQuestCondition_PrisonerActionMatcher_CutObject;
class UQuestCondition_PrisonerActionMatcher_EatItem;
class UQuestCondition_PrisonerActionMatcher_ExecuteBodyConditionInteraction;
class UQuestCondition_PrisonerActionMatcher_FuelFire;
class UQuestCondition_PrisonerActionMatcher_LightFire;
class UQuestCondition_PrisonerActionMatcher_SearchObject;
class UQuestCondition_PrisonerActionMatcher_ThrowItem;
class UQuestCondition_TalkToNPC;
class UQuestCondition_UITabOpen;
class UQuestCondition_UITabOpen_ManualWidget;
class UQuestCondition_Wait;
class UQuestEntriesPanelWidget;
class UQuestEntryDetailsPanelWidget;
class UQuestEntryWidget;
class UQuestGiverComponent;
class UQuestInteractableAssetUserData;
class UQuestInteractableComponent;
class UQuestItemSet_Asset;
class UQuestManagerData;
class UQuestSetup;
class UQuestTimerTextBlock;
class UQuestTrackingCheckbox;
class UQuestTrackingDataWidget;
class UQuestTrackingWidget;
class UQuestUIData;
class UQuickAccessBarWidget;
class UQuickAccessItemSwitcher3;
class UQuickAccessItemWidget;
class UQuickAccessManager;
class URadioCategory;
class URadioCategoryShuffle;
class URadioComponent;
class URadioProgram;
class URadioTrack;
class URagItemEntitySave;
class URagItemEntitySetup;
class URaidProtectionSelectionWidget;
class URainCollectionManager;
class URainCollectorComponent;
class URangedResourceConsumerComponent;
class URangedResourceConsumerComponentMultipleProviders;
class URangedResourceConsumerComponentSingleProvider;
class URangedResourceConsumerEntityComponentSave;
class URangedResourceConsumerEntityComponentSetup;
class URangedResourceConsumerEntityComponentSetupMultipleProviders;
class URangedResourceConsumerEntityComponentSetupSingleProvider;
class URangedResourceConsumerEntityComponentStateSingleProvider;
class URangedResourceProviderComponent;
class URangedResourceProviderComponentContinousAmount;
class URangedResourceProviderEntityComponentContinousAmountSave;
class URangedResourceProviderEntityComponentContinousAmountSetup;
class URangedResourceProviderEntityComponentSave;
class URangedResourceProviderEntityComponentSetup;
class URangedWeaponsSkill;
class URazorAnimInstance;
class URazorCommonData;
class URazorMovementComponent;
class URecipeIngredientButton;
class URemoteSensorRegistry;
class URemoveCartridge;
class URemoveMagazineInsertCartridge;
class URemoveMagazineInsertMagazine;
class URemoveMagazineInsertMagazineInsertCartridge;
class URemoveMagazineRemoveCartridge;
class URepairStatics;
class URepairToolItemTag;
class URepairableItemTag;
class UReplenishableResourceBaseComponent;
class UReplenishableResourceComponent;
class UReplenishableResourceManager;
class URequestMinigameToolsRequest;
class URequestMinigameToolsResponse;
class UResistanceSkill;
class UResourceIndicatorWidget;
class UResourceLockingManager;
class UResourcePointLightAnimator;
class UResourcePoweredLightItemComponent;
class UResourceSpotLightAnimator;
class URespawnSettings;
class URestAssetData;
class URestorableMeshInstancesManager;
class URichTextInlineTextDecorator;
class URiflesSkill;
class URizzonerMovementComponent;
class URunningSkill;
class UScopeableItemComponent;
class UScopeableItemComponentState;
class UScreenSpaceHealthWidget;
class UScrollingSizeBox;
class UScumPointDamageType;
class UScumRadialDamageType;
class USearchBox;
class USearchForItemsAssetData;
class USearchItemDataAsset;
class USearchableCorpse;
class USedentaryNPCAnimInstance;
class USedentaryNPCBackgroundInteraction;
class USedentaryNPCHeadAnimInstance;
class USelectionOverlayWidget;
class USentryAIControllerEncounterSaveState;
class USentryAnimInstance2;
class USentryEncounterSaveState;
class USentryFirstPersonViewComponent;
class USentryHotZoneBoxComponent;
class USentryMovementComponent;
class USentryThirdPersonViewComponent;
class USerializationStatics;
class UServerBrowser;
class UServerBrowserCheckboxWidget;
class UServerBrowserDropdownEntryWidget;
class UServerBrowserDropdownWidget;
class UServerInfoWidget;
class UServerPriceCache;
class UServerSettingsMenu;
class UServerSettingsUIController;
class USharkAnimInstance;
class USharpMeleeWeaponItemTag;
class UShotsFiredTrackerWidget;
class USimpleDropdownEntryCategoryTitle;
class USimpleTextDropdownEntry;
class USimpleTextDropdownEntryWithCheckBox;
class USimulatedShooter;
class USimulatedShooterFiringStrategy;
class USimulatedShooterFiringStrategy_Flamethrower;
class USimulatedShooterFiringStrategy_Hitscan;
class USimulatedShooterFiringStrategy_Projectile;
class USimulatedShooterFiringStrategy_SpawnProjectile;
class USingletonStatics;
class USkill;
class USkillAction;
class USkillClasses;
class USkillEventHandler;
class USkydivingHUD;
class USliderWithLabelAndNumber;
class USmokableItemComponent;
class USmokableTag;
class USnipingSkill;
class USortByButton;
class USoundNotification;
class USoundNotificationDescription;
class USoundReducingItemTag;
class USpamProtectionState;
class USpawnChoiceWidget;
class USpawnDecalWhenParticleCollides;
class USpawnExaminedObjectsInterface;
class USpawnMenuWidget;
class USpawnScreen;
class USpawnSectorSelectorWidget;
class USphereMotionTriggerComponent;
class USprayPaintItemTag;
class USquadEditor;
class USquadEmblemWidget;
class USquadLeftPanel;
class USquadListing;
class USquadMemberPanel;
class USquadPenaltyManager;
class USquadRankingsCache;
class USquadRightPanel;
class USquadTooltip;
class USquadUIController;
class USquareCheckbox;
class UStandardLockData;
class UStandardLockMinigameConfiguration;
class UStaticDoorReplicator;
class UStaticVehicleServiceStationSaveObject;
class UStatisticsDetailsWidget;
class UStatisticsListRow;
class UStatisticsListWidget;
class UStatisticsPanelWidget;
class UStatisticsSubcategoryTab;
class UStealthSkill;
class UStrengthSkill;
class USubtitleWidget;
class USurfaceHardnessData;
class USurvivalSkill;
class USurvivalTipEventListener;
class USurvivalTipManager;
class USurvivalTipWidget;
class USurvivalTipsView;
class USwimmingSkill;
class USwingItemComponent;
class USwitchboardComponent;
class USwitchboardMinigameConfiguration;
class USwitchboardSwitchAssetData;
class UTabButton;
class UTabButtonAlertable;
class UTabButtonInterface;
class UTabContainer;
class UTabElement;
class UTabGroup;
class UTabMenu;
class UTabMenuPanel;
class UTabMenuUIController;
class UTabModeTab;
class UTacticsSkill;
class UTakeInHandsAssetData;
class UTaskEntriesDropdownWidget;
class UTaskEntriesPanelWidget;
class UTaskEntryDetailsPanelWidget;
class UTaskEntryWidget;
class UTaskSetup;
class UTeamDeathmatchParticipantStats;
class UTeamInvitationWidget;
class UTelemetryCheckbox;
class UTelemetryMenu;
class UTelemetrySetting;
class UTeleportComponent;
class UTeleportComponentOwner;
class UTeleportSubject;
class UTeleportUserData;
class UTemporaryDisableable;
class UTemporaryDisableablePart;
class UTextBoxWithLabel;
class UTextInputWidget;
class UTextOnlyTooltip;
class UTextStatics;
class UTexture2DStatics;
class UThermalSensorComponent;
class UThieverySkill;
class UThrowableItemTag;
class UThrowingComponent;
class UThrowingQuickAccessItemWidget;
class UTimedTriggerComponent;
class UTimedTriggerComponentState;
class UTireToSurfaceAudioData;
class UTitleAndDescriptionTooltip;
class UToggleCamouflageAction;
class UTooltipBase;
class UTournamentScoreboardRowWidget;
class UTournamentScoreboardWidget;
class UTradeStatics;
class UTradeable;
class UTradeableDiscountCondition;
class UTraderBuyPanel;
class UTraderBuyUIController;
class UTraderDepotPanel;
class UTraderDropdownMenu;
class UTraderFilterFamePointsButton;
class UTraderForPlayerAndDepotItemRequest;
class UTraderForPlayerAndDepotItemResponse;
class UTraderItemButton;
class UTraderItemCategoryButton;
class UTraderMainPanel;
class UTraderMainUIController;
class UTraderManagingComponent;
class UTraderPersonalityDataAsset;
class UTraderSellListEntry;
class UTraderSellPanel;
class UTraderSellUIController;
class UTraderService;
class UTradingOutpostDescriptionDataAsset;
class UTrapData;
class UTrapItemEntitySetup;
class UTrapItemUserData;
class UTrapRefuelItemTag;
class UTrashCarouselWidget;
class UTrashNamedCarouselWidget;
class UTrashNamedSliderWidget;
class UTrashSliderWidget;
class UTriggerComponent;
class UTriggerComponentState;
class UTriggerFailurePenalty;
class UTriggerItemTag;
class UTurretItemAnimInstance;
class UTurretItemEntitySave;
class UTurretItemEntitySetup;
class UTurretPaintjobCommonData;
class UTurretPaintjobItemComponent;
class UTwitchDropsMainMenuButtonWidget;
class UTwitchDropsManager;
class UTwitchDropsUIController;
class UUIBaseContext;
class UUIContainerSubobject;
class UUIContext;
class UUIROWidgetDragDropOperation;
class UUIRepresentableObjectWidget;
class UUIRepresentationSubobject;
class UUISoundsData;
class UUIStatics;
class UUPrisonerActionCleanDescription;
class UUPrisonerActionWashClothDescription;
class UUnarmedCombatInputRedirector;
class UUnpackableTag;
class UUnusableWorldItemTag;
class UUpdateableNotification;
class UUpdateableNotificationDescription;
class UUpgradeItemTag;
class UUpgradeSlotWidget;
class UUser;
class UUserManager;
class UUserProfile;
class UUserWidgetWithDescription;
class UValueProviderInteger;
class UValueProviderString;
class UVehicleAttachment;
class UVehicleAttachmentDashboardAnimInstance;
class UVehicleAttachmentHealthWidget;
class UVehicleAttachmentParent;
class UVehicleAttachmentTag;
class UVehicleAttachment_Airfoil;
class UVehicleAttachment_Alternator;
class UVehicleAttachment_Armor;
class UVehicleAttachment_Battery;
class UVehicleAttachment_Chassis;
class UVehicleAttachment_ConstrainedWheel;
class UVehicleAttachment_Dashboard;
class UVehicleAttachment_DashboardWithMountInteractions;
class UVehicleAttachment_DcxWheel;
class UVehicleAttachment_Door;
class UVehicleAttachment_EngineBlock;
class UVehicleAttachment_Gearbox;
class UVehicleAttachment_InventoryExpansion;
class UVehicleAttachment_Lights;
class UVehicleAttachment_MountableInventoryExpansion;
class UVehicleAttachment_Radio;
class UVehicleAttachment_Seat;
class UVehicleAttachment_StaticPart;
class UVehicleAttachment_WeaponMount;
class UVehicleAttachment_Wheel;
class UVehicleBaseAnimInstance;
class UVehicleBaseMountSlot;
class UVehicleBasePushMountSlot;
class UVehicleBaseSave;
class UVehicleBuoyancySystem;
class UVehicleCameraComponent;
class UVehicleCameraStabilizerComponent;
class UVehicleCheatControllerComponent;
class UVehicleDamageRegionAssetData;
class UVehicleDoorsComponent;
class UVehicleElectricalDevice;
class UVehicleElectricalSystem;
class UVehicleEntitySetup;
class UVehicleForcePushComponent;
class UVehicleGroupSpawningPreset;
class UVehicleHandlingSkill;
class UVehicleHudWidget;
class UVehicleMarkersData;
class UVehicleMarkersRequest;
class UVehicleMarkersResponse;
class UVehicleMeshComponent;
class UVehicleMountSlot;
class UVehicleMountSlotIndicators;
class UVehicleMountSlotWidget;
class UVehicleMountSlotsWidget;
class UVehiclePaintjobCommonData;
class UVehiclePaintjobItemComponent;
class UVehiclePartDescriptionComponent;
class UVehiclePowertrainComponent;
class UVehiclePreset;
class UVehiclePresetNode;
class UVehicleServiceComponent;
class UVehicleServiceItemComponent;
class UVehicleServiceRegistry;
class UVehicleServiceStationAnimInstance;
class UVehicleServiceStationSaveObject;
class UVehicleServiceToolTag;
class UVehicleSlotIdAssetData;
class UVehicleSpawnBoxComponent;
class UVehicleSpawnerComponent;
class UVehicleSystem;
class UVehicleUIDataController;
class UVehicleWeaponAimingParameters;
class UVehicleWeaponsSystem;
class UVehicleWithDashboard;
class UVehicleWithDoors;
class UVehicleWithEngineBlock;
class UVehicleWithGearbox;
class UVehicleWithWheels;
class UVerificationStatics;
class UVerticalScrollBoxDropdownContent;
class UVicinityContainer3;
class UVicinityContainerRowItemWidget;
class UVicinityPanel3;
class UVideoSettingsManager;
class UVirtualizedEncounterData;
class UVirtualizedEncounterData_BB;
class UVirtualizedEncounterData_BBFlyingAttacker;
class UVirtualizedEncounterData_Horde;
class UVirtualizedEncounterData_SpawnAirborneCharacters;
class UVirtualizedEncounterData_SpawnCharacters;
class UVirtualizedItemUserData;
class UVisionEffectsComponent;
class UVisualOverlayItemTag;
class UVoiceAudioComponent;
class UVoiceChatComponent;
class UVoiceDecoder;
class UVoicelineSegmentInfo;
class UVoltageMatchingMinigameConfiguration;
class UVoltageMatchingScreensWidget;
class UVoltageMatchingWidget;
class UVoteTopic;
class UVoteTopic_InitiateCargoDrop;
class UVoteTopic_SetTimeOfDay;
class UVoteTopic_SetWeather;
class UWarning;
class UWarningNotification;
class UWarningNotificationDescription;
class UWarningSignWidget;
class UWashEyesHandler;
class UWashEyesHandler_Clean;
class UWashEyesHandler_Irritate;
class UWaterDetectionComponent;
class UWaterSurfaceAssetData;
class UWaypointScreenWidget;
class UWaypointWidget;
class UWaypointWidgetBase;
class UWeaponAccuracyGroup;
class UWeaponAction;
class UWeaponActionCheckAmmoSequence;
class UWeaponActionClearMalfunctionSequence;
class UWeaponActionReloadSequence;
class UWeaponActionRocketLauncherArmSequence;
class UWeaponActionRocketLauncherUnarmSequence;
class UWeaponActionSequence;
class UWeaponActionUnloadAmmoSequence;
class UWeaponActionWornOutFiringConditions;
class UWeaponAmmoDisplayContainerWidget;
class UWeaponAmmoDisplayWidget;
class UWeaponAnimInstance;
class UWeaponAttachmentMagazineAnimInstance;
class UWeaponAutoCrossbowAnimInstance;
class UWeaponBowAnimInstance;
class UWeaponCrossbowAnimInstance;
class UWeaponDamageGroup;
class UWeaponDamageStatics;
class UWeaponDisassemblyToolItemTag;
class UWeaponFirstPersonAnimationsDataAsset;
class UWeaponHandler;
class UWeaponItemEntitySetup;
class UWeaponNightVisionScopeItemComponent;
class UWeaponPaintjobCommonData;
class UWeaponPaintjobItemComponent;
class UWeaponRecoilGroup;
class UWeaponRevolverAnimInstance;
class UWeaponRocketLauncherAnimInstance;
class UWeaponScopeItemComponent;
class UWeaponScopeWidget;
class UWeaponSightItemComponent;
class UWeaponState;
class UWeaponStateActive;
class UWeaponStateActiveManualFiring;
class UWeaponStateAutoCrossbowActive;
class UWeaponStateAutoCrossbowFire;
class UWeaponStateBowActive;
class UWeaponStateBowAnticipateDraw;
class UWeaponStateBowAnticipateFiring;
class UWeaponStateBowCancelFiring;
class UWeaponStateBowDraw;
class UWeaponStateBowFire;
class UWeaponStateBowFireAndInsertArrow;
class UWeaponStateBowFiring;
class UWeaponStateBowInsertArrow;
class UWeaponStateBowRemoveArrow;
class UWeaponStateChamberBullet;
class UWeaponStateCheckAmmo;
class UWeaponStateClearMalfunction;
class UWeaponStateCrossbowActive;
class UWeaponStateCrossbowFire;
class UWeaponStateCrossbowFireAndInsertArrow;
class UWeaponStateEquipping;
class UWeaponStateFiring;
class UWeaponStateFiringAutomatic;
class UWeaponStateFiringBurst;
class UWeaponStateFiringManual;
class UWeaponStateFiringSemiAutomatic;
class UWeaponStateInactive;
class UWeaponStateReload;
class UWeaponStateRevolverActive;
class UWeaponStateRevolverFire;
class UWeaponStateRocketLauncherActiveArmed;
class UWeaponStateRocketLauncherActiveUnarmed;
class UWeaponStateRocketLauncherArm;
class UWeaponStateRocketLauncherUnarm;
class UWeaponStateUnEquipping;
class UWeaponStateUnloadAmmo;
class UWeedRemovalToolItemTag;
class UWetnessStatics;
class UWettable;
class UWheelBarrowDriverCapsuleComponent;
class UWheelBarrowDriverMountSlot;
class UWheelBarrowMountSlot;
class UWinCounterWidget;
class UWindowFortificationsType;
class UWindowMarkersComponent;
class UWindowMarkersRegistry;
class UWorldCraftingMarkerWidget;
class UWorldDoorOwnershipManager;
class UWorldItemSpawnerComponent;
class UWorldQuestMarkerWidget;
class UWorldStatics;
class UXMLStatics;
class UYesNoDialog;
class UZombie2AIControllerEncounterSaveState;
class UZombie2EncounterSaveState;
class UZombieAnimInstance2;
class UZombieArmorDamageReductionAssetData;
class UZombieImpersonatingItemTag;
class UZombieKamikazeComponent;
class UZombieMovementComponent2;
class UZombieSoundComponent2;
class UZoneConfigurationDataAsset;
class UZoneRegistry;
class UZoomMinigameAnimator;

/// Enum /Script/ConZ.EPrisonerMontage
/// Size: 0x01 (1 bytes)
enum class EPrisonerMontage : uint8_t
{
	EPrisonerMontage__None                                                           = 0,
	EPrisonerMontage__WeaponEquipRifle                                               = 1,
	EPrisonerMontage__WeaponUnequipRifle                                             = 2,
	EPrisonerMontage__WeaponEquipHandgun                                             = 3,
	EPrisonerMontage__WeaponUnequipHandgun                                           = 4,
	EPrisonerMontage__Urinate                                                        = 5,
	EPrisonerMontage__UrinateForced                                                  = 6,
	EPrisonerMontage__Defecate                                                       = 7,
	EPrisonerMontage__DefecateForced                                                 = 8,
	EPrisonerMontage__Vomit                                                          = 9,
	EPrisonerMontage__VomitForced                                                    = 10,
	EPrisonerMontage__SearchObject                                                   = 11,
	EPrisonerMontage__SearchPrisoner                                                 = 12,
	EPrisonerMontage__SearchZombie                                                   = 13,
	EPrisonerMontage__PatchWounds                                                    = 14,
	EPrisonerMontage__PatchWoundsEnd                                                 = 15,
	EPrisonerMontage__DrinkInteraction                                               = 16,
	EPrisonerMontage__WashEyes                                                       = 17,
	EPrisonerMontage__Eat                                                            = 18,
	EPrisonerMontage__EatCan                                                         = 19,
	EPrisonerMontage__Drink                                                          = 20,
	EPrisonerMontage__Throw                                                          = 21,
	EPrisonerMontage__LongThrow                                                      = 22,
	EPrisonerMontage__LongThrowLoop                                                  = 23,
	EPrisonerMontage__ShortThrow                                                     = 24,
	EPrisonerMontage__ThrowbackGrenade                                               = 25,
	EPrisonerMontage__SwapWeapons                                                    = 26,
	EPrisonerMontage__ChopTree                                                       = 27,
	EPrisonerMontage__ChopTreeEnd                                                    = 28,
	EPrisonerMontage__ChopLog                                                        = 29,
	EPrisonerMontage__ChopLogEnd                                                     = 30,
	EPrisonerMontage__BreakStone                                                     = 31,
	EPrisonerMontage__BreakStoneEnd                                                  = 32,
	EPrisonerMontage__SwapItemsNotWeaponToNotWeapon                                  = 33,
	EPrisonerMontage__SwapItemsWeaponToWeapon                                        = 34,
	EPrisonerMontage__SwapItemsNotWeaponToWeapon                                     = 35,
	EPrisonerMontage__SwapItemsWeaponToNotWeapon                                     = 36,
	EPrisonerMontage__SwapItemsThrowingItemToWeapon                                  = 37,
	EPrisonerMontage__SwapItemsThrowingItemToNotWeapon                               = 38,
	EPrisonerMontage__SwapItemsWeaponToThrowingItem                                  = 39,
	EPrisonerMontage__Craft                                                          = 40,
	EPrisonerMontage__Uncraft                                                        = 41,
	EPrisonerMontage__CheckTime                                                      = 42,
	EPrisonerMontage__CheckTimeWhileItemInHands                                      = 43,
	EPrisonerMontage__CheckTimeWhileWeaponInHands                                    = 44,
	EPrisonerMontage__CheckTemperature                                               = 45,
	EPrisonerMontage__GestureShowFinger                                              = 46,
	EPrisonerMontage__GestureStandSurrender                                          = 47,
	EPrisonerMontage__GestureWaveHi                                                  = 48,
	EPrisonerMontage__GestureYouAreDead                                              = 49,
	EPrisonerMontage__GestureFY                                                      = 50,
	EPrisonerMontage__GesturePoint                                                   = 51,
	EPrisonerMontage__GestureHeart                                                   = 52,
	EPrisonerMontage__GestureBallpalm                                                = 53,
	EPrisonerMontage__GestureFacepalm                                                = 54,
	EPrisonerMontage__GestureFingerGun                                               = 55,
	EPrisonerMontage__GestureLaughing                                                = 56,
	EPrisonerMontage__GestureSmellWave                                               = 57,
	EPrisonerMontage__GestureSquat                                                   = 58,
	EPrisonerMontage__GestureCharge                                                  = 59,
	EPrisonerMontage__GestureFreeze                                                  = 60,
	EPrisonerMontage__GestureGetDown                                                 = 61,
	EPrisonerMontage__GestureGetUp                                                   = 62,
	EPrisonerMontage__GestureHalt                                                    = 63,
	EPrisonerMontage__GestureHurryUp                                                 = 64,
	EPrisonerMontage__GesturePointMe                                                 = 65,
	EPrisonerMontage__GesturePointYou                                                = 66,
	EPrisonerMontage__GestureRally                                                   = 67,
	EPrisonerMontage__GestureThumbsUp                                                = 68,
	EPrisonerMontage__GestureThumbsDown                                              = 69,
	EPrisonerMontage__GestureUnderstandNo                                            = 70,
	EPrisonerMontage__GestureUnderstandYes                                           = 71,
	EPrisonerMontage__CommitSuicide                                                  = 72,
	EPrisonerMontage__CommitSuicideRare                                              = 73,
	EPrisonerMontage__CommitSuicideCaptured                                          = 74,
	EPrisonerMontage__LockpickRegular                                                = 75,
	EPrisonerMontage__Whistle                                                        = 76,
	EPrisonerMontage__TuneBow                                                        = 77,
	EPrisonerMontage__RepairVehicle                                                  = 78,
	EPrisonerMontage__WashCloth                                                      = 79,
	EPrisonerMontage__Bury                                                           = 80,
	EPrisonerMontage__BuryRest                                                       = 81,
	EPrisonerMontage__ResumeBury                                                     = 82,
	EPrisonerMontage__SitOnGroundStart                                               = 83,
	EPrisonerMontage__SitOnGroundEnd                                                 = 84,
	EPrisonerMontage__LayOnGroundStart                                               = 85,
	EPrisonerMontage__LayOnGroundEnd                                                 = 86,
	EPrisonerMontage__IgniteFlare                                                    = 87,
	EPrisonerMontage__ArmTrap                                                        = 88,
	EPrisonerMontage__FishingEnter                                                   = 89,
	EPrisonerMontage__FishingLeave                                                   = 90,
	EPrisonerMontage__FishingCast                                                    = 91,
	EPrisonerMontage__FishingLongCastEnd                                             = 92,
	EPrisonerMontage__FishingShortCastEnd                                            = 93,
	EPrisonerMontage__FishingPullStart                                               = 94,
	EPrisonerMontage__FishingPullEnd                                                 = 95,
	EPrisonerMontage__FishingFishCaught                                              = 96,
	EPrisonerMontage__FishingKeepFish                                                = 97,
	EPrisonerMontage__FishingDiscardFish                                             = 98,
	EPrisonerMontage__FishingWireBreak                                               = 99,
	EPrisonerMontage__ForceUnlockStanding                                            = 100,
	EPrisonerMontage__ForceUnlockStandingEnd                                         = 101,
	EPrisonerMontage__ForceUnlockStandingStop                                        = 102,
	EPrisonerMontage__ManualUnlockStanding                                           = 103,
	EPrisonerMontage__ManualUnlockStandingEnd                                        = 104,
	EPrisonerMontage__ManualUnlockStandingStop                                       = 105,
	EPrisonerMontage__Spill                                                          = 106,
	EPrisonerMontage__BlowAirIntoFire                                                = 107,
	EPrisonerMontage__BlowAirIntoLowFire                                             = 108,
	EPrisonerMontage__StompOutFire                                                   = 109,
	EPrisonerMontage__RemoveWeed                                                     = 110,
	EPrisonerMontage__RemoveWeedWithHoe                                              = 111,
	EPrisonerMontage__ApplyPesticide                                                 = 112,
	EPrisonerMontage__AddFertilizer                                                  = 113,
	EPrisonerMontage__PlantSeed                                                      = 114,
	EPrisonerMontage__RemovePlant                                                    = 115,
	EPrisonerMontage__DestroyGarden                                                  = 116,
	EPrisonerMontage__DanceSwag                                                      = 117,
	EPrisonerMontage__DanceSlinky                                                    = 118,
	EPrisonerMontage__DanceJungleStep                                                = 119,
	EPrisonerMontage__DanceMoonslide                                                 = 120,
	EPrisonerMontage__DanceFloss                                                     = 121,
	EPrisonerMontage__DanceOrangeJustice                                             = 122,
	EPrisonerMontage__DanceShowtime                                                  = 123,
	EPrisonerMontage__DanceScrub                                                     = 124,
	EPrisonerMontage__DanceTheCarlton                                                = 125,
	EPrisonerMontage__DanceGangnamStyle                                              = 126,
	EPrisonerMontage__DanceTechnoViking                                              = 127,
	EPrisonerMontage__DanceOhMama                                                    = 128,
	EPrisonerMontage__DanceLoser                                                     = 129,
	EPrisonerMontage__DanceSeduction                                                 = 130,
	EPrisonerMontage__DanceTemptation                                                = 131,
	EPrisonerMontage__DanceVogue                                                     = 132,
	EPrisonerMontage__DanceTango                                                     = 133,
	EPrisonerMontage__DanceDiscoSpin                                                 = 134,
	EPrisonerMontage__DanceJagger                                                    = 135,
	EPrisonerMontage__DanceSlayinAlive                                               = 136,
	EPrisonerMontage__DancePuppetDance                                               = 137,
	EPrisonerMontage__DanceGunsBlazing                                               = 138,
	EPrisonerMontage__DanceStepUp                                                    = 139,
	EPrisonerMontage__DancePartyAnimal                                               = 140,
	EPrisonerMontage__DanceHardbass                                                  = 141,
	EPrisonerMontage__DanceKazachok                                                  = 142,
	EPrisonerMontage__DancePaddleDance                                               = 143,
	EPrisonerMontage__DanceMoonwalk                                                  = 144,
	EPrisonerMontage__DanceSneaky                                                    = 145,
	EPrisonerMontage__DanceDeathDrop                                                 = 146,
	EPrisonerMontage__DanceFeline                                                    = 147,
	EPrisonerMontage__DanceGoddess                                                   = 148,
	EPrisonerMontage__DanceSultana                                                   = 149,
	EPrisonerMontage__DanceSerpentsCharm                                             = 150,
	EPrisonerMontage__DanceBootylicious                                              = 151,
	EPrisonerMontage__DanceBubbleBounce                                              = 152,
	EPrisonerMontage__InjectSelf                                                     = 153,
	EPrisonerMontage__InjectOther                                                    = 154,
	EPrisonerMontage__HalloweenGesture1                                              = 155,
	EPrisonerMontage__HalloweenGesture2                                              = 156,
	EPrisonerMontage__HalloweenGesture3                                              = 157,
	EPrisonerMontage__HalloweenGesture4                                              = 158,
	EPrisonerMontage__Count                                                          = 159
};

/// Enum /Script/ConZ.EPrisonerAnimationSet
/// Size: 0x01 (1 bytes)
enum class EPrisonerAnimationSet : uint8_t
{
	EPrisonerAnimationSet__Base                                                      = 0,
	EPrisonerAnimationSet__Rifle                                                     = 1,
	EPrisonerAnimationSet__RifleRelaxed                                              = 2,
	EPrisonerAnimationSet__UnarmedCombat                                             = 3,
	EPrisonerAnimationSet__Handgun                                                   = 4,
	EPrisonerAnimationSet__BowRelaxed                                                = 5,
	EPrisonerAnimationSet__Bow                                                       = 6,
	EPrisonerAnimationSet__CarryingItem                                              = 7,
	EPrisonerAnimationSet__HandsBound                                                = 8,
	EPrisonerAnimationSet__BaseLimping                                               = 9,
	EPrisonerAnimationSet__RifleLimping                                              = 10,
	EPrisonerAnimationSet__RifleRelaxedLimping                                       = 11,
	EPrisonerAnimationSet__UnarmedCombatLimping                                      = 12,
	EPrisonerAnimationSet__HandgunLimping                                            = 13,
	EPrisonerAnimationSet__BowRelaxedLimping                                         = 14,
	EPrisonerAnimationSet__BowLimping                                                = 15,
	EPrisonerAnimationSet__CarryingItemLimping                                       = 16,
	EPrisonerAnimationSet__HandsBoundLimping                                         = 17,
	EPrisonerAnimationSet__ChainsawRelaxed                                           = 18,
	EPrisonerAnimationSet__ChainsawRelaxedLimping                                    = 19,
	EPrisonerAnimationSet__Chainsaw                                                  = 20,
	EPrisonerAnimationSet__ChainsawLimping                                           = 21,
	EPrisonerAnimationSet__Count                                                     = 22
};

/// Enum /Script/ConZ.EWidgetDisplayInfoType
/// Size: 0x01 (1 bytes)
enum class EWidgetDisplayInfoType : uint8_t
{
	EWidgetDisplayInfoType__None                                                     = 0,
	EWidgetDisplayInfoType__FirstOverSecond                                          = 1,
	EWidgetDisplayInfoType__Single                                                   = 2
};

/// Enum /Script/ConZ.EInteractionType
/// Size: 0x01 (1 bytes)
enum class EInteractionType : uint8_t
{
	EInteractionType__None                                                           = 0,
	EInteractionType__Search                                                         = 1,
	EInteractionType__Examine                                                        = 2,
	EInteractionType__PickUp                                                         = 3,
	EInteractionType__PickUpAllExamined                                              = 4,
	EInteractionType__PickUpAllSelected                                              = 5,
	EInteractionType__Use                                                            = 6,
	EInteractionType__Operate                                                        = 7,
	EInteractionType__Drop                                                           = 8,
	EInteractionType__DropAllSelected                                                = 9,
	EInteractionType__Throw                                                          = 10,
	EInteractionType__Open                                                           = 11,
	EInteractionType__Close                                                          = 12,
	EInteractionType__Lock                                                           = 13,
	EInteractionType__SetAndConnectBCULock                                           = 14,
	EInteractionType__RemoveBCULockNormal                                            = 15,
	EInteractionType__TryRemoveBCULockWithEnemyBCU                                   = 16,
	EInteractionType__BCUConnectLock                                                 = 17,
	EInteractionType__BCUDisconnectLock                                              = 18,
	EInteractionType__Unlock                                                         = 19,
	EInteractionType__SetLockCombination                                             = 20,
	EInteractionType__Push                                                           = 21,
	EInteractionType__ForcePush                                                      = 22,
	EInteractionType__GodModeFill                                                    = 23,
	EInteractionType__Fill                                                           = 24,
	EInteractionType__AdjustHeight                                                   = 25,
	EInteractionType__ConfirmHeight                                                  = 26,
	EInteractionType__Tank                                                           = 27,
	EInteractionType__Craft                                                          = 28,
	EInteractionType__Uncraft                                                        = 29,
	EInteractionType__Create                                                         = 30,
	EInteractionType__FixTire                                                        = 31,
	EInteractionType__Fix                                                            = 32,
	EInteractionType__CheckFuel                                                      = 33,
	EInteractionType__Refuel                                                         = 34,
	EInteractionType__RefuelGasStation                                               = 35,
	EInteractionType__Charge                                                         = 36,
	EInteractionType__InsertResource                                                 = 37,
	EInteractionType__RemoveResource                                                 = 38,
	EInteractionType__FillResourceContainer                                          = 39,
	EInteractionType__Eat                                                            = 40,
	EInteractionType__EatAll                                                         = 41,
	EInteractionType__Drink                                                          = 42,
	EInteractionType__DrinkAll                                                       = 43,
	EInteractionType__Inject                                                         = 44,
	EInteractionType__CheckTaste                                                     = 45,
	EInteractionType__Equip                                                          = 46,
	EInteractionType__UnEquip                                                        = 47,
	EInteractionType__Cut                                                            = 48,
	EInteractionType__Collect                                                        = 49,
	EInteractionType__LightFire                                                      = 50,
	EInteractionType__PullPin                                                        = 51,
	EInteractionType__AddFuel                                                        = 52,
	EInteractionType__Extinguish                                                     = 53,
	EInteractionType__Prepare                                                        = 54,
	EInteractionType__Cook                                                           = 55,
	EInteractionType__Chop                                                           = 56,
	EInteractionType__SmokeFood                                                      = 57,
	EInteractionType__Destroy                                                        = 58,
	EInteractionType__Store                                                          = 59,
	EInteractionType__TakeInHands                                                    = 60,
	EInteractionType__Clean                                                          = 61,
	EInteractionType__Decontaminate                                                  = 62,
	EInteractionType__DecontaminateAll                                               = 63,
	EInteractionType__WashCloth                                                      = 64,
	EInteractionType__WashClothAll                                                   = 65,
	EInteractionType__WashEyes                                                       = 66,
	EInteractionType__RemoveFromHands                                                = 67,
	EInteractionType__CarryItem                                                      = 68,
	EInteractionType__AddToQuickAccess                                               = 69,
	EInteractionType__AddToThrowAccess                                               = 70,
	EInteractionType__RemoveFromQuickAccess                                          = 71,
	EInteractionType__RemoveFromThrowAccess                                          = 72,
	EInteractionType__ChamberBullet                                                  = 73,
	EInteractionType__LoadAmmo                                                       = 74,
	EInteractionType__UnloadAmmo                                                     = 75,
	EInteractionType__CheckAmmo                                                      = 76,
	EInteractionType__Swap                                                           = 77,
	EInteractionType__Tune                                                           = 78,
	EInteractionType__Treat                                                          = 79,
	EInteractionType__Join                                                           = 80,
	EInteractionType__Split                                                          = 81,
	EInteractionType__Unpack                                                         = 82,
	EInteractionType__Disinfect                                                      = 83,
	EInteractionType__Anchor                                                         = 84,
	EInteractionType__CheckTemperature                                               = 85,
	EInteractionType__RollRevolverDrum                                               = 86,
	EInteractionType__CommitSuicide                                                  = 87,
	EInteractionType__ModifyPaintjob                                                 = 88,
	EInteractionType__TreatPatient                                                   = 89,
	EInteractionType__InviteToSquad                                                  = 90,
	EInteractionType__RemoveFromSquad                                                = 91,
	EInteractionType__LeaveSquad                                                     = 92,
	EInteractionType__Urinate                                                        = 93,
	EInteractionType__Defecate                                                       = 94,
	EInteractionType__Vomit                                                          = 95,
	EInteractionType__CheckTime                                                      = 96,
	EInteractionType__AddWristwatchAlarm                                             = 97,
	EInteractionType__Resuscitate                                                    = 98,
	EInteractionType__BindHands                                                      = 99,
	EInteractionType__TightenBinds                                                   = 100,
	EInteractionType__RemoveBinds                                                    = 101,
	EInteractionType__LoosenBinds                                                    = 102,
	EInteractionType__BreakBinds                                                     = 103,
	EInteractionType__Bury                                                           = 104,
	EInteractionType__Unbury                                                         = 105,
	EInteractionType__Rest                                                           = 106,
	EInteractionType__SitOnGround                                                    = 107,
	EInteractionType__LayOnGround                                                    = 108,
	EInteractionType__ExamineInventory                                               = 109,
	EInteractionType__Loot                                                           = 110,
	EInteractionType__ClaimKill                                                      = 111,
	EInteractionType__Disarm                                                         = 112,
	EInteractionType__GestureShowFinger                                              = 113,
	EInteractionType__GestureStandSurrender                                          = 114,
	EInteractionType__GestureWaveHi                                                  = 115,
	EInteractionType__GestureYouAreDead                                              = 116,
	EInteractionType__GestureFY                                                      = 117,
	EInteractionType__GesturePoint                                                   = 118,
	EInteractionType__GestureHeart                                                   = 119,
	EInteractionType__GestureBallpalm                                                = 120,
	EInteractionType__GestureFacepalm                                                = 121,
	EInteractionType__GestureFingerGun                                               = 122,
	EInteractionType__GestureLaughing                                                = 123,
	EInteractionType__GestureSmellWave                                               = 124,
	EInteractionType__GestureSquat                                                   = 125,
	EInteractionType__GestureCharge                                                  = 126,
	EInteractionType__GestureFreeze                                                  = 127,
	EInteractionType__GestureGetDown                                                 = 128,
	EInteractionType__GestureGetUp                                                   = 129,
	EInteractionType__GestureHalt                                                    = 130,
	EInteractionType__GestureHurryUp                                                 = 131,
	EInteractionType__GesturePointMe                                                 = 132,
	EInteractionType__GesturePointYou                                                = 133,
	EInteractionType__GestureRally                                                   = 134,
	EInteractionType__GestureThumbsUp                                                = 135,
	EInteractionType__GestureThumbsDown                                              = 136,
	EInteractionType__GestureUnderstandNo                                            = 137,
	EInteractionType__GestureUnderstandYes                                           = 138,
	EInteractionType__PlayInstrument                                                 = 139,
	EInteractionType__Whistle                                                        = 140,
	EInteractionType__EnterPhotoMode                                                 = 141,
	EInteractionType__EnterVehicle                                                   = 142,
	EInteractionType__ServiceVehicle                                                 = 143,
	EInteractionType__InstallVehicleAttachment                                       = 144,
	EInteractionType__RemoveVehicleAttachment                                        = 145,
	EInteractionType__RepairVehicleAttachment                                        = 146,
	EInteractionType__BuyAndInstallVehicleAttachment                                 = 147,
	EInteractionType__RemoveAndSellVehicleAttachment                                 = 148,
	EInteractionType__SetVehicleServicePaymentPreferrence                            = 149,
	EInteractionType__Buy                                                            = 150,
	EInteractionType__Maintain                                                       = 151,
	EInteractionType__Lockpick                                                       = 152,
	EInteractionType__RemoveLocks                                                    = 153,
	EInteractionType__RemoveLocksAdmin                                               = 154,
	EInteractionType__ForceUnlock                                                    = 155,
	EInteractionType__AddUpgrade                                                     = 156,
	EInteractionType__RadioTurnOn                                                    = 157,
	EInteractionType__RadioTurnOff                                                   = 158,
	EInteractionType__RadioIncreaseVolume                                            = 159,
	EInteractionType__RadioDecreaseVolume                                            = 160,
	EInteractionType__RadioChangeRadioStation                                        = 161,
	EInteractionType__StackAdd                                                       = 162,
	EInteractionType__StackSplit                                                     = 163,
	EInteractionType__RepairBaseElement                                              = 164,
	EInteractionType__RepairBaseElementArea                                          = 165,
	EInteractionType__RepairBaseElementsUnder25Percent                               = 166,
	EInteractionType__RepairBaseElementsUnder50Percent                               = 167,
	EInteractionType__RepairBaseElementsUnder75Percent                               = 168,
	EInteractionType__ClaimBase                                                      = 169,
	EInteractionType__ShowBaseFlagInfluence                                          = 170,
	EInteractionType__HideBaseFlagInfluence                                          = 171,
	EInteractionType__StartBaseFlagOvertake                                          = 172,
	EInteractionType__StopBaseFlagOvertake                                           = 173,
	EInteractionType__UpgradeBaseElement                                             = 174,
	EInteractionType__FlipPlaceable                                                  = 175,
	EInteractionType__AddFlagExpansion                                               = 176,
	EInteractionType__OpenContainer                                                  = 177,
	EInteractionType__ChangeItemText                                                 = 178,
	EInteractionType__CommitItemText                                                 = 179,
	EInteractionType__TurnOn                                                         = 180,
	EInteractionType__TurnOff                                                        = 181,
	EInteractionType__IncreaseAngle                                                  = 182,
	EInteractionType__DecreaseAngle                                                  = 183,
	EInteractionType__IncreaseLightIntensity                                         = 184,
	EInteractionType__DecreaseLightIntensity                                         = 185,
	EInteractionType__AddMotionTrigger                                               = 186,
	EInteractionType__AddLaserTrigger                                                = 187,
	EInteractionType__AddTripwireTrigger                                             = 188,
	EInteractionType__AddTimedTrigger                                                = 189,
	EInteractionType__RemoveTrigger                                                  = 190,
	EInteractionType__ShowTrigger                                                    = 191,
	EInteractionType__ArmTrap                                                        = 192,
	EInteractionType__DisarmTrap                                                     = 193,
	EInteractionType__RefuelTrap                                                     = 194,
	EInteractionType__StartFishing                                                   = 195,
	EInteractionType__ActivateKillbox                                                = 196,
	EInteractionType__FillItemWithReplenishableResource                              = 197,
	EInteractionType__FillItemWithInfiniteResource                                   = 198,
	EInteractionType__DrinkFromReplenishableResource                                 = 199,
	EInteractionType__DecontaminateWithReplenishableResource                         = 200,
	EInteractionType__DecontaminateAllWithReplenishableResource                      = 201,
	EInteractionType__WashClothWithReplenishableResource                             = 202,
	EInteractionType__WashClothAllWithReplenishableResource                          = 203,
	EInteractionType__Spill                                                          = 204,
	EInteractionType__CheckResourceType                                              = 205,
	EInteractionType__RemoveWeed                                                     = 206,
	EInteractionType__ApplyPesticide                                                 = 207,
	EInteractionType__AddFertilizer                                                  = 208,
	EInteractionType__PlantSeed                                                      = 209,
	EInteractionType__CollectSeeds                                                   = 210,
	EInteractionType__RemovePlant                                                    = 211,
	EInteractionType__DestroyGarden                                                  = 212,
	EInteractionType__OpenCookPanel                                                  = 213,
	EInteractionType__SetPrivateAccess                                               = 214,
	EInteractionType__SetPublicAccess                                                = 215,
	EInteractionType__SetRank1Access                                                 = 216,
	EInteractionType__SetRank2Access                                                 = 217,
	EInteractionType__SetRank3Access                                                 = 218,
	EInteractionType__SetRank4Access                                                 = 219,
	EInteractionType__MusicPlayerTurnOn                                              = 220,
	EInteractionType__MusicPlayerPlay                                                = 221,
	EInteractionType__MusicPlayerNext                                                = 222,
	EInteractionType__MusicPlayerPrevious                                            = 223,
	EInteractionType__MusicPlayerShuffle                                             = 224,
	EInteractionType__MusicPlayerRepeat                                              = 225,
	EInteractionType__MusicPlayerIncreaseVolume                                      = 226,
	EInteractionType__MusicPlayerDecreaseVolume                                      = 227,
	EInteractionType__MusicPlayerRadio                                               = 228,
	EInteractionType__Dance                                                          = 229,
	EInteractionType__TradeBuy                                                       = 230,
	EInteractionType__TradeSell                                                      = 231,
	EInteractionType__UseATM                                                         = 232,
	EInteractionType__Pair                                                           = 233,
	EInteractionType__Unpair                                                         = 234,
	EInteractionType__SayVoiceline                                                   = 235,
	EInteractionType__HalloweenGesture1                                              = 236,
	EInteractionType__HalloweenGesture2                                              = 237,
	EInteractionType__HalloweenGesture3                                              = 238,
	EInteractionType__HalloweenGesture4                                              = 239,
	EInteractionType__AttachTrap                                                     = 240,
	EInteractionType__TrackAnimal                                                    = 241,
	EInteractionType__ShowRange                                                      = 242,
	EInteractionType__HideRange                                                      = 243,
	EInteractionType__SetProtectionTime                                              = 244
};

/// Enum /Script/ConZ.ENoiseLevel
/// Size: 0x01 (1 bytes)
enum class ENoiseLevel : uint8_t
{
	ENoiseLevel__Mute                                                                = 0,
	ENoiseLevel__VerySilent                                                          = 1,
	ENoiseLevel__Silent                                                              = 2,
	ENoiseLevel__Moderate                                                            = 3,
	ENoiseLevel__Loud                                                                = 4,
	ENoiseLevel__VeryLoud                                                            = 5,
	ENoiseLevel__Count                                                               = 6
};

/// Enum /Script/ConZ.EItemRarity
/// Size: 0x01 (1 bytes)
enum class EItemRarity : uint8_t
{
	EItemRarity__ExtremelyRare                                                       = 0,
	EItemRarity__VeryRare                                                            = 1,
	EItemRarity__Rare                                                                = 2,
	EItemRarity__Uncommon                                                            = 3,
	EItemRarity__Common                                                              = 4,
	EItemRarity__Abundant                                                            = 5,
	EItemRarity__Count                                                               = 6
};

/// Enum /Script/ConZ.EDeluxeVersion
/// Size: 0x01 (1 bytes)
enum class EDeluxeVersion : uint8_t
{
	EDeluxeVersion__SupporterPack1                                                   = 0,
	EDeluxeVersion__SupporterPack2                                                   = 1,
	EDeluxeVersion__PremiumHairstyles1                                               = 2,
	EDeluxeVersion__PremiumHairstyles2                                               = 3,
	EDeluxeVersion__Character_DannyTrejo                                             = 4,
	EDeluxeVersion__Character_LuisMoncada                                            = 5,
	EDeluxeVersion__WeaponPaintjobs                                                  = 6,
	EDeluxeVersion__WeaponCharms                                                     = 7,
	EDeluxeVersion__VehiclePaintjobs                                                 = 8,
	EDeluxeVersion__Dance                                                            = 9,
	EDeluxeVersion__Character_RaymondCruz                                            = 10,
	EDeluxeVersion__DigitalDeluxe                                                    = 11,
	EDeluxeVersion__None                                                             = 12
};

/// Enum /Script/ConZ.EItemExhausted
/// Size: 0x01 (1 bytes)
enum class EItemExhausted : uint8_t
{
	EItemExhausted__DoNothing                                                        = 0,
	EItemExhausted__Destroy                                                          = 1,
	EItemExhausted__Uncraft                                                          = 2
};

/// Enum /Script/ConZ.EItemBlueprintPlacementBlockingType
/// Size: 0x01 (1 bytes)
enum class EItemBlueprintPlacementBlockingType : uint8_t
{
	EItemBlueprintPlacementBlockingType__None                                        = 0,
	EItemBlueprintPlacementBlockingType__All                                         = 1,
	EItemBlueprintPlacementBlockingType__OnlyFoundations                             = 2,
	EItemBlueprintPlacementBlockingType__Count                                       = 3
};

/// Enum /Script/ConZ.EBodyPart
/// Size: 0x01 (1 bytes)
enum class EBodyPart : uint8_t
{
	EBodyPart__Unknown                                                               = 0,
	EBodyPart__Head                                                                  = 1,
	EBodyPart__Chest                                                                 = 2,
	EBodyPart__Abdomen                                                               = 3,
	EBodyPart__ArmLeftLower                                                          = 4,
	EBodyPart__ArmLeftUpper                                                          = 5,
	EBodyPart__ArmRightLower                                                         = 6,
	EBodyPart__ArmRightUpper                                                         = 7,
	EBodyPart__LegLeftLower                                                          = 8,
	EBodyPart__LegLeftUpper                                                          = 9,
	EBodyPart__LegRightLower                                                         = 10,
	EBodyPart__LegRightUpper                                                         = 11,
	EBodyPart__Count                                                                 = 12
};

/// Enum /Script/ConZ.EEnvironmentClass
/// Size: 0x01 (1 bytes)
enum class EEnvironmentClass : uint8_t
{
	EEnvironmentClass__Indoor_Small                                                  = 0,
	EEnvironmentClass__Indoor_Medium                                                 = 1,
	EEnvironmentClass__Indoor_Large                                                  = 2,
	EEnvironmentClass__Outdoor_Large                                                 = 3,
	EEnvironmentClass__Count                                                         = 4
};

/// Enum /Script/ConZ.EConZGender
/// Size: 0x01 (1 bytes)
enum class EConZGender : uint8_t
{
	EConZGender__Unspecified                                                         = 0,
	EConZGender__Female                                                              = 1,
	EConZGender__Male                                                                = 2,
	EConZGender__Count                                                               = 3
};

/// Enum /Script/ConZ.EDetectHitCollisionType
/// Size: 0x01 (1 bytes)
enum class EDetectHitCollisionType : uint8_t
{
	EDetectHitCollisionType__None                                                    = 0,
	EDetectHitCollisionType__Head                                                    = 1,
	EDetectHitCollisionType__Body                                                    = 2,
	EDetectHitCollisionType__Legs                                                    = 3
};

/// Enum /Script/ConZ.ECharacterActionEndState
/// Size: 0x01 (1 bytes)
enum class ECharacterActionEndState : uint8_t
{
	ECharacterActionEndState__None                                                   = 0,
	ECharacterActionEndState__Regular                                                = 1,
	ECharacterActionEndState__ConditionNotMet                                        = 2,
	ECharacterActionEndState__Canceled                                               = 3,
	ECharacterActionEndState__Failed                                                 = 4,
	ECharacterActionEndState__Terminated                                             = 5
};

/// Enum /Script/ConZ.ECharacterActionAckType
/// Size: 0x01 (1 bytes)
enum class ECharacterActionAckType : uint8_t
{
	ECharacterActionAckType__None                                                    = 0,
	ECharacterActionAckType__Begin                                                   = 1,
	ECharacterActionAckType__End                                                     = 2
};

/// Enum /Script/ConZ.EAttackType
/// Size: 0x01 (1 bytes)
enum class EAttackType : uint8_t
{
	EAttackType__Slash                                                               = 0,
	EAttackType__Pierce                                                              = 1
};

/// Enum /Script/ConZ.EHitSeverity
/// Size: 0x01 (1 bytes)
enum class EHitSeverity : uint8_t
{
	EHitSeverity__VeryLight                                                          = 0,
	EHitSeverity__Light                                                              = 1,
	EHitSeverity__Medium                                                             = 2,
	EHitSeverity__Heavy                                                              = 3,
	EHitSeverity__VeryHeavy                                                          = 4,
	EHitSeverity__Count                                                              = 5
};

/// Enum /Script/ConZ.ECharacterImpactSourceSoundCategory
/// Size: 0x01 (1 bytes)
enum class ECharacterImpactSourceSoundCategory : uint8_t
{
	ECharacterImpactSourceSoundCategory__Any                                         = 0,
	ECharacterImpactSourceSoundCategory__Head_Bare                                   = 1,
	ECharacterImpactSourceSoundCategory__Hands_Bare                                  = 2,
	ECharacterImpactSourceSoundCategory__Hands_Gloved                                = 3,
	ECharacterImpactSourceSoundCategory__Legs_Bare                                   = 4,
	ECharacterImpactSourceSoundCategory__Claws                                       = 5,
	ECharacterImpactSourceSoundCategory__Jaws                                        = 6,
	ECharacterImpactSourceSoundCategory__Blunt_Wood                                  = 7,
	ECharacterImpactSourceSoundCategory__Blunt_Metal                                 = 8,
	ECharacterImpactSourceSoundCategory__Sharp_Metal                                 = 9
};

/// Enum /Script/ConZ.ECharacterHiddenSpawnType
/// Size: 0x01 (1 bytes)
enum class ECharacterHiddenSpawnType : uint8_t
{
	ECharacterHiddenSpawnType__None                                                  = 0,
	ECharacterHiddenSpawnType__Undeground                                            = 1,
	ECharacterHiddenSpawnType__ScaledDown                                            = 2,
	ECharacterHiddenSpawnType__FadeIn                                                = 3,
	ECharacterHiddenSpawnType__LayingDown                                            = 4
};

/// Enum /Script/ConZ.EAITeam
/// Size: 0x01 (1 bytes)
enum class EAITeam : uint8_t
{
	EAITeam__Prisoner                                                                = 0,
	EAITeam__Zombie                                                                  = 1,
	EAITeam__Animal                                                                  = 2,
	EAITeam__TEC1                                                                    = 3,
	EAITeam__Vehicle                                                                 = 4,
	EAITeam__Neutral                                                                 = 5,
	EAITeam__ZombieImpersonator                                                      = 6,
	EAITeam__Monster                                                                 = 7,
	EAITeam__Item                                                                    = 8,
	EAITeam__Turret                                                                  = 9,
	EAITeam__ArmedNPC                                                                = 10,
	EAITeam__Num                                                                     = 11,
	EAITeam__None                                                                    = 255
};

/// Enum /Script/ConZ.EConZPxDominanceGroup
/// Size: 0x01 (1 bytes)
enum class EConZPxDominanceGroup : uint8_t
{
	EConZPxDominanceGroup__Default                                                   = 0,
	EConZPxDominanceGroup__MediumPawns                                               = 1,
	EConZPxDominanceGroup__LargePawns                                                = 2
};

/// Enum /Script/ConZ.EPrisonerBorderCrossingPenalty
/// Size: 0x01 (1 bytes)
enum class EPrisonerBorderCrossingPenalty : uint8_t
{
	EPrisonerBorderCrossingPenalty__None                                             = 0,
	EPrisonerBorderCrossingPenalty__Penalty1                                         = 1,
	EPrisonerBorderCrossingPenalty__Penalty2                                         = 2,
	EPrisonerBorderCrossingPenalty__Penalty3                                         = 3,
	EPrisonerBorderCrossingPenalty__Penalty4                                         = 4,
	EPrisonerBorderCrossingPenalty__DeadPenalty                                      = 5
};

/// Enum /Script/ConZ.EPrisonerCommonSpawnLocation
/// Size: 0x01 (1 bytes)
enum class EPrisonerCommonSpawnLocation : uint8_t
{
	EPrisonerCommonSpawnLocation__None                                               = 0,
	EPrisonerCommonSpawnLocation__Random                                             = 1,
	EPrisonerCommonSpawnLocation__Sector                                             = 2,
	EPrisonerCommonSpawnLocation__Home                                               = 3,
	EPrisonerCommonSpawnLocation__Squad                                              = 4,
	EPrisonerCommonSpawnLocation__Event                                              = 5
};

/// Enum /Script/ConZ.EWeaponMalfunction
/// Size: 0x01 (1 bytes)
enum class EWeaponMalfunction : uint8_t
{
	EWeaponMalfunction__None                                                         = 0,
	EWeaponMalfunction__BadRound                                                     = 1,
	EWeaponMalfunction__StovePipe                                                    = 2,
	EWeaponMalfunction__RoundNotLoaded                                               = 3,
	EWeaponMalfunction__DoubleFeed                                                   = 4,
	EWeaponMalfunction__StuckBullet                                                  = 5,
	EWeaponMalfunction__ClipPartiallyEjected                                         = 6,
	EWeaponMalfunction__Count                                                        = 7
};

/// Enum /Script/ConZ.EAmmunitionCartridgeState
/// Size: 0x01 (1 bytes)
enum class EAmmunitionCartridgeState : uint8_t
{
	EAmmunitionCartridgeState__Default                                               = 0,
	EAmmunitionCartridgeState__Used                                                  = 1,
	EAmmunitionCartridgeState__Bad                                                   = 2,
	EAmmunitionCartridgeState__BadAndUsed                                            = 3
};

/// Enum /Script/ConZ.EThrowingAnimationType
/// Size: 0x01 (1 bytes)
enum class EThrowingAnimationType : uint8_t
{
	EThrowingAnimationType__Default                                                  = 0,
	EThrowingAnimationType__FromWeapon                                               = 1,
	EThrowingAnimationType__FromCombat                                               = 2,
	EThrowingAnimationType__FromIdle                                                 = 3
};

/// Enum /Script/ConZ.EPrisonerGroundStance
/// Size: 0x01 (1 bytes)
enum class EPrisonerGroundStance : uint8_t
{
	EPrisonerGroundStance__Standing                                                  = 0,
	EPrisonerGroundStance__Crouching                                                 = 1,
	EPrisonerGroundStance__Prone                                                     = 2,
	EPrisonerGroundStance__Count                                                     = 3
};

/// Enum /Script/ConZ.EPrisonerWettablePart
/// Size: 0x01 (1 bytes)
enum class EPrisonerWettablePart : uint8_t
{
	EPrisonerWettablePart__Head                                                      = 0,
	EPrisonerWettablePart__UpperBody                                                 = 1,
	EPrisonerWettablePart__LowerBody                                                 = 2,
	EPrisonerWettablePart__Feet                                                      = 3,
	EPrisonerWettablePart__Count                                                     = 4
};

/// Enum /Script/ConZ.EPrisonerMeleeTargetSelectionMode
/// Size: 0x01 (1 bytes)
enum class EPrisonerMeleeTargetSelectionMode : uint8_t
{
	EPrisonerMeleeTargetSelectionMode__Manual                                        = 0,
	EPrisonerMeleeTargetSelectionMode__SemiAutomatic                                 = 1,
	EPrisonerMeleeTargetSelectionMode__Automatic                                     = 2
};

/// Enum /Script/ConZ.EMotionIntensity
/// Size: 0x01 (1 bytes)
enum class EMotionIntensity : uint8_t
{
	EMotionIntensity__None                                                           = 0,
	EMotionIntensity__Light                                                          = 1,
	EMotionIntensity__Medium                                                         = 2,
	EMotionIntensity__Heavy                                                          = 3
};

/// Enum /Script/ConZ.ESkillLevel
/// Size: 0x01 (1 bytes)
enum class ESkillLevel : uint8_t
{
	ESkillLevel__NoSkill                                                             = 0,
	ESkillLevel__Basic                                                               = 1,
	ESkillLevel__Medium                                                              = 2,
	ESkillLevel__Advanced                                                            = 3,
	ESkillLevel__AboveAdvanced                                                       = 4,
	ESkillLevel__Count                                                               = 5
};

/// Enum /Script/ConZ.ESkillAttribute
/// Size: 0x01 (1 bytes)
enum class ESkillAttribute : uint8_t
{
	ESkillAttribute__Constitution                                                    = 0,
	ESkillAttribute__Dexterity                                                       = 1,
	ESkillAttribute__Intelligence                                                    = 2,
	ESkillAttribute__Strength                                                        = 3
};

/// Enum /Script/ConZ.EPlayableInstrumentTone
/// Size: 0x01 (1 bytes)
enum class EPlayableInstrumentTone : uint8_t
{
	EPlayableInstrumentTone__C                                                       = 0,
	EPlayableInstrumentTone__Db                                                      = 1,
	EPlayableInstrumentTone__D                                                       = 2,
	EPlayableInstrumentTone__Eb                                                      = 3,
	EPlayableInstrumentTone__E                                                       = 4,
	EPlayableInstrumentTone__F                                                       = 5,
	EPlayableInstrumentTone__Gb                                                      = 6,
	EPlayableInstrumentTone__G                                                       = 7,
	EPlayableInstrumentTone__Ab                                                      = 8,
	EPlayableInstrumentTone__A                                                       = 9,
	EPlayableInstrumentTone__Bb                                                      = 10,
	EPlayableInstrumentTone__B                                                       = 11,
	EPlayableInstrumentTone__C2                                                      = 12,
	EPlayableInstrumentTone__Count                                                   = 13
};

/// Enum /Script/ConZ.EPrisonerAerialPose
/// Size: 0x01 (1 bytes)
enum class EPrisonerAerialPose : uint8_t
{
	EPrisonerAerialPose__FallShort                                                   = 0,
	EPrisonerAerialPose__FallLong                                                    = 1,
	EPrisonerAerialPose__SkydiveSlow                                                 = 2,
	EPrisonerAerialPose__SkydiveFast                                                 = 3,
	EPrisonerAerialPose__JumpNormal                                                  = 4,
	EPrisonerAerialPose__JumpSuper                                                   = 5,
	EPrisonerAerialPose__Landing                                                     = 6,
	EPrisonerAerialPose__Parachute                                                   = 7,
	EPrisonerAerialPose__HandsBound                                                  = 8,
	EPrisonerAerialPose__RagdollRecovery                                             = 9,
	EPrisonerAerialPose__Ragdoll                                                     = 10,
	EPrisonerAerialPose__Count                                                       = 11
};

/// Enum /Script/ConZ.EPrisonerAquaticMode
/// Size: 0x01 (1 bytes)
enum class EPrisonerAquaticMode : uint8_t
{
	EPrisonerAquaticMode__SwimmingOnSurface                                          = 0,
	EPrisonerAquaticMode__Diving                                                     = 1,
	EPrisonerAquaticMode__Count                                                      = 2
};

/// Enum /Script/ConZ.EPrisonerCombatMode
/// Size: 0x01 (1 bytes)
enum class EPrisonerCombatMode : uint8_t
{
	EPrisonerCombatMode__None                                                        = 0,
	EPrisonerCombatMode__Melee                                                       = 1,
	EPrisonerCombatMode__Ranged                                                      = 2,
	EPrisonerCombatMode__RangedADS                                                   = 3
};

/// Enum /Script/ConZ.EHandsHolstersType
/// Size: 0x01 (1 bytes)
enum class EHandsHolstersType : uint8_t
{
	EHandsHolstersType__Hands                                                        = 0,
	EHandsHolstersType__HolsterLeft                                                  = 1,
	EHandsHolstersType__HolsterRight                                                 = 2
};

/// Enum /Script/ConZ.EDamageChannel
/// Size: 0x01 (1 bytes)
enum class EDamageChannel : uint8_t
{
	EDamageChannel__UncategorizedDamage                                              = 0,
	EDamageChannel__FallDamage                                                       = 1,
	EDamageChannel__PuppetDamage                                                     = 2,
	EDamageChannel__SuicidePuppetDamage                                              = 3,
	EDamageChannel__SentryDamage                                                     = 4,
	EDamageChannel__AnimalDamage                                                     = 5,
	EDamageChannel__BaseDefenseDamage                                                = 6,
	EDamageChannel__VehicleDamage                                                    = 7,
	EDamageChannel__BoxingDamage                                                     = 8,
	EDamageChannel__MeleeWeaponDamage                                                = 9,
	EDamageChannel__ThrowingDamage                                                   = 10,
	EDamageChannel__ProjectileDamage                                                 = 11,
	EDamageChannel__ExplosiveDamage                                                  = 12,
	EDamageChannel__TrapDamage                                                       = 13,
	EDamageChannel__BurnDamage                                                       = 14,
	EDamageChannel__DamageToBases                                                    = 15,
	EDamageChannel__DamageToVehicles                                                 = 16,
	EDamageChannel__DisablingDamage                                                  = 17,
	EDamageChannel__RazorDamage                                                      = 18,
	EDamageChannel__Count                                                            = 19,
	EDamageChannel__ECustomZoneEvent_FirstOverlap                                    = 1,
	EDamageChannel__ECustomZoneEvent_LastOverlap                                     = 17
};

/// Enum /Script/ConZ.ECarryingItemState
/// Size: 0x01 (1 bytes)
enum class ECarryingItemState : uint8_t
{
	ECarryingItemState__None                                                         = 0,
	ECarryingItemState__Idle                                                         = 1
};

/// Enum /Script/ConZ.EHoldBreathState
/// Size: 0x01 (1 bytes)
enum class EHoldBreathState : uint8_t
{
	EHoldBreathState__None                                                           = 0,
	EHoldBreathState__BreathIn                                                       = 1,
	EHoldBreathState__HoldBreath                                                     = 2,
	EHoldBreathState__BreathOut                                                      = 3,
	EHoldBreathState__Breathless                                                     = 4,
	EHoldBreathState__BreathInRecovery                                               = 5,
	EHoldBreathState__Count                                                          = 6
};

/// Enum /Script/ConZ.EPlayingInstrumentState
/// Size: 0x01 (1 bytes)
enum class EPlayingInstrumentState : uint8_t
{
	EPlayingInstrumentState__None                                                    = 0,
	EPlayingInstrumentState__Exiting                                                 = 1,
	EPlayingInstrumentState__Idle                                                    = 2,
	EPlayingInstrumentState__Playing                                                 = 3
};

/// Enum /Script/ConZ.EScopingWithItemInHandsState
/// Size: 0x01 (1 bytes)
enum class EScopingWithItemInHandsState : uint8_t
{
	EScopingWithItemInHandsState__None                                               = 0,
	EScopingWithItemInHandsState__Starting                                           = 1,
	EScopingWithItemInHandsState__Scoping                                            = 2,
	EScopingWithItemInHandsState__StoppingWithEffect                                 = 3,
	EScopingWithItemInHandsState__StoppingNoEffect                                   = 4
};

/// Enum /Script/ConZ.EVehicleWeaponAimingStance
/// Size: 0x01 (1 bytes)
enum class EVehicleWeaponAimingStance : uint8_t
{
	EVehicleWeaponAimingStance__Default                                              = 0,
	EVehicleWeaponAimingStance__Leaning                                              = 1,
	EVehicleWeaponAimingStance__Count                                                = 2
};

/// Enum /Script/ConZ.EWeaponFiringMode
/// Size: 0x01 (1 bytes)
enum class EWeaponFiringMode : uint8_t
{
	EWeaponFiringMode__Automatic                                                     = 0,
	EWeaponFiringMode__SingleShot                                                    = 1,
	EWeaponFiringMode__Burst                                                         = 2,
	EWeaponFiringMode__Count                                                         = 3
};

/// Enum /Script/ConZ.EDodgeDirectionType
/// Size: 0x01 (1 bytes)
enum class EDodgeDirectionType : uint8_t
{
	EDodgeDirectionType__Front                                                       = 0,
	EDodgeDirectionType__Back                                                        = 1,
	EDodgeDirectionType__Left                                                        = 2,
	EDodgeDirectionType__Right                                                       = 3
};

/// Enum /Script/ConZ.EPrisonerMountSlotFlags
/// Size: 0x01 (1 bytes)
enum class EPrisonerMountSlotFlags : uint8_t
{
	EPrisonerMountSlotFlags__None                                                    = 0,
	EPrisonerMountSlotFlags__HasMountedSlot                                          = 1,
	EPrisonerMountSlotFlags__ShouldHideAttachedItems                                 = 2
};

/// Enum /Script/ConZ.EPrisonerMovementPace
/// Size: 0x01 (1 bytes)
enum class EPrisonerMovementPace : uint8_t
{
	EPrisonerMovementPace__Slow                                                      = 0,
	EPrisonerMovementPace__Medium                                                    = 1,
	EPrisonerMovementPace__Fast                                                      = 2,
	EPrisonerMovementPace__Count                                                     = 3,
	EPrisonerMovementPace__Min                                                       = 0,
	EPrisonerMovementPace__Max                                                       = 2
};

/// Enum /Script/ConZ.EAccessLevel
/// Size: 0x01 (1 bytes)
enum class EAccessLevel : uint8_t
{
	EAccessLevel__Public                                                             = 0,
	EAccessLevel__Private                                                            = 1,
	EAccessLevel__Rank1                                                              = 2,
	EAccessLevel__Rank2                                                              = 3,
	EAccessLevel__Rank3                                                              = 4,
	EAccessLevel__Rank4                                                              = 5,
	EAccessLevel__Num                                                                = 6
};

/// Enum /Script/ConZ.EDoorStateFlags
/// Size: 0x01 (1 bytes)
enum class EDoorStateFlags : uint8_t
{
	EDoorStateFlags__None                                                            = 0,
	EDoorStateFlags__Open                                                            = 1,
	EDoorStateFlags__Locked                                                          = 2,
	EDoorStateFlags__Empty                                                           = 4,
	EDoorStateFlags__ChangeSide                                                      = 8,
	EDoorStateFlags__HasLock                                                         = 16,
	EDoorStateFlags__SelfClosing                                                     = 32,
	EDoorStateFlags__HardLocked                                                      = 64,
	EDoorStateFlags__ViolentlyOpened                                                 = 128
};

/// Enum /Script/ConZ.EOpenStateNavigationControl
/// Size: 0x01 (1 bytes)
enum class EOpenStateNavigationControl : uint8_t
{
	EOpenStateNavigationControl__Unchanged                                           = 0,
	EOpenStateNavigationControl__AffectsNavigationWhenOpen                           = 1,
	EOpenStateNavigationControl__AffectsNavigationWhenClosed                         = 2,
	EOpenStateNavigationControl__AffectsNavigationAlways                             = 3,
	EOpenStateNavigationControl__AffectsNavigationNever                              = 4
};

/// Enum /Script/ConZ.EDoorType
/// Size: 0x01 (1 bytes)
enum class EDoorType : uint8_t
{
	EDoorType__Regular                                                               = 0,
	EDoorType__BaseDoor                                                              = 1
};

/// Enum /Script/ConZ.EAnimalAction
/// Size: 0x01 (1 bytes)
enum class EAnimalAction : uint8_t
{
	EAnimalAction__None                                                              = 0,
	EAnimalAction__Eat                                                               = 1,
	EAnimalAction__Rest                                                              = 2,
	EAnimalAction__Attack                                                            = 3,
	EAnimalAction__Sit                                                               = 4,
	EAnimalAction__Wait                                                              = 5,
	EAnimalAction__Intimidate                                                        = 6,
	EAnimalAction__Alert                                                             = 7,
	EAnimalAction__Turn                                                              = 8
};

/// Enum /Script/ConZ.EFishingState
/// Size: 0x01 (1 bytes)
enum class EFishingState : uint8_t
{
	EFishingState__None                                                              = 0,
	EFishingState__Idle                                                              = 1,
	EFishingState__EnterActive                                                       = 2,
	EFishingState__Active                                                            = 3,
	EFishingState__LeaveActive                                                       = 4,
	EFishingState__CastInitiated                                                     = 5,
	EFishingState__LongCast                                                          = 6,
	EFishingState__ShortCast                                                         = 7,
	EFishingState__LongCasting                                                       = 8,
	EFishingState__ShortCasting                                                      = 9,
	EFishingState__LongCastingEnd                                                    = 10,
	EFishingState__ShortCastingEnd                                                   = 11,
	EFishingState__Bait                                                              = 12,
	EFishingState__PullStart                                                         = 13,
	EFishingState__PullEnd                                                           = 14,
	EFishingState__Hook                                                              = 15,
	EFishingState__FishCaught                                                        = 16,
	EFishingState__KeepFish                                                          = 17,
	EFishingState__DiscardFish                                                       = 18,
	EFishingState__WireBreak                                                         = 19
};

/// Enum /Script/ConZ.EFishingActionNotifyType
/// Size: 0x01 (1 bytes)
enum class EFishingActionNotifyType : uint8_t
{
	EFishingActionNotifyType__None                                                   = 0,
	EFishingActionNotifyType__EnterActive                                            = 1,
	EFishingActionNotifyType__LeaveActive                                            = 2,
	EFishingActionNotifyType__StartCastEnd                                           = 3,
	EFishingActionNotifyType__CastingThreshold                                       = 4,
	EFishingActionNotifyType__ShortRelease                                           = 5,
	EFishingActionNotifyType__Release                                                = 6,
	EFishingActionNotifyType__LongCastEnd                                            = 7,
	EFishingActionNotifyType__ShortCastEnd                                           = 8,
	EFishingActionNotifyType__FishingActionEnd                                       = 9,
	EFishingActionNotifyType__PullStartFinished                                      = 10,
	EFishingActionNotifyType__PullEndFinished                                        = 11,
	EFishingActionNotifyType__ShowCaughtFish                                         = 12,
	EFishingActionNotifyType__KeepFish                                               = 13,
	EFishingActionNotifyType__DiscardFish                                            = 14,
	EFishingActionNotifyType__WireBreakEnd                                           = 15
};

/// Enum /Script/ConZ.EFishSpecies
/// Size: 0x01 (1 bytes)
enum class EFishSpecies : uint8_t
{
	EFishSpecies__None                                                               = 0,
	EFishSpecies__Bass                                                               = 1,
	EFishSpecies__Catfish                                                            = 2,
	EFishSpecies__Pike                                                               = 3,
	EFishSpecies__Carp                                                               = 4,
	EFishSpecies__Amur                                                               = 5,
	EFishSpecies__Bleak                                                              = 6,
	EFishSpecies__Chub                                                               = 7,
	EFishSpecies__Ruffe                                                              = 8,
	EFishSpecies__PrussianCarp                                                       = 9,
	EFishSpecies__CrucianCarp                                                        = 10,
	EFishSpecies__Sardine                                                            = 11,
	EFishSpecies__Dentex                                                             = 12,
	EFishSpecies__Orata                                                              = 13,
	EFishSpecies__Tuna                                                               = 14,
	EFishSpecies__Count                                                              = 15
};

/// Enum /Script/ConZ.EWeaponMalfunctionEvent
/// Size: 0x01 (1 bytes)
enum class EWeaponMalfunctionEvent : uint8_t
{
	EWeaponMalfunctionEvent__RoundAdded                                              = 0,
	EWeaponMalfunctionEvent__ChamberOpened                                           = 1,
	EWeaponMalfunctionEvent__ChamberOpenedCasingEjected                              = 2,
	EWeaponMalfunctionEvent__ChamberOpenedRoundEjected                               = 3,
	EWeaponMalfunctionEvent__ChamberClosed                                           = 4,
	EWeaponMalfunctionEvent__ChamberClosedRoundLoaded                                = 5,
	EWeaponMalfunctionEvent__AttachmentAdded                                         = 6
};

/// Enum /Script/ConZ.EWeaponType
/// Size: 0x01 (1 bytes)
enum class EWeaponType : uint8_t
{
	EWeaponType__Rifle                                                               = 0,
	EWeaponType__Handgun                                                             = 1,
	EWeaponType__Bow                                                                 = 2,
	EWeaponType__Count                                                               = 3
};

/// Enum /Script/ConZ.EWeaponActionNotifyType
/// Size: 0x01 (1 bytes)
enum class EWeaponActionNotifyType : uint8_t
{
	EWeaponActionNotifyType__None                                                    = 0,
	EWeaponActionNotifyType__ChamberOpened                                           = 1,
	EWeaponActionNotifyType__ChamberClosed                                           = 2,
	EWeaponActionNotifyType__ChamberOpenedClosed                                     = 3,
	EWeaponActionNotifyType__BowInsertArrow                                          = 4,
	EWeaponActionNotifyType__BowRemoveArrow                                          = 5,
	EWeaponActionNotifyType__CompoundBowTuneDrawWeight                               = 6,
	EWeaponActionNotifyType__StaminaDrained                                          = 7,
	EWeaponActionNotifyType__DropMagazine                                            = 8,
	EWeaponActionNotifyType__ClearMalfunction                                        = 9,
	EWeaponActionNotifyType__ChamberOpenedSync                                       = 10,
	EWeaponActionNotifyType__ChamberClosedSync                                       = 11,
	EWeaponActionNotifyType__ChamberOpenedClosedSync                                 = 12,
	EWeaponActionNotifyType__ClearMalfunctionRoundNotLoaded                          = 13,
	EWeaponActionNotifyType__ShowEjectCasing                                         = 14,
	EWeaponActionNotifyType__ShowEjectLiveRound                                      = 15,
	EWeaponActionNotifyType__CrossbowCock                                            = 16,
	EWeaponActionNotifyType__Fire                                                    = 17,
	EWeaponActionNotifyType__SetupForReload                                          = 18,
	EWeaponActionNotifyType__DrumRolled                                              = 19,
	EWeaponActionNotifyType__Arm                                                     = 20,
	EWeaponActionNotifyType__Unarm                                                   = 21
};

/// Enum /Script/ConZ.EWeaponBehaviourMode
/// Size: 0x01 (1 bytes)
enum class EWeaponBehaviourMode : uint8_t
{
	EWeaponBehaviourMode__Default                                                    = 0,
	EWeaponBehaviourMode__Inspect                                                    = 1
};

/// Enum /Script/ConZ.EWeaponMuzzleEffectsSpawType
/// Size: 0x01 (1 bytes)
enum class EWeaponMuzzleEffectsSpawType : uint8_t
{
	EWeaponMuzzleEffectsSpawType__AttachedToBarrel                                   = 0,
	EWeaponMuzzleEffectsSpawType__AtLocation                                         = 1
};

/// Enum /Script/ConZ.EWeaponCategory
/// Size: 0x01 (1 bytes)
enum class EWeaponCategory : uint8_t
{
	EWeaponCategory__ThrowingWeapons                                                 = 0,
	EWeaponCategory__RangedWeapons                                                   = 1,
	EWeaponCategory__Handguns                                                        = 2,
	EWeaponCategory__SubmachineGuns                                                  = 3,
	EWeaponCategory__Rifles                                                          = 4,
	EWeaponCategory__Shotguns                                                        = 5,
	EWeaponCategory__AutomaticRifles                                                 = 6,
	EWeaponCategory__SniperRifles                                                    = 7,
	EWeaponCategory__Bow                                                             = 8,
	EWeaponCategory__Count                                                           = 9,
	EWeaponCategory__FirstFirearm                                                    = 2,
	EWeaponCategory__LastFirearm                                                     = 7
};

/// Enum /Script/ConZ.EWeaponFiringStateType
/// Size: 0x01 (1 bytes)
enum class EWeaponFiringStateType : uint8_t
{
	EWeaponFiringStateType__Automatic                                                = 0,
	EWeaponFiringStateType__SemiAutomatic                                            = 1,
	EWeaponFiringStateType__Manual                                                   = 2
};

/// Enum /Script/ConZ.EPrisonerHUDMode
/// Size: 0x01 (1 bytes)
enum class EPrisonerHUDMode : uint8_t
{
	EPrisonerHUDMode__Normal                                                         = 0,
	EPrisonerHUDMode__Target                                                         = 1,
	EPrisonerHUDMode__Map                                                            = 2,
	EPrisonerHUDMode__DroneNormal                                                    = 3,
	EPrisonerHUDMode__DroneMap                                                       = 4
};

/// Enum /Script/ConZ.EDoorManualOpenMethod
/// Size: 0x01 (1 bytes)
enum class EDoorManualOpenMethod : uint8_t
{
	EDoorManualOpenMethod__CircularLever                                             = 1,
	EDoorManualOpenMethod__Crowbar                                                   = 2,
	EDoorManualOpenMethod__HackingDayAndNight                                        = 4,
	EDoorManualOpenMethod__HackingDayOnly                                            = 8
};

/// Enum /Script/ConZ.EDoorOpenMethod
/// Size: 0x01 (1 bytes)
enum class EDoorOpenMethod : uint8_t
{
	EDoorOpenMethod__KeycardLocked                                                   = 0,
	EDoorOpenMethod__DialPadLocked                                                   = 1,
	EDoorOpenMethod__PoweredOnly                                                     = 2
};

/// Enum /Script/ConZ.EBunkerLightControlType
/// Size: 0x01 (1 bytes)
enum class EBunkerLightControlType : uint8_t
{
	EBunkerLightControlType__NotControlled                                           = 0,
	EBunkerLightControlType__Regular                                                 = 1,
	EBunkerLightControlType__Alarm                                                   = 2
};

/// Enum /Script/ConZ.ESwitchboardPowerState
/// Size: 0x01 (1 bytes)
enum class ESwitchboardPowerState : uint8_t
{
	ESwitchboardPowerState__Powered                                                  = 0,
	ESwitchboardPowerState__Blackout                                                 = 1
};

/// Enum /Script/ConZ.EAbandonedBunkerNoiseAccumulationLevel
/// Size: 0x01 (1 bytes)
enum class EAbandonedBunkerNoiseAccumulationLevel : uint8_t
{
	EAbandonedBunkerNoiseAccumulationLevel__None                                     = 0,
	EAbandonedBunkerNoiseAccumulationLevel__Commotion                                = 1,
	EAbandonedBunkerNoiseAccumulationLevel__EnemyActivation                          = 2,
	EAbandonedBunkerNoiseAccumulationLevel__Count                                    = 3
};

/// Enum /Script/ConZ.EItemLootTreeToExport
/// Size: 0x01 (1 bytes)
enum class EItemLootTreeToExport : uint8_t
{
	EItemLootTreeToExport__Default                                                   = 0,
	EItemLootTreeToExport__Current                                                   = 1
};

/// Enum /Script/ConZ.EItemSpawnLocationsSearchType
/// Size: 0x01 (1 bytes)
enum class EItemSpawnLocationsSearchType : uint8_t
{
	EItemSpawnLocationsSearchType__VehicleAttachments                                = 0,
	EItemSpawnLocationsSearchType__Pumpkins                                          = 1,
	EItemSpawnLocationsSearchType__Count                                             = 2
};

/// Enum /Script/ConZ.EListSpawnedVehiclesAdminCommandVehicleCategory
/// Size: 0x01 (1 bytes)
enum class EListSpawnedVehiclesAdminCommandVehicleCategory : uint8_t
{
	EListSpawnedVehiclesAdminCommandVehicleCategory__MotorizedVehicles               = 0,
	EListSpawnedVehiclesAdminCommandVehicleCategory__HumanPoweredVehicles            = 1,
	EListSpawnedVehiclesAdminCommandVehicleCategory__SUVs                            = 2,
	EListSpawnedVehiclesAdminCommandVehicleCategory__Quads                           = 3,
	EListSpawnedVehiclesAdminCommandVehicleCategory__Pickups                         = 4,
	EListSpawnedVehiclesAdminCommandVehicleCategory__Tractors                        = 5,
	EListSpawnedVehiclesAdminCommandVehicleCategory__Wheelbarrows                    = 6,
	EListSpawnedVehiclesAdminCommandVehicleCategory__Motorcycles                     = 7,
	EListSpawnedVehiclesAdminCommandVehicleCategory__Count                           = 8
};

/// Enum /Script/ConZ.EQuestsSubCommand
/// Size: 0x01 (1 bytes)
enum class EQuestsSubCommand : uint8_t
{
	EQuestsSubCommand__Reset                                                         = 0,
	EQuestsSubCommand__ForceEndCurrentCycle                                          = 1,
	EQuestsSubCommand__ClearUser                                                     = 2,
	EQuestsSubCommand__ToggleIgnoreLimits                                            = 3,
	EQuestsSubCommand__StartQuest                                                    = 4,
	EQuestsSubCommand__TimeoutTrackedQuest                                           = 5,
	EQuestsSubCommand__CompleteTrackedQuest                                          = 6,
	EQuestsSubCommand__SetTrackedQuestRemainingTime                                  = 7,
	EQuestsSubCommand__RefreshPoolsClient                                            = 8,
	EQuestsSubCommand__RefreshPoolsServer                                            = 9,
	EQuestsSubCommand__FillBooksWithAllQuests                                        = 10,
	EQuestsSubCommand__ListActiveFetchQuests                                         = 11,
	EQuestsSubCommand__UnlockAllTasks                                                = 12
};

/// Enum /Script/ConZ.EVehicleSpawnProperty
/// Size: 0x01 (1 bytes)
enum class EVehicleSpawnProperty : uint8_t
{
	EVehicleSpawnProperty__Location                                                  = 0,
	EVehicleSpawnProperty__Modifier                                                  = 1
};

/// Enum /Script/ConZ.EFlyingDestinationReachedStatus
/// Size: 0x01 (1 bytes)
enum class EFlyingDestinationReachedStatus : uint8_t
{
	EFlyingDestinationReachedStatus__None                                            = 0,
	EFlyingDestinationReachedStatus__Failure                                         = 1,
	EFlyingDestinationReachedStatus__Aborted                                         = 2,
	EFlyingDestinationReachedStatus__Success                                         = 3
};

/// Enum /Script/ConZ.EFlyingFindPathFailureResponse
/// Size: 0x01 (1 bytes)
enum class EFlyingFindPathFailureResponse : uint8_t
{
	EFlyingFindPathFailureResponse__None                                             = 0,
	EFlyingFindPathFailureResponse__RandomNewDestination                             = 1,
	EFlyingFindPathFailureResponse__ReturnToPrevious                                 = 2,
	EFlyingFindPathFailureResponse__ForceMovement                                    = 3
};

/// Enum /Script/ConZ.EAnimalSpecies
/// Size: 0x01 (1 bytes)
enum class EAnimalSpecies : uint8_t
{
	EAnimalSpecies__None                                                             = 0,
	EAnimalSpecies__Bear                                                             = 1,
	EAnimalSpecies__Bird                                                             = 2,
	EAnimalSpecies__Boar                                                             = 3,
	EAnimalSpecies__Chicken                                                          = 4,
	EAnimalSpecies__Cow                                                              = 5,
	EAnimalSpecies__Crow                                                             = 6,
	EAnimalSpecies__Deer                                                             = 7,
	EAnimalSpecies__Donkey                                                           = 8,
	EAnimalSpecies__Goat                                                             = 9,
	EAnimalSpecies__Horse                                                            = 10,
	EAnimalSpecies__Pig                                                              = 11,
	EAnimalSpecies__Rabbit                                                           = 12,
	EAnimalSpecies__Seagull                                                          = 13,
	EAnimalSpecies__Sheep                                                            = 14,
	EAnimalSpecies__Wolf                                                             = 15,
	EAnimalSpecies__Count                                                            = 16
};

/// Enum /Script/ConZ.EAnimalStance
/// Size: 0x01 (1 bytes)
enum class EAnimalStance : uint8_t
{
	EAnimalStance__Breathing                                                         = 0,
	EAnimalStance__Idle                                                              = 1,
	EAnimalStance__Agressive                                                         = 2,
	EAnimalStance__Alerted                                                           = 3
};

/// Enum /Script/ConZ.EAnimalActivityCycle
/// Size: 0x01 (1 bytes)
enum class EAnimalActivityCycle : uint8_t
{
	EAnimalActivityCycle__Diurnal                                                    = 0,
	EAnimalActivityCycle__Nocturnal                                                  = 1,
	EAnimalActivityCycle__Both                                                       = 2
};

/// Enum /Script/ConZ.EAnimal2Sound
/// Size: 0x01 (1 bytes)
enum class EAnimal2Sound : uint8_t
{
	EAnimal2Sound__None                                                              = 0,
	EAnimal2Sound__Idle                                                              = 1,
	EAnimal2Sound__Angry                                                             = 2,
	EAnimal2Sound__Attack                                                            = 3,
	EAnimal2Sound__TakeDamage                                                        = 4,
	EAnimal2Sound__Kill                                                              = 5,
	EAnimal2Sound__Scared                                                            = 6,
	EAnimal2Sound__Alerted                                                           = 7
};

/// Enum /Script/ConZ.EQuestBookMinigameNotifyType
/// Size: 0x01 (1 bytes)
enum class EQuestBookMinigameNotifyType : uint8_t
{
	EQuestBookMinigameNotifyType__BookOpened                                         = 0,
	EQuestBookMinigameNotifyType__PageFlippedForwards                                = 1,
	EQuestBookMinigameNotifyType__PageFlippedBackwards                               = 2,
	EQuestBookMinigameNotifyType__BookClosed                                         = 3
};

/// Enum /Script/ConZ.EDesiredParent
/// Size: 0x01 (1 bytes)
enum class EDesiredParent : uint8_t
{
	EDesiredParent__Hands                                                            = 0,
	EDesiredParent__EquipmentSlot                                                    = 1
};

/// Enum /Script/ConZ.EAnimNotifyStaminDrainType
/// Size: 0x01 (1 bytes)
enum class EAnimNotifyStaminDrainType : uint8_t
{
	EAnimNotifyStaminDrainType__OnBegin                                              = 0,
	EAnimNotifyStaminDrainType__Continous                                            = 1
};

/// Enum /Script/ConZ.AnimNotifyState_FadeForAction
/// Size: 0x01 (1 bytes)
enum class AnimNotifyState_FadeForAction : uint8_t
{
	AnimNotifyState_FadeForAction__All                                               = 0,
	AnimNotifyState_FadeForAction__InFirstPersonView                                 = 1,
	AnimNotifyState_FadeForAction__InThirdPersonView                                 = 2
};

/// Enum /Script/ConZ.EWaterZoneType
/// Size: 0x01 (1 bytes)
enum class EWaterZoneType : uint8_t
{
	EWaterZoneType__None                                                             = 0,
	EWaterZoneType__Shallow                                                          = 1,
	EWaterZoneType__Deep                                                             = 2,
	EWaterZoneType__Weeds                                                            = 3
};

/// Enum /Script/ConZ.EArmedNPCTurnRate
/// Size: 0x01 (1 bytes)
enum class EArmedNPCTurnRate : uint8_t
{
	EArmedNPCTurnRate__Slow                                                          = 0,
	EArmedNPCTurnRate__Fast                                                          = 1,
	EArmedNPCTurnRate__Count                                                         = 2
};

/// Enum /Script/ConZ.EArmedNPCCommonStates
/// Size: 0x01 (1 bytes)
enum class EArmedNPCCommonStates : uint8_t
{
	EArmedNPCCommonStates__None                                                      = 0,
	EArmedNPCCommonStates__Idle                                                      = 1,
	EArmedNPCCommonStates__Alerted                                                   = 2,
	EArmedNPCCommonStates__AlertedByDamage                                           = 3,
	EArmedNPCCommonStates__InvestigateLocation                                       = 4,
	EArmedNPCCommonStates__Combat                                                    = 5,
	EArmedNPCCommonStates__OpenDoor                                                  = 6,
	EArmedNPCCommonStates__HitReact                                                  = 7,
	EArmedNPCCommonStates__Count                                                     = 8
};

/// Enum /Script/ConZ.EArmedNPCAnimation
/// Size: 0x01 (1 bytes)
enum class EArmedNPCAnimation : uint8_t
{
	EArmedNPCAnimation__InvestigateArea                                              = 0,
	EArmedNPCAnimation__OpenDoors                                                    = 1,
	EArmedNPCAnimation__Count                                                        = 2
};

/// Enum /Script/ConZ.EArmedNPCVoiceLine
/// Size: 0x01 (1 bytes)
enum class EArmedNPCVoiceLine : uint8_t
{
	EArmedNPCVoiceLine__Idle                                                         = 0,
	EArmedNPCVoiceLine__HeardNoise                                                   = 1,
	EArmedNPCVoiceLine__HeardFootsteps                                               = 2,
	EArmedNPCVoiceLine__HeardGunshot                                                 = 3,
	EArmedNPCVoiceLine__NoticedPlayer                                                = 4,
	EArmedNPCVoiceLine__AggroedByPlayer                                              = 5,
	EArmedNPCVoiceLine__Count                                                        = 6
};

/// Enum /Script/ConZ.EArmedNPCPersonality
/// Size: 0x01 (1 bytes)
enum class EArmedNPCPersonality : uint8_t
{
	EArmedNPCPersonality__Hopeful                                                    = 0,
	EArmedNPCPersonality__Nervous                                                    = 1,
	EArmedNPCPersonality__Depressed                                                  = 2,
	EArmedNPCPersonality__Psychotic                                                  = 3,
	EArmedNPCPersonality__Quiet                                                      = 4,
	EArmedNPCPersonality__Tactical                                                   = 5,
	EArmedNPCPersonality__Responsible                                                = 6,
	EArmedNPCPersonality__Lazy                                                       = 7,
	EArmedNPCPersonality__Belligerent                                                = 8,
	EArmedNPCPersonality__Count                                                      = 9
};

/// Enum /Script/ConZ.ENPCMoveRequestResult
/// Size: 0x01 (1 bytes)
enum class ENPCMoveRequestResult : uint8_t
{
	RepeatedRequest                                                                  = 0,
	CurrentSegmentIsNavigationLink                                                   = 1,
	Failed                                                                           = 2,
	AlreadyAtGoal                                                                    = 3,
	RequestSuccessful                                                                = 4
};

/// Enum /Script/ConZ.EArmedNPCBaseStimulusTag
/// Size: 0x01 (1 bytes)
enum class EArmedNPCBaseStimulusTag : uint8_t
{
	EArmedNPCBaseStimulusTag__SoundGeneric                                           = 0,
	EArmedNPCBaseStimulusTag__SoundFootsteps                                         = 1,
	EArmedNPCBaseStimulusTag__SoundGunshot                                           = 2,
	EArmedNPCBaseStimulusTag__DamageMelee                                            = 3,
	EArmedNPCBaseStimulusTag__DamageProjectile                                       = 4,
	EArmedNPCBaseStimulusTag__Count                                                  = 5
};

/// Enum /Script/ConZ.EArmedNPCBaseAttackType
/// Size: 0x01 (1 bytes)
enum class EArmedNPCBaseAttackType : uint8_t
{
	EArmedNPCBaseAttackType__Front                                                   = 0,
	EArmedNPCBaseAttackType__Leg                                                     = 1,
	EArmedNPCBaseAttackType__Bash                                                    = 2,
	EArmedNPCBaseAttackType__Count                                                   = 3
};

/// Enum /Script/ConZ.EArmedNPCBaseMovementSpeed
/// Size: 0x01 (1 bytes)
enum class EArmedNPCBaseMovementSpeed : uint8_t
{
	EArmedNPCBaseMovementSpeed__Slow                                                 = 0,
	EArmedNPCBaseMovementSpeed__SlowAimingRifle                                      = 1,
	EArmedNPCBaseMovementSpeed__Medium                                               = 2,
	EArmedNPCBaseMovementSpeed__Fast                                                 = 3,
	EArmedNPCBaseMovementSpeed__Count                                                = 4
};

/// Enum /Script/ConZ.EArmedNPCBaseMovementPace
/// Size: 0x01 (1 bytes)
enum class EArmedNPCBaseMovementPace : uint8_t
{
	EArmedNPCBaseMovementPace__Slow                                                  = 0,
	EArmedNPCBaseMovementPace__Medium                                                = 1,
	EArmedNPCBaseMovementPace__Fast                                                  = 2,
	EArmedNPCBaseMovementPace__Count                                                 = 3
};

/// Enum /Script/ConZ.EWeaponManualBowState
/// Size: 0x01 (1 bytes)
enum class EWeaponManualBowState : uint8_t
{
	EWeaponManualBowState__Idle                                                      = 0,
	EWeaponManualBowState__Fire                                                      = 1,
	EWeaponManualBowState__Reload                                                    = 2
};

/// Enum /Script/ConZ.EWeaponManualCommonState
/// Size: 0x01 (1 bytes)
enum class EWeaponManualCommonState : uint8_t
{
	EWeaponManualCommonState__Idle                                                   = 0,
	EWeaponManualCommonState__Fire                                                   = 1,
	EWeaponManualCommonState__Reload                                                 = 2
};

/// Enum /Script/ConZ.EWeaponManualCrossbowState
/// Size: 0x01 (1 bytes)
enum class EWeaponManualCrossbowState : uint8_t
{
	EWeaponManualCrossbowState__Idle                                                 = 0,
	EWeaponManualCrossbowState__Fire                                                 = 1,
	EWeaponManualCrossbowState__Reload                                               = 2
};

/// Enum /Script/ConZ.EButtonEventType
/// Size: 0x01 (1 bytes)
enum class EButtonEventType : uint8_t
{
	EButtonEventType__None                                                           = 0,
	EButtonEventType__Hover                                                          = 1,
	EButtonEventType__ButtonPressed                                                  = 2,
	EButtonEventType__ButtonReleased                                                 = 3,
	EButtonEventType__ButtonAlerted                                                  = 4,
	EButtonEventType__Default                                                        = 0
};

/// Enum /Script/ConZ.EGridOccupancyFlag
/// Size: 0x01 (1 bytes)
enum class EGridOccupancyFlag : uint8_t
{
	EGridOccupancyFlag__None                                                         = 0,
	EGridOccupancyFlag__BB_FlagArea                                                  = 1,
	EGridOccupancyFlag__Water                                                        = 2,
	EGridOccupancyFlag__TEC1Facility                                                 = 4,
	EGridOccupancyFlag__CustomZone                                                   = 8,
	EGridOccupancyFlag__GameEvent                                                    = 16,
	EGridOccupancyFlag__Count                                                        = 17,
	EGridOccupancyFlag__DefaultForbiddenNoWater                                      = 29,
	EGridOccupancyFlag__DefaultForbidden                                             = 31,
	EGridOccupancyFlag__Default                                                      = 0
};

/// Enum /Script/ConZ.EBankCardType
/// Size: 0x01 (1 bytes)
enum class EBankCardType : uint8_t
{
	EBankCardType__None                                                              = 0,
	EBankCardType__Starter                                                           = 1,
	EBankCardType__Classic                                                           = 2,
	EBankCardType__Gold                                                              = 3,
	EBankCardType__Count                                                             = 4
};

/// Enum /Script/ConZ.ECurrencyType
/// Size: 0x01 (1 bytes)
enum class ECurrencyType : uint8_t
{
	ECurrencyType__None                                                              = 0,
	ECurrencyType__Normal                                                            = 1,
	ECurrencyType__Gold                                                              = 2,
	ECurrencyType__Count                                                             = 3
};

/// Enum /Script/ConZ.EBankMinigameInitiatorType
/// Size: 0x01 (1 bytes)
enum class EBankMinigameInitiatorType : uint8_t
{
	EBankMinigameInitiatorType__None                                                 = 0,
	EBankMinigameInitiatorType__ATM                                                  = 1,
	EBankMinigameInitiatorType__Banker                                               = 2,
	EBankMinigameInitiatorType__Defalut                                              = 1,
	EBankMinigameInitiatorType__Count                                                = 2
};

/// Enum /Script/ConZ.ECardManagementOperation
/// Size: 0x01 (1 bytes)
enum class ECardManagementOperation : uint8_t
{
	ECardManagementOperation__None                                                   = 0,
	ECardManagementOperation__Renewal                                                = 1,
	ECardManagementOperation__Cancellation                                           = 2
};

/// Enum /Script/ConZ.ECardRenewalDisabledReason
/// Size: 0x01 (1 bytes)
enum class ECardRenewalDisabledReason : uint8_t
{
	ECardRenewalDisabledReason__None                                                 = 0,
	ECardRenewalDisabledReason__AtATM                                                = 1,
	ECardRenewalDisabledReason__NoFreeRenewalsRemaining                              = 2
};

/// Enum /Script/ConZ.EPinEntryReason
/// Size: 0x01 (1 bytes)
enum class EPinEntryReason : uint8_t
{
	EPinEntryReason__None                                                            = 0,
	EPinEntryReason__CardCreation                                                    = 1,
	EPinEntryReason__CardUnlocking                                                   = 2
};

/// Enum /Script/ConZ.EBankATMCardUIType
/// Size: 0x01 (1 bytes)
enum class EBankATMCardUIType : uint8_t
{
	EBankATMCardUIType__None                                                         = 0,
	EBankATMCardUIType__Starter                                                      = 1,
	EBankATMCardUIType__Classic                                                      = 2,
	EBankATMCardUIType__Gold                                                         = 3
};

/// Enum /Script/ConZ.EBlowAirAnimHeight
/// Size: 0x01 (1 bytes)
enum class EBlowAirAnimHeight : uint8_t
{
	EBlowAirAnimHeight__Low                                                          = 0,
	EBlowAirAnimHeight__High                                                         = 1
};

/// Enum /Script/ConZ.EBoatSDFType
/// Size: 0x04 (4 bytes)
enum class EBoatSDFType : uint32_t
{
	EBoatSDFType__None                                                               = 0,
	EBoatSDFType__SM_MotorBoat_01                                                    = 1,
	EBoatSDFType__SM_MotorBoat_02                                                    = 2
};

/// Enum /Script/ConZ.EBoatPaddlingState
/// Size: 0x01 (1 bytes)
enum class EBoatPaddlingState : uint8_t
{
	EBoatPaddlingState__None                                                         = 0,
	EBoatPaddlingState__Left                                                         = 1,
	EBoatPaddlingState__Right                                                        = 2
};

/// Enum /Script/ConZ.EBoatSailsState
/// Size: 0x01 (1 bytes)
enum class EBoatSailsState : uint8_t
{
	EBoatSailsState__Folded                                                          = 0,
	EBoatSailsState__Deployed                                                        = 1,
	EBoatSailsState__Broken                                                          = 2
};

/// Enum /Script/ConZ.EBoatControlType
/// Size: 0x01 (1 bytes)
enum class EBoatControlType : uint8_t
{
	EBoatControlType__None                                                           = 0,
	EBoatControlType__MotorProppeled                                                 = 1,
	EBoatControlType__Rowing                                                         = 2,
	EBoatControlType__Paddling                                                       = 3,
	EBoatControlType__Sailing                                                        = 4
};

/// Enum /Script/ConZ.ESplineAxis
/// Size: 0x01 (1 bytes)
enum class ESplineAxis : uint8_t
{
	ESplineAxis__X                                                                   = 0,
	ESplineAxis__Y                                                                   = 1,
	ESplineAxis__Z                                                                   = 2
};

/// Enum /Script/ConZ.EWireType
/// Size: 0x01 (1 bytes)
enum class EWireType : uint8_t
{
	EWireType__Green                                                                 = 0,
	EWireType__Yellow                                                                = 1,
	EWireType__Red                                                                   = 2,
	EWireType__Count                                                                 = 3
};

/// Enum /Script/ConZ.EBoundBodyPart
/// Size: 0x01 (1 bytes)
enum class EBoundBodyPart : uint8_t
{
	EBoundBodyPart__Hands                                                            = 0,
	EBoundBodyPart__Feet                                                             = 1,
	EBoundBodyPart__HandsInitial                                                     = 2
};

/// Enum /Script/ConZ.EBrennerStimulusTag
/// Size: 0x01 (1 bytes)
enum class EBrennerStimulusTag : uint8_t
{
	EBrennerStimulusTag__Generic                                                     = 0,
	EBrennerStimulusTag__Alarm                                                       = 1,
	EBrennerStimulusTag__Target                                                      = 2,
	EBrennerStimulusTag__Count                                                       = 3
};

/// Enum /Script/ConZ.EBrennerAnimation
/// Size: 0x01 (1 bytes)
enum class EBrennerAnimation : uint8_t
{
	EBrennerAnimation__ExitHibernationChamber                                        = 0,
	EBrennerAnimation__InvestigateArea                                               = 1,
	EBrennerAnimation__OpenDoubleDoors                                               = 2,
	EBrennerAnimation__Rage                                                          = 3,
	EBrennerAnimation__Twitch                                                        = 4,
	EBrennerAnimation__Hop                                                           = 5,
	EBrennerAnimation__Count                                                         = 6
};

/// Enum /Script/ConZ.EBrennerAttackType
/// Size: 0x01 (1 bytes)
enum class EBrennerAttackType : uint8_t
{
	EBrennerAttackType__Front                                                        = 0,
	EBrennerAttackType__Back                                                         = 1,
	EBrennerAttackType__Leg                                                          = 2,
	EBrennerAttackType__AllAround                                                    = 3,
	EBrennerAttackType__Charge                                                       = 4,
	EBrennerAttackType__Flamethrower                                                 = 5,
	EBrennerAttackType__Count                                                        = 6
};

/// Enum /Script/ConZ.EBrennerMovementPace
/// Size: 0x01 (1 bytes)
enum class EBrennerMovementPace : uint8_t
{
	EBrennerMovementPace__Slow                                                       = 0,
	EBrennerMovementPace__Medium                                                     = 1,
	EBrennerMovementPace__Fast                                                       = 2,
	EBrennerMovementPace__Count                                                      = 3
};

/// Enum /Script/ConZ.EBrennerState
/// Size: 0x01 (1 bytes)
enum class EBrennerState : uint8_t
{
	EBrennerState__None                                                              = 0,
	EBrennerState__Hibernate                                                         = 1,
	EBrennerState__ExitChamber                                                       = 2,
	EBrennerState__Alerted                                                           = 3,
	EBrennerState__InvestigateArea                                                   = 4,
	EBrennerState__Combat                                                            = 5,
	EBrennerState__OpenDoor                                                          = 6,
	EBrennerState__ReturnToHibernation                                               = 7,
	EBrennerState__Rage                                                              = 8,
	EBrennerState__HitReact                                                          = 9,
	EBrennerState__Count                                                             = 10
};

/// Enum /Script/ConZ.EBruiseZone
/// Size: 0x01 (1 bytes)
enum class EBruiseZone : uint8_t
{
	EBruiseZone__Left                                                                = 0,
	EBruiseZone__Middle                                                              = 1,
	EBruiseZone__Right                                                               = 2,
	EBruiseZone__Count                                                               = 3
};

/// Enum /Script/ConZ.EBruiseLayer
/// Size: 0x01 (1 bytes)
enum class EBruiseLayer : uint8_t
{
	EBruiseLayer__Light                                                              = 0,
	EBruiseLayer__Medium                                                             = 1,
	EBruiseLayer__Hard                                                               = 2,
	EBruiseLayer__Count                                                              = 3
};

/// Enum /Script/ConZ.ERawByteStreamType
/// Size: 0x01 (1 bytes)
enum class ERawByteStreamType : uint8_t
{
	ERawByteStreamType__Generic                                                      = 0,
	ERawByteStreamType__AdminCommandSquadInfoDump                                    = 1,
	ERawByteStreamType__AdminCommandLootDump                                         = 2,
	ERawByteStreamType__AdminCommandItemSpawnLocationsDump                           = 3
};

/// Enum /Script/ConZ.ECardinalDirection
/// Size: 0x01 (1 bytes)
enum class ECardinalDirection : uint8_t
{
	ECardinalDirection__None                                                         = 0,
	ECardinalDirection__North                                                        = 1,
	ECardinalDirection__East                                                         = 2,
	ECardinalDirection__South                                                        = 3,
	ECardinalDirection__West                                                         = 4
};

/// Enum /Script/ConZ.EChainsawEngineState
/// Size: 0x01 (1 bytes)
enum class EChainsawEngineState : uint8_t
{
	EChainsawEngineState__TurnedOff                                                  = 0,
	EChainsawEngineState__TurnedOn                                                   = 1
};

/// Enum /Script/ConZ.EChainsawOwnerRelatedFunctionalityState
/// Size: 0x01 (1 bytes)
enum class EChainsawOwnerRelatedFunctionalityState : uint8_t
{
	EChainsawOwnerRelatedFunctionalityState__Default                                 = 0,
	EChainsawOwnerRelatedFunctionalityState__PlayingSound                            = 1,
	EChainsawOwnerRelatedFunctionalityState__PendingTurnOn                           = 2,
	EChainsawOwnerRelatedFunctionalityState__PendingTurnOff                          = 3
};

/// Enum /Script/ConZ.ERotateOnArrivalMode
/// Size: 0x01 (1 bytes)
enum class ERotateOnArrivalMode : uint8_t
{
	ERotateOnArrivalMode__DoNotRotate                                                = 0,
	ERotateOnArrivalMode__SetToGoalRotation                                          = 1,
	ERotateOnArrivalMode__RotateTowardsGoalLocation                                  = 2
};

/// Enum /Script/ConZ.ECharacterActionActivity
/// Size: 0x01 (1 bytes)
enum class ECharacterActionActivity : uint8_t
{
	ECharacterActionActivity__None                                                   = 0,
	ECharacterActionActivity__AimDownTheSights                                       = 1
};

/// Enum /Script/ConZ.ECharacterActionTerminatingEvent
/// Size: 0x01 (1 bytes)
enum class ECharacterActionTerminatingEvent : uint8_t
{
	ECharacterActionTerminatingEvent__Generic                                        = 0,
	ECharacterActionTerminatingEvent__InputKeyEsc                                    = 1,
	ECharacterActionTerminatingEvent__ToolUnavailable                                = 2,
	ECharacterActionTerminatingEvent__FirePressed                                    = 3,
	ECharacterActionTerminatingEvent__SwimmingStarted                                = 4
};

/// Enum /Script/ConZ.ECharacterActionNotifyType
/// Size: 0x01 (1 bytes)
enum class ECharacterActionNotifyType : uint8_t
{
	ECharacterActionNotifyType__None                                                 = 0,
	ECharacterActionNotifyType__AddMagazine                                          = 1,
	ECharacterActionNotifyType__RemoveMagazine                                       = 2,
	ECharacterActionNotifyType__InsertCartridge                                      = 3,
	ECharacterActionNotifyType__InsertCartridgeAtFront                               = 4,
	ECharacterActionNotifyType__SwapWeapons                                          = 5,
	ECharacterActionNotifyType__Chop                                                 = 6,
	ECharacterActionNotifyType__CommitSuicide                                        = 7,
	ECharacterActionNotifyType__IgniteFlare                                          = 8,
	ECharacterActionNotifyType__BuryBreach                                           = 9,
	ECharacterActionNotifyType__BuryDump                                             = 10,
	ECharacterActionNotifyType__ThrowFPReleased                                      = 11,
	ECharacterActionNotifyType__ThrowTPReleased                                      = 12,
	ECharacterActionNotifyType__ThrowFinished                                        = 13,
	ECharacterActionNotifyType__StopUsingHandCorrections                             = 14,
	ECharacterActionNotifyType__PinPulled                                            = 15,
	ECharacterActionNotifyType__CheckSpeedAndAngle                                   = 16,
	ECharacterActionNotifyType__Unmount                                              = 17,
	ECharacterActionNotifyType__ChangeWeaponFiringMode                               = 18,
	ECharacterActionNotifyType__OpenDoor                                             = 19,
	ECharacterActionNotifyType__CloseDoor                                            = 20,
	ECharacterActionNotifyType__RemoveAmmoFromWeapon                                 = 21,
	ECharacterActionNotifyType__CheckWeaponAmmo                                      = 22,
	ECharacterActionNotifyType__CheckWeaponFiringMode                                = 23,
	ECharacterActionNotifyType__ChainsawStartEngineLoop                              = 24,
	ECharacterActionNotifyType__ShowItemStatus                                       = 25,
	ECharacterActionNotifyType__SpawnParticles                                       = 26,
	ECharacterActionNotifyType__DestroyParticles                                     = 27,
	ECharacterActionNotifyType__StartFire                                            = 28,
	ECharacterActionNotifyType__Urinate                                              = 29,
	ECharacterActionNotifyType__ShowPenis                                            = 30,
	ECharacterActionNotifyType__HidePenis                                            = 31
};

/// Enum /Script/ConZ.ECharacterActionState
/// Size: 0x01 (1 bytes)
enum class ECharacterActionState : uint8_t
{
	ECharacterActionState__None                                                      = 0,
	ECharacterActionState__WaitingBeginOnServer                                      = 1,
	ECharacterActionState__Executing                                                 = 2,
	ECharacterActionState__Ended                                                     = 3
};

/// Enum /Script/ConZ.ECharacterActionFlags
/// Size: 0x01 (1 bytes)
enum class ECharacterActionFlags : uint8_t
{
	ECharacterActionFlags__None                                                      = 0,
	ECharacterActionFlags__ClientWaitBeginOnServer                                   = 1,
	ECharacterActionFlags__AllWaitEndOnOwningClient                                  = 2,
	ECharacterActionFlags__CanBeAborted                                              = 4
};

/// Enum /Script/ConZ.ECharacterActionConstraint
/// Size: 0x01 (1 bytes)
enum class ECharacterActionConstraint : uint8_t
{
	ECharacterActionConstraint__None                                                 = 0,
	ECharacterActionConstraint__Move                                                 = 1,
	ECharacterActionConstraint__Turn                                                 = 2,
	ECharacterActionConstraint__Stance                                               = 8,
	ECharacterActionConstraint__ProneInOut                                           = 16,
	ECharacterActionConstraint__Lean                                                 = 32,
	ECharacterActionConstraint__ControlVehicle                                       = 64
};

/// Enum /Script/ConZ.ECharacterLegsImpactSoundCategory
/// Size: 0x01 (1 bytes)
enum class ECharacterLegsImpactSoundCategory : uint8_t
{
	ECharacterLegsImpactSoundCategory__Any                                           = 0,
	ECharacterLegsImpactSoundCategory__Bare                                          = 1,
	ECharacterLegsImpactSoundCategory__Blocked                                       = 2,
	ECharacterLegsImpactSoundCategory__LightlyClothed                                = 3
};

/// Enum /Script/ConZ.ECharacterArmsImpactSoundCategory
/// Size: 0x01 (1 bytes)
enum class ECharacterArmsImpactSoundCategory : uint8_t
{
	ECharacterArmsImpactSoundCategory__Any                                           = 0,
	ECharacterArmsImpactSoundCategory__Bare                                          = 1,
	ECharacterArmsImpactSoundCategory__Blocked                                       = 2,
	ECharacterArmsImpactSoundCategory__LightlyClothed                                = 3
};

/// Enum /Script/ConZ.ECharacterTorsoImpactSoundCategory
/// Size: 0x01 (1 bytes)
enum class ECharacterTorsoImpactSoundCategory : uint8_t
{
	ECharacterTorsoImpactSoundCategory__Any                                          = 0,
	ECharacterTorsoImpactSoundCategory__Bare                                         = 1,
	ECharacterTorsoImpactSoundCategory__Blocked                                      = 2,
	ECharacterTorsoImpactSoundCategory__LightlyClothed                               = 3
};

/// Enum /Script/ConZ.ECharacterHeadImpactSoundCategory
/// Size: 0x01 (1 bytes)
enum class ECharacterHeadImpactSoundCategory : uint8_t
{
	ECharacterHeadImpactSoundCategory__Any                                           = 0,
	ECharacterHeadImpactSoundCategory__Bare                                          = 1,
	ECharacterHeadImpactSoundCategory__Blocked                                       = 2,
	ECharacterHeadImpactSoundCategory__Helmet                                        = 3
};

/// Enum /Script/ConZ.ECharacterPainSoundSeverity
/// Size: 0x01 (1 bytes)
enum class ECharacterPainSoundSeverity : uint8_t
{
	ECharacterPainSoundSeverity__Light                                               = 0,
	ECharacterPainSoundSeverity__Medium                                              = 1,
	ECharacterPainSoundSeverity__Heavy                                               = 2,
	ECharacterPainSoundSeverity__Stun                                                = 3,
	ECharacterPainSoundSeverity__Knockout                                            = 4,
	ECharacterPainSoundSeverity__Death                                               = 5
};

/// Enum /Script/ConZ.EEncounterAllowedGroupSpawnPointTypeFlag
/// Size: 0x01 (1 bytes)
enum class EEncounterAllowedGroupSpawnPointTypeFlag : uint8_t
{
	EEncounterAllowedGroupSpawnPointTypeFlag__None                                   = 0,
	EEncounterAllowedGroupSpawnPointTypeFlag__ArmedNPC                               = 1
};

/// Enum /Script/ConZ.ESpawnType
/// Size: 0x01 (1 bytes)
enum class ESpawnType : uint8_t
{
	ESpawnType__None                                                                 = 0,
	ESpawnType__Exterior                                                             = 1,
	ESpawnType__Interior                                                             = 2
};

/// Enum /Script/ConZ.ECharacterStatsOrderByField
/// Size: 0x01 (1 bytes)
enum class ECharacterStatsOrderByField : uint8_t
{
	ECharacterStatsOrderByField__FamePoints                                          = 0,
	ECharacterStatsOrderByField__EventScore                                          = 1,
	ECharacterStatsOrderByField__EventKills                                          = 2,
	ECharacterStatsOrderByField__EventDeaths                                         = 3
};

/// Enum /Script/ConZ.ESpamSeverity
/// Size: 0x01 (1 bytes)
enum class ESpamSeverity : uint8_t
{
	ESpamSeverity__None                                                              = 0,
	ESpamSeverity__Mild                                                              = 1,
	ESpamSeverity__Medium                                                            = 2,
	ESpamSeverity__Severe                                                            = 3,
	ESpamSeverity__Extreme                                                           = 4,
	ESpamSeverity__Max                                                               = 4
};

/// Enum /Script/ConZ.EChatType
/// Size: 0x01 (1 bytes)
enum class EChatType : uint8_t
{
	EChatType__Default                                                               = 0,
	EChatType__Local                                                                 = 1,
	EChatType__Global                                                                = 2,
	EChatType__Squad                                                                 = 3,
	EChatType__Admin                                                                 = 4,
	EChatType__CommandsOnly                                                          = 5,
	EChatType__ServerMessage                                                         = 6,
	EChatType__Error                                                                 = 7
};

/// Enum /Script/ConZ.EMusicPlayerCommandType
/// Size: 0x01 (1 bytes)
enum class EMusicPlayerCommandType : uint8_t
{
	EMusicPlayerCommandType__TurnOnOff                                               = 0,
	EMusicPlayerCommandType__PlayPause                                               = 1,
	EMusicPlayerCommandType__RadioMusicPlayer                                        = 2
};

/// Enum /Script/ConZ.EInteractionTargetType
/// Size: 0x01 (1 bytes)
enum class EInteractionTargetType : uint8_t
{
	EInteractionTargetType__Self                                                     = 0,
	EInteractionTargetType__HoveredInteractable                                      = 1,
	EInteractionTargetType__Specified                                                = 2
};

/// Enum /Script/ConZ.EClothesDamageVisualState
/// Size: 0x01 (1 bytes)
enum class EClothesDamageVisualState : uint8_t
{
	EClothesDamageVisualState__None                                                  = 0,
	EClothesDamageVisualState__SmallDamage                                           = 1,
	EClothesDamageVisualState__BigDamage                                             = 2,
	EClothesDamageVisualState__SmallPatches                                          = 4,
	EClothesDamageVisualState__BigPatches                                            = 8
};

/// Enum /Script/ConZ.ECollisionDamageType
/// Size: 0x01 (1 bytes)
enum class ECollisionDamageType : uint8_t
{
	ECollisionDamageType__Undefined                                                  = 0,
	ECollisionDamageType__PhysicalCollision                                          = 1,
	ECollisionDamageType__Melee                                                      = 2,
	ECollisionDamageType__Projectile                                                 = 3,
	ECollisionDamageType__Throw                                                      = 4
};

/// Enum /Script/ConZ.ECompassType
/// Size: 0x01 (1 bytes)
enum class ECompassType : uint8_t
{
	ECompassType__None                                                               = 0,
	ECompassType__NorthOnly                                                          = 1,
	ECompassType__CardinalOnly                                                       = 2,
	ECompassType__CardinalAndIntercardinal                                           = 3,
	ECompassType__Everything                                                         = 4,
	ECompassType__Count                                                              = 5
};

/// Enum /Script/ConZ.EAnimalMovementPace
/// Size: 0x01 (1 bytes)
enum class EAnimalMovementPace : uint8_t
{
	EAnimalMovementPace__Sneak                                                       = 0,
	EAnimalMovementPace__Walk                                                        = 1,
	EAnimalMovementPace__Trot                                                        = 2,
	EAnimalMovementPace__Run                                                         = 3
};

/// Enum /Script/ConZ.EAnimalAgressivness
/// Size: 0x01 (1 bytes)
enum class EAnimalAgressivness : uint8_t
{
	EAnimalAgressivness__Timid                                                       = 0,
	EAnimalAgressivness__Moderate                                                    = 1,
	EAnimalAgressivness__Agressive                                                   = 2
};

/// Enum /Script/ConZ.EAnimalMode
/// Size: 0x01 (1 bytes)
enum class EAnimalMode : uint8_t
{
	EAnimalMode__None                                                                = 0,
	EAnimalMode__Roam                                                                = 1,
	EAnimalMode__Alert                                                               = 2,
	EAnimalMode__Observe                                                             = 3,
	EAnimalMode__TrotAway                                                            = 4,
	EAnimalMode__Aggro                                                               = 5,
	EAnimalMode__Flee                                                                = 6
};

/// Enum /Script/ConZ.EBaseBuildingDebugMode
/// Size: 0x01 (1 bytes)
enum class EBaseBuildingDebugMode : uint8_t
{
	EBaseBuildingDebugMode__None                                                     = 0,
	EBaseBuildingDebugMode__Basic                                                    = 1,
	EBaseBuildingDebugMode__RadialDamage                                             = 2,
	EBaseBuildingDebugMode__InteractionZones                                         = 3,
	EBaseBuildingDebugMode__BaseBounds                                               = 4
};

/// Enum /Script/ConZ.EConZBaseErrorMessage
/// Size: 0x01 (1 bytes)
enum class EConZBaseErrorMessage : uint8_t
{
	EConZBaseErrorMessage__None                                                      = 0,
	EConZBaseErrorMessage__CantPlaceAreaRestricted                                   = 1,
	EConZBaseErrorMessage__CantPlaceDuplicateFlag                                    = 2,
	EConZBaseErrorMessage__CantPlaceEnemyFlag                                        = 3,
	EConZBaseErrorMessage__CantPlaceMustBeOnFoundation                               = 4,
	EConZBaseErrorMessage__CantPlaceOnOtherElements                                  = 5,
	EConZBaseErrorMessage__CantPlaceNoBase                                           = 6,
	EConZBaseErrorMessage__CantPlaceNoFlag                                           = 7,
	EConZBaseErrorMessage__CantPlaceMaxInstances                                     = 8,
	EConZBaseErrorMessage__CantPlaceNotSquadLeaderToPlaceFlag                        = 9
};

/// Enum /Script/ConZ.EConZBaseEventType
/// Size: 0x01 (1 bytes)
enum class EConZBaseEventType : uint8_t
{
	EConZBaseEventType__None                                                         = 0,
	EConZBaseEventType__ElementConstructed                                           = 1,
	EConZBaseEventType__ElementRepaired                                              = 2
};

/// Enum /Script/ConZ.EConZPlacementHeightType
/// Size: 0x01 (1 bytes)
enum class EConZPlacementHeightType : uint8_t
{
	EConZPlacementHeightType__LowestPointHeight                                      = 0,
	EConZPlacementHeightType__HighestPointHeight                                     = 1,
	EConZPlacementHeightType__AveragePointHeight                                     = 2
};

/// Enum /Script/ConZ.FConZBaseFlagType
/// Size: 0x01 (1 bytes)
enum class FConZBaseFlagType : uint8_t
{
	FConZBaseFlagType__None                                                          = 0,
	FConZBaseFlagType__Friendly                                                      = 1,
	FConZBaseFlagType__Enemy                                                         = 2
};

/// Enum /Script/ConZ.EDestroyElementReason
/// Size: 0x01 (1 bytes)
enum class EDestroyElementReason : uint8_t
{
	EDestroyElementReason__None                                                      = 0,
	EDestroyElementReason__User                                                      = 1,
	EDestroyElementReason__Upgrade                                                   = 2,
	EDestroyElementReason__Internal                                                  = 3,
	EDestroyElementReason__Damage                                                    = 4,
	EDestroyElementReason__Decay                                                     = 5,
	EDestroyElementReason__MovedOutOfFlagArea                                        = 6
};

/// Enum /Script/ConZ.ECreateElementReason
/// Size: 0x01 (1 bytes)
enum class ECreateElementReason : uint8_t
{
	ECreateElementReason__Default                                                    = 0,
	ECreateElementReason__Load                                                       = 1
};

/// Enum /Script/ConZ.ESnapMarkerOverrideType
/// Size: 0x01 (1 bytes)
enum class ESnapMarkerOverrideType : uint8_t
{
	ESnapMarkerOverrideType__LeaveAll                                                = 0,
	ESnapMarkerOverrideType__LeaveAllButSpecified                                    = 1,
	ESnapMarkerOverrideType__RemoveAll                                               = 2,
	ESnapMarkerOverrideType__RemoveAllButSpecified                                   = 3
};

/// Enum /Script/ConZ.EElementSnapMarkerSocketType
/// Size: 0x02 (2 bytes)
enum class EElementSnapMarkerSocketType : uint16_t
{
	EElementSnapMarkerSocketType__None                                               = 0,
	EElementSnapMarkerSocketType__Horizontal                                         = 1,
	EElementSnapMarkerSocketType__VerticalTop                                        = 2,
	EElementSnapMarkerSocketType__VerticalBottom                                     = 4,
	EElementSnapMarkerSocketType__TowerLevel1                                        = 8,
	EElementSnapMarkerSocketType__TowerLevel2                                        = 16,
	EElementSnapMarkerSocketType__Door                                               = 32,
	EElementSnapMarkerSocketType__WallSocket                                         = 64,
	EElementSnapMarkerSocketType__CeilingSocket                                      = 128,
	EElementSnapMarkerSocketType__Stairs                                             = 256,
	EElementSnapMarkerSocketType__WallPlatform                                       = 512,
	EElementSnapMarkerSocketType__BedTop                                             = 1024,
	EElementSnapMarkerSocketType__HorizontalLeft                                     = 2048,
	EElementSnapMarkerSocketType__HorizontalRight                                    = 4096,
	EElementSnapMarkerSocketType__EmptySocket13                                      = 8192,
	EElementSnapMarkerSocketType__EmptySocket14                                      = 16384,
	EElementSnapMarkerSocketType__EmptySocket15                                      = 32768
};

/// Enum /Script/ConZ.EBaseElementType
/// Size: 0x04 (4 bytes)
enum class EBaseElementType : uint32_t
{
	EBaseElementType__None                                                           = 0,
	EBaseElementType__Default                                                        = 1,
	EBaseElementType__WoodenPalisade                                                 = 2,
	EBaseElementType__SandBox                                                        = 4,
	EBaseElementType__Door                                                           = 8,
	EBaseElementType__Well                                                           = 16,
	EBaseElementType__Platform                                                       = 32,
	EBaseElementType__Watchtower                                                     = 64,
	EBaseElementType__GunRack                                                        = 128,
	EBaseElementType__Foundation                                                     = 256,
	EBaseElementType__Flag                                                           = 512,
	EBaseElementType__WallOrnament                                                   = 1024,
	EBaseElementType__CeilingOrnament                                                = 2048,
	EBaseElementType__Cabin                                                          = 4096,
	EBaseElementType__Stairs                                                         = 8192,
	EBaseElementType__NewWalls                                                       = 16384,
	EBaseElementType__WallGunRack                                                    = 32768,
	EBaseElementType__Modular                                                        = 65536,
	EBaseElementType__ModularFoundation                                              = 65792,
	EBaseElementType__All                                                            = 1048575
};

/// Enum /Script/ConZ.EBaseElementPaintingMode
/// Size: 0x01 (1 bytes)
enum class EBaseElementPaintingMode : uint8_t
{
	EBaseElementPaintingMode__None                                                   = 0,
	EBaseElementPaintingMode__SingleColor                                            = 1,
	EBaseElementPaintingMode__DoubleSide                                             = 2
};

/// Enum /Script/ConZ.EBoatSailsState_Deprecated
/// Size: 0x01 (1 bytes)
enum class EBoatSailsState_Deprecated : uint8_t
{
	EBoatSailsState_Deprecated__Folded                                               = 0,
	EBoatSailsState_Deprecated__Deployed                                             = 1,
	EBoatSailsState_Deprecated__Broken                                               = 2
};

/// Enum /Script/ConZ.EBoatMountControlType_Deprecated
/// Size: 0x01 (1 bytes)
enum class EBoatMountControlType_Deprecated : uint8_t
{
	EBoatMountControlType_Deprecated__MotorProppeled                                 = 0,
	EBoatMountControlType_Deprecated__Rowing                                         = 1,
	EBoatMountControlType_Deprecated__Paddling                                       = 2,
	EBoatMountControlType_Deprecated__Sailing                                        = 3
};

/// Enum /Script/ConZ.EBorderSizes
/// Size: 0x01 (1 bytes)
enum class EBorderSizes : uint8_t
{
	EBorderSizes__OneByOne                                                           = 0,
	EBorderSizes__TwoByTwo                                                           = 1,
	EBorderSizes__FourByFour                                                         = 2
};

/// Enum /Script/ConZ.ECharacterHostileState
/// Size: 0x01 (1 bytes)
enum class ECharacterHostileState : uint8_t
{
	ECharacterHostileState__None                                                     = 0,
	ECharacterHostileState__Idle                                                     = 1,
	ECharacterHostileState__AlertedWithoutLineOfSight                                = 2,
	ECharacterHostileState__AlertedWithLineOfSight                                   = 3
};

/// Enum /Script/ConZ.EMultiplayerDisabledReason
/// Size: 0x01 (1 bytes)
enum class EMultiplayerDisabledReason : uint8_t
{
	EMultiplayerDisabledReason__None                                                 = 0,
	EMultiplayerDisabledReason__FileIntegrityCompromised                             = 1,
	EMultiplayerDisabledReason__DllIntegrityCompromised                              = 2
};

/// Enum /Script/ConZ.EMapSpawnCellFlags
/// Size: 0x04 (4 bytes)
enum class EMapSpawnCellFlags : uint32_t
{
	EMapSpawnCellFlags__None                                                         = 0,
	EMapSpawnCellFlags__PlayerSpawn                                                  = 2,
	EMapSpawnCellFlags__CargoSpawn                                                   = 4,
	EMapSpawnCellFlags__TournamentSpawn                                              = 8,
	EMapSpawnCellFlags__IsSnowRegion                                                 = 1024,
	EMapSpawnCellFlags__IsExtraExcludeForNewPlayers                                  = 2048,
	EMapSpawnCellFlags__IsExtraExcludeForCargosNearPOIs                              = 4096,
	EMapSpawnCellFlags__OccupiedByPlayer                                             = 1048576,
	EMapSpawnCellFlags__OccupiedByNewPlayer                                          = 2097152,
	EMapSpawnCellFlags__OccupiedByBB                                                 = 4194304,
	EMapSpawnCellFlags__OccupiedByEvent                                              = 8388608
};

/// Enum /Script/ConZ.EPlayPreparationsState
/// Size: 0x01 (1 bytes)
enum class EPlayPreparationsState : uint8_t
{
	EPlayPreparationsState__StreamingCheck                                           = 0,
	EPlayPreparationsState__AuthSend                                                 = 1,
	EPlayPreparationsState__AuthReceive                                              = 2,
	EPlayPreparationsState__InitialSyncSend                                          = 3,
	EPlayPreparationsState__InitialSyncReceive                                       = 4,
	EPlayPreparationsState__ProcessInitialSync                                       = 5,
	EPlayPreparationsState__SucceededSyncSend                                        = 6,
	EPlayPreparationsState__SucceededSyncReceive                                     = 7,
	EPlayPreparationsState__Succeeded                                                = 8,
	EPlayPreparationsState__Failed                                                   = 9
};

/// Enum /Script/ConZ.EGameplayLogCategory
/// Size: 0x01 (1 bytes)
enum class EGameplayLogCategory : uint8_t
{
	EGameplayLogCategory__None                                                       = 0,
	EGameplayLogCategory__LogMinigame                                                = 1,
	EGameplayLogCategory__LogTrap                                                    = 2,
	EGameplayLogCategory__LogBaseBuilding                                            = 3,
	EGameplayLogCategory__LogExplosives                                              = 4,
	EGameplayLogCategory__LogBCU                                                     = 5,
	EGameplayLogCategory__LogBunkerLock                                              = 6,
	EGameplayLogCategory__LogChest                                                   = 7,
	EGameplayLogCategory__LogQuest                                                   = 8
};

/// Enum /Script/ConZ.ECharacterModificationType
/// Size: 0x01 (1 bytes)
enum class ECharacterModificationType : uint8_t
{
	ECharacterModificationType__None                                                 = 0,
	ECharacterModificationType__PlasticSurgery                                       = 1,
	ECharacterModificationType__Haircut                                              = 2
};

/// Enum /Script/ConZ.EConZSquadMemberRank
/// Size: 0x01 (1 bytes)
enum class EConZSquadMemberRank : uint8_t
{
	EConZSquadMemberRank__None                                                       = 0,
	EConZSquadMemberRank__Member                                                     = 1,
	EConZSquadMemberRank__Enforcer                                                   = 2,
	EConZSquadMemberRank__Underboss                                                  = 3,
	EConZSquadMemberRank__Boss                                                       = 4
};

/// Enum /Script/ConZ.EConZWaterSplineType
/// Size: 0x01 (1 bytes)
enum class EConZWaterSplineType : uint8_t
{
	EConZWaterSplineType__None                                                       = 0,
	EConZWaterSplineType__River                                                      = 1,
	EConZWaterSplineType__Lake                                                       = 2,
	EConZWaterSplineType__Ocean                                                      = 3,
	EConZWaterSplineType__Island                                                     = 4
};

/// Enum /Script/ConZ.EConZDeveloperIdFlag
/// Size: 0x01 (1 bytes)
enum class EConZDeveloperIdFlag : uint8_t
{
	EConZDeveloperIdFlag__None                                                       = 0,
	EConZDeveloperIdFlag__ActiveDuringTesting                                        = 1
};

/// Enum /Script/ConZ.EBiomeType
/// Size: 0x04 (4 bytes)
enum class EBiomeType : uint32_t
{
	EBiomeType__None                                                                 = 0,
	EBiomeType__Cold                                                                 = 1,
	EBiomeType__Forest                                                               = 2,
	EBiomeType__South                                                                = 3,
	EBiomeType__Count                                                                = 4
};

/// Enum /Script/ConZ.ECookingControlButtonVisual
/// Size: 0x01 (1 bytes)
enum class ECookingControlButtonVisual : uint8_t
{
	ECookingControlButtonVisual__Disabled                                            = 0,
	ECookingControlButtonVisual__Normal                                              = 1,
	ECookingControlButtonVisual__Hovered                                             = 2,
	ECookingControlButtonVisual__Clicked                                             = 3
};

/// Enum /Script/ConZ.ECookingControlButtonState
/// Size: 0x01 (1 bytes)
enum class ECookingControlButtonState : uint8_t
{
	ECookingControlButtonState__RemoveRecipe                                         = 0,
	ECookingControlButtonState__RemoveRecipeUnavailable                              = 1,
	ECookingControlButtonState__Cook                                                 = 2,
	ECookingControlButtonState__CookCancel                                           = 3,
	ECookingControlButtonState__CookUnavailable                                      = 4,
	ECookingControlButtonState__Timer                                                = 5,
	ECookingControlButtonState__Throbber                                             = 6
};

/// Enum /Script/ConZ.ECookingDialDetailLevel
/// Size: 0x01 (1 bytes)
enum class ECookingDialDetailLevel : uint8_t
{
	ECookingDialDetailLevel__NoSkill                                                 = 0,
	ECookingDialDetailLevel__Basic                                                   = 1,
	ECookingDialDetailLevel__Medium                                                  = 2,
	ECookingDialDetailLevel__Advanced                                                = 3,
	ECookingDialDetailLevel__AdvancedPlus                                            = 3
};

/// Enum /Script/ConZ.ECookingIngredientQuantityType
/// Size: 0x01 (1 bytes)
enum class ECookingIngredientQuantityType : uint8_t
{
	ECookingIngredientQuantityType__Solid                                            = 0,
	ECookingIngredientQuantityType__Liquid                                           = 1
};

/// Enum /Script/ConZ.ECookingTemperatureControlType
/// Size: 0x01 (1 bytes)
enum class ECookingTemperatureControlType : uint8_t
{
	ECookingTemperatureControlType__Linear                                           = 0,
	ECookingTemperatureControlType__Radial                                           = 1,
	ECookingTemperatureControlType__NotAvailable                                     = 2
};

/// Enum /Script/ConZ.ECookingIngredientNecessity
/// Size: 0x01 (1 bytes)
enum class ECookingIngredientNecessity : uint8_t
{
	ECookingIngredientNecessity__None                                                = 0,
	ECookingIngredientNecessity__Main                                                = 1,
	ECookingIngredientNecessity__Optional                                            = 2
};

/// Enum /Script/ConZ.EFoodCookLevel
/// Size: 0x01 (1 bytes)
enum class EFoodCookLevel : uint8_t
{
	EFoodCookLevel__Raw                                                              = 0,
	EFoodCookLevel__Undercooked                                                      = 1,
	EFoodCookLevel__Cooked                                                           = 2,
	EFoodCookLevel__Overcooked                                                       = 3,
	EFoodCookLevel__Burned                                                           = 4
};

/// Enum /Script/ConZ.EFoodCookQuality
/// Size: 0x01 (1 bytes)
enum class EFoodCookQuality : uint8_t
{
	EFoodCookQuality__Ruined                                                         = 0,
	EFoodCookQuality__Bad                                                            = 1,
	EFoodCookQuality__Poor                                                           = 2,
	EFoodCookQuality__Good                                                           = 3,
	EFoodCookQuality__Excellent                                                      = 4,
	EFoodCookQuality__Perfect                                                        = 5
};

/// Enum /Script/ConZ.ECookingRecipesSort
/// Size: 0x01 (1 bytes)
enum class ECookingRecipesSort : uint8_t
{
	ECookingRecipesSort__Default                                                     = 0,
	ECookingRecipesSort__AlphabeticalAscending                                       = 1,
	ECookingRecipesSort__AlphabeticalDescending                                      = 2
};

/// Enum /Script/ConZ.ECookingUtilityOverviewPage
/// Size: 0x01 (1 bytes)
enum class ECookingUtilityOverviewPage : uint8_t
{
	ECookingUtilityOverviewPage__AddRecipe                                           = 0,
	ECookingUtilityOverviewPage__IngredientsForRecipe                                = 1,
	ECookingUtilityOverviewPage__CookingProgress                                     = 2,
	ECookingUtilityOverviewPage__CookingFinished                                     = 3,
	ECookingUtilityOverviewPage__None                                                = 4
};

/// Enum /Script/ConZ.EOptionalState
/// Size: 0x01 (1 bytes)
enum class EOptionalState : uint8_t
{
	EOptionalState__None                                                             = 0,
	EOptionalState__Add                                                              = 1,
	EOptionalState__Remove                                                           = 2
};

/// Enum /Script/ConZ.ECraftingIngredientMixingType
/// Size: 0x01 (1 bytes)
enum class ECraftingIngredientMixingType : uint8_t
{
	ECraftingIngredientMixingType__NoMixing                                          = 0,
	ECraftingIngredientMixingType__LimitToClass                                      = 1,
	ECraftingIngredientMixingType__LimitToType                                       = 2,
	ECraftingIngredientMixingType__Unlimited                                         = 3
};

/// Enum /Script/ConZ.ECraftingIngredientPurpose
/// Size: 0x01 (1 bytes)
enum class ECraftingIngredientPurpose : uint8_t
{
	ECraftingIngredientPurpose__Material                                             = 0,
	ECraftingIngredientPurpose__Tool                                                 = 1
};

/// Enum /Script/ConZ.ECustomZoneEvent
/// Size: 0x01 (1 bytes)
enum class ECustomZoneEvent : uint8_t
{
	ECustomZoneEvent__FallDamage                                                     = 0,
	ECustomZoneEvent__PuppetDamage                                                   = 1,
	ECustomZoneEvent__SuicidePuppetDamage                                            = 2,
	ECustomZoneEvent__SentryDamage                                                   = 3,
	ECustomZoneEvent__AnimalDamage                                                   = 4,
	ECustomZoneEvent__BaseDefenseDamage                                              = 5,
	ECustomZoneEvent__VehicleDamage                                                  = 6,
	ECustomZoneEvent__BoxingDamage                                                   = 7,
	ECustomZoneEvent__MeleeWeaponDamage                                              = 8,
	ECustomZoneEvent__ThrowingDamage                                                 = 9,
	ECustomZoneEvent__ProjectileDamage                                               = 10,
	ECustomZoneEvent__ExplosiveDamage                                                = 11,
	ECustomZoneEvent__TrapDamage                                                     = 12,
	ECustomZoneEvent__BurnDamage                                                     = 13,
	ECustomZoneEvent__DamageToBases                                                  = 14,
	ECustomZoneEvent__DamageToVehicles                                               = 15,
	ECustomZoneEvent__DisablingDamage                                                = 16,
	ECustomZoneEvent__PlayerLockpicking                                              = 17,
	ECustomZoneEvent__WorldLockpicking                                               = 18,
	ECustomZoneEvent__BaseBuilding                                                   = 19,
	ECustomZoneEvent__FlagOvertake                                                   = 20,
	ECustomZoneEvent__VehicleParking                                                 = 21,
	ECustomZoneEvent__AvailabilityGrid                                               = 22,
	ECustomZoneEvent__ChestParking                                                   = 23,
	ECustomZoneEvent__DropshipEncounterSpawning                                      = 24,
	ECustomZoneEvent__AutoCloseVehicleDoorsOnExit                                    = 25,
	ECustomZoneEvent__Count                                                          = 26,
	ECustomZoneEvent__EDamageChannel_FirstOverlap                                    = 0,
	ECustomZoneEvent__EDamageChannel_LastOverlap                                     = 16
};

/// Enum /Script/ConZ.EDefaultCustomZoneState
/// Size: 0x01 (1 bytes)
enum class EDefaultCustomZoneState : uint8_t
{
	EDefaultCustomZoneState__NotDefault                                              = 0,
	EDefaultCustomZoneState__Unmodified                                              = 1,
	EDefaultCustomZoneState__Modified                                                = 2,
	EDefaultCustomZoneState__Deleted                                                 = 3
};

/// Enum /Script/ConZ.ECustomZoneShape
/// Size: 0x01 (1 bytes)
enum class ECustomZoneShape : uint8_t
{
	ECustomZoneShape__Circle                                                         = 0,
	ECustomZoneShape__Rectangle                                                      = 1,
	ECustomZoneShape__Count                                                          = 2
};

/// Enum /Script/ConZ.ECustomZoneEventHandlingMethod
/// Size: 0x01 (1 bytes)
enum class ECustomZoneEventHandlingMethod : uint8_t
{
	ECustomZoneEventHandlingMethod__Ignore                                           = 0,
	ECustomZoneEventHandlingMethod__Allow                                            = 1,
	ECustomZoneEventHandlingMethod__Block                                            = 2,
	ECustomZoneEventHandlingMethod__Count                                            = 3
};

/// Enum /Script/ConZ.ECustomZoneSettingsMapMode
/// Size: 0x01 (1 bytes)
enum class ECustomZoneSettingsMapMode : uint8_t
{
	ECustomZoneSettingsMapMode__None                                                 = 0,
	ECustomZoneSettingsMapMode__AddCircleRegion                                      = 1,
	ECustomZoneSettingsMapMode__AddRectangleRegion                                   = 2,
	ECustomZoneSettingsMapMode__RemoveRegion                                         = 3
};

/// Enum /Script/ConZ.EDamageTargetType
/// Size: 0x01 (1 bytes)
enum class EDamageTargetType : uint8_t
{
	EDamageTargetType__Player                                                        = 0,
	EDamageTargetType__Animal                                                        = 1,
	EDamageTargetType__Puppet                                                        = 2,
	EDamageTargetType__Vehicle                                                       = 3,
	EDamageTargetType__BaseBuilding                                                  = 4,
	EDamageTargetType__Sentry                                                        = 5,
	EDamageTargetType__DeployableSentry                                              = 6,
	EDamageTargetType__Dropship                                                      = 7,
	EDamageTargetType__Turret                                                        = 8,
	EDamageTargetType__Razor                                                         = 9,
	EDamageTargetType__Item                                                          = 10,
	EDamageTargetType__Count                                                         = 11
};

/// Enum /Script/ConZ.EDamageMagnitudeType
/// Size: 0x01 (1 bytes)
enum class EDamageMagnitudeType : uint8_t
{
	EDamageMagnitudeType__Small                                                      = 0,
	EDamageMagnitudeType__Medium                                                     = 1,
	EDamageMagnitudeType__Large                                                      = 2,
	EDamageMagnitudeType__Knockout                                                   = 3
};

/// Enum /Script/ConZ.EHitDirectionType
/// Size: 0x01 (1 bytes)
enum class EHitDirectionType : uint8_t
{
	EHitDirectionType__Front                                                         = 0,
	EHitDirectionType__Left                                                          = 1,
	EHitDirectionType__Back                                                          = 2,
	EHitDirectionType__Right                                                         = 3
};

/// Enum /Script/ConZ.EDayPeriod
/// Size: 0x01 (1 bytes)
enum class EDayPeriod : uint8_t
{
	EDayPeriod__Nighttime                                                            = 0,
	EDayPeriod__Dawn                                                                 = 1,
	EDayPeriod__Daytime                                                              = 2,
	EDayPeriod__Dusk                                                                 = 3,
	EDayPeriod__Count                                                                = 4
};

/// Enum /Script/ConZ.EDialLayoutDirection
/// Size: 0x01 (1 bytes)
enum class EDialLayoutDirection : uint8_t
{
	Up                                                                               = 0,
	Right                                                                            = 1
};

/// Enum /Script/ConZ.EDialogueType
/// Size: 0x01 (1 bytes)
enum class EDialogueType : uint8_t
{
	EDialogueType__Subtitled                                                         = 0,
	EDialogueType__Wait                                                              = 1
};

/// Enum /Script/ConZ.EDialogueAnimationState
/// Size: 0x01 (1 bytes)
enum class EDialogueAnimationState : uint8_t
{
	EDialogueAnimationState__None                                                    = 0,
	EDialogueAnimationState__Show                                                    = 1,
	EDialogueAnimationState__Hide                                                    = 2
};

/// Enum /Script/ConZ.EDialPadButtonType
/// Size: 0x01 (1 bytes)
enum class EDialPadButtonType : uint8_t
{
	EDialPadButtonType__None                                                         = 0,
	EDialPadButtonType__Input                                                        = 1,
	EDialPadButtonType__Enter                                                        = 2,
	EDialPadButtonType__Delete                                                       = 3,
	EDialPadButtonType__Count                                                        = 4
};

/// Enum /Script/ConZ.EDisposition
/// Size: 0x01 (1 bytes)
enum class EDisposition : uint8_t
{
	EDisposition__Neutral                                                            = 0,
	EDisposition__Good                                                               = 1,
	EDisposition__Bad                                                                = 2
};

/// Enum /Script/ConZ.EDistantMeshStreamingBehavior
/// Size: 0x01 (1 bytes)
enum class EDistantMeshStreamingBehavior : uint8_t
{
	EDistantMeshStreamingBehavior__Default                                           = 0,
	EDistantMeshStreamingBehavior__LoadAsSoonAsPossible                              = 1
};

/// Enum /Script/ConZ.EDoorUnlockDataType
/// Size: 0x01 (1 bytes)
enum class EDoorUnlockDataType : uint8_t
{
	EDoorUnlockDataType__Default                                                     = 0,
	EDoorUnlockDataType__Killbox                                                     = 1,
	EDoorUnlockDataType__AbandonedBunker                                             = 2
};

/// Enum /Script/ConZ.ESlotType
/// Size: 0x01 (1 bytes)
enum class ESlotType : uint8_t
{
	ESlotType__None                                                                  = 0,
	ESlotType__LockSlot                                                              = 1,
	ESlotType__ZapperSlot                                                            = 2,
	ESlotType__RemoteSensorSlot                                                      = 3,
	ESlotType__BCULockSlot                                                           = 4
};

/// Enum /Script/ConZ.EDroneSound
/// Size: 0x01 (1 bytes)
enum class EDroneSound : uint8_t
{
	EDroneSound__None                                                                = 0,
	EDroneSound__Idle                                                                = 1,
	EDroneSound__Attack                                                              = 2,
	EDroneSound__Kill                                                                = 3
};

/// Enum /Script/ConZ.EDroneSightingMode
/// Size: 0x01 (1 bytes)
enum class EDroneSightingMode : uint8_t
{
	EDroneSightingMode__Follow                                                       = 0,
	EDroneSightingMode__Flyby                                                        = 1,
	EDroneSightingMode__Crashing                                                     = 2,
	EDroneSightingMode__Num                                                          = 3
};

/// Enum /Script/ConZ.EDroneState
/// Size: 0x01 (1 bytes)
enum class EDroneState : uint8_t
{
	EDroneState__Initial                                                             = 0,
	EDroneState__Leaving                                                             = 1,
	EDroneState__Approaching                                                         = 2,
	EDroneState__Following                                                           = 3,
	EDroneState__Flybying                                                            = 4,
	EDroneState__Crashing                                                            = 5,
	EDroneState__ExternalMoveTo                                                      = 6,
	EDroneState__Num                                                                 = 7
};

/// Enum /Script/ConZ.ESentrySpawnFlag
/// Size: 0x01 (1 bytes)
enum class ESentrySpawnFlag : uint8_t
{
	ESentrySpawnFlag__None                                                           = 0,
	ESentrySpawnFlag__Spawning                                                       = 1,
	ESentrySpawnFlag__Extracting                                                     = 2
};

/// Enum /Script/ConZ.EDropshipAttackModes
/// Size: 0x01 (1 bytes)
enum class EDropshipAttackModes : uint8_t
{
	EDropshipAttackModes__Normal                                                     = 0,
	EDropshipAttackModes__Railgun                                                    = 1,
	EDropshipAttackModes__TearGas                                                    = 2,
	EDropshipAttackModes__Num                                                        = 3
};

/// Enum /Script/ConZ.EDropshipMontageType
/// Size: 0x01 (1 bytes)
enum class EDropshipMontageType : uint8_t
{
	EDropshipMontageType__Railgun                                                    = 0,
	EDropshipMontageType__Num                                                        = 1
};

/// Enum /Script/ConZ.EDropshipState
/// Size: 0x01 (1 bytes)
enum class EDropshipState : uint8_t
{
	EDropshipState__Initial                                                          = 0,
	EDropshipState__Approaching                                                      = 1,
	EDropshipState__ExternalMoveTo                                                   = 2,
	EDropshipState__Attacking                                                        = 3,
	EDropshipState__AttackingBB                                                      = 4,
	EDropshipState__Searching                                                        = 5,
	EDropshipState__Leave                                                            = 6,
	EDropshipState__DeploySentry                                                     = 7,
	EDropshipState__ExtractingSentry                                                 = 8,
	EDropshipState__FlyBy                                                            = 9,
	EDropshipState__DestroyFoliage                                                   = 10,
	EDropshipState__Num                                                              = 11
};

/// Enum /Script/ConZ.EDropshipStance
/// Size: 0x01 (1 bytes)
enum class EDropshipStance : uint8_t
{
	EDropshipStance__Flight                                                          = 0,
	EDropshipStance__Combat                                                          = 1,
	EDropshipStance__CombatRelocating                                                = 2,
	EDropshipStance__Searching                                                       = 3,
	EDropshipStance__Extraction                                                      = 4,
	EDropshipStance__LeaveInitial                                                    = 5,
	EDropshipStance__LeaveFinal                                                      = 6,
	EDropshipStance__VehicleCombat                                                   = 7,
	EDropshipStance__SentryDeployment                                                = 8,
	EDropshipStance__FlyBy                                                           = 9,
	EDropshipStance__Num                                                             = 10
};

/// Enum /Script/ConZ.EDropZoneGameEventPhase
/// Size: 0x01 (1 bytes)
enum class EDropZoneGameEventPhase : uint8_t
{
	EDropZoneGameEventPhase__Warmup                                                  = 0,
	EDropZoneGameEventPhase__Search                                                  = 1,
	EDropZoneGameEventPhase__Drop                                                    = 2,
	EDropZoneGameEventPhase__Capture                                                 = 3
};

/// Enum /Script/ConZ.EEncounterPostExternalMoveAction
/// Size: 0x01 (1 bytes)
enum class EEncounterPostExternalMoveAction : uint8_t
{
	EEncounterPostExternalMoveAction__Undefined                                      = 0,
	EEncounterPostExternalMoveAction__Attack                                         = 1,
	EEncounterPostExternalMoveAction__FlyBy                                          = 2,
	EEncounterPostExternalMoveAction__ScanSearch                                     = 3,
	EEncounterPostExternalMoveAction__AreaBombardment                                = 4,
	EEncounterPostExternalMoveAction__GuardCargoDrop                                 = 5,
	EEncounterPostExternalMoveAction__DeliverAndLeave                                = 6,
	EEncounterPostExternalMoveAction__DeliverAndLeaveDelayed                         = 7,
	EEncounterPostExternalMoveAction__EngagePlayersIgnoreBase                        = 8,
	EEncounterPostExternalMoveAction__GuardPOI                                       = 9
};

/// Enum /Script/ConZ.EEncounterExternalMoveType
/// Size: 0x01 (1 bytes)
enum class EEncounterExternalMoveType : uint8_t
{
	EEncounterExternalMoveType__Undefined                                            = 0,
	EEncounterExternalMoveType__MoveCloseToPlayer                                    = 1
};

/// Enum /Script/ConZ.EEncounterAllowedSpawnPointTypeFlag
/// Size: 0x01 (1 bytes)
enum class EEncounterAllowedSpawnPointTypeFlag : uint8_t
{
	EEncounterAllowedSpawnPointTypeFlag__None                                        = 0,
	EEncounterAllowedSpawnPointTypeFlag__LegacyCharacterSpawningManager_Exterior     = 1,
	EEncounterAllowedSpawnPointTypeFlag__LegacyCharacterSpawningManager_Interior     = 2,
	EEncounterAllowedSpawnPointTypeFlag__Bush                                        = 4,
	EEncounterAllowedSpawnPointTypeFlag__Tree                                        = 8,
	EEncounterAllowedSpawnPointTypeFlag__GroupSpawnPoint                             = 16
};

/// Enum /Script/ConZ.EEventsRankingStatsOrderByField
/// Size: 0x01 (1 bytes)
enum class EEventsRankingStatsOrderByField : uint8_t
{
	EEventsRankingStatsOrderByField__FamePoints                                      = 0,
	EEventsRankingStatsOrderByField__EventScore                                      = 1,
	EEventsRankingStatsOrderByField__EventKills                                      = 2,
	EEventsRankingStatsOrderByField__EventDeaths                                     = 3
};

/// Enum /Script/ConZ.EExecutorStatus
/// Size: 0x01 (1 bytes)
enum class EExecutorStatus : uint8_t
{
	EExecutorStatus__Regular                                                         = 0,
	EExecutorStatus__Admin                                                           = 1,
	EExecutorStatus__SuperAdmin                                                      = 2,
	EExecutorStatus__Elevated                                                        = 3,
	EExecutorStatus__Developer                                                       = 4
};

/// Enum /Script/ConZ.EFertilizerType
/// Size: 0x01 (1 bytes)
enum class EFertilizerType : uint8_t
{
	EFertilizerType__None                                                            = 0,
	EFertilizerType__Organic                                                         = 1,
	EFertilizerType__Industrial                                                      = 2
};

/// Enum /Script/ConZ.EFishBehavior
/// Size: 0x01 (1 bytes)
enum class EFishBehavior : uint8_t
{
	EFishBehavior__None                                                              = 0,
	EFishBehavior__Normal                                                            = 1,
	EFishBehavior__Fleeing                                                           = 2,
	EFishBehavior__Aggressive                                                        = 3,
	EFishBehavior__Attacking                                                         = 4,
	EFishBehavior__Alerted                                                           = 5,
	EFishBehavior__ForcedMovement                                                    = 6,
	EFishBehavior__Count                                                             = 7
};

/// Enum /Script/ConZ.EFloatingWidgetVisionMode
/// Size: 0x01 (1 bytes)
enum class EFloatingWidgetVisionMode : uint8_t
{
	EFloatingWidgetVisionMode__None                                                  = 0,
	EFloatingWidgetVisionMode__General                                               = 1,
	EFloatingWidgetVisionMode__FocusMode                                             = 2,
	EFloatingWidgetVisionMode__Inventory                                             = 4
};

/// Enum /Script/ConZ.ESelectSource
/// Size: 0x01 (1 bytes)
enum class ESelectSource : uint8_t
{
	ESelectSource__Child                                                             = 0,
	ESelectSource__Parent                                                            = 1,
	ESelectSource__Unknown                                                           = 2
};

/// Enum /Script/ConZ.EFoliageCacheQueryFlags
/// Size: 0x01 (1 bytes)
enum class EFoliageCacheQueryFlags : uint8_t
{
	EFoliageCacheQueryFlags__None                                                    = 0,
	EFoliageCacheQueryFlags__UsedForSpawning                                         = 1,
	EFoliageCacheQueryFlags__UseCircleOverlap                                        = 2,
	EFoliageCacheQueryFlags__IncludeDestroyedFoliage                                 = 4,
	EFoliageCacheQueryFlags__UseDimensionsForSpawning                                = 8
};

/// Enum /Script/ConZ.EFoliageQueryType
/// Size: 0x01 (1 bytes)
enum class EFoliageQueryType : uint8_t
{
	EFoliageQueryType__None                                                          = 0,
	EFoliageQueryType__Spawning                                                      = 1,
	EFoliageQueryType__Other                                                         = 2
};

/// Enum /Script/ConZ.EFoliageType
/// Size: 0x01 (1 bytes)
enum class EFoliageType : uint8_t
{
	EFoliageType__None                                                               = 0,
	EFoliageType__Tree                                                               = 1,
	EFoliageType__Bush                                                               = 2,
	EFoliageType__Grass                                                              = 4,
	EFoliageType__All                                                                = 255
};

/// Enum /Script/ConZ.EGameEventPlayerRoundResult
/// Size: 0x01 (1 bytes)
enum class EGameEventPlayerRoundResult : uint8_t
{
	EGameEventPlayerRoundResult__None                                                = 0,
	EGameEventPlayerRoundResult__Win                                                 = 1,
	EGameEventPlayerRoundResult__Lose                                                = 2,
	EGameEventPlayerRoundResult__Draw                                                = 3
};

/// Enum /Script/ConZ.EGameEventNotificationType
/// Size: 0x01 (1 bytes)
enum class EGameEventNotificationType : uint8_t
{
	EGameEventNotificationType__EventStarted                                         = 0,
	EGameEventNotificationType__EventCanceled                                        = 1,
	EGameEventNotificationType__EventEnded                                           = 2,
	EGameEventNotificationType__NotEnoughParticipants                                = 3,
	EGameEventNotificationType__ParticipantJoined                                    = 4,
	EGameEventNotificationType__ParticipantLeft                                      = 5
};

/// Enum /Script/ConZ.EGameEventParticipantState
/// Size: 0x01 (1 bytes)
enum class EGameEventParticipantState : uint8_t
{
	EGameEventParticipantState__Registered                                           = 0,
	EGameEventParticipantState__Spawning                                             = 1,
	EGameEventParticipantState__Alive                                                = 2,
	EGameEventParticipantState__Dead                                                 = 3,
	EGameEventParticipantState__Left                                                 = 4
};

/// Enum /Script/ConZ.EGameEventState
/// Size: 0x01 (1 bytes)
enum class EGameEventState : uint8_t
{
	EGameEventState__Announced                                                       = 0,
	EGameEventState__RoundStarted                                                    = 1,
	EGameEventState__RoundEnded                                                      = 2,
	EGameEventState__Ended                                                           = 3
};

/// Enum /Script/ConZ.EGameEventBorderState
/// Size: 0x01 (1 bytes)
enum class EGameEventBorderState : uint8_t
{
	EGameEventBorderState__Off                                                       = 0,
	EGameEventBorderState__On                                                        = 1,
	EGameEventBorderState__Bright                                                    = 2
};

/// Enum /Script/ConZ.EGameEventTransportState
/// Size: 0x01 (1 bytes)
enum class EGameEventTransportState : uint8_t
{
	EGameEventTransportState__StandBy                                                = 0,
	EGameEventTransportState__Travelling                                             = 1,
	EGameEventTransportState__Leaving                                                = 2,
	EGameEventTransportState__Landing                                                = 3,
	EGameEventTransportState__LiftOff                                                = 4
};

/// Enum /Script/ConZ.EGameResourceConsumptionMethod
/// Size: 0x01 (1 bytes)
enum class EGameResourceConsumptionMethod : uint8_t
{
	EGameResourceConsumptionMethod__Eating                                           = 0,
	EGameResourceConsumptionMethod__Drinking                                         = 1,
	EGameResourceConsumptionMethod__NonConsumable                                    = 2
};

/// Enum /Script/ConZ.EButtonType
/// Size: 0x01 (1 bytes)
enum class EButtonType : uint8_t
{
	EButtonType__None                                                                = 0,
	EButtonType__AddCookingRecipe                                                    = 1,
	EButtonType__Back                                                                = 2,
	EButtonType__Cancel                                                              = 3,
	EButtonType__Craft                                                               = 4,
	EButtonType__AutoCraft                                                           = 5,
	EButtonType__Details                                                             = 6,
	EButtonType__Place                                                               = 7,
	EButtonType__EventRegister                                                       = 8,
	EButtonType__EventJoin                                                           = 9,
	EButtonType__TraderBuy                                                           = 10,
	EButtonType__TraderCart                                                          = 11,
	EButtonType__TraderSell                                                          = 12,
	EButtonType__CreateSquad                                                         = 13,
	EButtonType__LeaveSquad                                                          = 14,
	EButtonType__JoinBlueTeam                                                        = 15,
	EButtonType__JoinRedTeam                                                         = 16,
	EButtonType__EventLeave                                                          = 17,
	EButtonType__SwitchTeams                                                         = 18,
	EButtonType__Treat                                                               = 19,
	EButtonType__StartTask                                                           = 20,
	EButtonType__RestartTask                                                         = 21,
	EButtonType__AbandonTask                                                         = 22
};

/// Enum /Script/ConZ.EGrappleEndType
/// Size: 0x01 (1 bytes)
enum class EGrappleEndType : uint8_t
{
	EGrappleEndType__VictimDied                                                      = 0,
	EGrappleEndType__VictimEscaped                                                   = 1,
	EGrappleEndType__Interrupted                                                     = 2
};

/// Enum /Script/ConZ.EGrappleActionMeshDetachmentRule
/// Size: 0x01 (1 bytes)
enum class EGrappleActionMeshDetachmentRule : uint8_t
{
	EGrappleActionMeshDetachmentRule__None                                           = 0,
	EGrappleActionMeshDetachmentRule__GrapplerDetaches                               = 1,
	EGrappleActionMeshDetachmentRule__VictimDetaches                                 = 2
};

/// Enum /Script/ConZ.EGrappleActionPerspectiveSwitchType
/// Size: 0x01 (1 bytes)
enum class EGrappleActionPerspectiveSwitchType : uint8_t
{
	EGrappleActionPerspectiveSwitchType__None                                        = 0,
	EGrappleActionPerspectiveSwitchType__ThirdPerson                                 = 1,
	EGrappleActionPerspectiveSwitchType__FirstPerson                                 = 2
};

/// Enum /Script/ConZ.ERagdollTransitionState
/// Size: 0x01 (1 bytes)
enum class ERagdollTransitionState : uint8_t
{
	ERagdollTransitionState__None                                                    = 0,
	ERagdollTransitionState__GoTo                                                    = 1,
	ERagdollTransitionState__GoToButDoNotSpawnOnServer                               = 2,
	ERagdollTransitionState__RecoverFrom                                             = 3,
	ERagdollTransitionState__RecoverFromImmediately                                  = 4
};

/// Enum /Script/ConZ.EHitReactState
/// Size: 0x01 (1 bytes)
enum class EHitReactState : uint8_t
{
	EHitReactState__None                                                             = 0,
	EHitReactState__Hit                                                              = 1,
	EHitReactState__Stun                                                             = 2,
	EHitReactState__Knockout                                                         = 3,
	EHitReactState__GettingUp                                                        = 4,
	EHitReactState__Ragdoll                                                          = 5
};

/// Enum /Script/ConZ.ERagdollSpawnType
/// Size: 0x01 (1 bytes)
enum class ERagdollSpawnType : uint8_t
{
	ERagdollSpawnType__Default                                                       = 0,
	ERagdollSpawnType__DoNotSpawnOnServer                                            = 1
};

/// Enum /Script/ConZ.EGoToRagdollCaller
/// Size: 0x01 (1 bytes)
enum class EGoToRagdollCaller : uint8_t
{
	EGoToRagdollCaller__Default                                                      = 0,
	EGoToRagdollCaller__Montage                                                      = 1
};

/// Enum /Script/ConZ.EHUDVisibilityFlag
/// Size: 0x01 (1 bytes)
enum class EHUDVisibilityFlag : uint8_t
{
	EHUDVisibilityFlag__None                                                         = 0,
	EHUDVisibilityFlag__UserInput                                                    = 1,
	EHUDVisibilityFlag__IntroCinematic                                               = 2,
	EHUDVisibilityFlag__CharacterModification                                        = 4,
	EHUDVisibilityFlag__All                                                          = 255
};

/// Enum /Script/ConZ.EHUDMessageType
/// Size: 0x01 (1 bytes)
enum class EHUDMessageType : uint8_t
{
	EHUDMessageType__Regular                                                         = 0,
	EHUDMessageType__Important                                                       = 1
};

/// Enum /Script/ConZ.EWarningType
/// Size: 0x01 (1 bytes)
enum class EWarningType : uint8_t
{
	EWarningType__Danger                                                             = 0,
	EWarningType__Explosion                                                          = 1,
	EWarningType__LifeThreat                                                         = 2,
	EWarningType__Watching                                                           = 3,
	EWarningType__Traps                                                              = 4
};

/// Enum /Script/ConZ.EIgnitableItemState
/// Size: 0x01 (1 bytes)
enum class EIgnitableItemState : uint8_t
{
	EIgnitableItemState__None                                                        = 0,
	EIgnitableItemState__Start                                                       = 1,
	EIgnitableItemState__Burning                                                     = 2,
	EIgnitableItemState__Extinguish                                                  = 3,
	EIgnitableItemState__Finished                                                    = 4
};

/// Enum /Script/ConZ.EInteractionState
/// Size: 0x01 (1 bytes)
enum class EInteractionState : uint8_t
{
	EInteractionState__Busy                                                          = 0,
	EInteractionState__NoInteractionDefined                                          = 1,
	EInteractionState__CanInteract                                                   = 2,
	EInteractionState__UnableToInteract                                              = 3
};

/// Enum /Script/ConZ.EInventoryNodeWidgetDataType
/// Size: 0x01 (1 bytes)
enum class EInventoryNodeWidgetDataType : uint8_t
{
	EInventoryNodeWidgetDataType__Number                                             = 0,
	EInventoryNodeWidgetDataType__Text                                               = 1,
	EInventoryNodeWidgetDataType__Icon                                               = 2,
	EInventoryNodeWidgetDataType__Visibility                                         = 3,
	EInventoryNodeWidgetDataType__Animation                                          = 4,
	EInventoryNodeWidgetDataType__WidgetSwitcher                                     = 5,
	EInventoryNodeWidgetDataType__Saturation                                         = 6,
	EInventoryNodeWidgetDataType__Container                                          = 7
};

/// Enum /Script/ConZ.EInventoryNodeWidgetType
/// Size: 0x01 (1 bytes)
enum class EInventoryNodeWidgetType : uint8_t
{
	EInventoryNodeWidgetType__None                                                   = 0,
	EInventoryNodeWidgetType__Inventory                                              = 1,
	EInventoryNodeWidgetType__InventoryContainer                                     = 2,
	EInventoryNodeWidgetType__HandsAndHolsters                                       = 3,
	EInventoryNodeWidgetType__QuickAccess                                            = 4,
	EInventoryNodeWidgetType__ClothesSideLayer                                       = 5,
	EInventoryNodeWidgetType__ToolTip                                                = 6,
	EInventoryNodeWidgetType__Vicinity                                               = 7,
	EInventoryNodeWidgetType__VicinityContainer                                      = 8
};

/// Enum /Script/ConZ.EBodySlot
/// Size: 0x01 (1 bytes)
enum class EBodySlot : uint8_t
{
	EBodySlot__Head                                                                  = 0,
	EBodySlot__Chest                                                                 = 1,
	EBodySlot__Legs                                                                  = 2,
	EBodySlot__Feet                                                                  = 3,
	EBodySlot__Count                                                                 = 4
};

/// Enum /Script/ConZ.EItemDebugMode
/// Size: 0x01 (1 bytes)
enum class EItemDebugMode : uint8_t
{
	EItemDebugMode__None                                                             = 0,
	EItemDebugMode__Basic                                                            = 1,
	EItemDebugMode__Count                                                            = 2
};

/// Enum /Script/ConZ.EItemFlags
/// Size: 0x01 (1 bytes)
enum class EItemFlags : uint8_t
{
	EItemFlags__None                                                                 = 0,
	EItemFlags__IsCrafted                                                            = 1,
	EItemFlags__IsBusy                                                               = 2,
	EItemFlags__Examined                                                             = 4,
	EItemFlags__IsPartOfEvent                                                        = 8,
	EItemFlags__BlinkOnSpawn                                                         = 16,
	EItemFlags__ShouldBeVisibleInVicinity                                            = 32,
	EItemFlags__CollisionDisabled                                                    = 64,
	EItemFlags__All                                                                  = 255
};

/// Enum /Script/ConZ.EItemDropPlaceholderDebugMode
/// Size: 0x01 (1 bytes)
enum class EItemDropPlaceholderDebugMode : uint8_t
{
	EItemDropPlaceholderDebugMode__None                                              = 0,
	EItemDropPlaceholderDebugMode__Basic                                             = 1,
	EItemDropPlaceholderDebugMode__Count                                             = 2
};

/// Enum /Script/ConZ.EItemActionKeyInput
/// Size: 0x01 (1 bytes)
enum class EItemActionKeyInput : uint8_t
{
	EItemActionKeyInput__ToggleLight                                                 = 0,
	EItemActionKeyInput__ToggleNightVisionScope                                      = 1,
	EItemActionKeyInput__IncrementScopeDisplayBrightnessMultiplier                   = 2,
	EItemActionKeyInput__DecrementScopeDisplayBrightnessMultiplier                   = 3,
	EItemActionKeyInput__ReloadWeapon                                                = 4,
	EItemActionKeyInput__CheckStatus                                                 = 5,
	EItemActionKeyInput__CancelAllActions                                            = 6
};

/// Enum /Script/ConZ.ERPCType
/// Size: 0x01 (1 bytes)
enum class ERPCType : uint8_t
{
	ERPCType__None                                                                   = 0,
	ERPCType__Client                                                                 = 1,
	ERPCType__Server                                                                 = 2,
	ERPCType__NetMulticast                                                           = 3
};

/// Enum /Script/ConZ.ETooltipPanelType
/// Size: 0x01 (1 bytes)
enum class ETooltipPanelType : uint8_t
{
	ETooltipPanelType__Overview                                                      = 0,
	ETooltipPanelType__Additional                                                    = 1
};

/// Enum /Script/ConZ.ELockPickingDifficulty
/// Size: 0x01 (1 bytes)
enum class ELockPickingDifficulty : uint8_t
{
	ELockPickingDifficulty__Normal                                                   = 0,
	ELockPickingDifficulty__Medium                                                   = 1,
	ELockPickingDifficulty__Hard                                                     = 2
};

/// Enum /Script/ConZ.ELockDifficulty
/// Size: 0x01 (1 bytes)
enum class ELockDifficulty : uint8_t
{
	ELockDifficulty__VeryEasy                                                        = 0,
	ELockDifficulty__Basic                                                           = 1,
	ELockDifficulty__Medium                                                          = 2,
	ELockDifficulty__Advanced                                                        = 3,
	ELockDifficulty__DialLock                                                        = 4,
	ELockDifficulty__Num                                                             = 5
};

/// Enum /Script/ConZ.ETaskCategory
/// Size: 0x01 (1 bytes)
enum class ETaskCategory : uint8_t
{
	ETaskCategory__Movement                                                          = 0,
	ETaskCategory__Survival                                                          = 1,
	ETaskCategory__Inventory                                                         = 2,
	ETaskCategory__Crafting                                                          = 3,
	ETaskCategory__Health                                                            = 4,
	ETaskCategory__Metabolism                                                        = 5,
	ETaskCategory__AttributesAndSkills                                               = 6,
	ETaskCategory__Minigames                                                         = 7,
	ETaskCategory__Economy                                                           = 8,
	ETaskCategory__BaseBuilding                                                      = 9,
	ETaskCategory__Squads                                                            = 10,
	ETaskCategory__Count                                                             = 11
};

/// Enum /Script/ConZ.ECodexCategory
/// Size: 0x01 (1 bytes)
enum class ECodexCategory : uint8_t
{
	ECodexCategory__WelcomeToTheIsland                                               = 0,
	ECodexCategory__Movement                                                         = 1,
	ECodexCategory__Survival                                                         = 2,
	ECodexCategory__Inventory                                                        = 3,
	ECodexCategory__Crafting                                                         = 4,
	ECodexCategory__Health                                                           = 5,
	ECodexCategory__Metabolism                                                       = 6,
	ECodexCategory__AttributesAndSkills                                              = 7,
	ECodexCategory__Minigames                                                        = 8,
	ECodexCategory__Economy                                                          = 9,
	ECodexCategory__BaseBuilding                                                     = 10,
	ECodexCategory__Squads                                                           = 11,
	ECodexCategory__Vehicles                                                         = 12,
	ECodexCategory__Quests                                                           = 13,
	ECodexCategory__Count                                                            = 14
};

/// Enum /Script/ConZ.EConZMenu
/// Size: 0x01 (1 bytes)
enum class EConZMenu : uint8_t
{
	EConZMenu__None                                                                  = 0,
	EConZMenu__Main                                                                  = 1,
	EConZMenu__Pause                                                                 = 2,
	EConZMenu__ServerBrowser                                                         = 3,
	EConZMenu__ClientSettings                                                        = 4,
	EConZMenu__ServerSettings                                                        = 5,
	EConZMenu__CustomZoneSettings                                                    = 6,
	EConZMenu__PlayerManagement                                                      = 7,
	EConZMenu__CharacterSelection                                                    = 8,
	EConZMenu__CharacterCreation                                                     = 9,
	EConZMenu__Statistics                                                            = 10,
	EConZMenu__IntroVideo                                                            = 11,
	EConZMenu__Credits                                                               = 12,
	EConZMenu__Count                                                                 = 13
};

/// Enum /Script/ConZ.EMSCServerEnrollReason
/// Size: 0x01 (1 bytes)
enum class EMSCServerEnrollReason : uint8_t
{
	EMSCServerEnrollReason__Unspecified                                              = 0,
	EMSCServerEnrollReason__Startup                                                  = 1,
	EMSCServerEnrollReason__ServerSettingsChanged                                    = 2,
	EMSCServerEnrollReason__MasterServerRequested                                    = 3
};

/// Enum /Script/ConZ.EMSPPlaystyle
/// Size: 0x01 (1 bytes)
enum class EMSPPlaystyle : uint8_t
{
	EMSPPlaystyle__PVE                                                               = 0,
	EMSPPlaystyle__PVP                                                               = 1,
	EMSPPlaystyle__PVPVE                                                             = 2,
	EMSPPlaystyle__RPPVP                                                             = 3,
	EMSPPlaystyle__RPPVE                                                             = 4,
	EMSPPlaystyle__Other                                                             = 5,
	EMSPPlaystyle__First                                                             = 0,
	EMSPPlaystyle__Last                                                              = 5
};

/// Enum /Script/ConZ.EMedicationRepeatedAbuseReaction
/// Size: 0x01 (1 bytes)
enum class EMedicationRepeatedAbuseReaction : uint8_t
{
	EMedicationRepeatedAbuseReaction__None                                           = 0,
	EMedicationRepeatedAbuseReaction__Vomiting                                       = 1,
	EMedicationRepeatedAbuseReaction__Diarrhea                                       = 2
};

/// Enum /Script/ConZ.EMedicationType
/// Size: 0x01 (1 bytes)
enum class EMedicationType : uint8_t
{
	EMedicationType__Painkillers                                                     = 0,
	EMedicationType__Sedatives                                                       = 1,
	EMedicationType__Antibiotics                                                     = 2,
	EMedicationType__Antiparasitics                                                  = 3,
	EMedicationType__Stimulants                                                      = 4
};

/// Enum /Script/ConZ.EMedicationUsage
/// Size: 0x01 (1 bytes)
enum class EMedicationUsage : uint8_t
{
	EMedicationUsage__Pills                                                          = 0,
	EMedicationUsage__Injections                                                     = 1,
	EMedicationUsage__Infusions                                                      = 2
};

/// Enum /Script/ConZ.EMeleeActionType
/// Size: 0x01 (1 bytes)
enum class EMeleeActionType : uint8_t
{
	EMeleeActionType__None                                                           = 0,
	EMeleeActionType__Attack                                                         = 1,
	EMeleeActionType__PrepareForBlockOrDodge                                         = 2,
	EMeleeActionType__Block                                                          = 3,
	EMeleeActionType__Dodge                                                          = 4
};

/// Enum /Script/ConZ.EMeleeState
/// Size: 0x01 (1 bytes)
enum class EMeleeState : uint8_t
{
	EMeleeState__Idle                                                                = 0,
	EMeleeState__Attacking                                                           = 1,
	EMeleeState__PreparedForBlockOrDodge                                             = 2,
	EMeleeState__Block                                                               = 3,
	EMeleeState__Dodge                                                               = 4,
	EMeleeState__HitReact                                                            = 5
};

/// Enum /Script/ConZ.EAttackCollisionType
/// Size: 0x01 (1 bytes)
enum class EAttackCollisionType : uint8_t
{
	EAttackCollisionType__None                                                       = 0,
	EAttackCollisionType__WeaponLeftHand                                             = 1,
	EAttackCollisionType__WeaponRightHand                                            = 2,
	EAttackCollisionType__Head                                                       = 3,
	EAttackCollisionType__LeftHand                                                   = 4,
	EAttackCollisionType__RightHand                                                  = 5,
	EAttackCollisionType__LeftLeg                                                    = 6,
	EAttackCollisionType__RightLeg                                                   = 7
};

/// Enum /Script/ConZ.EHumanBodyPanelSegmentGenderGroup
/// Size: 0x01 (1 bytes)
enum class EHumanBodyPanelSegmentGenderGroup : uint8_t
{
	EHumanBodyPanelSegmentGenderGroup__Male                                          = 0,
	EHumanBodyPanelSegmentGenderGroup__Female                                        = 1,
	EHumanBodyPanelSegmentGenderGroup__Both                                          = 2,
	EHumanBodyPanelSegmentGenderGroup__Count                                         = 3
};

/// Enum /Script/ConZ.EMinigameState
/// Size: 0x01 (1 bytes)
enum class EMinigameState : uint8_t
{
	EMinigameState__None                                                             = 0,
	EMinigameState__Intro                                                            = 1,
	EMinigameState__WaitingForPlayer                                                 = 2,
	EMinigameState__Game                                                             = 3,
	EMinigameState__Outro                                                            = 4
};

/// Enum /Script/ConZ.EEndMinigameReason
/// Size: 0x01 (1 bytes)
enum class EEndMinigameReason : uint8_t
{
	EEndMinigameReason__Success                                                      = 0,
	EEndMinigameReason__Fail                                                         = 1,
	EEndMinigameReason__Cancel                                                       = 2
};

/// Enum /Script/ConZ.EMovableCollisionFieldMovementCurveType
/// Size: 0x01 (1 bytes)
enum class EMovableCollisionFieldMovementCurveType : uint8_t
{
	EMovableCollisionFieldMovementCurveType__Linear                                  = 0,
	EMovableCollisionFieldMovementCurveType__SquareRoot                              = 1,
	EMovableCollisionFieldMovementCurveType__Exponential                             = 2
};

/// Enum /Script/ConZ.EMovableCollisionFieldMoveType
/// Size: 0x01 (1 bytes)
enum class EMovableCollisionFieldMoveType : uint8_t
{
	EMovableCollisionFieldMoveType__TowardsStart                                     = 0,
	EMovableCollisionFieldMoveType__TowardsEnd                                       = 1,
	EMovableCollisionFieldMoveType__None                                             = 2,
	EMovableCollisionFieldMoveType__Count                                            = 3
};

/// Enum /Script/ConZ.RestState
/// Size: 0x01 (1 bytes)
enum class RestState : uint8_t
{
	RestState__AT_REST                                                               = 0,
	RestState__MOVING                                                                = 1
};

/// Enum /Script/ConZ.SyncMode
/// Size: 0x01 (1 bytes)
enum class SyncMode : uint8_t
{
	SyncMode__XYZ                                                                    = 0,
	SyncMode__XY                                                                     = 1,
	SyncMode__XZ                                                                     = 2,
	SyncMode__YZ                                                                     = 3,
	SyncMode__X                                                                      = 4,
	SyncMode__Y                                                                      = 5,
	SyncMode__Z                                                                      = 6,
	SyncMode__NONE                                                                   = 7
};

/// Enum /Script/ConZ.ENotificationTarget
/// Size: 0x01 (1 bytes)
enum class ENotificationTarget : uint8_t
{
	ENotificationTarget__Everybody                                                   = 0,
	ENotificationTarget__SingleClient                                                = 1
};

/// Enum /Script/ConZ.ENPCDrifterState
/// Size: 0x01 (1 bytes)
enum class ENPCDrifterState : uint8_t
{
	ENPCDrifterState__None                                                           = 0,
	ENPCDrifterState__Idle                                                           = 1,
	ENPCDrifterState__AlertedByGunshot                                               = 2,
	ENPCDrifterState__AlertedByDamage                                                = 3,
	ENPCDrifterState__MoveTowardsTargetLocation                                      = 4,
	ENPCDrifterState__InvestigateLocation                                            = 5,
	ENPCDrifterState__Combat                                                         = 6,
	ENPCDrifterState__OpenDoor                                                       = 7,
	ENPCDrifterState__HitReact                                                       = 8,
	ENPCDrifterState__Count                                                          = 9
};

/// Enum /Script/ConZ.ENPCGuardStimulusTag
/// Size: 0x01 (1 bytes)
enum class ENPCGuardStimulusTag : uint8_t
{
	ENPCGuardStimulusTag__Generic                                                    = 0,
	ENPCGuardStimulusTag__Alarm                                                      = 1,
	ENPCGuardStimulusTag__Target                                                     = 2,
	ENPCGuardStimulusTag__Count                                                      = 3
};

/// Enum /Script/ConZ.ENPCGuardAnimation
/// Size: 0x01 (1 bytes)
enum class ENPCGuardAnimation : uint8_t
{
	ENPCGuardAnimation__Count                                                        = 0
};

/// Enum /Script/ConZ.ENPCGuardAttackType
/// Size: 0x01 (1 bytes)
enum class ENPCGuardAttackType : uint8_t
{
	ENPCGuardAttackType__Hand                                                        = 0,
	ENPCGuardAttackType__Leg                                                         = 1,
	ENPCGuardAttackType__Melee                                                       = 2,
	ENPCGuardAttackType__Count                                                       = 3
};

/// Enum /Script/ConZ.ENPCGuardMovementPace
/// Size: 0x01 (1 bytes)
enum class ENPCGuardMovementPace : uint8_t
{
	ENPCGuardMovementPace__Slow                                                      = 0,
	ENPCGuardMovementPace__Medium                                                    = 1,
	ENPCGuardMovementPace__Fast                                                      = 2,
	ENPCGuardMovementPace__Count                                                     = 3
};

/// Enum /Script/ConZ.ENPCGuardState
/// Size: 0x01 (1 bytes)
enum class ENPCGuardState : uint8_t
{
	ENPCGuardState__None                                                             = 0,
	ENPCGuardState__Idle                                                             = 1,
	ENPCGuardState__AlertedByGunshot                                                 = 2,
	ENPCGuardState__AlertedByDamage                                                  = 3,
	ENPCGuardState__InvestigateLocation                                              = 4,
	ENPCGuardState__ReturnToPost                                                     = 5,
	ENPCGuardState__Combat                                                           = 6,
	ENPCGuardState__OpenDoor                                                         = 7,
	ENPCGuardState__HitReact                                                         = 8,
	ENPCGuardState__Count                                                            = 9
};

/// Enum /Script/ConZ.ENutrient
/// Size: 0x01 (1 bytes)
enum class ENutrient : uint8_t
{
	ENutrient__Protein                                                               = 0,
	ENutrient__SaturatedFat                                                          = 1,
	ENutrient__OtherFats                                                             = 2,
	ENutrient__Fiber                                                                 = 3,
	ENutrient__Sugars                                                                = 4,
	ENutrient__OtherCarbs                                                            = 5,
	ENutrient__Alcohol                                                               = 6,
	ENutrient__Water                                                                 = 7,
	ENutrient__VitaminA                                                              = 8,
	ENutrient__VitaminB1                                                             = 9,
	ENutrient__VitaminB2                                                             = 10,
	ENutrient__VitaminB3                                                             = 11,
	ENutrient__VitaminB4                                                             = 12,
	ENutrient__VitaminB5                                                             = 13,
	ENutrient__VitaminB6                                                             = 14,
	ENutrient__VitaminB9                                                             = 15,
	ENutrient__VitaminB12                                                            = 16,
	ENutrient__VitaminC                                                              = 17,
	ENutrient__VitaminD                                                              = 18,
	ENutrient__VitaminE                                                              = 19,
	ENutrient__VitaminK                                                              = 20,
	ENutrient__Calcium                                                               = 21,
	ENutrient__Magnesium                                                             = 22,
	ENutrient__Potassium                                                             = 23,
	ENutrient__Copper                                                                = 24,
	ENutrient__Selenium                                                              = 25,
	ENutrient__Iron                                                                  = 26,
	ENutrient__Phosphorus                                                            = 27,
	ENutrient__Zinc                                                                  = 28,
	ENutrient__Manganese                                                             = 29,
	ENutrient__Sodium                                                                = 30,
	ENutrient__Other                                                                 = 31,
	ENutrient__Count                                                                 = 32
};

/// Enum /Script/ConZ.EPesticideType
/// Size: 0x01 (1 bytes)
enum class EPesticideType : uint8_t
{
	EPesticideType__Insecticide                                                      = 0,
	EPesticideType__Fungicide                                                        = 1,
	EPesticideType__Herbicide                                                        = 2
};

/// Enum /Script/ConZ.EPickupItemOperation
/// Size: 0x01 (1 bytes)
enum class EPickupItemOperation : uint8_t
{
	EPickupItemOperation__PickupOnly                                                 = 0,
	EPickupItemOperation__PickupAndEat                                               = 1,
	EPickupItemOperation__PickupAndEatAll                                            = 2
};

/// Enum /Script/ConZ.EPlaceableActorDebugMode
/// Size: 0x01 (1 bytes)
enum class EPlaceableActorDebugMode : uint8_t
{
	EPlaceableActorDebugMode__None                                                   = 0,
	EPlaceableActorDebugMode__Basic                                                  = 1,
	EPlaceableActorDebugMode__GroundedCheck                                          = 2,
	EPlaceableActorDebugMode__Walls                                                  = 3,
	EPlaceableActorDebugMode__OrientedBox                                            = 4,
	EPlaceableActorDebugMode__Count                                                  = 5
};

/// Enum /Script/ConZ.EStateFlags
/// Size: 0x01 (1 bytes)
enum class EStateFlags : uint8_t
{
	EStateFlags__None                                                                = 0,
	EStateFlags__Flipped                                                             = 1,
	EStateFlags__Snapping                                                            = 2
};

/// Enum /Script/ConZ.EPlacementBaseBuildingState
/// Size: 0x01 (1 bytes)
enum class EPlacementBaseBuildingState : uint8_t
{
	EPlacementBaseBuildingState__Placing                                             = 0,
	EPlacementBaseBuildingState__PlacingSecondPoint                                  = 1,
	EPlacementBaseBuildingState__Placed                                              = 2
};

/// Enum /Script/ConZ.EGardenPlacementState
/// Size: 0x01 (1 bytes)
enum class EGardenPlacementState : uint8_t
{
	EGardenPlacementState__None                                                      = 0,
	EGardenPlacementState__FirstPointPlaced                                          = 1,
	EGardenPlacementState__FinalPointPlaced                                          = 2
};

/// Enum /Script/ConZ.EPlaceableActorMeshCollisionType
/// Size: 0x01 (1 bytes)
enum class EPlaceableActorMeshCollisionType : uint8_t
{
	EPlaceableActorMeshCollisionType__None                                           = 0,
	EPlaceableActorMeshCollisionType__OverlappedBounds                               = 1,
	EPlaceableActorMeshCollisionType__Mesh                                           = 2,
	EPlaceableActorMeshCollisionType__Count                                          = 3
};

/// Enum /Script/ConZ.EPlaceableStatusFlags
/// Size: 0x01 (1 bytes)
enum class EPlaceableStatusFlags : uint8_t
{
	EPlaceableStatusFlags__None                                                      = 0,
	EPlaceableStatusFlags__PlacementAllowed                                          = 1,
	EPlaceableStatusFlags__PlacingOnWater                                            = 2,
	EPlaceableStatusFlags__All                                                       = 255
};

/// Enum /Script/ConZ.EPlacementTraceHitActor
/// Size: 0x01 (1 bytes)
enum class EPlacementTraceHitActor : uint8_t
{
	EPlacementTraceHitActor__None                                                    = 0,
	EPlacementTraceHitActor__Item                                                    = 1,
	EPlacementTraceHitActor__BaseElement                                             = 2,
	EPlacementTraceHitActor__VehicleCorpse                                           = 4,
	EPlacementTraceHitActor__Garden                                                  = 8,
	EPlacementTraceHitActor__Foliage                                                 = 16,
	EPlacementTraceHitActor__All                                                     = 255
};

/// Enum /Script/ConZ.EPlacementAllowedStatus
/// Size: 0x01 (1 bytes)
enum class EPlacementAllowedStatus : uint8_t
{
	EPlacementAllowedStatus__None                                                    = 0,
	EPlacementAllowedStatus__Allowed                                                 = 1,
	EPlacementAllowedStatus__NotAllowedGeneric                                       = 2,
	EPlacementAllowedStatus__NotAllowedPlacementLineTraceFailed                      = 3,
	EPlacementAllowedStatus__NotAllowedNormalTestFailed                              = 4,
	EPlacementAllowedStatus__NotAllowedInteractionDistance                           = 5,
	EPlacementAllowedStatus__NotAllowedReachability                                  = 6,
	EPlacementAllowedStatus__NotAllowedWater                                         = 7,
	EPlacementAllowedStatus__NotAllowedAngle                                         = 8,
	EPlacementAllowedStatus__NotAllowedMeshOverlap                                   = 9,
	EPlacementAllowedStatus__NotAllowedTopOverlap                                    = 10,
	EPlacementAllowedStatus__NotAllowedTopOverlapSimple                              = 11,
	EPlacementAllowedStatus__NotAllowedBottomOverlap                                 = 12,
	EPlacementAllowedStatus__NotAllowedFullBoxOverlap                                = 13,
	EPlacementAllowedStatus__NotAllowedExtendedOverlap                               = 14,
	EPlacementAllowedStatus__NotAllowedFloating                                      = 15,
	EPlacementAllowedStatus__NotAllowedTeleportSpot                                  = 16,
	EPlacementAllowedStatus__NotAllowedHitCharacter                                  = 17,
	EPlacementAllowedStatus__NotAllowedHitItem                                       = 18,
	EPlacementAllowedStatus__NotAllowedHitVehicle                                    = 19,
	EPlacementAllowedStatus__NotAllowedMapRegion                                     = 20,
	EPlacementAllowedStatus__NotAllowedNotSnapping                                   = 21,
	EPlacementAllowedStatus__NotAllowedCantPlaceAtLocation                           = 22,
	EPlacementAllowedStatus__NotAllowedLocationAreaRestricted                        = 23,
	EPlacementAllowedStatus__NotAllowedLocationDupFlag                               = 24,
	EPlacementAllowedStatus__NotAllowedLocationEnemyFlag                             = 25,
	EPlacementAllowedStatus__NotAllowedLocationFoundation                            = 26,
	EPlacementAllowedStatus__NotAllowedLocationOtherElement                          = 27,
	EPlacementAllowedStatus__NotAllowedLocationNoBase                                = 28,
	EPlacementAllowedStatus__NotAllowedLocationNoFlag                                = 29,
	EPlacementAllowedStatus__NotAllowedLocationMaxInstances                          = 30,
	EPlacementAllowedStatus__NotAllowedEnemyFlag                                     = 31,
	EPlacementAllowedStatus__NotAllowedBaseBuildingMask                              = 32,
	EPlacementAllowedStatus__NotAllowedInBuilding                                    = 33,
	EPlacementAllowedStatus__NotAllowedActorTag                                      = 34,
	EPlacementAllowedStatus__NotAllowedVehicleCorpse                                 = 35,
	EPlacementAllowedStatus__NotAllowedPointsTooClose                                = 36,
	EPlacementAllowedStatus__NotAllowedTwoPointsConstaints                           = 37,
	EPlacementAllowedStatus__NotAllowedHeightDifference                              = 38,
	EPlacementAllowedStatus__NotAllowedTopSweep                                      = 39,
	EPlacementAllowedStatus__NotAllowedMidSweep                                      = 40,
	EPlacementAllowedStatus__NotAllowedTilesNotGrounded                              = 41,
	EPlacementAllowedStatus__NotAllowedPlacedDistance                                = 42,
	EPlacementAllowedStatus__NotAllowedFoundationPillarsNotTouchingGround            = 43,
	EPlacementAllowedStatus__NotAllowedWeakStability                                 = 44,
	EPlacementAllowedStatus__NotAllowedNotSquadLeaderToPlaceFlag                     = 45,
	EPlacementAllowedStatus__NotAllowedUnknown                                       = 46
};

/// Enum /Script/ConZ.EPlacementAlgorithm
/// Size: 0x01 (1 bytes)
enum class EPlacementAlgorithm : uint8_t
{
	EPlacementAlgorithm__Classic                                                     = 0,
	EPlacementAlgorithm__New                                                         = 1
};

/// Enum /Script/ConZ.EPlacementBaseState
/// Size: 0x01 (1 bytes)
enum class EPlacementBaseState : uint8_t
{
	EPlacementBaseState__None                                                        = 0,
	EPlacementBaseState__Placing                                                     = 1,
	EPlacementBaseState__Placed                                                      = 2,
	EPlacementBaseState__HeightAdjustment                                            = 3
};

/// Enum /Script/ConZ.EFertilizerUIType
/// Size: 0x01 (1 bytes)
enum class EFertilizerUIType : uint8_t
{
	EFertilizerUIType__None                                                          = 0,
	EFertilizerUIType__Organic                                                       = 1,
	EFertilizerUIType__Industrial                                                    = 2
};

/// Enum /Script/ConZ.EPlantGrowthStage
/// Size: 0x01 (1 bytes)
enum class EPlantGrowthStage : uint8_t
{
	EPlantGrowthStage__None                                                          = 0,
	EPlantGrowthStage__Seeding                                                       = 1,
	EPlantGrowthStage__Vegetating                                                    = 2,
	EPlantGrowthStage__Flowering                                                     = 3,
	EPlantGrowthStage__Ripening                                                      = 4
};

/// Enum /Script/ConZ.EPlayableInstrumentView
/// Size: 0x01 (1 bytes)
enum class EPlayableInstrumentView : uint8_t
{
	EPlayableInstrumentView__FirstPerson                                             = 0,
	EPlayableInstrumentView__ThirdPerson                                             = 1
};

/// Enum /Script/ConZ.EPlayableInstrumentChord
/// Size: 0x01 (1 bytes)
enum class EPlayableInstrumentChord : uint8_t
{
	EPlayableInstrumentChord__Count                                                  = 0
};

/// Enum /Script/ConZ.EDroneVisibility
/// Size: 0x01 (1 bytes)
enum class EDroneVisibility : uint8_t
{
	EDroneVisibility__Visible                                                        = 0,
	EDroneVisibility__Invisible                                                      = 1,
	EDroneVisibility__Hidden                                                         = 2
};

/// Enum /Script/ConZ.EQuestType
/// Size: 0x01 (1 bytes)
enum class EQuestType : uint8_t
{
	EQuestType__Task                                                                 = 0,
	EQuestType__Quest                                                                = 1,
	EQuestType__Count                                                                = 2
};

/// Enum /Script/ConZ.EInstrumentEventType
/// Size: 0x01 (1 bytes)
enum class EInstrumentEventType : uint8_t
{
	EInstrumentEventType__PlayTone                                                   = 0,
	EInstrumentEventType__StopTone                                                   = 1
};

/// Enum /Script/ConZ.ERespawnStateContext
/// Size: 0x01 (1 bytes)
enum class ERespawnStateContext : uint8_t
{
	ERespawnStateContext__None                                                       = 0,
	ERespawnStateContext__Teleport                                                   = 1,
	ERespawnStateContext__Event                                                      = 2
};

/// Enum /Script/ConZ.EStanceChangeFlag
/// Size: 0x01 (1 bytes)
enum class EStanceChangeFlag : uint8_t
{
	EStanceChangeFlag__Exact                                                         = 0,
	EStanceChangeFlag__Min                                                           = 1,
	EStanceChangeFlag__Max                                                           = 2
};

/// Enum /Script/ConZ.EGestureType
/// Size: 0x01 (1 bytes)
enum class EGestureType : uint8_t
{
	EGestureType__ShowFinger                                                         = 0,
	EGestureType__StandSurrender                                                     = 1,
	EGestureType__WaveHi                                                             = 2,
	EGestureType__YouAreDead                                                         = 3,
	EGestureType__FY                                                                 = 4,
	EGestureType__Point                                                              = 5,
	EGestureType__Heart                                                              = 6,
	EGestureType__BallPalm                                                           = 7,
	EGestureType__FacePalm                                                           = 8,
	EGestureType__FingerGun                                                          = 9,
	EGestureType__Laughing                                                           = 10,
	EGestureType__SmellWave                                                          = 11,
	EGestureType__Squat                                                              = 12,
	EGestureType__Charge                                                             = 13,
	EGestureType__Freeze                                                             = 14,
	EGestureType__GetDown                                                            = 15,
	EGestureType__GetUp                                                              = 16,
	EGestureType__Halt                                                               = 17,
	EGestureType__HurryUp                                                            = 18,
	EGestureType__PointMe                                                            = 19,
	EGestureType__PointYou                                                           = 20,
	EGestureType__Rally                                                              = 21,
	EGestureType__ThumbsUp                                                           = 22,
	EGestureType__ThumbsDown                                                         = 23,
	EGestureType__UnderstandNo                                                       = 24,
	EGestureType__UnderstandYes                                                      = 25,
	EGestureType__DanceSwag                                                          = 26,
	EGestureType__DanceSlinky                                                        = 27,
	EGestureType__DanceJungleStep                                                    = 28,
	EGestureType__DanceMoonslide                                                     = 29,
	EGestureType__DanceFloss                                                         = 30,
	EGestureType__DanceOrangeJustice                                                 = 31,
	EGestureType__DanceShowtime                                                      = 32,
	EGestureType__DanceScrub                                                         = 33,
	EGestureType__DanceTheCarlton                                                    = 34,
	EGestureType__DanceGangnamStyle                                                  = 35,
	EGestureType__DanceTechnoViking                                                  = 36,
	EGestureType__DanceOhMama                                                        = 37,
	EGestureType__DanceLoser                                                         = 38,
	EGestureType__DanceSeduction                                                     = 39,
	EGestureType__DanceTemptation                                                    = 40,
	EGestureType__DanceVogue                                                         = 41,
	EGestureType__DanceTango                                                         = 42,
	EGestureType__DanceDiscoSpin                                                     = 43,
	EGestureType__DanceJagger                                                        = 44,
	EGestureType__DanceSlayinAlive                                                   = 45,
	EGestureType__DancePuppetDance                                                   = 46,
	EGestureType__DanceGunsBlazing                                                   = 47,
	EGestureType__DanceStepUp                                                        = 48,
	EGestureType__DancePartyAnimal                                                   = 49,
	EGestureType__DanceHardbass                                                      = 50,
	EGestureType__DanceKazachok                                                      = 51,
	EGestureType__DancePaddleDance                                                   = 52,
	EGestureType__DanceMoonwalk                                                      = 53,
	EGestureType__DanceSneaky                                                        = 54,
	EGestureType__DanceDeathDrop                                                     = 55,
	EGestureType__DanceFeline                                                        = 56,
	EGestureType__DanceGoddess                                                       = 57,
	EGestureType__DanceSultana                                                       = 58,
	EGestureType__DanceSerpentsCharm                                                 = 59,
	EGestureType__DanceBootylicious                                                  = 60,
	EGestureType__DanceBubbleBounce                                                  = 61,
	EGestureType__Halloween1                                                         = 62,
	EGestureType__Halloween2                                                         = 63,
	EGestureType__Halloween3                                                         = 64,
	EGestureType__Halloween4                                                         = 65,
	EGestureType__Count                                                              = 66
};

/// Enum /Script/ConZ.EModifyBBElementPaintJobActionSubtype
/// Size: 0x01 (1 bytes)
enum class EModifyBBElementPaintJobActionSubtype : uint8_t
{
	EModifyBBElementPaintJobActionSubtype__ClearPaintJob                             = 0,
	EModifyBBElementPaintJobActionSubtype__PaintSolidColor                           = 1
};

/// Enum /Script/ConZ.EModifyWeaponPaintjobActionSubtype
/// Size: 0x01 (1 bytes)
enum class EModifyWeaponPaintjobActionSubtype : uint8_t
{
	EModifyWeaponPaintjobActionSubtype__ClearPaintjob                                = 0,
	EModifyWeaponPaintjobActionSubtype__RefreshPaintjob                              = 1,
	EModifyWeaponPaintjobActionSubtype__PaintSolidColor                              = 2,
	EModifyWeaponPaintjobActionSubtype__SetPattern                                   = 3,
	EModifyWeaponPaintjobActionSubtype__SetColor                                     = 4
};

/// Enum /Script/ConZ.ESwapItemsType
/// Size: 0x01 (1 bytes)
enum class ESwapItemsType : uint8_t
{
	ESwapItemsType__None                                                             = 0,
	ESwapItemsType__NotWeaponToNotWeapon                                             = 1,
	ESwapItemsType__WeaponToWeapon                                                   = 2,
	ESwapItemsType__NotWeaponToWeapon                                                = 3,
	ESwapItemsType__WeaponToNotWeapon                                                = 4,
	ESwapItemsType__WeaponToThrowingItem                                             = 5,
	ESwapItemsType__ThrowingItemToWeapon                                             = 6,
	ESwapItemsType__ThrowingItemToNotWeapon                                          = 7
};

/// Enum /Script/ConZ.EPrisonerAnimationCurve
/// Size: 0x01 (1 bytes)
enum class EPrisonerAnimationCurve : uint8_t
{
	EPrisonerAnimationCurve__LegsPose                                                = 0,
	EPrisonerAnimationCurve__CanStartGoToLoop                                        = 1,
	EPrisonerAnimationCurve__CanStartGoToStopLU                                      = 2,
	EPrisonerAnimationCurve__CanStartGoToStopRU                                      = 3,
	EPrisonerAnimationCurve__DistanceToPivot                                         = 4,
	EPrisonerAnimationCurve__DistanceToApex                                          = 5,
	EPrisonerAnimationCurve__CanLandGoToLoop                                         = 6,
	EPrisonerAnimationCurve__CanFireWeapon                                           = 7,
	EPrisonerAnimationCurve__LeftHandIK                                              = 8,
	EPrisonerAnimationCurve__MoveInputScale                                          = 9,
	EPrisonerAnimationCurve__MoveInputModifierScale                                  = 10,
	EPrisonerAnimationCurve__MoveInputModifierCourseAngle                            = 11,
	EPrisonerAnimationCurve__IgnoreMoveInput                                         = 12,
	EPrisonerAnimationCurve__IgnoreTurnInput                                         = 13,
	EPrisonerAnimationCurve__IsStanceTransitionActive                                = 14,
	EPrisonerAnimationCurve__MeshOffsetWhenInWater                                   = 15,
	EPrisonerAnimationCurve__ViewRoll                                                = 16,
	EPrisonerAnimationCurve__ViewPitch                                               = 17,
	EPrisonerAnimationCurve__ViewYaw                                                 = 18,
	EPrisonerAnimationCurve__IgnoreAimOffset                                         = 19,
	EPrisonerAnimationCurve__IgnoreFistCorrections                                   = 20,
	EPrisonerAnimationCurve__IgnoreRotation                                          = 21,
	EPrisonerAnimationCurve__IgnoreFPBoneRotation                                    = 22,
	EPrisonerAnimationCurve__BikePickupRotation                                      = 23,
	EPrisonerAnimationCurve__BikePickupTranslation                                   = 24,
	EPrisonerAnimationCurve__BikePedalRotation                                       = 25,
	EPrisonerAnimationCurve__VehicleAttachmentRotation_Yaw                           = 26,
	EPrisonerAnimationCurve__VehicleAttachmentRotation_Pitch                         = 27,
	EPrisonerAnimationCurve__VehicleAttachmentRotation_Roll                          = 28,
	EPrisonerAnimationCurve__Count                                                   = 29
};

/// Enum /Script/ConZ.EPrisonerAnimationMountType
/// Size: 0x01 (1 bytes)
enum class EPrisonerAnimationMountType : uint8_t
{
	EPrisonerAnimationMountType__None                                                = 0,
	EPrisonerAnimationMountType__Car                                                 = 1,
	EPrisonerAnimationMountType__Sledge                                              = 2,
	EPrisonerAnimationMountType__WheelBarrow                                         = 3,
	EPrisonerAnimationMountType__Boat                                                = 4,
	EPrisonerAnimationMountType__Bike                                                = 5,
	EPrisonerAnimationMountType__Airplane                                            = 6,
	EPrisonerAnimationMountType__Count                                               = 7
};

/// Enum /Script/ConZ.EPrisonerAnimationState
/// Size: 0x01 (1 bytes)
enum class EPrisonerAnimationState : uint8_t
{
	EPrisonerAnimationState__Unknown                                                 = 0,
	EPrisonerAnimationState__Entry                                                   = 1,
	EPrisonerAnimationState__StandIdle                                               = 2,
	EPrisonerAnimationState__StandIdleToCrouchIdle                                   = 3,
	EPrisonerAnimationState__StandIdleToProneIdle                                    = 4,
	EPrisonerAnimationState__StandWalkStart                                          = 5,
	EPrisonerAnimationState__StandWalkLoop                                           = 6,
	EPrisonerAnimationState__StandWalkStop                                           = 7,
	EPrisonerAnimationState__StandJogStart                                           = 8,
	EPrisonerAnimationState__StandJogLoop                                            = 9,
	EPrisonerAnimationState__StandJogStop                                            = 10,
	EPrisonerAnimationState__StandRunStart                                           = 11,
	EPrisonerAnimationState__StandRunLoop                                            = 12,
	EPrisonerAnimationState__StandRunStop                                            = 13,
	EPrisonerAnimationState__CrouchIdle                                              = 14,
	EPrisonerAnimationState__CrouchIdleToStandIdle                                   = 15,
	EPrisonerAnimationState__CrouchIdleToProneIdle                                   = 16,
	EPrisonerAnimationState__CrouchWalkStart                                         = 17,
	EPrisonerAnimationState__CrouchWalkLoop                                          = 18,
	EPrisonerAnimationState__CrouchWalkStop                                          = 19,
	EPrisonerAnimationState__ProneIdle                                               = 20,
	EPrisonerAnimationState__ProneIdleToStandIdle                                    = 21,
	EPrisonerAnimationState__ProneIdleToCrouchIdle                                   = 22,
	EPrisonerAnimationState__ProneWalkLoop                                           = 23,
	EPrisonerAnimationState__Count                                                   = 24
};

/// Enum /Script/ConZ.EPrisonerBodyConditionState
/// Size: 0x01 (1 bytes)
enum class EPrisonerBodyConditionState : uint8_t
{
	EPrisonerBodyConditionState__Incubating                                          = 0,
	EPrisonerBodyConditionState__Untreated                                           = 1,
	EPrisonerBodyConditionState__Stabilizing                                         = 2,
	EPrisonerBodyConditionState__Recovering                                          = 3,
	EPrisonerBodyConditionState__Count                                               = 4
};

/// Enum /Script/ConZ.EPrisonerBodyConditionTissueGroup
/// Size: 0x01 (1 bytes)
enum class EPrisonerBodyConditionTissueGroup : uint8_t
{
	EPrisonerBodyConditionTissueGroup__Unspecified                                   = 0,
	EPrisonerBodyConditionTissueGroup__Muscle                                        = 1,
	EPrisonerBodyConditionTissueGroup__Bone                                          = 2,
	EPrisonerBodyConditionTissueGroup__Organ                                         = 3,
	EPrisonerBodyConditionTissueGroup__Count                                         = 4
};

/// Enum /Script/ConZ.EPrisonerBodyOrganGroup
/// Size: 0x01 (1 bytes)
enum class EPrisonerBodyOrganGroup : uint8_t
{
	EPrisonerBodyOrganGroup__Unspecified                                             = 0,
	EPrisonerBodyOrganGroup__SpinalCord                                              = 1,
	EPrisonerBodyOrganGroup__Lungs                                                   = 2,
	EPrisonerBodyOrganGroup__RespiratorySystem                                       = 3,
	EPrisonerBodyOrganGroup__CirculatorySystem                                       = 4,
	EPrisonerBodyOrganGroup__Colon                                                   = 5,
	EPrisonerBodyOrganGroup__Intestine                                               = 6,
	EPrisonerBodyOrganGroup__Bladder                                                 = 7,
	EPrisonerBodyOrganGroup__Liver                                                   = 8,
	EPrisonerBodyOrganGroup__Kidneys                                                 = 9,
	EPrisonerBodyOrganGroup__AdrenalGlands                                           = 10,
	EPrisonerBodyOrganGroup__Gallbladder                                             = 11,
	EPrisonerBodyOrganGroup__Pancreas                                                = 12,
	EPrisonerBodyOrganGroup__Stomach                                                 = 13,
	EPrisonerBodyOrganGroup__Heart                                                   = 14,
	EPrisonerBodyOrganGroup__Spleen                                                  = 15,
	EPrisonerBodyOrganGroup__Brain                                                   = 16,
	EPrisonerBodyOrganGroup__Reproductive                                            = 17,
	EPrisonerBodyOrganGroup__Count                                                   = 18
};

/// Enum /Script/ConZ.EPrisonerBodyMuscleGroup
/// Size: 0x01 (1 bytes)
enum class EPrisonerBodyMuscleGroup : uint8_t
{
	EPrisonerBodyMuscleGroup__Unspecified                                            = 0,
	EPrisonerBodyMuscleGroup__Head                                                   = 1,
	EPrisonerBodyMuscleGroup__Neck                                                   = 2,
	EPrisonerBodyMuscleGroup__Trapezius                                              = 3,
	EPrisonerBodyMuscleGroup__Chest                                                  = 4,
	EPrisonerBodyMuscleGroup__UpperAbdomen                                           = 5,
	EPrisonerBodyMuscleGroup__LowerAbdomen                                           = 6,
	EPrisonerBodyMuscleGroup__LeftEar                                                = 7,
	EPrisonerBodyMuscleGroup__RightEar                                               = 8,
	EPrisonerBodyMuscleGroup__LeftThigh                                              = 9,
	EPrisonerBodyMuscleGroup__RightThigh                                             = 10,
	EPrisonerBodyMuscleGroup__LeftLeg                                                = 11,
	EPrisonerBodyMuscleGroup__RightLeg                                               = 12,
	EPrisonerBodyMuscleGroup__LeftFoot                                               = 13,
	EPrisonerBodyMuscleGroup__RightFoot                                              = 14,
	EPrisonerBodyMuscleGroup__LeftShoulder                                           = 15,
	EPrisonerBodyMuscleGroup__RightShoulder                                          = 16,
	EPrisonerBodyMuscleGroup__LeftArm                                                = 17,
	EPrisonerBodyMuscleGroup__RightArm                                               = 18,
	EPrisonerBodyMuscleGroup__LeftForearm                                            = 19,
	EPrisonerBodyMuscleGroup__RightForearm                                           = 20,
	EPrisonerBodyMuscleGroup__LeftHand                                               = 21,
	EPrisonerBodyMuscleGroup__RightHand                                              = 22,
	EPrisonerBodyMuscleGroup__LeftKneecap                                            = 23,
	EPrisonerBodyMuscleGroup__RightKneecap                                           = 24,
	EPrisonerBodyMuscleGroup__Count                                                  = 25
};

/// Enum /Script/ConZ.EPrisonerBodyBoneGroup
/// Size: 0x01 (1 bytes)
enum class EPrisonerBodyBoneGroup : uint8_t
{
	EPrisonerBodyBoneGroup__Unspecified                                              = 0,
	EPrisonerBodyBoneGroup__Ribcage                                                  = 1,
	EPrisonerBodyBoneGroup__Spine                                                    = 2,
	EPrisonerBodyBoneGroup__Skull                                                    = 3,
	EPrisonerBodyBoneGroup__Pelvis                                                   = 4,
	EPrisonerBodyBoneGroup__LeftThigh                                                = 5,
	EPrisonerBodyBoneGroup__RightThigh                                               = 6,
	EPrisonerBodyBoneGroup__LeftLeg                                                  = 7,
	EPrisonerBodyBoneGroup__RightLeg                                                 = 8,
	EPrisonerBodyBoneGroup__LeftFoot                                                 = 9,
	EPrisonerBodyBoneGroup__RightFoot                                                = 10,
	EPrisonerBodyBoneGroup__LeftShoulder                                             = 11,
	EPrisonerBodyBoneGroup__RightShoulder                                            = 12,
	EPrisonerBodyBoneGroup__LeftArm                                                  = 13,
	EPrisonerBodyBoneGroup__RightArm                                                 = 14,
	EPrisonerBodyBoneGroup__LeftForearm                                              = 15,
	EPrisonerBodyBoneGroup__RightForearm                                             = 16,
	EPrisonerBodyBoneGroup__LeftHand                                                 = 17,
	EPrisonerBodyBoneGroup__RightHand                                                = 18,
	EPrisonerBodyBoneGroup__Count                                                    = 19
};

/// Enum /Script/ConZ.EPrisonerBodyRegion
/// Size: 0x01 (1 bytes)
enum class EPrisonerBodyRegion : uint8_t
{
	EPrisonerBodyRegion__Unspecified                                                 = 0,
	EPrisonerBodyRegion__Head                                                        = 1,
	EPrisonerBodyRegion__Torso                                                       = 2,
	EPrisonerBodyRegion__LeftArm                                                     = 3,
	EPrisonerBodyRegion__RightArm                                                    = 4,
	EPrisonerBodyRegion__LeftLeg                                                     = 5,
	EPrisonerBodyRegion__RightLeg                                                    = 6,
	EPrisonerBodyRegion__Count                                                       = 7
};

/// Enum /Script/ConZ.EPrisonerBodyState
/// Size: 0x01 (1 bytes)
enum class EPrisonerBodyState : uint8_t
{
	EPrisonerBodyState__UnableToMove                                                 = 0,
	EPrisonerBodyState__Unconscious                                                  = 1,
	EPrisonerBodyState__Comatose                                                     = 2,
	EPrisonerBodyState__Dead                                                         = 3,
	EPrisonerBodyState__AbleToConsume                                                = 4,
	EPrisonerBodyState__Consuming                                                    = 5,
	EPrisonerBodyState__AbleToVomit                                                  = 6,
	EPrisonerBodyState__Vomiting                                                     = 7,
	EPrisonerBodyState__AbleToUrinate                                                = 8,
	EPrisonerBodyState__Urinating                                                    = 9,
	EPrisonerBodyState__AbleToDefecate                                               = 10,
	EPrisonerBodyState__Defecating                                                   = 11,
	EPrisonerBodyState__ShallDefecateDiarrhea                                        = 12,
	EPrisonerBodyState__CannotBeRevivedWithPhoenixTears                              = 13,
	EPrisonerBodyState__Count                                                        = 14
};

/// Enum /Script/ConZ.EBuryState
/// Size: 0x01 (1 bytes)
enum class EBuryState : uint8_t
{
	EBuryState__None                                                                 = 0,
	EBuryState__Bury                                                                 = 1,
	EBuryState__ResumeBury                                                           = 2,
	EBuryState__Rest                                                                 = 3,
	EBuryState__Finish                                                               = 4
};

/// Enum /Script/ConZ.EPrisonerFacialExpression
/// Size: 0x01 (1 bytes)
enum class EPrisonerFacialExpression : uint8_t
{
	EPrisonerFacialExpression__None                                                  = 0,
	EPrisonerFacialExpression__Angry1                                                = 1,
	EPrisonerFacialExpression__Angry2                                                = 2,
	EPrisonerFacialExpression__Hit                                                   = 3,
	EPrisonerFacialExpression__Punching                                              = 4,
	EPrisonerFacialExpression__Fear1                                                 = 5,
	EPrisonerFacialExpression__Fear2                                                 = 6,
	EPrisonerFacialExpression__Fear3                                                 = 7,
	EPrisonerFacialExpression__WhatTheHell1                                          = 8,
	EPrisonerFacialExpression__WhatTheHell2                                          = 9,
	EPrisonerFacialExpression__Whistling1                                            = 10,
	EPrisonerFacialExpression__Whistling2                                            = 11,
	EPrisonerFacialExpression__Ouch1                                                 = 12,
	EPrisonerFacialExpression__Ouch2                                                 = 13,
	EPrisonerFacialExpression__Count                                                 = 14
};

/// Enum /Script/ConZ.EPrisonerFirstPersonSubview
/// Size: 0x01 (1 bytes)
enum class EPrisonerFirstPersonSubview : uint8_t
{
	EPrisonerFirstPersonSubview__Standing                                            = 0,
	EPrisonerFirstPersonSubview__Crouching                                           = 1,
	EPrisonerFirstPersonSubview__Prone                                               = 2,
	EPrisonerFirstPersonSubview__StandingMelee                                       = 3,
	EPrisonerFirstPersonSubview__StandingAiming                                      = 4,
	EPrisonerFirstPersonSubview__CrouchingAiming                                     = 5,
	EPrisonerFirstPersonSubview__ProneAiming                                         = 6,
	EPrisonerFirstPersonSubview__StandingAimingDownTheSights                         = 7,
	EPrisonerFirstPersonSubview__CrouchingAimingDownTheSights                        = 8,
	EPrisonerFirstPersonSubview__ProneAimingDownTheSights                            = 9,
	EPrisonerFirstPersonSubview__Ladder                                              = 10,
	EPrisonerFirstPersonSubview__ClimbingWindow                                      = 11,
	EPrisonerFirstPersonSubview__Mounted                                             = 12,
	EPrisonerFirstPersonSubview__Lying                                               = 13,
	EPrisonerFirstPersonSubview__MountedDefaultStanceAiming                          = 14,
	EPrisonerFirstPersonSubview__MountedLeaningStanceAiming                          = 15,
	EPrisonerFirstPersonSubview__MountedDefaultStanceAimingDownTheSights             = 16,
	EPrisonerFirstPersonSubview__MountedLeaningStanceAimingDownTheSights             = 17,
	EPrisonerFirstPersonSubview__Count                                               = 18
};

/// Enum /Script/ConZ.EPrisonerVicinityItemSets
/// Size: 0x01 (1 bytes)
enum class EPrisonerVicinityItemSets : uint8_t
{
	EPrisonerVicinityItemSets__None                                                  = 0,
	EPrisonerVicinityItemSets__Items                                                 = 1,
	EPrisonerVicinityItemSets__Containers                                            = 2,
	EPrisonerVicinityItemSets__All                                                   = 3
};

/// Enum /Script/ConZ.EPrisonerInventoryItemSets
/// Size: 0x01 (1 bytes)
enum class EPrisonerInventoryItemSets : uint8_t
{
	EPrisonerInventoryItemSets__None                                                 = 0,
	EPrisonerInventoryItemSets__EquippedClothes                                      = 1,
	EPrisonerInventoryItemSets__ContainedItems                                       = 2,
	EPrisonerInventoryItemSets__All                                                  = 3
};

/// Enum /Script/ConZ.EPrisonerItemEquipType
/// Size: 0x01 (1 bytes)
enum class EPrisonerItemEquipType : uint8_t
{
	EPrisonerItemEquipType__Inventory                                                = 0,
	EPrisonerItemEquipType__Hands                                                    = 1,
	EPrisonerItemEquipType__Holsters                                                 = 2
};

/// Enum /Script/ConZ.EPrisonerDivingState
/// Size: 0x01 (1 bytes)
enum class EPrisonerDivingState : uint8_t
{
	EPrisonerDivingState__None                                                       = 0,
	EPrisonerDivingState__WantsToDive                                                = 1,
	EPrisonerDivingState__Diving                                                     = 2
};

/// Enum /Script/ConZ.EPrisonerMovementMode
/// Size: 0x01 (1 bytes)
enum class EPrisonerMovementMode : uint8_t
{
	EPrisonerMovementMode__None                                                      = 0,
	EPrisonerMovementMode__Climbing_Anchoring                                        = 1,
	EPrisonerMovementMode__Climbing_PlayingMontage                                   = 2,
	EPrisonerMovementMode__ClimbingLadder                                            = 3,
	EPrisonerMovementMode__ClimbingWindow_Anchoring                                  = 4,
	EPrisonerMovementMode__ClimbingWindow_PlayingMontage                             = 5,
	EPrisonerMovementMode__Anchoring                                                 = 6,
	EPrisonerMovementMode__RootMotionOnly                                            = 7
};

/// Enum /Script/ConZ.EPrisonerNameChangeErrorType
/// Size: 0x01 (1 bytes)
enum class EPrisonerNameChangeErrorType : uint8_t
{
	EPrisonerNameChangeErrorType__None                                               = 0,
	EPrisonerNameChangeErrorType__NameTooShort                                       = 1,
	EPrisonerNameChangeErrorType__NameTooLong                                        = 2,
	EPrisonerNameChangeErrorType__IllegalCharacterPresent                            = 3,
	EPrisonerNameChangeErrorType__NameChangeOnCooldown                               = 4,
	EPrisonerNameChangeErrorType__NameTaken                                          = 5,
	EPrisonerNameChangeErrorType__NameBlacklisted                                    = 6,
	EPrisonerNameChangeErrorType__InsufficientFunds                                  = 7,
	EPrisonerNameChangeErrorType__Other                                              = 8
};

/// Enum /Script/ConZ.EPrisonerPhotoModePoseGroup
/// Size: 0x01 (1 bytes)
enum class EPrisonerPhotoModePoseGroup : uint8_t
{
	EPrisonerPhotoModePoseGroup__Unarmed                                             = 0,
	EPrisonerPhotoModePoseGroup__Rifle                                               = 1,
	EPrisonerPhotoModePoseGroup__Handgun                                             = 2,
	EPrisonerPhotoModePoseGroup__Melee                                               = 3
};

/// Enum /Script/ConZ.EPrisonerRestingMode
/// Size: 0x01 (1 bytes)
enum class EPrisonerRestingMode : uint8_t
{
	EPrisonerRestingMode__None                                                       = 0,
	EPrisonerRestingMode__Sitting                                                    = 1,
	EPrisonerRestingMode__Lying                                                      = 2,
	EPrisonerRestingMode__Count                                                      = 3
};

/// Enum /Script/ConZ.EThrowingType
/// Size: 0x01 (1 bytes)
enum class EThrowingType : uint8_t
{
	EThrowingType__None                                                              = 0,
	EThrowingType__Near                                                              = 1,
	EThrowingType__Far                                                               = 2,
	EThrowingType__Aim                                                               = 3,
	EThrowingType__Throwback                                                         = 4
};

/// Enum /Script/ConZ.EPrisonerVisibilityFlag
/// Size: 0x01 (1 bytes)
enum class EPrisonerVisibilityFlag : uint8_t
{
	EPrisonerVisibilityFlag__None                                                    = 0,
	EPrisonerVisibilityFlag__Default                                                 = 1,
	EPrisonerVisibilityFlag__View                                                    = 2,
	EPrisonerVisibilityFlag__Awareness                                               = 4,
	EPrisonerVisibilityFlag__All                                                     = 255
};

/// Enum /Script/ConZ.EPrisonerAimOffsetType
/// Size: 0x01 (1 bytes)
enum class EPrisonerAimOffsetType : uint8_t
{
	EPrisonerAimOffsetType__Standing                                                 = 0,
	EPrisonerAimOffsetType__Crouching                                                = 1,
	EPrisonerAimOffsetType__Prone                                                    = 2,
	EPrisonerAimOffsetType__ProneMoving                                              = 3,
	EPrisonerAimOffsetType__FirstPersonView                                          = 4,
	EPrisonerAimOffsetType__FirstPersonViewProne                                     = 5,
	EPrisonerAimOffsetType__AimingDownTheSights                                      = 6,
	EPrisonerAimOffsetType__Count                                                    = 7
};

/// Enum /Script/ConZ.EPrisonerMontageBlendType
/// Size: 0x01 (1 bytes)
enum class EPrisonerMontageBlendType : uint8_t
{
	EPrisonerMontageBlendType__All                                                   = 0,
	EPrisonerMontageBlendType__LeftHand                                              = 1,
	EPrisonerMontageBlendType__RightHand                                             = 2
};

/// Enum /Script/ConZ.EPrisonerPostTeleportBehavior
/// Size: 0x01 (1 bytes)
enum class EPrisonerPostTeleportBehavior : uint8_t
{
	EPrisonerPostTeleportBehavior__None                                              = 0,
	EPrisonerPostTeleportBehavior__ReviveIfDead                                      = 1,
	EPrisonerPostTeleportBehavior__GameEventLoadout                                  = 2,
	EPrisonerPostTeleportBehavior__RagdollIfUnconscious                              = 3
};

/// Enum /Script/ConZ.EPrisonerHolsterSide
/// Size: 0x01 (1 bytes)
enum class EPrisonerHolsterSide : uint8_t
{
	EPrisonerHolsterSide__None                                                       = 0,
	EPrisonerHolsterSide__LeftShoulder                                               = 1,
	EPrisonerHolsterSide__RightShoulder                                              = 2
};

/// Enum /Script/ConZ.EWeaponAnimationPose
/// Size: 0x01 (1 bytes)
enum class EWeaponAnimationPose : uint8_t
{
	EWeaponAnimationPose__None                                                       = 0,
	EWeaponAnimationPose__Relaxed                                                    = 1,
	EWeaponAnimationPose__AimingHip                                                  = 2,
	EWeaponAnimationPose__AimingDownTheSights                                        = 3,
	EWeaponAnimationPose__AimingDownTheSightsStill                                   = 4,
	EWeaponAnimationPose__AimingDownTheSightsWalking                                 = 5,
	EWeaponAnimationPose__AimingDownTheSightsLimpingWalking                          = 6,
	EWeaponAnimationPose__Count                                                      = 7
};

/// Enum /Script/ConZ.ETabMenuSubTab
/// Size: 0x01 (1 bytes)
enum class ETabMenuSubTab : uint8_t
{
	ETabMenuSubTab__Last                                                             = 0,
	ETabMenuSubTab__ItemsCrafting                                                    = 1,
	ETabMenuSubTab__BaseBuilding                                                     = 2,
	ETabMenuSubTab__Cooking                                                          = 3,
	ETabMenuSubTab__Buy                                                              = 4,
	ETabMenuSubTab__Sell                                                             = 5,
	ETabMenuSubTab__Depot                                                            = 6
};

/// Enum /Script/ConZ.ETabMenuTab
/// Size: 0x01 (1 bytes)
enum class ETabMenuTab : uint8_t
{
	ETabMenuTab__None                                                                = 0,
	ETabMenuTab__Last                                                                = 1,
	ETabMenuTab__Inventory                                                           = 2,
	ETabMenuTab__Crafting                                                            = 3,
	ETabMenuTab__Health                                                              = 4,
	ETabMenuTab__Metabolism                                                          = 5,
	ETabMenuTab__Journal                                                             = 6,
	ETabMenuTab__Manual                                                              = 7,
	ETabMenuTab__Squad                                                               = 8,
	ETabMenuTab__Events                                                              = 9,
	ETabMenuTab__Trading                                                             = 10
};

/// Enum /Script/ConZ.EClothesPart
/// Size: 0x01 (1 bytes)
enum class EClothesPart : uint8_t
{
	EClothesPart__None                                                               = 0,
	EClothesPart__BodyUpper                                                          = 1,
	EClothesPart__BodyLower                                                          = 2,
	EClothesPart__Head                                                               = 3,
	EClothesPart__Eyes                                                               = 4,
	EClothesPart__Neck                                                               = 5,
	EClothesPart__Hands                                                              = 6,
	EClothesPart__ArmUpper                                                           = 7,
	EClothesPart__ArmLower                                                           = 8,
	EClothesPart__Legs                                                               = 9,
	EClothesPart__Feet                                                               = 10,
	EClothesPart__Count                                                              = 11
};

/// Enum /Script/ConZ.EPrisonerReplicatedComponent
/// Size: 0x01 (1 bytes)
enum class EPrisonerReplicatedComponent : uint8_t
{
	EPrisonerReplicatedComponent__SkillComponent                                     = 0,
	EPrisonerReplicatedComponent__InventoryComponent                                 = 1,
	EPrisonerReplicatedComponent__HitReactComponent                                  = 2,
	EPrisonerReplicatedComponent__InteractionComponent                               = 3,
	EPrisonerReplicatedComponent__BodySimulationComponent                            = 4,
	EPrisonerReplicatedComponent__Count                                              = 5
};

/// Enum /Script/ConZ.EPrisonerThirdPersonSubview
/// Size: 0x01 (1 bytes)
enum class EPrisonerThirdPersonSubview : uint8_t
{
	EPrisonerThirdPersonSubview__Standing                                            = 0,
	EPrisonerThirdPersonSubview__Crouching                                           = 1,
	EPrisonerThirdPersonSubview__Prone                                               = 2,
	EPrisonerThirdPersonSubview__StandingMelee                                       = 3,
	EPrisonerThirdPersonSubview__StandingAiming                                      = 4,
	EPrisonerThirdPersonSubview__CrouchingAiming                                     = 5,
	EPrisonerThirdPersonSubview__ProneAiming                                         = 6,
	EPrisonerThirdPersonSubview__Ragdoll                                             = 7,
	EPrisonerThirdPersonSubview__Grappled                                            = 8,
	EPrisonerThirdPersonSubview__NarrowLadder                                        = 9,
	EPrisonerThirdPersonSubview__Swimming                                            = 10,
	EPrisonerThirdPersonSubview__Diving                                              = 11,
	EPrisonerThirdPersonSubview__ClimbingWindow                                      = 12,
	EPrisonerThirdPersonSubview__Defecating                                          = 13,
	EPrisonerThirdPersonSubview__Throwing                                            = 14,
	EPrisonerThirdPersonSubview__Falling                                             = 15,
	EPrisonerThirdPersonSubview__Count                                               = 16
};

/// Enum /Script/ConZ.EPlayerSideView
/// Size: 0x01 (1 bytes)
enum class EPlayerSideView : uint8_t
{
	EPlayerSideView__Left                                                            = 0,
	EPlayerSideView__Right                                                           = 1,
	EPlayerSideView__Count                                                           = 2
};

/// Enum /Script/ConZ.EThrowingState
/// Size: 0x01 (1 bytes)
enum class EThrowingState : uint8_t
{
	EThrowingState__None                                                             = 0,
	EThrowingState__Cancelled                                                        = 1,
	EThrowingState__Aiming                                                           = 2,
	EThrowingState__ThrowFromAim                                                     = 3,
	EThrowingState__Throwing                                                         = 4,
	EThrowingState__Lobbing                                                          = 5,
	EThrowingState__Throwback                                                        = 6,
	EThrowingState__Finish                                                           = 7
};

/// Enum /Script/ConZ.EPrisonerUITooltipSectionName
/// Size: 0x01 (1 bytes)
enum class EPrisonerUITooltipSectionName : uint8_t
{
	EPrisonerUITooltipSectionName__None                                              = 0,
	EPrisonerUITooltipSectionName__Affects                                           = 1,
	EPrisonerUITooltipSectionName__AffectedBy                                        = 2,
	EPrisonerUITooltipSectionName__CausedBy                                          = 3,
	EPrisonerUITooltipSectionName__Symptoms                                          = 4,
	EPrisonerUITooltipSectionName__Count                                             = 5
};

/// Enum /Script/ConZ.EPrisonerUIAttribute
/// Size: 0x01 (1 bytes)
enum class EPrisonerUIAttribute : uint8_t
{
	EPrisonerUIAttribute__CA_Strength                                                = 0,
	EPrisonerUIAttribute__CA_Constitution                                            = 1,
	EPrisonerUIAttribute__CA_Dexterity                                               = 2,
	EPrisonerUIAttribute__CA_Intelligence                                            = 3,
	EPrisonerUIAttribute__BI_Age                                                     = 4,
	EPrisonerUIAttribute__BI_Lifetime                                                = 5,
	EPrisonerUIAttribute__BI_Weight                                                  = 6,
	EPrisonerUIAttribute__BI_Health                                                  = 7,
	EPrisonerUIAttribute__BI_Teeth                                                   = 8,
	EPrisonerUIAttribute__BI_BloodType                                               = 9,
	EPrisonerUIAttribute__BI_BloodVolume                                             = 10,
	EPrisonerUIAttribute__BI_Temperature                                             = 11,
	EPrisonerUIAttribute__PD_Stamina                                                 = 12,
	EPrisonerUIAttribute__PD_StaminaChangeRate                                       = 13,
	EPrisonerUIAttribute__PD_Unused1                                                 = 14,
	EPrisonerUIAttribute__PD_Unused2                                                 = 15,
	EPrisonerUIAttribute__PD_ActionDifficulty                                        = 16,
	EPrisonerUIAttribute__PD_WeightLoad                                              = 17,
	EPrisonerUIAttribute__PD_WalkSpeed                                               = 18,
	EPrisonerUIAttribute__PD_JogSpeed                                                = 19,
	EPrisonerUIAttribute__PD_RunSpeed                                                = 20,
	EPrisonerUIAttribute__PD_CaloriesOverloadPenalty                                 = 21,
	EPrisonerUIAttribute__PD_WaterOverloadPenalty                                    = 22,
	EPrisonerUIAttribute__PI_HealingSpeed                                            = 23,
	EPrisonerUIAttribute__PI_BloodRecoveryRate                                       = 24,
	EPrisonerUIAttribute__PI_ImmuneSystem                                            = 25,
	EPrisonerUIAttribute__PI_PerformanceScore                                        = 26,
	EPrisonerUIAttribute__PI_StealthFactor                                           = 27,
	EPrisonerUIAttribute__PI_MeleeDamage                                             = 28,
	EPrisonerUIAttribute__NAS_Protein                                                = 29,
	EPrisonerUIAttribute__NAS_Carbs                                                  = 30,
	EPrisonerUIAttribute__NAS_Fat                                                    = 31,
	EPrisonerUIAttribute__NAS_Minerals                                               = 32,
	EPrisonerUIAttribute__NAS_Vitamins                                               = 33,
	EPrisonerUIAttribute__NAS_Water                                                  = 34,
	EPrisonerUIAttribute__NAS_Alcohol                                                = 35,
	EPrisonerUIAttribute__BMD_Bones                                                  = 36,
	EPrisonerUIAttribute__BMD_Blood                                                  = 37,
	EPrisonerUIAttribute__BMD_Intestines                                             = 38,
	EPrisonerUIAttribute__BMD_Skin                                                   = 39,
	EPrisonerUIAttribute__BMD_Organs                                                 = 40,
	EPrisonerUIAttribute__BMD_Fat                                                    = 41,
	EPrisonerUIAttribute__BMD_Muscle                                                 = 42,
	EPrisonerUIAttribute__BS_Unconsciousness                                         = 43,
	EPrisonerUIAttribute__BS_Coma                                                    = 44,
	EPrisonerUIAttribute__BS_Death                                                   = 45,
	EPrisonerUIAttribute__NU_Calories                                                = 46,
	EPrisonerUIAttribute__NU_Water                                                   = 47,
	EPrisonerUIAttribute__MR_Protein                                                 = 48,
	EPrisonerUIAttribute__MR_Carbs                                                   = 49,
	EPrisonerUIAttribute__MR_Fat                                                     = 50,
	EPrisonerUIAttribute__MR_Fiber                                                   = 51,
	EPrisonerUIAttribute__MR_Sugar                                                   = 52,
	EPrisonerUIAttribute__MR_SaturatedFat                                            = 53,
	EPrisonerUIAttribute__MR_Alcohol                                                 = 54,
	EPrisonerUIAttribute__BR_Muscle                                                  = 55,
	EPrisonerUIAttribute__BR_Fat                                                     = 56,
	EPrisonerUIAttribute__VI_VitaminA                                                = 57,
	EPrisonerUIAttribute__VI_VitaminB1                                               = 58,
	EPrisonerUIAttribute__VI_VitaminB2                                               = 59,
	EPrisonerUIAttribute__VI_VitaminB3                                               = 60,
	EPrisonerUIAttribute__VI_VitaminB4                                               = 61,
	EPrisonerUIAttribute__VI_VitaminB5                                               = 62,
	EPrisonerUIAttribute__VI_VitaminB6                                               = 63,
	EPrisonerUIAttribute__VI_VitaminB9                                               = 64,
	EPrisonerUIAttribute__VI_VitaminB12                                              = 65,
	EPrisonerUIAttribute__VI_VitaminC                                                = 66,
	EPrisonerUIAttribute__VI_VitaminD                                                = 67,
	EPrisonerUIAttribute__VI_VitaminE                                                = 68,
	EPrisonerUIAttribute__VI_VitaminK                                                = 69,
	EPrisonerUIAttribute__MI_MineralCa                                               = 70,
	EPrisonerUIAttribute__MI_MineralFe                                               = 71,
	EPrisonerUIAttribute__MI_MineralMg                                               = 72,
	EPrisonerUIAttribute__MI_MineralP                                                = 73,
	EPrisonerUIAttribute__MI_MineralK                                                = 74,
	EPrisonerUIAttribute__MI_MineralZn                                               = 75,
	EPrisonerUIAttribute__MI_MineralCu                                               = 76,
	EPrisonerUIAttribute__MI_MineralMn                                               = 77,
	EPrisonerUIAttribute__MI_MineralSe                                               = 78,
	EPrisonerUIAttribute__MI_MineralNa                                               = 79,
	EPrisonerUIAttribute__DI_Stomach                                                 = 80,
	EPrisonerUIAttribute__DI_Intestine                                               = 81,
	EPrisonerUIAttribute__DI_Colon                                                   = 82,
	EPrisonerUIAttribute__DI_Bladder                                                 = 83,
	EPrisonerUIAttribute__Count                                                      = 84
};

/// Enum /Script/ConZ.EInstallVehicleAttachmentActionMethod
/// Size: 0x01 (1 bytes)
enum class EInstallVehicleAttachmentActionMethod : uint8_t
{
	EInstallVehicleAttachmentActionMethod__InstallWithSkill                          = 0,
	EInstallVehicleAttachmentActionMethod__PayForInstallation                        = 1,
	EInstallVehicleAttachmentActionMethod__BuyNewAttachment                          = 2
};

/// Enum /Script/ConZ.ERemoveVehicleAttachmentActionMethod
/// Size: 0x01 (1 bytes)
enum class ERemoveVehicleAttachmentActionMethod : uint8_t
{
	ERemoveVehicleAttachmentActionMethod__RemoveWithSkill                            = 0,
	ERemoveVehicleAttachmentActionMethod__PayForRemoval                              = 1,
	ERemoveVehicleAttachmentActionMethod__SellAttachment                             = 2
};

/// Enum /Script/ConZ.ERepairVehicleAttachmentActionMethod
/// Size: 0x01 (1 bytes)
enum class ERepairVehicleAttachmentActionMethod : uint8_t
{
	ERepairVehicleAttachmentActionMethod__RepairWithSkill                            = 0,
	ERepairVehicleAttachmentActionMethod__PayForRepair                               = 1
};

/// Enum /Script/ConZ.EProjectileFlags
/// Size: 0x01 (1 bytes)
enum class EProjectileFlags : uint8_t
{
	EProjectileFlags__None                                                           = 0,
	EProjectileFlags__CreatedOnServer                                                = 1,
	EProjectileFlags__AIProjectile                                                   = 2
};

/// Enum /Script/ConZ.EPenetrationType
/// Size: 0x01 (1 bytes)
enum class EPenetrationType : uint8_t
{
	EPenetrationType__None                                                           = 0,
	EPenetrationType__Entry                                                          = 1,
	EPenetrationType__Exit                                                           = 2,
	EPenetrationType__Both                                                           = 3
};

/// Enum /Script/ConZ.EWindSpeedCategory
/// Size: 0x01 (1 bytes)
enum class EWindSpeedCategory : uint8_t
{
	EWindSpeedCategory__Zero                                                         = 0,
	EWindSpeedCategory__Low                                                          = 1,
	EWindSpeedCategory__Medium                                                       = 2,
	EWindSpeedCategory__High                                                         = 3
};

/// Enum /Script/ConZ.EBallisticDragModel
/// Size: 0x01 (1 bytes)
enum class EBallisticDragModel : uint8_t
{
	EBallisticDragModel__G1                                                          = 0,
	EBallisticDragModel__G2                                                          = 1,
	EBallisticDragModel__G5                                                          = 2,
	EBallisticDragModel__G6                                                          = 3,
	EBallisticDragModel__G7                                                          = 4,
	EBallisticDragModel__G8                                                          = 5
};

/// Enum /Script/ConZ.EQuestBookStates
/// Size: 0x01 (1 bytes)
enum class EQuestBookStates : uint8_t
{
	EQuestBookStates__None                                                           = 0,
	EQuestBookStates__BookOpened                                                     = 1,
	EQuestBookStates__FlippingPage                                                   = 2,
	EQuestBookStates__HoldingAccept                                                  = 4
};

/// Enum /Script/ConZ.EQuestGiverType
/// Size: 0x01 (1 bytes)
enum class EQuestGiverType : uint8_t
{
	EQuestGiverType__Other                                                           = 0,
	EQuestGiverType__Trader                                                          = 1,
	EQuestGiverType__NoticeBoard                                                     = 2,
	EQuestGiverType__MobilePhone                                                     = 3
};

/// Enum /Script/ConZ.EQuestStartLimiterFlags
/// Size: 0x04 (4 bytes)
enum class EQuestStartLimiterFlags : uint32_t
{
	EQuestStartLimiterFlags__None                                                    = 0,
	EQuestStartLimiterFlags__TierLocked                                              = 1,
	EQuestStartLimiterFlags__TraderLocked                                            = 2,
	EQuestStartLimiterFlags__PerTraderPerCycleLimit                                  = 4,
	EQuestStartLimiterFlags__PerTraderSimultaneousLimit                              = 8,
	EQuestStartLimiterFlags__NotOnClient                                             = 1048576,
	EQuestStartLimiterFlags__Unknown                                                 = 2097152
};

/// Enum /Script/ConZ.EItemAttachTriggerType
/// Size: 0x01 (1 bytes)
enum class EItemAttachTriggerType : uint8_t
{
	EItemAttachTriggerType__Unequip                                                  = 0,
	EItemAttachTriggerType__Equip                                                    = 1
};

/// Enum /Script/ConZ.EPlaceableActorTriggerType
/// Size: 0x01 (1 bytes)
enum class EPlaceableActorTriggerType : uint8_t
{
	EPlaceableActorTriggerType__Placed                                               = 0,
	EPlaceableActorTriggerType__Finished                                             = 1
};

/// Enum /Script/ConZ.EPrisonerActionTriggerType
/// Size: 0x01 (1 bytes)
enum class EPrisonerActionTriggerType : uint8_t
{
	EPrisonerActionTriggerType__OnStart                                              = 0,
	EPrisonerActionTriggerType__OnComplete                                           = 1
};

/// Enum /Script/ConZ.EQuestGiverSectorSelectionType
/// Size: 0x01 (1 bytes)
enum class EQuestGiverSectorSelectionType : uint8_t
{
	Nearest                                                                          = 0,
	Random                                                                           = 1
};

/// Enum /Script/ConZ.EQuiverActiveMesh
/// Size: 0x01 (1 bytes)
enum class EQuiverActiveMesh : uint8_t
{
	EQuiverActiveMesh__Static                                                        = 0,
	EQuiverActiveMesh__Skeletal                                                      = 1,
	EQuiverActiveMesh__SkeletalAlternative                                           = 2
};

/// Enum /Script/ConZ.ERaidProtectionType
/// Size: 0x01 (1 bytes)
enum class ERaidProtectionType : uint8_t
{
	ERaidProtectionType__None                                                        = 0,
	ERaidProtectionType__OfflineRaidProtection                                       = 1,
	ERaidProtectionType__FlagSpecificRaidProtection                                  = 2,
	ERaidProtectionType__GlobalRaidProtection                                        = 3
};

/// Enum /Script/ConZ.ERangedResourceFunctionCallType
/// Size: 0x01 (1 bytes)
enum class ERangedResourceFunctionCallType : uint8_t
{
	ERangedResourceFunctionCallType__Internal                                        = 0,
	ERangedResourceFunctionCallType__External                                        = 1
};

/// Enum /Script/ConZ.ERazorCustomMovementMode
/// Size: 0x01 (1 bytes)
enum class ERazorCustomMovementMode : uint8_t
{
	ERazorCustomMovementMode__None                                                   = 0,
	ERazorCustomMovementMode__Anchoring                                              = 1
};

/// Enum /Script/ConZ.ERazorDeathType
/// Size: 0x01 (1 bytes)
enum class ERazorDeathType : uint8_t
{
	ERazorDeathType__Unknown                                                         = 0,
	ERazorDeathType__Projectile                                                      = 1,
	ERazorDeathType__Melee                                                           = 2,
	ERazorDeathType__WeakSpot                                                        = 3
};

/// Enum /Script/ConZ.ERazorTurnMontage
/// Size: 0x01 (1 bytes)
enum class ERazorTurnMontage : uint8_t
{
	ERazorTurnMontage__AlertedIdle                                                   = 0,
	ERazorTurnMontage__SleepingIdle                                                  = 1,
	ERazorTurnMontage__Count                                                         = 2
};

/// Enum /Script/ConZ.ERazorMontageType
/// Size: 0x01 (1 bytes)
enum class ERazorMontageType : uint8_t
{
	ERazorMontageType__SuddenWakeUp                                                  = 0,
	ERazorMontageType__NormalWakeUp                                                  = 1,
	ERazorMontageType__EnterCombat                                                   = 2,
	ERazorMontageType__MountJump                                                     = 3,
	ERazorMontageType__MountFail                                                     = 4,
	ERazorMontageType__MountFailToTallObstacle                                       = 5,
	ERazorMontageType__MountFailToShortObstacle                                      = 6,
	ERazorMontageType__VentilationSpawnAttack                                        = 7,
	ERazorMontageType__InitiateMountAttackCharge                                     = 8,
	ERazorMontageType__Intimidation                                                  = 9,
	ERazorMontageType__VentilationSpawnAttackEnd                                     = 10
};

/// Enum /Script/ConZ.ERazorSleepingStage
/// Size: 0x01 (1 bytes)
enum class ERazorSleepingStage : uint8_t
{
	ERazorSleepingStage__Sleeping                                                    = 0,
	ERazorSleepingStage__SleepingCommotion                                           = 1,
	ERazorSleepingStage__SleepingAboutToWakeUp                                       = 2,
	ERazorSleepingStage__Awakened                                                    = 3,
	ERazorSleepingStage__Count                                                       = 4
};

/// Enum /Script/ConZ.ERazorCombatVariation
/// Size: 0x01 (1 bytes)
enum class ERazorCombatVariation : uint8_t
{
	ERazorCombatVariation__Normal                                                    = 0,
	ERazorCombatVariation__MountAttack                                               = 1,
	ERazorCombatVariation__Count                                                     = 2
};

/// Enum /Script/ConZ.ERazorAIState
/// Size: 0x01 (1 bytes)
enum class ERazorAIState : uint8_t
{
	ERazorAIState__None                                                              = 0,
	ERazorAIState__Sleeping                                                          = 1,
	ERazorAIState__Alerted                                                           = 2,
	ERazorAIState__AlertedAggressive                                                 = 3,
	ERazorAIState__Combat                                                            = 4,
	ERazorAIState__VentilationSpawn                                                  = 5,
	ERazorAIState__VentilationDespawn                                                = 6,
	ERazorAIState__MoveAfterTargetOutsideOfBunker                                    = 7
};

/// Enum /Script/ConZ.ERazorStance
/// Size: 0x01 (1 bytes)
enum class ERazorStance : uint8_t
{
	ERazorStance__None                                                               = 0,
	ERazorStance__Sleeping                                                           = 1,
	ERazorStance__Alerted                                                            = 2,
	ERazorStance__AlertedAggressive                                                  = 3,
	ERazorStance__Combat                                                             = 4,
	ERazorStance__VentilationSpawn                                                   = 5,
	ERazorStance__Count                                                              = 6
};

/// Enum /Script/ConZ.ERepairType
/// Size: 0x01 (1 bytes)
enum class ERepairType : uint8_t
{
	ERepairType__None                                                                = 0,
	ERepairType__RepairHealth                                                        = 1
};

/// Enum /Script/ConZ.EEngineeringEventType
/// Size: 0x01 (1 bytes)
enum class EEngineeringEventType : uint8_t
{
	EEngineeringEventType__Build                                                     = 0,
	EEngineeringEventType__Repair                                                    = 1,
	EEngineeringEventType__FillContainer                                             = 2,
	EEngineeringEventType__FillVehicle                                               = 3,
	EEngineeringEventType__DrainVehicle                                              = 4,
	EEngineeringEventType__FillItem                                                  = 5
};

/// Enum /Script/ConZ.ERespawnOption
/// Size: 0x01 (1 bytes)
enum class ERespawnOption : uint8_t
{
	ERespawnOption__Random                                                           = 0,
	ERespawnOption__Sector                                                           = 1,
	ERespawnOption__Shelter                                                          = 2,
	ERespawnOption__Squad                                                            = 3
};

/// Enum /Script/ConZ.ERotationDirection
/// Size: 0x01 (1 bytes)
enum class ERotationDirection : uint8_t
{
	ERotationDirection__Clockwise                                                    = 0,
	ERotationDirection__CounterClockwise                                             = 1
};

/// Enum /Script/ConZ.EScopingView
/// Size: 0x01 (1 bytes)
enum class EScopingView : uint8_t
{
	EScopingView__FirstPerson                                                        = 0,
	EScopingView__ThirdPerson                                                        = 1
};

/// Enum /Script/ConZ.EScopingStance
/// Size: 0x01 (1 bytes)
enum class EScopingStance : uint8_t
{
	EScopingStance__Standing                                                         = 0,
	EScopingStance__Crouching                                                        = 1,
	EScopingStance__Prone                                                            = 2
};

/// Enum /Script/ConZ.EScrollingSizeBoxScrollDemand
/// Size: 0x01 (1 bytes)
enum class EScrollingSizeBoxScrollDemand : uint8_t
{
	EScrollingSizeBoxScrollDemand__OnHover                                           = 0,
	EScrollingSizeBoxScrollDemand__Automatic                                         = 1
};

/// Enum /Script/ConZ.EScrollingSizeBoxDynamic
/// Size: 0x01 (1 bytes)
enum class EScrollingSizeBoxDynamic : uint8_t
{
	EScrollingSizeBoxDynamic__Linear                                                 = 0,
	EScrollingSizeBoxDynamic__Gaussian                                               = 1
};

/// Enum /Script/ConZ.EScrollingSizeBoxLoopingType
/// Size: 0x01 (1 bytes)
enum class EScrollingSizeBoxLoopingType : uint8_t
{
	EScrollingSizeBoxLoopingType__WithinContent                                      = 0,
	EScrollingSizeBoxLoopingType__BeyondContent                                      = 1
};

/// Enum /Script/ConZ.EScrollingSizeBoxDirection
/// Size: 0x01 (1 bytes)
enum class EScrollingSizeBoxDirection : uint8_t
{
	EScrollingSizeBoxDirection__ScrollsLeftwards                                     = 0,
	EScrollingSizeBoxDirection__ScrollsUpwards                                       = 1,
	EScrollingSizeBoxDirection__ScrollsRightwards                                    = 2,
	EScrollingSizeBoxDirection__ScrollsDownwards                                     = 3
};

/// Enum /Script/ConZ.EBackgroundInteractionPlayType
/// Size: 0x01 (1 bytes)
enum class EBackgroundInteractionPlayType : uint8_t
{
	EBackgroundInteractionPlayType__OneShot                                          = 0,
	EBackgroundInteractionPlayType__Begin                                            = 1,
	EBackgroundInteractionPlayType__Tick                                             = 2,
	EBackgroundInteractionPlayType__End                                              = 3
};

/// Enum /Script/ConZ.EBackgroundInteractionType
/// Size: 0x01 (1 bytes)
enum class EBackgroundInteractionType : uint8_t
{
	EBackgroundInteractionType__None                                                 = 0,
	EBackgroundInteractionType__Random                                               = 1,
	EBackgroundInteractionType__Greeting                                             = 2,
	EBackgroundInteractionType__TradeBegin                                           = 3,
	EBackgroundInteractionType__BuyTab                                               = 4,
	EBackgroundInteractionType__SellTab                                              = 5,
	EBackgroundInteractionType__TradeEnd                                             = 6,
	EBackgroundInteractionType__Parting                                              = 7,
	EBackgroundInteractionType__Angry                                                = 8,
	EBackgroundInteractionType__AngerRecovery                                        = 9,
	EBackgroundInteractionType__GreetingSpecialOffer                                 = 10,
	EBackgroundInteractionType__Num                                                  = 11
};

/// Enum /Script/ConZ.ESentryGrenadeLaunchAttackVariation
/// Size: 0x01 (1 bytes)
enum class ESentryGrenadeLaunchAttackVariation : uint8_t
{
	ESentryGrenadeLaunchAttackVariation__ExplosiveGrenade                            = 0,
	ESentryGrenadeLaunchAttackVariation__TearGasGrenade                              = 1,
	ESentryGrenadeLaunchAttackVariation__StunGrenade                                 = 2,
	ESentryGrenadeLaunchAttackVariation__Count                                       = 3
};

/// Enum /Script/ConZ.ESentryCombatVariation
/// Size: 0x01 (1 bytes)
enum class ESentryCombatVariation : uint8_t
{
	ESentryCombatVariation__None                                                     = 0,
	ESentryCombatVariation__Normal                                                   = 1,
	ESentryCombatVariation__GunsHighFireRate                                         = 2,
	ESentryCombatVariation__SingleShotHighPrecision                                  = 3,
	ESentryCombatVariation__GrenadeLaunch                                            = 4,
	ESentryCombatVariation__Count                                                    = 5
};

/// Enum /Script/ConZ.ESentryAttackMode
/// Size: 0x01 (1 bytes)
enum class ESentryAttackMode : uint8_t
{
	ESentryAttackMode__Melee                                                         = 0,
	ESentryAttackMode__MediumRange                                                   = 1,
	ESentryAttackMode__LongRange                                                     = 2,
	ESentryAttackMode__Count                                                         = 3
};

/// Enum /Script/ConZ.ESentryHealthState
/// Size: 0x01 (1 bytes)
enum class ESentryHealthState : uint8_t
{
	ESentryHealthState__Healthy                                                      = 0,
	ESentryHealthState__SlightlyDamaged                                              = 1,
	ESentryHealthState__LimpingLight                                                 = 2,
	ESentryHealthState__LimpingMedium                                                = 3,
	ESentryHealthState__LimpingHeavy                                                 = 4,
	ESentryHealthState__Dead                                                         = 5,
	ESentryHealthState__Count                                                        = 6
};

/// Enum /Script/ConZ.ESentryStance
/// Size: 0x01 (1 bytes)
enum class ESentryStance : uint8_t
{
	ESentryStance__None                                                              = 0,
	ESentryStance__Relaxed                                                           = 1,
	ESentryStance__Alerted                                                           = 2,
	ESentryStance__Combat                                                            = 3,
	ESentryStance__Offline                                                           = 4
};

/// Enum /Script/ConZ.ESentryMovementPace2
/// Size: 0x01 (1 bytes)
enum class ESentryMovementPace2 : uint8_t
{
	ESentryMovementPace2__Walking                                                    = 0,
	ESentryMovementPace2__Running                                                    = 1,
	ESentryMovementPace2__Count                                                      = 2
};

/// Enum /Script/ConZ.ESentryState2
/// Size: 0x01 (1 bytes)
enum class ESentryState2 : uint8_t
{
	ESentryState2__None                                                              = 0,
	ESentryState2__Initial                                                           = 1,
	ESentryState2__Patrolling_Walking                                                = 2,
	ESentryState2__Patrolling_CheckSurroundings                                      = 3,
	ESentryState2__InvestigatingLocation                                             = 4,
	ESentryState2__InvestigatingBuilding                                             = 5,
	ESentryState2__GuardLocation                                                     = 6,
	ESentryState2__EnemySpotted                                                      = 7,
	ESentryState2__Alerted                                                           = 8,
	ESentryState2__ObserveEnemyMovement                                              = 9,
	ESentryState2__Combat                                                            = 10,
	ESentryState2__Combat_LostSight                                                  = 11,
	ESentryState2__Deactivated                                                       = 12,
	ESentryState2__Activating                                                        = 13,
	ESentryState2__AttackingBB                                                       = 14,
	ESentryState2__LeavingAfterBBAttack                                              = 15,
	ESentryState2__Count                                                             = 16
};

/// Enum /Script/ConZ.ESentryThirdPersonSubview
/// Size: 0x01 (1 bytes)
enum class ESentryThirdPersonSubview : uint8_t
{
	ESentryThirdPersonSubview__Standing                                              = 0,
	ESentryThirdPersonSubview__StandingAiming                                        = 1,
	ESentryThirdPersonSubview__Count                                                 = 2
};

/// Enum /Script/ConZ.ESortType
/// Size: 0x01 (1 bytes)
enum class ESortType : uint8_t
{
	ESortType__None                                                                  = 0,
	ESortType__Host                                                                  = 1,
	ESortType__Password                                                              = 2,
	ESortType__Mode                                                                  = 3,
	ESortType__Version                                                               = 4,
	ESortType__Time                                                                  = 5,
	ESortType__Friends                                                               = 6,
	ESortType__Players                                                               = 7,
	ESortType__Ping                                                                  = 8,
	ESortType__Favorites                                                             = 9,
	ESortType__Official                                                              = 10
};

/// Enum /Script/ConZ.EServerBrowserTab
/// Size: 0x01 (1 bytes)
enum class EServerBrowserTab : uint8_t
{
	EServerBrowserTab__Internet                                                      = 0,
	EServerBrowserTab__Favorites                                                     = 1,
	EServerBrowserTab__LastPlayed                                                    = 2
};

/// Enum /Script/ConZ.EServerRegion
/// Size: 0x01 (1 bytes)
enum class EServerRegion : uint8_t
{
	EServerRegion__Any                                                               = 0,
	EServerRegion__Africa                                                            = 1,
	EServerRegion__Europe                                                            = 2,
	EServerRegion__Australia                                                         = 3,
	EServerRegion__NA                                                                = 4,
	EServerRegion__SA                                                                = 5,
	EServerRegion__Asia                                                              = 6,
	EServerRegion__Russia                                                            = 7,
	EServerRegion__Unknown                                                           = 8,
	EServerRegion__Count                                                             = 9
};

/// Enum /Script/ConZ.ESharkState
/// Size: 0x01 (1 bytes)
enum class ESharkState : uint8_t
{
	ESharkState__None                                                                = 0,
	ESharkState__Wandering                                                           = 1,
	ESharkState__Pursuing                                                            = 2,
	ESharkState__Circling                                                            = 3,
	ESharkState__Aggressive                                                          = 4,
	ESharkState__GrabAttack                                                          = 5,
	ESharkState__Fleeing                                                             = 6,
	ESharkState__PreparingForDestruction                                             = 7
};

/// Enum /Script/ConZ.ESimpleAnimalMode
/// Size: 0x01 (1 bytes)
enum class ESimpleAnimalMode : uint8_t
{
	ESimpleAnimalMode__Wander                                                        = 0,
	ESimpleAnimalMode__Flee                                                          = 1
};

/// Enum /Script/ConZ.ESkillReplicationID
/// Size: 0x01 (1 bytes)
enum class ESkillReplicationID : uint8_t
{
	ESkillReplicationID__None                                                        = 0,
	ESkillReplicationID__EnduranceSkill                                              = 1,
	ESkillReplicationID__ResistanceSkill                                             = 2,
	ESkillReplicationID__RunningSkill                                                = 3,
	ESkillReplicationID__SwimmingSkill                                               = 4,
	ESkillReplicationID__MedicalSkill                                                = 5,
	ESkillReplicationID__AwarenessSkill                                              = 6,
	ESkillReplicationID__StealthSkill                                                = 7,
	ESkillReplicationID__AnimalHandlingSkill                                         = 8,
	ESkillReplicationID__CookingSkill                                                = 9,
	ESkillReplicationID__SurvivalSkill                                               = 10,
	ESkillReplicationID__BioChemSkill                                                = 11,
	ESkillReplicationID__BoxingSkill                                                 = 12,
	ESkillReplicationID__MeleeWeaponsSkill                                           = 13,
	ESkillReplicationID__RiflesSkill                                                 = 14,
	ESkillReplicationID__HandgunSkill                                                = 15,
	ESkillReplicationID__SnipingSkill                                                = 16,
	ESkillReplicationID__CamouflageSkill                                             = 17,
	ESkillReplicationID__TacticsSkill                                                = 18,
	ESkillReplicationID__ThrowingSkill                                               = 19,
	ESkillReplicationID__ArcherySkill                                                = 20,
	ESkillReplicationID__ThieverySkill                                               = 21,
	ESkillReplicationID__DrivingSkill                                                = 22,
	ESkillReplicationID__MotorcycleSkill                                             = 23,
	ESkillReplicationID__EngineeringSkill                                            = 24,
	ESkillReplicationID__DemolitionSkill                                             = 25,
	ESkillReplicationID__AviationSkill                                               = 26,
	ESkillReplicationID__FarmingSkill                                                = 27
};

/// Enum /Script/ConZ.ESortByType
/// Size: 0x01 (1 bytes)
enum class ESortByType : uint8_t
{
	Descending                                                                       = 0,
	Ascending                                                                        = 1
};

/// Enum /Script/ConZ.ESortOrder
/// Size: 0x01 (1 bytes)
enum class ESortOrder : uint8_t
{
	ESortOrder__Ascending                                                            = 0,
	ESortOrder__Descending                                                           = 1
};

/// Enum /Script/ConZ.EStartLocationTypeFlags
/// Size: 0x01 (1 bytes)
enum class EStartLocationTypeFlags : uint8_t
{
	EStartLocationTypeFlags__None                                                    = 0,
	EStartLocationTypeFlags__Player                                                  = 1,
	EStartLocationTypeFlags__PlayerTournament                                        = 2,
	EStartLocationTypeFlags__CargoDrop                                               = 4
};

/// Enum /Script/ConZ.ESurvivalStatsSubcategory
/// Size: 0x01 (1 bytes)
enum class ESurvivalStatsSubcategory : uint8_t
{
	ESurvivalStatsSubcategory__General                                               = 0,
	ESurvivalStatsSubcategory__Food                                                  = 1,
	ESurvivalStatsSubcategory__Hunting                                               = 2,
	ESurvivalStatsSubcategory__Fishing                                               = 3,
	ESurvivalStatsSubcategory__Travel                                                = 4,
	ESurvivalStatsSubcategory__Metabolism                                            = 5,
	ESurvivalStatsSubcategory__Crafting                                              = 6,
	ESurvivalStatsSubcategory__Combat                                                = 7,
	ESurvivalStatsSubcategory__Events                                                = 8
};

/// Enum /Script/ConZ.ESurvivalStatsCategory
/// Size: 0x01 (1 bytes)
enum class ESurvivalStatsCategory : uint8_t
{
	ESurvivalStatsCategory__Survival                                                 = 0,
	ESurvivalStatsCategory__Weapons                                                  = 1,
	ESurvivalStatsCategory__Combat                                                   = 2
};

/// Enum /Script/ConZ.ESurvivalTipCodexCategory
/// Size: 0x01 (1 bytes)
enum class ESurvivalTipCodexCategory : uint8_t
{
	ESurvivalTipCodexCategory__None                                                  = 0,
	ESurvivalTipCodexCategory__Generic                                               = 1,
	ESurvivalTipCodexCategory__WelcomeToTheIsland                                    = 2,
	ESurvivalTipCodexCategory__Movement                                              = 3,
	ESurvivalTipCodexCategory__Survival                                              = 4,
	ESurvivalTipCodexCategory__Inventory                                             = 5,
	ESurvivalTipCodexCategory__Crafting                                              = 6,
	ESurvivalTipCodexCategory__Health                                                = 7,
	ESurvivalTipCodexCategory__Metabolism                                            = 8,
	ESurvivalTipCodexCategory__AttributesAndSkills                                   = 9,
	ESurvivalTipCodexCategory__Minigames                                             = 10,
	ESurvivalTipCodexCategory__Economy                                               = 11,
	ESurvivalTipCodexCategory__BaseBuilding                                          = 12,
	ESurvivalTipCodexCategory__Squads                                                = 13,
	ESurvivalTipCodexCategory__Count                                                 = 14
};

/// Enum /Script/ConZ.ESurvivalTipLevel
/// Size: 0x01 (1 bytes)
enum class ESurvivalTipLevel : uint8_t
{
	ESurvivalTipLevel__None                                                          = 0,
	ESurvivalTipLevel__Beginner                                                      = 1,
	ESurvivalTipLevel__Intermediate                                                  = 2,
	ESurvivalTipLevel__Expert                                                        = 3,
	ESurvivalTipLevel__Count                                                         = 4
};

/// Enum /Script/ConZ.ESwitchboardSwitch
/// Size: 0x01 (1 bytes)
enum class ESwitchboardSwitch : uint8_t
{
	ESwitchboardSwitch__SwitchA                                                      = 0,
	ESwitchboardSwitch__SwitchB                                                      = 1,
	ESwitchboardSwitch__SwitchC                                                      = 2,
	ESwitchboardSwitch__SwitchD                                                      = 3,
	ESwitchboardSwitch__SwitchE                                                      = 4,
	ESwitchboardSwitch__SwitchF                                                      = 5,
	ESwitchboardSwitch__SwitchG                                                      = 6,
	ESwitchboardSwitch__SwitchH                                                      = 7,
	ESwitchboardSwitch__Count                                                        = 8
};

/// Enum /Script/ConZ.ETextInputType
/// Size: 0x01 (1 bytes)
enum class ETextInputType : uint8_t
{
	Text                                                                             = 0,
	Number                                                                           = 1
};

/// Enum /Script/ConZ.ECookingHeatLevel
/// Size: 0x01 (1 bytes)
enum class ECookingHeatLevel : uint8_t
{
	ECookingHeatLevel__Cold                                                          = 0,
	ECookingHeatLevel__Mild                                                          = 1,
	ECookingHeatLevel__Warm                                                          = 2,
	ECookingHeatLevel__Low                                                           = 3,
	ECookingHeatLevel__MediumLow                                                     = 4,
	ECookingHeatLevel__Medium                                                        = 5,
	ECookingHeatLevel__Hot                                                           = 6,
	ECookingHeatLevel__VeryHot                                                       = 7,
	ECookingHeatLevel__ExtremelyHot                                                  = 8
};

/// Enum /Script/ConZ.EConZColor
/// Size: 0x01 (1 bytes)
enum class EConZColor : uint8_t
{
	EConZColor__None                                                                 = 0,
	EConZColor__Black                                                                = 1,
	EConZColor__Brown                                                                = 2,
	EConZColor__Blue                                                                 = 3,
	EConZColor__Green                                                                = 4,
	EConZColor__Red                                                                  = 5,
	EConZColor__Blonde                                                               = 6,
	EConZColor__Ginger                                                               = 7,
	EConZColor__Grey                                                                 = 8
};

/// Enum /Script/ConZ.EConZUnit
/// Size: 0x01 (1 bytes)
enum class EConZUnit : uint8_t
{
	EConZUnit__None                                                                  = 0,
	EConZUnit__Second                                                                = 1,
	EConZUnit__Minute                                                                = 2,
	EConZUnit__MinuteShort                                                           = 3,
	EConZUnit__Hour                                                                  = 4,
	EConZUnit__Day                                                                   = 5,
	EConZUnit__Year                                                                  = 6,
	EConZUnit__Gram                                                                  = 7,
	EConZUnit__Milligram                                                             = 8,
	EConZUnit__Microgram                                                             = 9,
	EConZUnit__Kilogram                                                              = 10,
	EConZUnit__Liter                                                                 = 11,
	EConZUnit__Milliliter                                                            = 12,
	EConZUnit__Calorie                                                               = 13,
	EConZUnit__Kilocalorie                                                           = 14,
	EConZUnit__Meter                                                                 = 15,
	EConZUnit__Centimeter                                                            = 16,
	EConZUnit__Kilometer                                                             = 17,
	EConZUnit__Percentage                                                            = 18,
	EConZUnit__Health                                                                = 19,
	EConZUnit__Stamina                                                               = 20,
	EConZUnit__Celsius                                                               = 21,
	EConZUnit__Watt                                                                  = 22,
	EConZUnit__MeterSquared                                                          = 23,
	EConZUnit__Sievert                                                               = 24,
	EConZUnit__Ampere                                                                = 25,
	EConZUnit__AmpereHour                                                            = 26
};

/// Enum /Script/ConZ.EItemThrowingBehavior
/// Size: 0x01 (1 bytes)
enum class EItemThrowingBehavior : uint8_t
{
	EItemThrowingBehavior__None                                                      = 0,
	EItemThrowingBehavior__Default                                                   = 1,
	EItemThrowingBehavior__Piercing                                                  = 2,
	EItemThrowingBehavior__Fragile                                                   = 3,
	EItemThrowingBehavior__Sticky                                                    = 4
};

/// Enum /Script/ConZ.EBleedingSeverity
/// Size: 0x01 (1 bytes)
enum class EBleedingSeverity : uint8_t
{
	EBleedingSeverity__NoBleeding                                                    = 0,
	EBleedingSeverity__VeryLight                                                     = 1,
	EBleedingSeverity__Light                                                         = 2,
	EBleedingSeverity__Moderate                                                      = 3,
	EBleedingSeverity__Heavy                                                         = 4,
	EBleedingSeverity__Severe                                                        = 5
};

/// Enum /Script/ConZ.ETraderLocationMarkerType
/// Size: 0x04 (4 bytes)
enum class ETraderLocationMarkerType : uint32_t
{
	ETraderLocationMarkerType__SurgeryRoom                                           = 0,
	ETraderLocationMarkerType__BarberShop                                            = 1
};

/// Enum /Script/ConZ.ETradeableSellFlags
/// Size: 0x01 (1 bytes)
enum class ETradeableSellFlags : uint8_t
{
	ETradeableSellFlags__None                                                        = 0,
	ETradeableSellFlags__IgnoreLackOfFunds                                           = 1
};

/// Enum /Script/ConZ.ETradeErrorMessage
/// Size: 0x01 (1 bytes)
enum class ETradeErrorMessage : uint8_t
{
	ETradeErrorMessage__None                                                         = 0,
	ETradeErrorMessage__TradeAttemptedOnClient                                       = 1,
	ETradeErrorMessage__TraderOrTradeableInvalid                                     = 2,
	ETradeErrorMessage__NotEnoughFunds                                               = 3,
	ETradeErrorMessage__TradeableOutOfStock                                          = 4,
	ETradeErrorMessage__TraderInvalidCategory                                        = 5,
	ETradeErrorMessage__TradeableCannotBePurchased                                   = 6,
	ETradeErrorMessage__TradeableInvalidPrice                                        = 7,
	ETradeErrorMessage__NoValidTradeCandidates                                       = 8,
	ETradeErrorMessage__TradingOnCooldown                                            = 9,
	ETradeErrorMessage__WorldSpawnLocationBlocked                                    = 10,
	ETradeErrorMessage__PlayerBasedPriceMultiplierChanged                            = 11,
	ETradeErrorMessage__RequiredBankCardTypeMissing                                  = 12,
	ETradeErrorMessage__TraderInsufficientFunds                                      = 13,
	ETradeErrorMessage__InsufficientAccountBalance                                   = 14,
	ETradeErrorMessage__NotEnoughFamePoints                                          = 15,
	ETradeErrorMessage__Unknown                                                      = 16
};

/// Enum /Script/ConZ.ETradeOutpostProsperityLevel
/// Size: 0x01 (1 bytes)
enum class ETradeOutpostProsperityLevel : uint8_t
{
	ETradeOutpostProsperityLevel__None                                               = 0,
	ETradeOutpostProsperityLevel__VeryPoor                                           = 1,
	ETradeOutpostProsperityLevel__Poor                                               = 2,
	ETradeOutpostProsperityLevel__Prosperous                                         = 3,
	ETradeOutpostProsperityLevel__Wealthy                                            = 4,
	ETradeOutpostProsperityLevel__Rich                                               = 5,
	ETradeOutpostProsperityLevel__Count                                              = 6
};

/// Enum /Script/ConZ.ETradeableSpawnType
/// Size: 0x01 (1 bytes)
enum class ETradeableSpawnType : uint8_t
{
	ETradeableSpawnType__None                                                        = 0,
	ETradeableSpawnType__DepotSpawn                                                  = 1,
	ETradeableSpawnType__WorldSpawn                                                  = 2
};

/// Enum /Script/ConZ.ETraderType
/// Size: 0x01 (1 bytes)
enum class ETraderType : uint8_t
{
	ETraderType__None                                                                = 0,
	ETraderType__Armorer                                                             = 1,
	ETraderType__GeneralGoods                                                        = 2,
	ETraderType__Mechanic                                                            = 3,
	ETraderType__Doctor                                                              = 4,
	ETraderType__Harbourmaster                                                       = 5,
	ETraderType__Bartender                                                           = 6,
	ETraderType__Barber                                                              = 7,
	ETraderType__TradesEverything                                                    = 8,
	ETraderType__Count                                                               = 9
};

/// Enum /Script/ConZ.ETradeCategory
/// Size: 0x01 (1 bytes)
enum class ETradeCategory : uint8_t
{
	ETradeCategory__None                                                             = 0,
	ETradeCategory__Armour                                                           = 1,
	ETradeCategory__Helmets                                                          = 2,
	ETradeCategory__Jackets                                                          = 3,
	ETradeCategory__Pants                                                            = 4,
	ETradeCategory__Headwear                                                         = 5,
	ETradeCategory__Tops                                                             = 6,
	ETradeCategory__Underwear                                                        = 7,
	ETradeCategory__Neckwaist                                                        = 8,
	ETradeCategory__Hands                                                            = 9,
	ETradeCategory__Face                                                             = 10,
	ETradeCategory__Feet                                                             = 11,
	ETradeCategory__Backpacks                                                        = 12,
	ETradeCategory__RangedWeapon                                                     = 13,
	ETradeCategory__RangedWeaponAccessories                                          = 14,
	ETradeCategory__Ammo                                                             = 15,
	ETradeCategory__MeleeWeapon                                                      = 16,
	ETradeCategory__Explosives                                                       = 17,
	ETradeCategory__Crafting                                                         = 18,
	ETradeCategory__Fishing                                                          = 19,
	ETradeCategory__Alcohol                                                          = 20,
	ETradeCategory__Food                                                             = 21,
	ETradeCategory__Drink                                                            = 22,
	ETradeCategory__FirstAid                                                         = 23,
	ETradeCategory__Vehicles                                                         = 24,
	ETradeCategory__Misc                                                             = 25,
	ETradeCategory__WaterVehicles                                                    = 26,
	ETradeCategory__Cosmetics                                                        = 27,
	ETradeCategory__Count                                                            = 28
};

/// Enum /Script/ConZ.ETrapType
/// Size: 0x01 (1 bytes)
enum class ETrapType : uint8_t
{
	ETrapType__Default                                                               = 0,
	ETrapType__SuicideZombie                                                         = 1
};

/// Enum /Script/ConZ.ETrapTriggerType
/// Size: 0x01 (1 bytes)
enum class ETrapTriggerType : uint8_t
{
	ETrapTriggerType__None                                                           = 0,
	ETrapTriggerType__MotionTrigger                                                  = 1,
	ETrapTriggerType__LaserTrigger                                                   = 2,
	ETrapTriggerType__TripwireTrigger                                                = 3,
	ETrapTriggerType__TimedTrigger                                                   = 4
};

/// Enum /Script/ConZ.EModifyTurretPaintjobActionSubtype
/// Size: 0x01 (1 bytes)
enum class EModifyTurretPaintjobActionSubtype : uint8_t
{
	EModifyTurretPaintjobActionSubtype__ClearPaintjob                                = 0,
	EModifyTurretPaintjobActionSubtype__RefreshPaintjob                              = 1,
	EModifyTurretPaintjobActionSubtype__PaintSolidColor                              = 2,
	EModifyTurretPaintjobActionSubtype__SetPattern                                   = 3,
	EModifyTurretPaintjobActionSubtype__SetColor                                     = 4
};

/// Enum /Script/ConZ.ETurretState
/// Size: 0x01 (1 bytes)
enum class ETurretState : uint8_t
{
	ETurretState__None                                                               = 0,
	ETurretState__TurnedOn                                                           = 1,
	ETurretState__Firing                                                             = 2,
	ETurretState__TargetLost                                                         = 4,
	ETurretState__Activated                                                          = 8,
	ETurretState__SeesTarget                                                         = 16,
	ETurretState__Powered                                                            = 32,
	ETurretState__PendingTurnOff                                                     = 64,
	ETurretState__NumReplicatedFlags                                                 = 5,
	ETurretState__ReplicatedFlags                                                    = 31
};

/// Enum /Script/ConZ.ETwitchDropsConnectionStatus
/// Size: 0x01 (1 bytes)
enum class ETwitchDropsConnectionStatus : uint8_t
{
	ETwitchDropsConnectionStatus__Unknown                                            = 0,
	ETwitchDropsConnectionStatus__NoInternet                                         = 1,
	ETwitchDropsConnectionStatus__NotConnected                                       = 2,
	ETwitchDropsConnectionStatus__Connecting                                         = 3,
	ETwitchDropsConnectionStatus__Connected                                          = 4,
	ETwitchDropsConnectionStatus__Count                                              = 5
};

/// Enum /Script/ConZ.EWidgetType
/// Size: 0x01 (1 bytes)
enum class EWidgetType : uint8_t
{
	EWidgetType__ItemWidgetClass                                                     = 0,
	EWidgetType__InventorySlotWidgetClass                                            = 1,
	EWidgetType__HudWidgetClass                                                      = 2,
	EWidgetType__LoadingIconWidgetClass                                              = 3,
	EWidgetType__SpawnScreenWidgetClass                                              = 4,
	EWidgetType__WaypointScreenWidgetClass                                           = 5,
	EWidgetType__ActionProgressWidgetClass                                           = 6,
	EWidgetType__TeamInvitationWidgetClass                                           = 7,
	EWidgetType__CraftingInfoWidgetClass                                             = 8,
	EWidgetType__CraftingComponentWidgetClass                                        = 9,
	EWidgetType__EmptySlotWidgetClass                                                = 10,
	EWidgetType__PreviousNextSwitchWidgetClass                                       = 11,
	EWidgetType__GameEventCardWidgetClass                                            = 12,
	EWidgetType__GameEventScoreboardWidgetClass                                      = 13,
	EWidgetType__GameEventMiniScoreboardWidgetClass                                  = 14,
	EWidgetType__TournamentScoreboardWidgetClass                                     = 15,
	EWidgetType__CircularMenuWidgetClass                                             = 16,
	EWidgetType__CircularMenuSegmentWidgetClass                                      = 17,
	EWidgetType__InventoryContainerWidget2Test                                       = 18,
	EWidgetType__InventoryItemWidget2Test                                            = 19,
	EWidgetType__ItemInventoryWidget2                                                = 20,
	EWidgetType__ItemWidget2                                                         = 21,
	EWidgetType__ItemWidget2VicinityContainer                                        = 22,
	EWidgetType__ItemTooltipWidget                                                   = 23,
	EWidgetType__TooltipPanelFoodOverview                                            = 24,
	EWidgetType__TooltipPanelFoodNutritionsSingle                                    = 25,
	EWidgetType__TooltipPanelFoodNutritionsFull                                      = 26,
	EWidgetType__TooltipPanelFoodGraphs                                              = 27,
	EWidgetType__TooltipPanelWeaponAbsolute                                          = 28,
	EWidgetType__TooltipPanelWeaponRelative                                          = 29,
	EWidgetType__StatisticsListRow                                                   = 30,
	EWidgetType__ThrowingQuickAccessMenu                                             = 31,
	EWidgetType__ItemSplitWidgetClass                                                = 32,
	EWidgetType__RaidProtectionSelectionWidgetClass                                  = 33,
	EWidgetType__QuestTrackingWidgetClass                                            = 34
};

/// Enum /Script/ConZ.EConZUIInputMode
/// Size: 0x01 (1 bytes)
enum class EConZUIInputMode : uint8_t
{
	EConZUIInputMode__GameAndUI                                                      = 0,
	EConZUIInputMode__UI                                                             = 1,
	EConZUIInputMode__Game                                                           = 2,
	EConZUIInputMode__Count                                                          = 3
};

/// Enum /Script/ConZ.EUnarmedCombatInput
/// Size: 0x01 (1 bytes)
enum class EUnarmedCombatInput : uint8_t
{
	EUnarmedCombatInput__WalkForward                                                 = 0,
	EUnarmedCombatInput__WalkBackward                                                = 1,
	EUnarmedCombatInput__WalkRight                                                   = 2,
	EUnarmedCombatInput__WalkLeft                                                    = 3,
	EUnarmedCombatInput__Punch                                                       = 4,
	EUnarmedCombatInput__BlockPressed                                                = 5,
	EUnarmedCombatInput__BlockReleased                                               = 6,
	EUnarmedCombatInput__PreviousTarget                                              = 7,
	EUnarmedCombatInput__NextTarget                                                  = 8,
	EUnarmedCombatInput__ReleaseCursor                                               = 9
};

/// Enum /Script/ConZ.EUnpackedItemCountType
/// Size: 0x01 (1 bytes)
enum class EUnpackedItemCountType : uint8_t
{
	EUnpackedItemCountType__Fixed                                                    = 0,
	EUnpackedItemCountType__PerUse                                                   = 1
};

/// Enum /Script/ConZ.EItemUnpackingType
/// Size: 0x01 (1 bytes)
enum class EItemUnpackingType : uint8_t
{
	EItemUnpackingType__Consume                                                      = 0,
	EItemUnpackingType__UseOnce                                                      = 1,
	EItemUnpackingType__UseFully                                                     = 2
};

/// Enum /Script/ConZ.EUserProfileType
/// Size: 0x01 (1 bytes)
enum class EUserProfileType : uint8_t
{
	EUserProfileType__Singleplayer                                                   = 0,
	EUserProfileType__MultiplayerAuthority                                           = 1,
	EUserProfileType__MultiplayerCache                                               = 2
};

/// Enum /Script/ConZ.EChangeSource
/// Size: 0x01 (1 bytes)
enum class EChangeSource : uint8_t
{
	EChangeSource__Unknown                                                           = 0,
	EChangeSource__Code                                                              = 1,
	EChangeSource__Player                                                            = 2
};

/// Enum /Script/ConZ.EVehicleMountType
/// Size: 0x01 (1 bytes)
enum class EVehicleMountType : uint8_t
{
	EVehicleMountType__Passenger                                                     = 0,
	EVehicleMountType__Driver                                                        = 1
};

/// Enum /Script/ConZ.EVehicleAttachment_DoorFlags
/// Size: 0x01 (1 bytes)
enum class EVehicleAttachment_DoorFlags : uint8_t
{
	EVehicleAttachment_DoorFlags__None                                               = 0,
	EVehicleAttachment_DoorFlags__Open                                               = 1,
	EVehicleAttachment_DoorFlags__Closed                                             = 2,
	EVehicleAttachment_DoorFlags__Simulating                                         = 4
};

/// Enum /Script/ConZ.EEngineBlockState
/// Size: 0x01 (1 bytes)
enum class EEngineBlockState : uint8_t
{
	EEngineBlockState__Off                                                           = 0,
	EEngineBlockState__Ignition                                                      = 1,
	EEngineBlockState__Running                                                       = 2,
	EEngineBlockState__Stalling                                                      = 3,
	EEngineBlockState__Removed                                                       = 4
};

/// Enum /Script/ConZ.EVehicleClimbingPermissions
/// Size: 0x01 (1 bytes)
enum class EVehicleClimbingPermissions : uint8_t
{
	EVehicleClimbingPermissions__None                                                = 0,
	EVehicleClimbingPermissions__AllowPrisoners                                      = 1,
	EVehicleClimbingPermissions__AllowOthers                                         = 2
};

/// Enum /Script/ConZ.EVehicleCheatType
/// Size: 0x01 (1 bytes)
enum class EVehicleCheatType : uint8_t
{
	EVehicleCheatType__None                                                          = 0,
	EVehicleCheatType__FlyingDirect                                                  = 1,
	EVehicleCheatType__FlyingForce                                                   = 2,
	EVehicleCheatType__Count                                                         = 3
};

/// Enum /Script/ConZ.EVehicleLightSourceType
/// Size: 0x01 (1 bytes)
enum class EVehicleLightSourceType : uint8_t
{
	EVehicleLightSourceType__SpotLight                                               = 0,
	EVehicleLightSourceType__MaterialParameter                                       = 1
};

/// Enum /Script/ConZ.EModifyVehiclePaintjobActionSubtype
/// Size: 0x01 (1 bytes)
enum class EModifyVehiclePaintjobActionSubtype : uint8_t
{
	EModifyVehiclePaintjobActionSubtype__ClearPaintjob                               = 0,
	EModifyVehiclePaintjobActionSubtype__RefreshPaintjob                             = 1,
	EModifyVehiclePaintjobActionSubtype__PaintSolidColor                             = 2,
	EModifyVehiclePaintjobActionSubtype__SetPattern                                  = 3,
	EModifyVehiclePaintjobActionSubtype__SetColor                                    = 4
};

/// Enum /Script/ConZ.EAerodynamicSurfaceType
/// Size: 0x01 (1 bytes)
enum class EAerodynamicSurfaceType : uint8_t
{
	EAerodynamicSurfaceType__None                                                    = 0,
	EAerodynamicSurfaceType__LeftAilerons                                            = 1,
	EAerodynamicSurfaceType__RightAilerons                                           = 2,
	EAerodynamicSurfaceType__Elevators                                               = 3,
	EAerodynamicSurfaceType__Flaps                                                   = 4,
	EAerodynamicSurfaceType__Rudder                                                  = 5
};

/// Enum /Script/ConZ.EUnmountReason
/// Size: 0x01 (1 bytes)
enum class EUnmountReason : uint8_t
{
	EUnmountReason__None                                                             = 0,
	EUnmountReason__Regular                                                          = 1,
	EUnmountReason__EndPlay                                                          = 2
};

/// Enum /Script/ConZ.EVehicleEngineState
/// Size: 0x01 (1 bytes)
enum class EVehicleEngineState : uint8_t
{
	EVehicleEngineState__Unavailable                                                 = 0,
	EVehicleEngineState__TurnedOff                                                   = 1,
	EVehicleEngineState__StartingViaIgnition                                         = 2,
	EVehicleEngineState__StartingViaMotion                                           = 3,
	EVehicleEngineState__ReadyDelay                                                  = 4,
	EVehicleEngineState__Ready                                                       = 5,
	EVehicleEngineState__FailedToStartDelay                                          = 6,
	EVehicleEngineState__FailedToStart                                               = 7,
	EVehicleEngineState__FailedToStartNoFuelDelay                                    = 8,
	EVehicleEngineState__FailedToStartNoFuel                                         = 9,
	EVehicleEngineState__FailedToStartNoBatteryDelay                                 = 10,
	EVehicleEngineState__FailedToStartNoBattery                                      = 11,
	EVehicleEngineState__StalledDelay                                                = 12,
	EVehicleEngineState__Stalled                                                     = 13,
	EVehicleEngineState__Broken                                                      = 14
};

/// Enum /Script/ConZ.EVehicleSeatType
/// Size: 0x01 (1 bytes)
enum class EVehicleSeatType : uint8_t
{
	EVehicleSeatType__Driver                                                         = 0,
	EVehicleSeatType__Passenger                                                      = 1
};

/// Enum /Script/ConZ.EVehicleManualSpawnType
/// Size: 0x01 (1 bytes)
enum class EVehicleManualSpawnType : uint8_t
{
	EVehicleManualSpawnType__None                                                    = 0,
	EVehicleManualSpawnType__WheelsOnly                                              = 1,
	EVehicleManualSpawnType__MinimalFunctional                                       = 2,
	EVehicleManualSpawnType__Full                                                    = 3,
	EVehicleManualSpawnType__Count                                                   = 4
};

/// Enum /Script/ConZ.EVicinityFilterType
/// Size: 0x01 (1 bytes)
enum class EVicinityFilterType : uint8_t
{
	EVicinityFilterType__None                                                        = 0,
	EVicinityFilterType__Clothes                                                     = 1,
	EVicinityFilterType__Food                                                        = 2,
	EVicinityFilterType__Liquid                                                      = 4,
	EVicinityFilterType__Weapon                                                      = 8,
	EVicinityFilterType__Tool                                                        = 16,
	EVicinityFilterType__Medical                                                     = 32
};

/// Enum /Script/ConZ.EVoltageMatchingMinigameElementFunction
/// Size: 0x01 (1 bytes)
enum class EVoltageMatchingMinigameElementFunction : uint8_t
{
	EVoltageMatchingMinigameElementFunction__None                                    = 0,
	EVoltageMatchingMinigameElementFunction__Addition                                = 1,
	EVoltageMatchingMinigameElementFunction__Subtraction                             = 2,
	EVoltageMatchingMinigameElementFunction__Multiplication                          = 3,
	EVoltageMatchingMinigameElementFunction__Division                                = 4
};

/// Enum /Script/ConZ.EWeaponAnimationCurve
/// Size: 0x01 (1 bytes)
enum class EWeaponAnimationCurve : uint8_t
{
	EWeaponAnimationCurve__DrawAmount                                                = 0,
	EWeaponAnimationCurve__StrengthAmount                                            = 1,
	EWeaponAnimationCurve__HideBone                                                  = 2,
	EWeaponAnimationCurve__Count                                                     = 3
};

/// Enum /Script/ConZ.EMagazineAmmoCountType
/// Size: 0x01 (1 bytes)
enum class EMagazineAmmoCountType : uint8_t
{
	EMagazineAmmoCountType__Countable                                                = 0,
	EMagazineAmmoCountType__Even                                                     = 1,
	EMagazineAmmoCountType__Odd                                                      = 2
};

/// Enum /Script/ConZ.EBowDrawPercentage
/// Size: 0x01 (1 bytes)
enum class EBowDrawPercentage : uint8_t
{
	EBowDrawPercentage__Draw50percent                                                = 0,
	EBowDrawPercentage__Draw75percent                                                = 1,
	EBowDrawPercentage__Draw100percent                                               = 2,
	EBowDrawPercentage__Count                                                        = 3
};

/// Enum /Script/ConZ.EWeaponBowState
/// Size: 0x01 (1 bytes)
enum class EWeaponBowState : uint8_t
{
	EWeaponBowState__None                                                            = 0,
	EWeaponBowState__InsertArrow                                                     = 1,
	EWeaponBowState__RemoveArrow                                                     = 2,
	EWeaponBowState__Draw                                                            = 3,
	EWeaponBowState__CancelFiring                                                    = 4,
	EWeaponBowState__FireDummy                                                       = 5,
	EWeaponBowState__Fire                                                            = 6,
	EWeaponBowState__FireAndInsertArrow                                              = 7,
	EWeaponBowState__Active                                                          = 8
};

/// Enum /Script/ConZ.EWeaponCrossbowDrawCategory
/// Size: 0x01 (1 bytes)
enum class EWeaponCrossbowDrawCategory : uint8_t
{
	EWeaponCrossbowDrawCategory__UnableToDraw                                        = 0,
	EWeaponCrossbowDrawCategory__Slow                                                = 1,
	EWeaponCrossbowDrawCategory__Normal                                              = 2,
	EWeaponCrossbowDrawCategory__Count                                               = 3
};

/// Enum /Script/ConZ.EWeaponRockerLauncherActionState
/// Size: 0x01 (1 bytes)
enum class EWeaponRockerLauncherActionState : uint8_t
{
	EWeaponRockerLauncherActionState__Default                                        = 0,
	EWeaponRockerLauncherActionState__Arm                                            = 1,
	EWeaponRockerLauncherActionState__Armed                                          = 2,
	EWeaponRockerLauncherActionState__Unarm                                          = 3,
	EWeaponRockerLauncherActionState__Unarmed                                        = 4
};

/// Enum /Script/ConZ.EWeaponOverrideSpreadType
/// Size: 0x01 (1 bytes)
enum class EWeaponOverrideSpreadType : uint8_t
{
	EWeaponOverrideSpreadType__NoOverride                                            = 0,
	EWeaponOverrideSpreadType__ExactValue                                            = 1,
	EWeaponOverrideSpreadType__Multiplier                                            = 2
};

/// Enum /Script/ConZ.EWeaponDownTheSightsMode
/// Size: 0x01 (1 bytes)
enum class EWeaponDownTheSightsMode : uint8_t
{
	EWeaponDownTheSightsMode__IronSights                                             = 0,
	EWeaponDownTheSightsMode__Scope                                                  = 1
};

/// Enum /Script/ConZ.EWeaponEjectFromChamberType
/// Size: 0x01 (1 bytes)
enum class EWeaponEjectFromChamberType : uint8_t
{
	EWeaponEjectFromChamberType__Casing                                              = 0,
	EWeaponEjectFromChamberType__LiveRound                                           = 1
};

/// Enum /Script/ConZ.EReloadWeaponSequence
/// Size: 0x01 (1 bytes)
enum class EReloadWeaponSequence : uint8_t
{
	EReloadWeaponSequence__None                                                      = 0,
	EReloadWeaponSequence__InsertMagazine                                            = 1,
	EReloadWeaponSequence__RemoveMagazineInstertMagazine                             = 2,
	EReloadWeaponSequence__InstertCartridge                                          = 3,
	EReloadWeaponSequence__RemoveMagazineInstertCartridge                            = 4
};

/// Enum /Script/ConZ.EWeaponCombatModeType
/// Size: 0x01 (1 bytes)
enum class EWeaponCombatModeType : uint8_t
{
	EWeaponCombatModeType__Relaxed                                                   = 0,
	EWeaponCombatModeType__Aiming                                                    = 1,
	EWeaponCombatModeType__Count                                                     = 2
};

/// Enum /Script/ConZ.EWeaponAttachmentActionType
/// Size: 0x01 (1 bytes)
enum class EWeaponAttachmentActionType : uint8_t
{
	EWeaponAttachmentActionType__Add                                                 = 0,
	EWeaponAttachmentActionType__Remove                                              = 1,
	EWeaponAttachmentActionType__Swap                                                = 2,
	EWeaponAttachmentActionType__Count                                               = 3
};

/// Enum /Script/ConZ.EWeatherControllerDebugOverrideType
/// Size: 0x01 (1 bytes)
enum class EWeatherControllerDebugOverrideType : uint8_t
{
	EWeatherControllerDebugOverrideType__WindAzimuth                                 = 0,
	EWeatherControllerDebugOverrideType__WindIntensity                               = 1,
	EWeatherControllerDebugOverrideType__WindAzimuthForWaves                         = 2,
	EWeatherControllerDebugOverrideType__WindIntensityForWaves                       = 3,
	EWeatherControllerDebugOverrideType__Count                                       = 4
};

/// Enum /Script/ConZ.ECraftingMarkerMode
/// Size: 0x01 (1 bytes)
enum class ECraftingMarkerMode : uint8_t
{
	ECraftingMarkerMode__Marker                                                      = 0,
	ECraftingMarkerMode__FullInfo                                                    = 1
};

/// Enum /Script/ConZ.EZombie2AIState
/// Size: 0x01 (1 bytes)
enum class EZombie2AIState : uint8_t
{
	EZombie2AIState__None                                                            = 0,
	EZombie2AIState__Initial                                                         = 1,
	EZombie2AIState__Lying                                                           = 2,
	EZombie2AIState__Relaxed                                                         = 3,
	EZombie2AIState__Relaxed_Idle                                                    = 4,
	EZombie2AIState__Relaxed_Wander                                                  = 5,
	EZombie2AIState__Relaxed_Lively                                                  = 6,
	EZombie2AIState__Alerted                                                         = 7,
	EZombie2AIState__Alerted_Frustrated                                              = 8,
	EZombie2AIState__Combat                                                          = 9,
	EZombie2AIState__Ragdoll                                                         = 10
};

/// Enum /Script/ConZ.EZombieCustomMovementMode
/// Size: 0x01 (1 bytes)
enum class EZombieCustomMovementMode : uint8_t
{
	EZombieCustomMovementMode__None                                                  = 0,
	EZombieCustomMovementMode__Anchoring                                             = 1,
	EZombieCustomMovementMode__ClimbingWindow_Anchoring                              = 2,
	EZombieCustomMovementMode__ClimbingWindow_PlayingMontage                         = 3
};

/// Enum /Script/ConZ.EZombieRagdollAutoRecoveryType
/// Size: 0x01 (1 bytes)
enum class EZombieRagdollAutoRecoveryType : uint8_t
{
	EZombieRagdollAutoRecoveryType__None                                             = 0,
	EZombieRagdollAutoRecoveryType__WhenAtRest                                       = 1,
	EZombieRagdollAutoRecoveryType__AfterTimeSpan                                    = 2,
	EZombieRagdollAutoRecoveryType__WhenAtRestAfterTimeSpan                          = 3
};

/// Enum /Script/ConZ.EZombieTurnMontage
/// Size: 0x01 (1 bytes)
enum class EZombieTurnMontage : uint8_t
{
	EZombieTurnMontage__RelaxedIdle                                                  = 0,
	EZombieTurnMontage__AlertedIdle                                                  = 1,
	EZombieTurnMontage__CombatIdle                                                   = 2,
	EZombieTurnMontage__RelaxedIdleToAlertedIdle                                     = 3,
	EZombieTurnMontage__Count                                                        = 4
};

/// Enum /Script/ConZ.EZombieStance
/// Size: 0x01 (1 bytes)
enum class EZombieStance : uint8_t
{
	EZombieStance__Relaxed                                                           = 0,
	EZombieStance__Lying                                                             = 1,
	EZombieStance__LyingToStandingTransition                                         = 2,
	EZombieStance__Alerted                                                           = 3,
	EZombieStance__Combat                                                            = 4,
	EZombieStance__Count                                                             = 5
};

#pragma pack(pop)


static_assert(sizeof(FAbandonedBunkerConnectionBinding) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(UAbandonedBunkerConnectionSetup) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UExamineMeshNotify) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UExamineMeshNotify_BoundToAbandonedBunkerActivation) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FItemSpawnerPreset_Node) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FItemSpawnerPreset_Item) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FItemSpawnerPreset_Subpreset) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FItemSpawnerPresetWithOverrides) == 0x00B8); // 184 bytes (0x000000 - 0x0000B8)
static_assert(sizeof(FAbandonedBunkerFloorSetup) == 0x00F0); // 240 bytes (0x000000 - 0x0000F0)
static_assert(sizeof(FActivationReservation) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(AAbandonedBunker) == 0x0570); // 1392 bytes (0x000220 - 0x000570)
static_assert(sizeof(UAbandonedBunkerActivationRegistry) == 0x0118); // 280 bytes (0x0000B0 - 0x000118)
static_assert(sizeof(AAbandonedBunkerBCUMemoryModuleTerminal) == 0x0278); // 632 bytes (0x000220 - 0x000278)
static_assert(sizeof(AAbandonedBunkerDialPad) == 0x02E8); // 744 bytes (0x000220 - 0x0002E8)
static_assert(sizeof(UAbandonedBunkerDoorComponent) == 0x0580); // 1408 bytes (0x0004F8 - 0x000580)
static_assert(sizeof(FUnlockLocation) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(AItemContainer) == 0x0330); // 816 bytes (0x000220 - 0x000330)
static_assert(sizeof(AAbandonedBunkerItemContainerBoundToActivation) == 0x0340); // 832 bytes (0x000330 - 0x000340)
static_assert(sizeof(UAbandonedBunkerLightComponent) == 0x0170); // 368 bytes (0x0000B0 - 0x000170)
static_assert(sizeof(ULWObjectSetup) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UEntitySystemObjectSetup) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(FEntitySetup_Component) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UEntitySetup) == 0x0080); // 128 bytes (0x000040 - 0x000080)
static_assert(sizeof(UAbandonedBunkerManagerSetup) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(AAbandonedBunkerSwitchboard) == 0x0360); // 864 bytes (0x000220 - 0x000360)
static_assert(sizeof(UAbandonedBunkerZoneBoxComponent) == 0x0490); // 1168 bytes (0x000480 - 0x000490)
static_assert(sizeof(UAbandonedBunkerZoneCommonData) == 0x01B0); // 432 bytes (0x000030 - 0x0001B0)
static_assert(sizeof(UAbandonedBunkerZoneManagerComponent) == 0x0250); // 592 bytes (0x0001F8 - 0x000250)
static_assert(sizeof(AAchievementsManagerClient) == 0x02B8); // 696 bytes (0x000220 - 0x0002B8)
static_assert(sizeof(AAchievementsManagerServer) == 0x0298); // 664 bytes (0x000220 - 0x000298)
static_assert(sizeof(UActionProgressWidget) == 0x02E0); // 736 bytes (0x000268 - 0x0002E0)
static_assert(sizeof(UActorStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UActorWithRepGraphPolicy_RelevantToSomeConnections) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UAdjustableSeparator) == 0x0288); // 648 bytes (0x000268 - 0x000288)
static_assert(sizeof(FAdminCommandArgumentDescription) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(UAdminCommand) == 0x00A0); // 160 bytes (0x000028 - 0x0000A0)
static_assert(sizeof(UAdminCommand_AddOrRemoveWidget) == 0x00F0); // 240 bytes (0x0000A0 - 0x0000F0)
static_assert(sizeof(UAdminCommand_AddPrisonerBodyEffect) == 0x00A8); // 168 bytes (0x0000A0 - 0x0000A8)
static_assert(sizeof(UAdminCommand_AdminLight) == 0x00B0); // 176 bytes (0x0000A0 - 0x0000B0)
static_assert(sizeof(UAdminCommand_Announce) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_BanPlayer) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_BoatDebug) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_CancelVote) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ChangeCurrencyBalance) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ChangeCurrencyBalanceToAll) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ChangeCurrencyBalanceToAllOnline) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ChangeFamePoints) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_CheckServerTime) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ClearEncounterCooldowns) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ClearFakeName) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_CookRecipe) == 0x00A8); // 168 bytes (0x0000A0 - 0x0000A8)
static_assert(sizeof(UAdminCommand_CrashMajestically) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_CreateEntity) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_DebugWeapon) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_DemolitionSkillDebug) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_DestroyAllFlagsForPlayer) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_DestroyAllItemsWithinRadius) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_DestroyAllRazorsWithinRadius) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_DestroyAllVehicles) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_DestroyCorpsesWithinRadius) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_DestroyEncountersAtPlayerLocation) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_DestroyEntity) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_DestroyFlag) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_DestroyVehicle) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_DestroyZombiesWithinRadius) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_DisablePrisonerBodyEffects) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_DistanceDebug) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_DoorDebug) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_DrawDebugZombieCapsulesOnLegacySpawnPoints) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_DrawNearbyEncounters) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_DrawSentryHealthBar) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_DumpAllSquadsInfoList) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_DumpEncounterManagerData) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_DumpWetnessDebug) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_GrantElevatedStatus) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_RevokeElevatedStatus) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_EnableAdminViolations) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_EnableHuntingClueDebugArrow) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_EnableOrDisableServer) == 0x00A8); // 168 bytes (0x0000A0 - 0x0000A8)
static_assert(sizeof(UAdminCommand_EndTournamentMode) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_EnhancedPhotoMode) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_EquipParachute) == 0x00A8); // 168 bytes (0x0000A0 - 0x0000A8)
static_assert(sizeof(UAdminCommand_ExecuteConsoleCommand) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ExecutePrisonerBodyConditionInteraction) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ExportDefaultItemSpawnerPresets) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ExportDefaultItemSpawningCooldownGroups) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ExportDefaultItemSpawningParameters) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ExportItemLootTree) == 0x00A8); // 168 bytes (0x0000A0 - 0x0000A8)
static_assert(sizeof(UAdminCommand_ExportItemSpawnerPresetsInZone) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ExportQuests) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_FindSquadMember) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ForceBBEncounterOnNearbyOwnedBase) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ForceEncounterAtPlayerLocation) == 0x00A8); // 168 bytes (0x0000A0 - 0x0000A8)
static_assert(sizeof(UAdminCommand_GetMeshInfo) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_GetUserID) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_GetUserIDByRank) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_KickPlayer) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_KnockoutPrisoner) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_LeaveCorpse) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ListActiveAbandonedBunkers) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ListActiveHunts) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ListActiveSecretBunkers) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ListFlags) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(FSearchItemSpawnerPresetArray) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSearchItemClassesArray) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UAdminCommand_ListItemsSpawnLocations) == 0x00E0); // 224 bytes (0x0000A0 - 0x0000E0)
static_assert(sizeof(UAdminCommand_ListMutedPlayers) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ListPlayers) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ListPrimaryAssets) == 0x00F8); // 248 bytes (0x0000A0 - 0x0000F8)
static_assert(sizeof(UAdminCommand_ListPrisonerBodyConditionInteractions) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ListPrisonerBodyEffects) == 0x00A8); // 168 bytes (0x0000A0 - 0x0000A8)
static_assert(sizeof(UAdminCommand_ListPrisonerForeignSubstances) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ListSilencedPlayers) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ListSpawnedAnimals) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ListSpawnedVehicles) == 0x01A0); // 416 bytes (0x0000A0 - 0x0001A0)
static_assert(sizeof(UAdminCommand_ListSquadMembers) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ListSquads) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ListWeatherControllerOverrides) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_Location) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_Loot) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_MapTeleport) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_MutePlayer) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_PlacementDebug) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_PlayerInfo) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_PrintEntities) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_PrintGlobalRaidProtectionRaidTimes) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_Quests) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_RandomizePriceDeltas) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ReloadCustomMapConfig) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ReloadLootCustomizationsAndResetSpawners) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_RemovePrisonerBodyEffect) == 0x00A8); // 168 bytes (0x0000A0 - 0x0000A8)
static_assert(sizeof(UAdminCommand_RenameVehicle) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ReportDesync) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ResetAchievements) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ResetEconomy) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ResetSquadInfo) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ScheduleCargoDrop) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ScheduleWorldEvent) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SendNotification) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetAchievementUnlocked) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetAIInvisibility) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetAirplaneMaxVelocity) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetAllInventoryAccess) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetCraftingSearch) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetCurrencyBalance) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetCurrencyBalanceToAll) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetCurrencyBalanceToAllOnline) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetDecayTimeDilation) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetDeluxeVersion) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetFakeName) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetFamePoints) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetFamePointsToAll) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetFamePointsToAllOnline) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetFarmingSimulationSpeed) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetGardenNutrientsHigh) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetGardenPlantGrowthStage) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetGardenPlantingTime) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetGender) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetGodMode) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetHealthToItemInHands) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetInfiniteAmmo) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetItemDebugMode) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetMalfunctionProbability) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetMountedVehicleProperty) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetPrisonerAttributes) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetPrisonerBladderVolume) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetPrisonerExhaustion) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetPrisonerImmortality) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetPrisonerInfiniteOxygen) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetPrisonerInfiniteStamina) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetPrisonerMetabolismSimulationSpeed) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetPrisonerStamina) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetPrisonerStomachVolume) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetReplishableResourceAmount) == 0x00B0); // 176 bytes (0x0000A0 - 0x0000B0)
static_assert(sizeof(UAdminCommand_SetShouldPrintExamineSpawnerPresets) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetSkillLevel) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetSuperJump) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetTime) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetTimeSpeed) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetWeather) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetWeatherControllerOverrideActive) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SetWeatherControllerOverrideValue) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ShouldShowOtherPlayerInfo) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ShouldShowOtherPlayerLocations) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ShowBaseBuildingDebug) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ShowFlagInfo) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ShowFlagLocations) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ShowNameplates) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ShowRespawnTimes) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ShowVehicleDebug) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ShowVehicleInfo) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ShowVehicleLocations) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ShowWeaponInfo) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ShutdownServer) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SilencePlayer) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_Sleep) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SpawnAllItems) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SpawnPrimaryActorAsset) == 0x0120); // 288 bytes (0x0000A0 - 0x000120)
static_assert(sizeof(UAdminCommand_SpawnAnimal) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UAdminCommand_SpawnArmedNPC) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UAdminCommand_SpawnBrenner) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SpawnDebugAnimalTrack) == 0x00A8); // 168 bytes (0x0000A0 - 0x0000A8)
static_assert(sizeof(UAdminCommand_SpawnInventoryFullOf) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SpawnItem) == 0x0170); // 368 bytes (0x000120 - 0x000170)
static_assert(sizeof(UAdminCommand_SpawnRandomAnimal) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UAdminCommand_SpawnRandomPrimaryActorAsset) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UAdminCommand_SpawnZombie) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UAdminCommand_SpawnRandomZombie) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UAdminCommand_SpawnRazor) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_SpawnReflectionSphere) == 0x00A8); // 168 bytes (0x0000A0 - 0x0000A8)
static_assert(sizeof(UAdminCommand_SpawnVehicle) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UAdminCommand_StartTournamentMode) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_Teleport) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_TeleportTo) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_TeleportTo3pm) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_TeleportToMe) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_TeleportToVehicle) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_ToggleFamePointsDebugVisualization) == 0x00A8); // 168 bytes (0x0000A0 - 0x0000A8)
static_assert(sizeof(UAdminCommand_ToggleZombieNavigationLogging) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_TrackShotsFired) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_TrapsDebug) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_UnbanPlayer) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_UnmutePlayer) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_UnsilencePlayer) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_UpgradeBaseBuildingElementsWithinRadius) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_VehicleCheat) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_VisualizeAnimalLocation) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_VisualizeArmedNPCLocation) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_VisualizeBulletTrajectories) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_VisualizePlayerAiming) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_VisualizeVehicleTrajectory) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_VisualizeZombieLocation) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommand_Vote) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UAdminCommandArgumentCompletion) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UAdminCommandArgumentCompletion_Achievements) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAdminCommandArgumentCompletion_Constant) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UAdminCommandArgumentCompletion_Enum) == 0x0098); // 152 bytes (0x000038 - 0x000098)
static_assert(sizeof(UAdminCommandArgumentCompletion_Player) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAdminCommandArgumentCompletion_PrimaryAsset) == 0x0090); // 144 bytes (0x000038 - 0x000090)
static_assert(sizeof(UAdminCommandArgumentCompletion_QuestSetup) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAdminCommandArgumentCompletion_Skill) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAdminCommandArgumentCompletion_Squad) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAdminCommandArgumentCompletion_Widget) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UAdminCommandArgumentDataTypeBase) == 0x0108); // 264 bytes (0x000030 - 0x000108)
static_assert(sizeof(UAdminCommandArgumentDataType_Bool) == 0x0110); // 272 bytes (0x000108 - 0x000110)
static_assert(sizeof(UAdminCommandArgumentDataType_Location) == 0x0118); // 280 bytes (0x000108 - 0x000118)
static_assert(sizeof(UAdminCommandArgumentDataType_Numeric) == 0x0110); // 272 bytes (0x000108 - 0x000110)
static_assert(sizeof(UAdminCommandArgumentDataType_String) == 0x0120); // 288 bytes (0x000108 - 0x000120)
static_assert(sizeof(UAdminCommandArgumentDataType_Transform) == 0x0140); // 320 bytes (0x000108 - 0x000140)
static_assert(sizeof(UAdminCommandArgumentDataType_TransformOrLocation) == 0x0118); // 280 bytes (0x000108 - 0x000118)
static_assert(sizeof(UAdminCommandCompletionManager) == 0x0138); // 312 bytes (0x000028 - 0x000138)
static_assert(sizeof(UAdminCommandExecutor) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UAdminCommandRegistry) == 0x0098); // 152 bytes (0x000028 - 0x000098)
static_assert(sizeof(UAdminCommandsStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UAdminLight) == 0x0370); // 880 bytes (0x000358 - 0x000370)
static_assert(sizeof(UAdminPlantPanel) == 0x02B8); // 696 bytes (0x000268 - 0x0002B8)
static_assert(sizeof(UAdvancedBuoyancyComponent) == 0x0560); // 1376 bytes (0x0004F8 - 0x000560)
static_assert(sizeof(AAIDetectionTimerHandler) == 0x0270); // 624 bytes (0x000220 - 0x000270)
static_assert(sizeof(FAITeamAttitude) == 0x0003); // 3 bytes (0x000000 - 0x000003)
static_assert(sizeof(FAITeamAttitudeData) == 0x0021); // 33 bytes (0x000000 - 0x000021)
static_assert(sizeof(UAIManager) == 0x01B0); // 432 bytes (0x000028 - 0x0001B0)
static_assert(sizeof(FVehicleAttachmentMissingParticleEffect) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FVehicleAttachmentSlot) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(FPackedEntitySetupAndId) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FRepairableParams) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FVehicleImpactEffects) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FHeatSourceParameters) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FVehicleDamageHandlerParams) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(AVehicleBase) == 0x1D60); // 7520 bytes (0x000280 - 0x001D60)
static_assert(sizeof(ADcxWheeledVehicle) == 0x2010); // 8208 bytes (0x001D60 - 0x002010)
static_assert(sizeof(ADcxWheeledVehicle4W) == 0x2010); // 8208 bytes (0x002010 - 0x002010)
static_assert(sizeof(FAerodynamicSurfaceControlData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FDamageMultiplier) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FTargetTypeDamageMultiplier) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(AAirplane) == 0x2450); // 9296 bytes (0x002010 - 0x002450)
static_assert(sizeof(UDcxWheeledVehicleAnimInstance) == 0x0A80); // 2688 bytes (0x000A48 - 0x000A80)
static_assert(sizeof(UAirplaneAnimInstance) == 0x0AE0); // 2784 bytes (0x000A80 - 0x000AE0)
static_assert(sizeof(UAirplaneLeftWingAnimInstance) == 0x02C0); // 704 bytes (0x0002B8 - 0x0002C0)
static_assert(sizeof(UAirplaneRightWingAnimInstance) == 0x02C0); // 704 bytes (0x0002B8 - 0x0002C0)
static_assert(sizeof(UAirplaneElevatorsAnimInstance) == 0x02C0); // 704 bytes (0x0002B8 - 0x0002C0)
static_assert(sizeof(UAirplaneLegsFrontAnimInstance) == 0x02E0); // 736 bytes (0x0002B8 - 0x0002E0)
static_assert(sizeof(UAirplaneLegsRearInstance) == 0x02D0); // 720 bytes (0x0002B8 - 0x0002D0)
static_assert(sizeof(UAIStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UAkComponentClientOnly) == 0x03D0); // 976 bytes (0x0003C8 - 0x0003D0)
static_assert(sizeof(AAmbientSounds) == 0x02F8); // 760 bytes (0x000220 - 0x0002F8)
static_assert(sizeof(FItemLocation) == 0x000F); // 15 bytes (0x000000 - 0x00000F)
static_assert(sizeof(FItemMotionNoise) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FCraftingPart) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FAttachmentSocketDataItem) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FAttachmentSocket) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FAttachmentSocketOffset) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FCraftingIngredientInstance) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FVisibilityReplication) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FInventoryStackData) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(AItem) == 0x09A0); // 2464 bytes (0x000220 - 0x0009A0)
static_assert(sizeof(AAmmunitionItem) == 0x09F0); // 2544 bytes (0x0009A0 - 0x0009F0)
static_assert(sizeof(AAmmunitionArrow) == 0x0A18); // 2584 bytes (0x0009F0 - 0x000A18)
static_assert(sizeof(UAmmunitionBoneListAssetData) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(AAmmunitionBoxItem) == 0x09B0); // 2480 bytes (0x0009A0 - 0x0009B0)
static_assert(sizeof(AAmmunitionExplosiveArrow) == 0x0A80); // 2688 bytes (0x000A18 - 0x000A80)
static_assert(sizeof(FHitEffects) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(AConZCharacter) == 0x0828); // 2088 bytes (0x0004C8 - 0x000828)
static_assert(sizeof(AAnimal2) == 0x09C8); // 2504 bytes (0x000828 - 0x0009C8)
static_assert(sizeof(UConZCharacterMovementComponent) == 0x0DA0); // 3488 bytes (0x000B40 - 0x000DA0)
static_assert(sizeof(UAnimal2MovementComponent) == 0x0DC0); // 3520 bytes (0x000DA0 - 0x000DC0)
static_assert(sizeof(FConZCharacterTagSoundArray) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UCharacterSoundComponent) == 0x0128); // 296 bytes (0x0000B0 - 0x000128)
static_assert(sizeof(UAnimal2SoundComponent) == 0x01A0); // 416 bytes (0x000128 - 0x0001A0)
static_assert(sizeof(UAnimal2AnimInstance) == 0x02F0); // 752 bytes (0x0002B8 - 0x0002F0)
static_assert(sizeof(AConZAIController) == 0x0450); // 1104 bytes (0x000330 - 0x000450)
static_assert(sizeof(AComplexAnimalAIController) == 0x0620); // 1568 bytes (0x000450 - 0x000620)
static_assert(sizeof(AAnimalContinuousChargeAttackAIController) == 0x0638); // 1592 bytes (0x000620 - 0x000638)
static_assert(sizeof(UBaseItemTag) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAnimalHandlingItemTag) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USkill) == 0x00B0); // 176 bytes (0x000030 - 0x0000B0)
static_assert(sizeof(UIntelligenceSkill) == 0x00B0); // 176 bytes (0x0000B0 - 0x0000B0)
static_assert(sizeof(UAnimalHandlingSkill) == 0x00C0); // 192 bytes (0x0000B0 - 0x0000C0)
static_assert(sizeof(UAnimNotify_CharacterActionEnd) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotify_CharacterActionMarker) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotify_CharacterActionNotify) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UAnimNotify_ClimbingFinished) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotify_ConditionalPlayParticleEffectForItem) == 0x0090); // 144 bytes (0x000038 - 0x000090)
static_assert(sizeof(UAnimNotify_FishingActionNotify) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UAnimNotify_MagazineUpdateAmmunitionMeshes) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UAnimNotify_MakeNoise) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UAnimNotify_PaddlingSwitchHands) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UAnimNotify_PlaySoundBySurface) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UAnimNotify_PlaySoundOnOwner) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UAnimNotify_PlaySubtitledSound) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UAnimNotify_QuestBookMinigameNotify) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UAnimNotify_SmokableItemEquip) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotify_SmokableItemSwitchMeshParent) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UAnimNotify_SmokableItemUnequip) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotify_SpawnDefecationEffects) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotify_SpawnDiarrheaEffects) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotify_VehicleDoorOpenOrClose) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotify_WaterPaddle) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UAnimNotify_WeaponActionNotify) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UAnimNotify_WeaponChamberBullet) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotify_WeaponChamberBulletInternal) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotify_WeaponEjectCasing) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UAnimNotify_WeaponUpdateAmmunitionMeshes) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UAnimNotifyState_BoatRow) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAnimNotifyState_ChamberWeapon) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAnimNotifyState_DrainStamina) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UAnimNotifyState_Fade) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(UAnimNotifyState_IgnoreUsingHandCorrections) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(FMeleeHitDetectionMarker) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(UAnimNotifyState_Melee) == 0x0070); // 112 bytes (0x000030 - 0x000070)
static_assert(sizeof(UAnimNotifyState_NoScopingAllowed) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UAnimNotifyState_PaniniOverride) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAnimNotifyState_PhysicalAnimation) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UAnimNotifyState_PlaySoundOnOwnerRanged) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UAnimNotifyState_ShowAmmunitionMeshes) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UAnimNotifyState_WeaponHideMagazine) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UAnimNotifyState_WeaponRevolverDrumRotationDirection) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UAnimNotifyState_WeaponRevolverIgnoreDrumRotation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAnimNotifyState_WeaponShowAmmunitionMeshes) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UAnimStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(AAquaticLifeSpawningVolume) == 0x02A8); // 680 bytes (0x000258 - 0x0002A8)
static_assert(sizeof(UStrengthSkill) == 0x00B0); // 176 bytes (0x0000B0 - 0x0000B0)
static_assert(sizeof(FRangedWeaponSkillExperienceAwards) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FRangedWeaponSkillParametersPerSkillLevel) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(URangedWeaponsSkill) == 0x0218); // 536 bytes (0x0000B0 - 0x000218)
static_assert(sizeof(UArcherySkill) == 0x0280); // 640 bytes (0x000218 - 0x000280)
static_assert(sizeof(AClothesItem) == 0x0A40); // 2624 bytes (0x0009A0 - 0x000A40)
static_assert(sizeof(AArmband) == 0x0A50); // 2640 bytes (0x000A40 - 0x000A50)
static_assert(sizeof(UCharacterAction) == 0x0108); // 264 bytes (0x000028 - 0x000108)
static_assert(sizeof(UArmedNPCActionInsertArrow) == 0x0108); // 264 bytes (0x000108 - 0x000108)
static_assert(sizeof(UCharacterActionDescription) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UArmedNPCActionInsertArrowDescription) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UArmedNPCActionReloadWeapon) == 0x0110); // 272 bytes (0x000108 - 0x000110)
static_assert(sizeof(UArmedNPCActionReloadWeaponDescription) == 0x0070); // 112 bytes (0x000038 - 0x000070)
static_assert(sizeof(FArmedNPCAimCorrection) == 0x0120); // 288 bytes (0x000000 - 0x000120)
static_assert(sizeof(UArmedNPCAimCorrectionsData) == 0x02C0); // 704 bytes (0x000030 - 0x0002C0)
static_assert(sizeof(UConZCharacterEncounterSaveState) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UArmedNPCBaseEncounterSaveState) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(AArmedNPCBase) == 0x0A00); // 2560 bytes (0x000828 - 0x000A00)
static_assert(sizeof(AArmedNPCBaseAIController) == 0x0598); // 1432 bytes (0x000450 - 0x000598)
static_assert(sizeof(UArmedNPCBaseAnimInstance) == 0x0510); // 1296 bytes (0x0002B8 - 0x000510)
static_assert(sizeof(FArmedNPCMeleeAttackTypes) == 0x0088); // 136 bytes (0x000000 - 0x000088)
static_assert(sizeof(UArmedNPCBaseCommonData) == 0x0160); // 352 bytes (0x000030 - 0x000160)
static_assert(sizeof(UArmedNPCBaseMovementComponent) == 0x0DD0); // 3536 bytes (0x000DA0 - 0x000DD0)
static_assert(sizeof(UArmedNPCDamageCustomizationData) == 0x0098); // 152 bytes (0x000030 - 0x000098)
static_assert(sizeof(FWeaponManualSettingsHandgun) == 0x002C); // 44 bytes (0x000000 - 0x00002C)
static_assert(sizeof(FWeaponManualSettingsRifleAutomatic) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FWeaponManualSettingsRifleManual) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FWeaponManualSettingsBow) == 0x002C); // 44 bytes (0x000000 - 0x00002C)
static_assert(sizeof(FWeaponManualSettingsCrossBow) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FArmedNPCDifficultyLevelSettingProperties) == 0x00CC); // 204 bytes (0x000000 - 0x0000CC)
static_assert(sizeof(UArmedNPCDifficultyLevelSettings) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UArmedNPCSoundComponent) == 0x01E0); // 480 bytes (0x000128 - 0x0001E0)
static_assert(sizeof(FArmedNPCVariation) == 0x0088); // 136 bytes (0x000000 - 0x000088)
static_assert(sizeof(UArmedNPCVariationsData) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UArmedNPCVoiceLinesData) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UArmedNPCWeaponManual) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UArmedNPCWeaponManualBow) == 0x0088); // 136 bytes (0x000028 - 0x000088)
static_assert(sizeof(UArmedNPCWeaponManualCrossbow) == 0x0068); // 104 bytes (0x000028 - 0x000068)
static_assert(sizeof(UArmedNPCWeaponManualHandgun) == 0x0080); // 128 bytes (0x000028 - 0x000080)
static_assert(sizeof(UArmedNPCWeaponManualRifleAutomatic) == 0x0070); // 112 bytes (0x000028 - 0x000070)
static_assert(sizeof(UArmedNPCWeaponManualRifleManual) == 0x0070); // 112 bytes (0x000028 - 0x000070)
static_assert(sizeof(UArrayStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FPeriodicallyReplenishedResourceDescription) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FProximityReplenishedResourceDescription) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FReplenishableResourceDescription) == 0x0088); // 136 bytes (0x000000 - 0x000088)
static_assert(sizeof(UReplenishableResourceBaseComponent) == 0x0638); // 1592 bytes (0x0005A0 - 0x000638)
static_assert(sizeof(UATMReplenishableResourceComponent) == 0x0640); // 1600 bytes (0x000638 - 0x000640)
static_assert(sizeof(UItemComponent) == 0x00C8); // 200 bytes (0x0000B0 - 0x0000C8)
static_assert(sizeof(UAttachableItemComponent) == 0x0170); // 368 bytes (0x0000C8 - 0x000170)
static_assert(sizeof(UAttachmentSocketMountType) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UAttachmentSocketMountTypePrisonerHand) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UAudibleButtonComponent) == 0x0078); // 120 bytes (0x000028 - 0x000078)
static_assert(sizeof(UAudioDeviceDisplay) == 0x0270); // 624 bytes (0x000268 - 0x000270)
static_assert(sizeof(UAudioSettingsManager) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UAudioStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UItemAnimInstance) == 0x02D0); // 720 bytes (0x0002B8 - 0x0002D0)
static_assert(sizeof(UWeaponAttachmentMagazineAnimInstance) == 0x02E0); // 736 bytes (0x0002D0 - 0x0002E0)
static_assert(sizeof(UAutoCrossbowMagazineAnimInstance) == 0x02F0); // 752 bytes (0x0002E0 - 0x0002F0)
static_assert(sizeof(UAvailabilityGrid) == 0x225578); // 2250104 bytes (0x000028 - 0x225578)
static_assert(sizeof(UDexteritySkill) == 0x00B0); // 176 bytes (0x0000B0 - 0x0000B0)
static_assert(sizeof(UVehicleHandlingSkill) == 0x00B0); // 176 bytes (0x0000B0 - 0x0000B0)
static_assert(sizeof(FVehicleHandlingExperienceAwards) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FEngineHandlingParameters) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FDrivingSkillEngineStallingParameters) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FAviationSkillParametersPerSkillLevel) == 0x0100); // 256 bytes (0x000000 - 0x000100)
static_assert(sizeof(UAviationSkill) == 0x05D8); // 1496 bytes (0x0000B0 - 0x0005D8)
static_assert(sizeof(FAwarenessSkillExperienceAwards) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FAwarenessSkillParametersPerSkillLevel) == 0x0054); // 84 bytes (0x000000 - 0x000054)
static_assert(sizeof(UAwarenessSkill) == 0x03C0); // 960 bytes (0x0000B0 - 0x0003C0)
static_assert(sizeof(UBadAdjustableSeparator) == 0x0278); // 632 bytes (0x000268 - 0x000278)
static_assert(sizeof(UBankAccountRegistry) == 0x01C8); // 456 bytes (0x0000B0 - 0x0001C8)
static_assert(sizeof(UPlayerRpcChannelServerRequest) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UBankAccountRegistryRequest) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(UPlayerRpcChannelServerResponse) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UBankAccountRegistryResponse) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UBankAccountRegistryResponseDataObject) == 0x00A0); // 160 bytes (0x000028 - 0x0000A0)
static_assert(sizeof(UBankAccountRegistryStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UBankATMAccountInfo) == 0x0308); // 776 bytes (0x000268 - 0x000308)
static_assert(sizeof(UBankATMAccountSummary) == 0x0290); // 656 bytes (0x000268 - 0x000290)
static_assert(sizeof(FBankATMBoughtCardStateVisual) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(UBankATMBoughtCard) == 0x03C8); // 968 bytes (0x000268 - 0x0003C8)
static_assert(sizeof(FBankATMBuyableCardStateVisual) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(UBankATMBuyableCard) == 0x02F0); // 752 bytes (0x000268 - 0x0002F0)
static_assert(sizeof(UBankATMCardManagementOptionsScreen) == 0x02D8); // 728 bytes (0x000268 - 0x0002D8)
static_assert(sizeof(FBankATMCarouselCardStateVisual) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UBankATMCarouselCard) == 0x02F0); // 752 bytes (0x000268 - 0x0002F0)
static_assert(sizeof(UBankATMChooseTransaction) == 0x0318); // 792 bytes (0x000268 - 0x000318)
static_assert(sizeof(UBankATMEnterPin) == 0x02E0); // 736 bytes (0x000268 - 0x0002E0)
static_assert(sizeof(UBankATMErrorPopup) == 0x0288); // 648 bytes (0x000268 - 0x000288)
static_assert(sizeof(UBankATMGoldTrading) == 0x0370); // 880 bytes (0x000268 - 0x000370)
static_assert(sizeof(UBankATMGoldValueGraph) == 0x0288); // 648 bytes (0x000268 - 0x000288)
static_assert(sizeof(UBankATMMainPanel) == 0x02E8); // 744 bytes (0x000268 - 0x0002E8)
static_assert(sizeof(UBankATMManageCards) == 0x0318); // 792 bytes (0x000268 - 0x000318)
static_assert(sizeof(AMinigame) == 0x0340); // 832 bytes (0x000220 - 0x000340)
static_assert(sizeof(ABankATMMinigame) == 0x03A0); // 928 bytes (0x000340 - 0x0003A0)
static_assert(sizeof(UMinigameConfiguration) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(UBankATMMinigameConfiguration) == 0x0068); // 104 bytes (0x000050 - 0x000068)
static_assert(sizeof(UBankATMMoneyTransfer) == 0x0368); // 872 bytes (0x000268 - 0x000368)
static_assert(sizeof(FBankATMMyCardsButtonStateVisual) == 0x0120); // 288 bytes (0x000000 - 0x000120)
static_assert(sizeof(UBankATMMyCardsButton) == 0x0728); // 1832 bytes (0x000268 - 0x000728)
static_assert(sizeof(UBankATMPinSlot) == 0x02B8); // 696 bytes (0x000268 - 0x0002B8)
static_assert(sizeof(FBankATMPointingButtonStateVisual) == 0x0098); // 152 bytes (0x000000 - 0x000098)
static_assert(sizeof(UBankATMPointingButton) == 0x0528); // 1320 bytes (0x000268 - 0x000528)
static_assert(sizeof(UBankATMUIController) == 0x0120); // 288 bytes (0x000028 - 0x000120)
static_assert(sizeof(FBankATMVirtualEditboxStateVisual) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UBankATMVirtualEditbox) == 0x02E8); // 744 bytes (0x000268 - 0x0002E8)
static_assert(sizeof(UBankATMWelcomeScreen) == 0x02C0); // 704 bytes (0x000268 - 0x0002C0)
static_assert(sizeof(UBankATMYesNoConfirmationScreen) == 0x02A0); // 672 bytes (0x000268 - 0x0002A0)
static_assert(sizeof(FDbIntegerId) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UBankCardItemComponent) == 0x00E0); // 224 bytes (0x0000C8 - 0x0000E0)
static_assert(sizeof(UBankCardOperationRequest) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UBankCardOperationResponse) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UBankCardOwnershipRequest) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UBankCardOwnershipResponse) == 0x0080); // 128 bytes (0x000028 - 0x000080)
static_assert(sizeof(ASedentaryNPC) == 0x09A0); // 2464 bytes (0x000828 - 0x0009A0)
static_assert(sizeof(ABanker) == 0x09C0); // 2496 bytes (0x0009A0 - 0x0009C0)
static_assert(sizeof(UInteractionAssetData) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UBankTransactionAssetData) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UBankTransactionRequest) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(UBankTransactionResponse) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UBaseMenu) == 0x0268); // 616 bytes (0x000268 - 0x000268)
static_assert(sizeof(UBarberShopMenuWidget) == 0x0458); // 1112 bytes (0x000268 - 0x000458)
static_assert(sizeof(UBaseBuildingBaseEntitySetup) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(FElementSnapMarker) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(FBaseBuildingSizeVariation) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FLadderMarker) == 0x00A0); // 160 bytes (0x000000 - 0x0000A0)
static_assert(sizeof(FWindowMarker) == 0x0088); // 136 bytes (0x000000 - 0x000088)
static_assert(sizeof(FBaseElementDamageZone) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FRotatedZone) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FBaseElementDestructionZone) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(UBaseBuildingComponent) == 0x0750); // 1872 bytes (0x0004F8 - 0x000750)
static_assert(sizeof(UBaseBuildingItemComponent) == 0x0760); // 1888 bytes (0x000750 - 0x000760)
static_assert(sizeof(FElementQueryMarker) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FModularElementSnapMarkerSocket) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FModularElementSnapMarker) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(FElementSnapMarkerOverride) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FElementMorphQuery) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(UModularBaseBuildingComponent) == 0x07B0); // 1968 bytes (0x000750 - 0x0007B0)
static_assert(sizeof(UBaseBuildingDetailsPanel) == 0x0360); // 864 bytes (0x000268 - 0x000360)
static_assert(sizeof(UBaseBuildingPanel) == 0x0398); // 920 bytes (0x000268 - 0x000398)
static_assert(sizeof(UBaseBuildingStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UUIContext) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UBaseBuildingUIContext) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FCraftingRecipeAndIngredientButtonVisualData) == 0x0278); // 632 bytes (0x000000 - 0x000278)
static_assert(sizeof(UCraftingUIControllerBase) == 0x0390); // 912 bytes (0x000028 - 0x000390)
static_assert(sizeof(UBaseBuildingUIController) == 0x03C0); // 960 bytes (0x000390 - 0x0003C0)
static_assert(sizeof(UBaseInteractionComponent) == 0x0220); // 544 bytes (0x0001F8 - 0x000220)
static_assert(sizeof(UBaseItemContainerWidget) == 0x02A0); // 672 bytes (0x000268 - 0x0002A0)
static_assert(sizeof(UBaseItemWidget) == 0x0288); // 648 bytes (0x000268 - 0x000288)
static_assert(sizeof(UBaseMountPathBlocker) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UBasicGameResourceContainerComponent) == 0x01F0); // 496 bytes (0x0000C8 - 0x0001F0)
static_assert(sizeof(UBasicGameResourceSlotItemComponent) == 0x0120); // 288 bytes (0x0000C8 - 0x000120)
static_assert(sizeof(UEntityComponentSetup) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UBasicItemDecayEntityComponentSetup) == 0x0050); // 80 bytes (0x000048 - 0x000050)
static_assert(sizeof(ABasicLadder) == 0x0248); // 584 bytes (0x000220 - 0x000248)
static_assert(sizeof(UConZNotification) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UBasicNotification) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UNotificationDescription) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UBasicNotificationDescription) == 0x0078); // 120 bytes (0x000040 - 0x000078)
static_assert(sizeof(UBasicTextWidget) == 0x0270); // 624 bytes (0x000268 - 0x000270)
static_assert(sizeof(FEditableParameter) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FParameterInt32) == 0x0018); // 24 bytes (0x000010 - 0x000018)
static_assert(sizeof(FParameterFloat) == 0x0018); // 24 bytes (0x000010 - 0x000018)
static_assert(sizeof(FParameterVector) == 0x0020); // 32 bytes (0x000010 - 0x000020)
static_assert(sizeof(FParameterVector4) == 0x0020); // 32 bytes (0x000010 - 0x000020)
static_assert(sizeof(UFueledHeatSource) == 0x0220); // 544 bytes (0x000028 - 0x000220)
static_assert(sizeof(FCombustibleItemParams) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UBatchFuelHeatSource) == 0x0260); // 608 bytes (0x000220 - 0x000260)
static_assert(sizeof(AEquipmentItem) == 0x09B8); // 2488 bytes (0x0009A0 - 0x0009B8)
static_assert(sizeof(ABatteryChargerItem) == 0x09E0); // 2528 bytes (0x0009B8 - 0x0009E0)
static_assert(sizeof(UGameResourceContainerEntityComponentSave) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UBatteryEntityComponentSave) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UGameResourceContainerEntityComponentSetup) == 0x0070); // 112 bytes (0x000048 - 0x000070)
static_assert(sizeof(UBatteryEntityComponentSetup) == 0x0080); // 128 bytes (0x000070 - 0x000080)
static_assert(sizeof(UBatteryItemComponent) == 0x01F8); // 504 bytes (0x0001F0 - 0x0001F8)
static_assert(sizeof(UBCULockable) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(ABCULockItem) == 0x09C0); // 2496 bytes (0x0009A0 - 0x0009C0)
static_assert(sizeof(ABCULockRegistry) == 0x02A0); // 672 bytes (0x000220 - 0x0002A0)
static_assert(sizeof(ABCUMemoryModuleItem) == 0x0A00); // 2560 bytes (0x0009A0 - 0x000A00)
static_assert(sizeof(UTraderService) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UBCUUpgradeService) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UVirtualizedItemUserData) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UBedrollVirtualizedItemUserData) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(ABedroll) == 0x0AB0); // 2736 bytes (0x000A40 - 0x000AB0)
static_assert(sizeof(UBedrollItemEntitySave) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UItemEntitySetup) == 0x0090); // 144 bytes (0x000080 - 0x000090)
static_assert(sizeof(UBedrollItemEntitySetup) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(UBigItemCraftingButton) == 0x0330); // 816 bytes (0x000268 - 0x000330)
static_assert(sizeof(UBioChemSkill) == 0x00B0); // 176 bytes (0x0000B0 - 0x0000B0)
static_assert(sizeof(FHuntingBiomeParameters) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(ABiome) == 0x0270); // 624 bytes (0x000220 - 0x000270)
static_assert(sizeof(FAnimalSpawnWeigthsPerDayPeriod) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FAnimalSpawnData) == 0x002C); // 44 bytes (0x000000 - 0x00002C)
static_assert(sizeof(UBiomeData) == 0x0090); // 144 bytes (0x000030 - 0x000090)
static_assert(sizeof(ABird2) == 0x0A00); // 2560 bytes (0x0009C8 - 0x000A00)
static_assert(sizeof(ABird2AIController) == 0x04A8); // 1192 bytes (0x000450 - 0x0004A8)
static_assert(sizeof(UBird2AnimInstance) == 0x02D0); // 720 bytes (0x0002B8 - 0x0002D0)
static_assert(sizeof(ABirdTargetPoint) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(ABloodStain) == 0x02B8); // 696 bytes (0x000220 - 0x0002B8)
static_assert(sizeof(UBluntMeleeWeaponItemTag) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(FBoatParametersPerMovementPace) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(ABoat) == 0x25C0); // 9664 bytes (0x001D60 - 0x0025C0)
static_assert(sizeof(FPrisonerRestingParameters) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(UVehicleBaseMountSlot) == 0x0188); // 392 bytes (0x000028 - 0x000188)
static_assert(sizeof(UBoatMountSlot) == 0x01B0); // 432 bytes (0x000188 - 0x0001B0)
static_assert(sizeof(FWireDescription) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FSplineDescription) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(ABombDefusalMinigameBase) == 0x0530); // 1328 bytes (0x000340 - 0x000530)
static_assert(sizeof(ABombDefusalMinigame) == 0x0540); // 1344 bytes (0x000530 - 0x000540)
static_assert(sizeof(UBombDefusalMinigameConfiguration) == 0x0070); // 112 bytes (0x000050 - 0x000070)
static_assert(sizeof(UMinigameWidget) == 0x0280); // 640 bytes (0x000268 - 0x000280)
static_assert(sizeof(UBombDefusalWidget) == 0x02A0); // 672 bytes (0x000280 - 0x0002A0)
static_assert(sizeof(UBondageComponent) == 0x0EF0); // 3824 bytes (0x000ED8 - 0x000EF0)
static_assert(sizeof(UBondageItemTag) == 0x0098); // 152 bytes (0x000030 - 0x000098)
static_assert(sizeof(AWeaponAttachment) == 0x09D0); // 2512 bytes (0x0009A0 - 0x0009D0)
static_assert(sizeof(ABowAttachmentSilencer) == 0x09D8); // 2520 bytes (0x0009D0 - 0x0009D8)
static_assert(sizeof(ABowAttachmentStabilizer) == 0x09E0); // 2528 bytes (0x0009D8 - 0x0009E0)
static_assert(sizeof(FMeleeSkillExperienceAwards) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UMeleeSkill) == 0x0108); // 264 bytes (0x0000B0 - 0x000108)
static_assert(sizeof(UBoxingSkill) == 0x0108); // 264 bytes (0x000108 - 0x000108)
static_assert(sizeof(FObjectConditionContainer) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UTriggerComponent) == 0x04E0); // 1248 bytes (0x000458 - 0x0004E0)
static_assert(sizeof(UMotionTriggerComponent) == 0x0528); // 1320 bytes (0x0004E0 - 0x000528)
static_assert(sizeof(UBoxMotionTriggerComponent) == 0x0540); // 1344 bytes (0x000528 - 0x000540)
static_assert(sizeof(ABrenner) == 0x0960); // 2400 bytes (0x000828 - 0x000960)
static_assert(sizeof(ABrennerAIController) == 0x05D0); // 1488 bytes (0x000450 - 0x0005D0)
static_assert(sizeof(UBrennerAnimInstance) == 0x0300); // 768 bytes (0x0002B8 - 0x000300)
static_assert(sizeof(FBrennerCommonData_BleedingParticles) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(UBrennerCommonData) == 0x0160); // 352 bytes (0x000030 - 0x000160)
static_assert(sizeof(UBrennerMovementComponent) == 0x0DC0); // 3520 bytes (0x000DA0 - 0x000DC0)
static_assert(sizeof(ABrokenArrow) == 0x09A0); // 2464 bytes (0x0009A0 - 0x0009A0)
static_assert(sizeof(UBruisingComponent) == 0x0128); // 296 bytes (0x0000B0 - 0x000128)
static_assert(sizeof(FBruisePatch) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(UBruisingData) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UBuildingHelperComponent) == 0x00B0); // 176 bytes (0x0000B0 - 0x0000B0)
static_assert(sizeof(FBuildingNavLinkData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(ABuilding) == 0x04C8); // 1224 bytes (0x000220 - 0x0004C8)
static_assert(sizeof(FBuildingEntityData) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(UBuildingEntitySave) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UBuildingEntitySetup) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(ABuildingInterior) == 0x0220); // 544 bytes (0x000220 - 0x000220)
static_assert(sizeof(FBuildingData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FBuildingsReplicationHelper) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(ABuildingManager) == 0x03A8); // 936 bytes (0x000220 - 0x0003A8)
static_assert(sizeof(ABunkerBoundsTagActor) == 0x0238); // 568 bytes (0x000220 - 0x000238)
static_assert(sizeof(UBuriable) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UItemComponentStateBase) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UBuriableItemComponentState) == 0x0050); // 80 bytes (0x000040 - 0x000050)
static_assert(sizeof(UBuriableChestItemComponentState) == 0x0058); // 88 bytes (0x000050 - 0x000058)
static_assert(sizeof(FBurialInformation) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UBuriableItemComponent) == 0x0180); // 384 bytes (0x0000C8 - 0x000180)
static_assert(sizeof(UBuriableChestItemComponent) == 0x0190); // 400 bytes (0x000180 - 0x000190)
static_assert(sizeof(UBuriableTrapItemComponent) == 0x0180); // 384 bytes (0x000180 - 0x000180)
static_assert(sizeof(UBurnDamageType) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(FBuryMaterialData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UBuryData) == 0x0088); // 136 bytes (0x000030 - 0x000088)
static_assert(sizeof(UBuryToolItemTag) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UC4PartTag) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(FCamouflageSkillExperienceAwards) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FCamouflageSkillParametersPerSkillLevel) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(UCamouflageSkill) == 0x0258); // 600 bytes (0x0000B0 - 0x000258)
static_assert(sizeof(FCargoDropSpawnerPreset) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(ACargoDropContainer) == 0x0318); // 792 bytes (0x000220 - 0x000318)
static_assert(sizeof(AWorldEvent) == 0x0248); // 584 bytes (0x000220 - 0x000248)
static_assert(sizeof(FCargoDropEncounterData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(ACargoDropEvent) == 0x0390); // 912 bytes (0x000248 - 0x000390)
static_assert(sizeof(FCarouselTextStyle) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(FCarouselStyle) == 0x0570); // 1392 bytes (0x000000 - 0x000570)
static_assert(sizeof(UCarousel) == 0x1DF8); // 7672 bytes (0x000268 - 0x001DF8)
static_assert(sizeof(FCarouselWithLabelStyle) == 0x0108); // 264 bytes (0x000000 - 0x000108)
static_assert(sizeof(UCarouselWithLabel) == 0x2360); // 9056 bytes (0x001DF8 - 0x002360)
static_assert(sizeof(UCCGameUpgradeConditionDisplayWidget) == 0x02D0); // 720 bytes (0x000268 - 0x0002D0)
static_assert(sizeof(UTabMenuPanel) == 0x0268); // 616 bytes (0x000268 - 0x000268)
static_assert(sizeof(UCentralBuildingPanel) == 0x0270); // 624 bytes (0x000268 - 0x000270)
static_assert(sizeof(AWeaponItem) == 0x09A8); // 2472 bytes (0x0009A0 - 0x0009A8)
static_assert(sizeof(FCharacterAndItemAnimation) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(AChainsaw) == 0x1E10); // 7696 bytes (0x0009A8 - 0x001E10)
static_assert(sizeof(UChainsawAnimInstance) == 0x02E0); // 736 bytes (0x0002D0 - 0x0002E0)
static_assert(sizeof(FBodyWeaponAnimation) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FWeaponAttachmentAnimations) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FWeaponSpreadItem) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FWeaponSpreadData) == 0x0034); // 52 bytes (0x000000 - 0x000034)
static_assert(sizeof(FWeaponViewKickData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FFireAnimationData) == 0x00C0); // 192 bytes (0x000000 - 0x0000C0)
static_assert(sizeof(FWeaponMalfunctionChances) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FWeaponMalfunctionData) == 0x00A8); // 168 bytes (0x000000 - 0x0000A8)
static_assert(sizeof(FAmmunitionData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FWeaponStateSyncData) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(AWeapon) == 0x3008); // 12296 bytes (0x0009A8 - 0x003008)
static_assert(sizeof(UWeaponAction) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FWeaponReloadData) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(UWeaponActionReloadSequence) == 0x0090); // 144 bytes (0x000028 - 0x000090)
static_assert(sizeof(UChamberCartridge) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(UWaypointWidgetBase) == 0x0340); // 832 bytes (0x000268 - 0x000340)
static_assert(sizeof(UChangeTextWidget) == 0x0368); // 872 bytes (0x000340 - 0x000368)
static_assert(sizeof(UCharacterActionComponent) == 0x00C0); // 192 bytes (0x0000B0 - 0x0000C0)
static_assert(sizeof(UCCNonSelectableTextWidget) == 0x02C8); // 712 bytes (0x000268 - 0x0002C8)
static_assert(sizeof(UUserWidgetWithDescription) == 0x02B8); // 696 bytes (0x000268 - 0x0002B8)
static_assert(sizeof(FSkillTemplate) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(UCCSkillSliderWidget) == 0x0360); // 864 bytes (0x0002B8 - 0x000360)
static_assert(sizeof(FCCNonImplementedSkill) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UCharacterCreationMenu) == 0x0520); // 1312 bytes (0x000268 - 0x000520)
static_assert(sizeof(ACharacterCreationMenuGameMode) == 0x0308); // 776 bytes (0x000308 - 0x000308)
static_assert(sizeof(FCharacterImpactSounds) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FCharacterHeadImpactSoundData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FCharacterHeadImpactSoundsData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FCharacterTorsoImpactSoundData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FCharacterTorsoImpactSoundsData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FCharacterArmsImpactSoundData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FCharacterArmsImpactSoundsData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FCharacterLegsImpactSoundData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FCharacterLegsImpactSoundsData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UCharacterImpactSoundsData) == 0x0090); // 144 bytes (0x000030 - 0x000090)
static_assert(sizeof(UCharacterItemDragComponent) == 0x0108); // 264 bytes (0x0000B0 - 0x000108)
static_assert(sizeof(FCharacterMeshSocketOverride) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FCharacterMeshMorphTarget) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FCharacterMeshMorphTargetArray) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FCharacterMeshMaterialOverride) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(FCharacterMeshSlice) == 0x01B0); // 432 bytes (0x000000 - 0x0001B0)
static_assert(sizeof(UCharacterMesh) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(FCharacterMeshClassSet) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FCharacterMeshManagerPerSlotData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UCharacterMeshManager) == 0x0230); // 560 bytes (0x000028 - 0x000230)
static_assert(sizeof(ACharacterModificationRoom) == 0x02C8); // 712 bytes (0x000220 - 0x0002C8)
static_assert(sizeof(ASurgeryRoom) == 0x02D0); // 720 bytes (0x0002C8 - 0x0002D0)
static_assert(sizeof(ABarberShop) == 0x02E0); // 736 bytes (0x0002C8 - 0x0002E0)
static_assert(sizeof(UCharacterNameDisplayWidget) == 0x0288); // 648 bytes (0x000268 - 0x000288)
static_assert(sizeof(UCharacterPainSoundsData) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UCharacterSelectionWidget) == 0x02C0); // 704 bytes (0x000268 - 0x0002C0)
static_assert(sizeof(UCharacterSlot) == 0x02B0); // 688 bytes (0x000268 - 0x0002B0)
static_assert(sizeof(FCharacterSpawnerMarker) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(UCharacterSpawnerComponent) == 0x0208); // 520 bytes (0x0001F8 - 0x000208)
static_assert(sizeof(UCharacterVoiceline) == 0x0070); // 112 bytes (0x000030 - 0x000070)
static_assert(sizeof(UChatNotification) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UChatNotificationDescription) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(USpamProtectionState) == 0x0058); // 88 bytes (0x000028 - 0x000058)
static_assert(sizeof(FSpamSeverityConditions) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSpamConsequences) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UChatSpamProtectionRules) == 0x00D8); // 216 bytes (0x000030 - 0x0000D8)
static_assert(sizeof(UChatSuggestionWidget) == 0x02A0); // 672 bytes (0x000268 - 0x0002A0)
static_assert(sizeof(UChatUIController) == 0x0128); // 296 bytes (0x000028 - 0x000128)
static_assert(sizeof(UChatText) == 0x02B0); // 688 bytes (0x0002B0 - 0x0002B0)
static_assert(sizeof(UChatWidget) == 0x0388); // 904 bytes (0x000268 - 0x000388)
static_assert(sizeof(UWeaponActionCheckAmmoSequence) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(UCheckAmmoMagazineAttached) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UCheckAmmoMagazineNotAttached) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(USkillAction) == 0x00A0); // 160 bytes (0x000028 - 0x0000A0)
static_assert(sizeof(UCheckDetectableItemsAction) == 0x00B0); // 176 bytes (0x0000A0 - 0x0000B0)
static_assert(sizeof(UCheckDetectablePlayersAction) == 0x00A8); // 168 bytes (0x0000A0 - 0x0000A8)
static_assert(sizeof(UCheckOccludedDetectablePlayersAction) == 0x00A8); // 168 bytes (0x0000A0 - 0x0000A8)
static_assert(sizeof(FActorPaintParams) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(AChestItem) == 0x0B90); // 2960 bytes (0x0009A0 - 0x000B90)
static_assert(sizeof(UEncounterBase) == 0x0210); // 528 bytes (0x000028 - 0x000210)
static_assert(sizeof(UChildEncounterLocationGenerationMethodBase) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UChildEncounterLocationGenerationMethod_AverageCharacterLocation) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UChildEncounterLocationGenerationMethod_RandomCharacterLocation) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UInteractionAction) == 0x00A8); // 168 bytes (0x000028 - 0x0000A8)
static_assert(sizeof(UChopItemAction) == 0x00B0); // 176 bytes (0x0000A8 - 0x0000B0)
static_assert(sizeof(UChoppable) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FChoppingIngredient) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FChoppingTool2) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FPossibleChoppingTools) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FExperienceDependentFloat) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FChoppingParametersPerSkillLevel) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FChoppingRecipe) == 0x0098); // 152 bytes (0x000000 - 0x000098)
static_assert(sizeof(UChoppingRecipeDataAsset) == 0x00C8); // 200 bytes (0x000030 - 0x0000C8)
static_assert(sizeof(UChoppingToolItemTag) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(AChristmasGhost) == 0x0300); // 768 bytes (0x000220 - 0x000300)
static_assert(sizeof(UCircularMenuSegmentInfo) == 0x00A8); // 168 bytes (0x000030 - 0x0000A8)
static_assert(sizeof(UCircularMenuSegmentWeaponMalfunctionInfo) == 0x00B0); // 176 bytes (0x0000A8 - 0x0000B0)
static_assert(sizeof(UCircularMenuSegmentIcons) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(UCircularMenuSegmentSubmenuInfo) == 0x00C0); // 192 bytes (0x0000A8 - 0x0000C0)
static_assert(sizeof(UMusicPlayerSegmentSubmenuInfo) == 0x00C0); // 192 bytes (0x0000C0 - 0x0000C0)
static_assert(sizeof(UVoicelineSegmentInfo) == 0x00B8); // 184 bytes (0x0000A8 - 0x0000B8)
static_assert(sizeof(UCircularMenuSegmentThrowingInfo) == 0x00C0); // 192 bytes (0x0000A8 - 0x0000C0)
static_assert(sizeof(UCircularMenuSegmentGenericInfo) == 0x00B8); // 184 bytes (0x0000A8 - 0x0000B8)
static_assert(sizeof(FInteractionStruct) == 0x0098); // 152 bytes (0x000000 - 0x000098)
static_assert(sizeof(UCircularMenuSegmentInteractionInfo) == 0x0160); // 352 bytes (0x0000A8 - 0x000160)
static_assert(sizeof(UCircularMenuMusicPlayerToggleInfo) == 0x0240); // 576 bytes (0x0000A8 - 0x000240)
static_assert(sizeof(UCircularMenuDanceToggleInfo) == 0x00C0); // 192 bytes (0x0000C0 - 0x0000C0)
static_assert(sizeof(UCircularMenuSegmentDanceInfo) == 0x00B0); // 176 bytes (0x0000A8 - 0x0000B0)
static_assert(sizeof(UConZUserWidget) == 0x0290); // 656 bytes (0x000268 - 0x000290)
static_assert(sizeof(UCircularMenuSegmentWidget) == 0x0318); // 792 bytes (0x000290 - 0x000318)
static_assert(sizeof(UCircularMenuTooltip) == 0x02F8); // 760 bytes (0x000268 - 0x0002F8)
static_assert(sizeof(FCircularLayerData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FCircularSegmentContainer) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UCircularMenuWidget) == 0x02E0); // 736 bytes (0x000268 - 0x0002E0)
static_assert(sizeof(UCircularProgressBar) == 0x02F0); // 752 bytes (0x000268 - 0x0002F0)
static_assert(sizeof(UClaimableWhenKilled) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UCleaningItemTag) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(FClearMalfunctionData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UWeaponActionClearMalfunctionSequence) == 0x00B8); // 184 bytes (0x000028 - 0x0000B8)
static_assert(sizeof(UClearBadRound) == 0x00C0); // 192 bytes (0x0000B8 - 0x0000C0)
static_assert(sizeof(UClearClipPartiallyEjected) == 0x00C0); // 192 bytes (0x0000B8 - 0x0000C0)
static_assert(sizeof(UClearDoubleFeed) == 0x00D0); // 208 bytes (0x0000B8 - 0x0000D0)
static_assert(sizeof(UClearRoundNotLoaded) == 0x00C0); // 192 bytes (0x0000B8 - 0x0000C0)
static_assert(sizeof(UClearSearchButton) == 0x0288); // 648 bytes (0x000268 - 0x000288)
static_assert(sizeof(UClearStovePipe) == 0x00C0); // 192 bytes (0x0000B8 - 0x0000C0)
static_assert(sizeof(UClearStuckBullet) == 0x00C0); // 192 bytes (0x0000B8 - 0x0000C0)
static_assert(sizeof(UClientPriceCache) == 0x02C8); // 712 bytes (0x000028 - 0x0002C8)
static_assert(sizeof(UConZSettingsMenu) == 0x0608); // 1544 bytes (0x000268 - 0x000608)
static_assert(sizeof(UClientSettingsMenu) == 0x0690); // 1680 bytes (0x000608 - 0x000690)
static_assert(sizeof(UConZSettingsUIController) == 0x01E8); // 488 bytes (0x000028 - 0x0001E8)
static_assert(sizeof(UClientSettingsUIController) == 0x0220); // 544 bytes (0x0001E8 - 0x000220)
static_assert(sizeof(UClockFaceWidget) == 0x0268); // 616 bytes (0x000268 - 0x000268)
static_assert(sizeof(UClothesItemEntitySetup) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(UClothesModifierItemTag) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UManualEntriesDropdownWidget) == 0x02B0); // 688 bytes (0x000268 - 0x0002B0)
static_assert(sizeof(UCodexEntriesDropdownWidget) == 0x02C0); // 704 bytes (0x0002B0 - 0x0002C0)
static_assert(sizeof(UCodexEntriesPanelWidget) == 0x0380); // 896 bytes (0x000268 - 0x000380)
static_assert(sizeof(UCodexEntryDetailsPanelWidget) == 0x02B8); // 696 bytes (0x000268 - 0x0002B8)
static_assert(sizeof(UManualEntryWidget) == 0x02C0); // 704 bytes (0x000268 - 0x0002C0)
static_assert(sizeof(UCodexEntryWidget) == 0x02D0); // 720 bytes (0x0002C0 - 0x0002D0)
static_assert(sizeof(UCodexSurvivalTipEntryWidget) == 0x02A0); // 672 bytes (0x000268 - 0x0002A0)
static_assert(sizeof(UCollapsableColorPicker) == 0x02B8); // 696 bytes (0x000268 - 0x0002B8)
static_assert(sizeof(UCollapsableContainer) == 0x07B8); // 1976 bytes (0x000268 - 0x0007B8)
static_assert(sizeof(UCutObjectAssetData) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UCollectObjectAssetData) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UCollectSeedsItemTag) == 0x0058); // 88 bytes (0x000030 - 0x000058)
static_assert(sizeof(UColorPicker) == 0x02A8); // 680 bytes (0x000268 - 0x0002A8)
static_assert(sizeof(ACombinationLockItem) == 0x09B0); // 2480 bytes (0x0009A0 - 0x0009B0)
static_assert(sizeof(UCombinationLockUnlockAttemptRequest) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(UCombinationLockUnlockAttemptResponse) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UComboBoxStringWithIndexing) == 0x0E18); // 3608 bytes (0x000E08 - 0x000E18)
static_assert(sizeof(UComboBoxWrapper) == 0x0278); // 632 bytes (0x000268 - 0x000278)
static_assert(sizeof(UCompanionCrowAnimInstance) == 0x02D0); // 720 bytes (0x0002B8 - 0x0002D0)
static_assert(sizeof(ACompanionCrow) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(UCompassItemTag) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UCompassWidget) == 0x02A8); // 680 bytes (0x000268 - 0x0002A8)
static_assert(sizeof(FAnimalPaceSettings) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FAnimalStationaryRotationRateSettings) == 0x003C); // 60 bytes (0x000000 - 0x00003C)
static_assert(sizeof(FChargeAttackData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FCloseRangeAttackData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FTurnMontages) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FAnimalActionMontageData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(AComplexAnimal2) == 0x0B48); // 2888 bytes (0x0009C8 - 0x000B48)
static_assert(sizeof(UComplexAnimal2AnimInstance) == 0x0360); // 864 bytes (0x0002F0 - 0x000360)
static_assert(sizeof(UConsoleStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UConstitutionSkill) == 0x00C8); // 200 bytes (0x0000B0 - 0x0000C8)
static_assert(sizeof(UConsumableUserData) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(AFoodItem) == 0x0A48); // 2632 bytes (0x0009A0 - 0x000A48)
static_assert(sizeof(AConsumableBuffItem) == 0x0A50); // 2640 bytes (0x000A48 - 0x000A50)
static_assert(sizeof(UConsumableDigestionHandler) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UContainerDisplay) == 0x0328); // 808 bytes (0x000268 - 0x000328)
static_assert(sizeof(FContainerItemDescriptorData) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(UContainerItemDescriptor) == 0x0248); // 584 bytes (0x000028 - 0x000248)
static_assert(sizeof(UContinuousFuelConsumptionEntityComponentSave) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UContinuousFuelConsumptionEntityComponentSetup) == 0x0068); // 104 bytes (0x000048 - 0x000068)
static_assert(sizeof(UContinuousFuelHeatSource) == 0x0310); // 784 bytes (0x000220 - 0x000310)
static_assert(sizeof(UControlMappingsUIController) == 0x01C0); // 448 bytes (0x000028 - 0x0001C0)
static_assert(sizeof(FControlMappingTextStyle) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FControlMappingStyle) == 0x0158); // 344 bytes (0x000000 - 0x000158)
static_assert(sizeof(UControlMappingWidget) == 0x08B8); // 2232 bytes (0x000268 - 0x0008B8)
static_assert(sizeof(UConZAIControllerEncounterSaveState) == 0x0080); // 128 bytes (0x000028 - 0x000080)
static_assert(sizeof(FImageAssetToLoad) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UConZAssetManager) == 0x06F8); // 1784 bytes (0x000478 - 0x0006F8)
static_assert(sizeof(AConZBase) == 0x0550); // 1360 bytes (0x000220 - 0x000550)
static_assert(sizeof(AConZBaseElement) == 0x0380); // 896 bytes (0x000220 - 0x000380)
static_assert(sizeof(FConZBaseRepairAreaDuration) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(AConZBaseManager) == 0x04E8); // 1256 bytes (0x000220 - 0x0004E8)
static_assert(sizeof(UModularBaseBuildingSocketType) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UConZBoatAnimInstance) == 0x0350); // 848 bytes (0x0002B8 - 0x000350)
static_assert(sizeof(UConZBorderBase) == 0x02A8); // 680 bytes (0x000268 - 0x0002A8)
static_assert(sizeof(UConZButton) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(AConZCameraManager) == 0x28E0); // 10464 bytes (0x002810 - 0x0028E0)
static_assert(sizeof(UConZCharacterSkeletalMeshComponent) == 0x0EE0); // 3808 bytes (0x000ED8 - 0x000EE0)
static_assert(sizeof(UConZCustomInteractionButton) == 0x0438); // 1080 bytes (0x000430 - 0x000438)
static_assert(sizeof(UConZCustomInteractionMultilineEditableText) == 0x0480); // 1152 bytes (0x000478 - 0x000480)
static_assert(sizeof(UConZCustomInteractionWidget) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UConZDoorNavLinkComponent) == 0x0190); // 400 bytes (0x000190 - 0x000190)
static_assert(sizeof(FTradeOutpostProsperityLevelInfo) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FPendingTraderPersonalityDataHelperStruct) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(AConZEconomyManager) == 0x0C98); // 3224 bytes (0x000220 - 0x000C98)
static_assert(sizeof(FCommonMaps) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(FCharacterCreationMenuContext) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(UConZGameInstance) == 0x0528); // 1320 bytes (0x0001A8 - 0x000528)
static_assert(sizeof(FLazyLoadedClassPtr) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(AConZGameMode) == 0x09F8); // 2552 bytes (0x000308 - 0x0009F8)
static_assert(sizeof(AConZGameSession) == 0x0238); // 568 bytes (0x000238 - 0x000238)
static_assert(sizeof(AConZGameState) == 0x08C0); // 2240 bytes (0x000290 - 0x0008C0)
static_assert(sizeof(AConZHUD) == 0x0348); // 840 bytes (0x000310 - 0x000348)
static_assert(sizeof(UGameplayLog) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UConZNoiseListener) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(AConZNoiseListenerActor) == 0x0240); // 576 bytes (0x000220 - 0x000240)
static_assert(sizeof(UConZNoiseListenSubject) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UConZPathFollowingComponent) == 0x0250); // 592 bytes (0x000250 - 0x000250)
static_assert(sizeof(AConZPlayerController) == 0x09F0); // 2544 bytes (0x000570 - 0x0009F0)
static_assert(sizeof(UConZPlayerPawn) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(AConZPlayerState) == 0x0330); // 816 bytes (0x000320 - 0x000330)
static_assert(sizeof(UConZReplicationGraph) == 0x07D0); // 2000 bytes (0x0004A8 - 0x0007D0)
static_assert(sizeof(UConZNetReplicationGraphConnection) == 0x0248); // 584 bytes (0x000238 - 0x000248)
static_assert(sizeof(UConZReplicationGraphNode_AlwaysRelevantToConnection) == 0x00C8); // 200 bytes (0x000050 - 0x0000C8)
static_assert(sizeof(UConZReplicationGraphNode_RelevantToConnectionOnly) == 0x00D8); // 216 bytes (0x0000D0 - 0x0000D8)
static_assert(sizeof(UConZReverbComponent) == 0x02A0); // 672 bytes (0x000280 - 0x0002A0)
static_assert(sizeof(AConZReverbVolume) == 0x0290); // 656 bytes (0x000290 - 0x000290)
static_assert(sizeof(FConZSliderStyle) == 0x0228); // 552 bytes (0x000000 - 0x000228)
static_assert(sizeof(UConZSlider) == 0x0DC0); // 3520 bytes (0x000268 - 0x000DC0)
static_assert(sizeof(AConZSpectatorPawn) == 0x02C0); // 704 bytes (0x0002A8 - 0x0002C0)
static_assert(sizeof(FConZSquadEmblemElement) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FConZSquadEmblem) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FConZSquadPendingMember) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FConZSquadMember) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(AConZSquad) == 0x0398); // 920 bytes (0x000220 - 0x000398)
static_assert(sizeof(UConZStandardButton) == 0x0318); // 792 bytes (0x000268 - 0x000318)
static_assert(sizeof(FTimestampedObject) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UConZUniqueObjectCacher) == 0x0080); // 128 bytes (0x000028 - 0x000080)
static_assert(sizeof(UConZVehicleSpringArmComponent) == 0x02E0); // 736 bytes (0x000290 - 0x0002E0)
static_assert(sizeof(FConZWaterSplineControlPoint) == 0x0058); // 88 bytes (0x000044 - 0x000058)
static_assert(sizeof(FConZGerstnerWavesParameters) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(AConZWaterSpline) == 0x02B8); // 696 bytes (0x000220 - 0x0002B8)
static_assert(sizeof(AConZWaterSplineIsland) == 0x02B8); // 696 bytes (0x0002B8 - 0x0002B8)
static_assert(sizeof(AConZWaterSplineLake) == 0x02C0); // 704 bytes (0x0002B8 - 0x0002C0)
static_assert(sizeof(AConZWaterSplineOcean) == 0x02C8); // 712 bytes (0x0002B8 - 0x0002C8)
static_assert(sizeof(AConZWaterSplineRegistry) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(AConZWaterSplineRiver) == 0x0310); // 784 bytes (0x0002B8 - 0x000310)
static_assert(sizeof(UConZWindowNavLinkComponent) == 0x0190); // 400 bytes (0x000190 - 0x000190)
static_assert(sizeof(AConZWorldBoundsVolume) == 0x0258); // 600 bytes (0x000258 - 0x000258)
static_assert(sizeof(FItemSpawningSettings) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FMapLimits_WallSegment) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FMapLimits_Wall) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FMapLimits) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FVehicleSpawnPointData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FConZDeveloperId) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(AConZWorldSettings) == 0x0600); // 1536 bytes (0x000398 - 0x000600)
static_assert(sizeof(ACookedFoodItem) == 0x0B60); // 2912 bytes (0x000A48 - 0x000B60)
static_assert(sizeof(UCookedFoodItemEntitySave) == 0x0088); // 136 bytes (0x000028 - 0x000088)
static_assert(sizeof(UFoodItemEntitySetup) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(UCookedFoodItemEntitySetup) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(UCookingAddRecipeButton) == 0x02F0); // 752 bytes (0x000268 - 0x0002F0)
static_assert(sizeof(UCookingCategoryButtonWidget) == 0x0300); // 768 bytes (0x000268 - 0x000300)
static_assert(sizeof(FCookingCategoryDropdownEntryData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(UCookingCategoryDropdown) == 0x02B8); // 696 bytes (0x000268 - 0x0002B8)
static_assert(sizeof(UCookingCommonData) == 0x0190); // 400 bytes (0x000030 - 0x000190)
static_assert(sizeof(FHoverClickButtonVisualInfo) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UCookingControlButton) == 0x0340); // 832 bytes (0x000268 - 0x000340)
static_assert(sizeof(UCookingFavouriteButton) == 0x03E8); // 1000 bytes (0x000268 - 0x0003E8)
static_assert(sizeof(UCookingFinishedWidget) == 0x03B0); // 944 bytes (0x000268 - 0x0003B0)
static_assert(sizeof(UCookingHeatSourceButton) == 0x02C8); // 712 bytes (0x000268 - 0x0002C8)
static_assert(sizeof(UCookingInfoButton) == 0x02C8); // 712 bytes (0x000268 - 0x0002C8)
static_assert(sizeof(UCookingIngredientInfoWidget) == 0x02E8); // 744 bytes (0x000268 - 0x0002E8)
static_assert(sizeof(UCookingIngredientTooltip) == 0x0278); // 632 bytes (0x000268 - 0x000278)
static_assert(sizeof(FEntityId) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FCookingUtilitySlotInstance) == 0x0180); // 384 bytes (0x00000C - 0x000180)
static_assert(sizeof(FCookingUtilitySlotArray) == 0x01D0); // 464 bytes (0x000108 - 0x0001D0)
static_assert(sizeof(ACookingUtilitySlotContainer) == 0x03F8); // 1016 bytes (0x000220 - 0x0003F8)
static_assert(sizeof(FMainPointSnappedUtilities) == 0x00C8); // 200 bytes (0x000000 - 0x0000C8)
static_assert(sizeof(FCookingFoodProxyMesh) == 0x00B0); // 176 bytes (0x000000 - 0x0000B0)
static_assert(sizeof(ACookingManager) == 0x0638); // 1592 bytes (0x000220 - 0x000638)
static_assert(sizeof(FCraftingCategoryTabButtonSharedStyle) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(UCookingPanel) == 0x02F8); // 760 bytes (0x000268 - 0x0002F8)
static_assert(sizeof(UCookingProgressWidget) == 0x0288); // 648 bytes (0x000268 - 0x000288)
static_assert(sizeof(FPossibleRecipeIngredient) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FRecipeIngredient) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FCookingResult) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UCookingRecipe) == 0x01A0); // 416 bytes (0x000030 - 0x0001A0)
static_assert(sizeof(UCookingRecipeButtonsContainer) == 0x02D0); // 720 bytes (0x000268 - 0x0002D0)
static_assert(sizeof(UCookingRecipeButtonWidget) == 0x0340); // 832 bytes (0x000268 - 0x000340)
static_assert(sizeof(UCookingRecipeCategoryPanel) == 0x0158); // 344 bytes (0x000150 - 0x000158)
static_assert(sizeof(UCookingRecipeCollectionItemTag) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UCookingRecipeDetailsWidget) == 0x0310); // 784 bytes (0x000268 - 0x000310)
static_assert(sizeof(FCookingRecipeRegistryEntry) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(UCookingRecipeRegistry) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UCookingRecipesPanel) == 0x0460); // 1120 bytes (0x000268 - 0x000460)
static_assert(sizeof(UCookingSkill) == 0x0178); // 376 bytes (0x0000B0 - 0x000178)
static_assert(sizeof(FCookingSortingDropdownEntryData) == 0x00A8); // 168 bytes (0x000000 - 0x0000A8)
static_assert(sizeof(UCookingSortingDropdown) == 0x02B0); // 688 bytes (0x000268 - 0x0002B0)
static_assert(sizeof(UCookingTemperatureControlLinearWidget) == 0x02A0); // 672 bytes (0x000268 - 0x0002A0)
static_assert(sizeof(UCookingTemperatureControlRadialWidget) == 0x03B0); // 944 bytes (0x000268 - 0x0003B0)
static_assert(sizeof(UCookingUIContext) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UCookingUIController) == 0x0478); // 1144 bytes (0x000028 - 0x000478)
static_assert(sizeof(FCookingUtilityFilterDropdownEntryData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UCookingUtilityFilterDropdown) == 0x02B0); // 688 bytes (0x000268 - 0x0002B0)
static_assert(sizeof(FCookingUtilityMainSnapPoint) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FCookingUtilitySlot) == 0x0088); // 136 bytes (0x000000 - 0x000088)
static_assert(sizeof(UCookingUtilityItemTag) == 0x0098); // 152 bytes (0x000030 - 0x000098)
static_assert(sizeof(UCookingUtilityOverview) == 0x04A0); // 1184 bytes (0x000268 - 0x0004A0)
static_assert(sizeof(UCookingUtilitySlotButton) == 0x02F0); // 752 bytes (0x000268 - 0x0002F0)
static_assert(sizeof(UCookingUtilitySlotsPanel) == 0x02A0); // 672 bytes (0x000268 - 0x0002A0)
static_assert(sizeof(UCookingUtilityUIDataAsset) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(USearchableCorpse) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UCraftingAvailableItemWidget) == 0x02E0); // 736 bytes (0x000268 - 0x0002E0)
static_assert(sizeof(FCraftingPanelCategoryButtonUIData) == 0x00C8); // 200 bytes (0x000000 - 0x0000C8)
static_assert(sizeof(UCraftingCategoriesTabButtonsContainer) == 0x02A0); // 672 bytes (0x000268 - 0x0002A0)
static_assert(sizeof(UCraftingCategoryTabButton) == 0x0568); // 1384 bytes (0x000290 - 0x000568)
static_assert(sizeof(UCraftingComponentTooltip) == 0x0298); // 664 bytes (0x000268 - 0x000298)
static_assert(sizeof(UCraftingComponentWidget) == 0x02B0); // 688 bytes (0x000268 - 0x0002B0)
static_assert(sizeof(UCraftingFamePointsItemTag) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UCraftingInfoWidget) == 0x0348); // 840 bytes (0x000268 - 0x000348)
static_assert(sizeof(UCraftingIngredientConsumptionMethod) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UCICM_Default) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UCICM_Uses) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UCICM_HealthRatio) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UCICM_HealthAsFakeUses) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UCICM_GameResource) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UCraftingItemTag) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCraftingPanelSwitcher) == 0x0298); // 664 bytes (0x000268 - 0x000298)
static_assert(sizeof(UCraftingPanelWidget) == 0x0278); // 632 bytes (0x000268 - 0x000278)
static_assert(sizeof(UCraftingProductQualityApplicationMethod) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UCPQEM_Default) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UCraftingProductSpawningMethod) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UCPSM_Default) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UCPSM_AmmunitionStack) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UCraftingPropertyTracker) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UCPT_Weight) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UCPT_Dirtiness) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UCPT_GameResource) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(FPerSkillLevelIntegerData) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FCraftingIngredientSlot) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FPerSkillLevelFloatData) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(UCraftingRecipe) == 0x0098); // 152 bytes (0x000030 - 0x000098)
static_assert(sizeof(UItemCraftingRecipe) == 0x0130); // 304 bytes (0x000098 - 0x000130)
static_assert(sizeof(UPlaceableCraftingRecipe) == 0x0218); // 536 bytes (0x000098 - 0x000218)
static_assert(sizeof(UCraftingRecipeButton) == 0x0418); // 1048 bytes (0x000268 - 0x000418)
static_assert(sizeof(UCraftingRecipeButtonsContainer) == 0x02C8); // 712 bytes (0x000268 - 0x0002C8)
static_assert(sizeof(UCraftingIngredientTag) == 0x0088); // 136 bytes (0x000030 - 0x000088)
static_assert(sizeof(FCraftingCategoryData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UCraftingUIData) == 0x00A0); // 160 bytes (0x000030 - 0x0000A0)
static_assert(sizeof(UCraftItemAction) == 0x00C0); // 192 bytes (0x0000A8 - 0x0000C0)
static_assert(sizeof(UCreditsWidget) == 0x0270); // 624 bytes (0x000268 - 0x000270)
static_assert(sizeof(UCriminalRecord) == 0x0378); // 888 bytes (0x000268 - 0x000378)
static_assert(sizeof(UCriminalRecordSkill) == 0x0280); // 640 bytes (0x000268 - 0x000280)
static_assert(sizeof(UCriminalRecordText) == 0x03F8); // 1016 bytes (0x000268 - 0x0003F8)
static_assert(sizeof(ACTFBase) == 0x0250); // 592 bytes (0x000220 - 0x000250)
static_assert(sizeof(ACTFFlag) == 0x02D0); // 720 bytes (0x000220 - 0x0002D0)
static_assert(sizeof(ACTFFlagStand) == 0x0240); // 576 bytes (0x000220 - 0x000240)
static_assert(sizeof(FGameEventParticipantInfo) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(AGameEventBase) == 0x0588); // 1416 bytes (0x000220 - 0x000588)
static_assert(sizeof(UGameEventParticipantStats) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(UCTFParticipantStats) == 0x0058); // 88 bytes (0x000048 - 0x000058)
static_assert(sizeof(FGameEventRewardPoints) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FCTFParameters) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(ACTFGameEvent) == 0x06B0); // 1712 bytes (0x000588 - 0x0006B0)
static_assert(sizeof(FGameEventParameters) == 0x0188); // 392 bytes (0x000000 - 0x000188)
static_assert(sizeof(FSpawnArea) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(AGameEventLocationMarker) == 0x0418); // 1048 bytes (0x000220 - 0x000418)
static_assert(sizeof(ACTFLocationMarker) == 0x04E0); // 1248 bytes (0x000418 - 0x0004E0)
static_assert(sizeof(UCurrencyConversionRequest) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(UCurrencyConversionResponse) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UCurrencyItemComponent) == 0x00D8); // 216 bytes (0x0000C8 - 0x0000D8)
static_assert(sizeof(UCursedScrollBar) == 0x0290); // 656 bytes (0x000268 - 0x000290)
static_assert(sizeof(UCustomBorder) == 0x02A0); // 672 bytes (0x000268 - 0x0002A0)
static_assert(sizeof(ACustomMapBorder) == 0x0288); // 648 bytes (0x000220 - 0x000288)
static_assert(sizeof(FCustomZoneDisplayData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(UCustomZoneDataAsset) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(FCustomZoneConfiguration) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FCustomZoneRegion) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(UCustomZoneRegistry) == 0x0228); // 552 bytes (0x0000B0 - 0x000228)
static_assert(sizeof(UCustomZoneSettingsApplyNotification) == 0x0278); // 632 bytes (0x000268 - 0x000278)
static_assert(sizeof(UCustomZoneSettingsColorPicker) == 0x0328); // 808 bytes (0x000268 - 0x000328)
static_assert(sizeof(UCustomZoneSettingsConfiguration) == 0x0320); // 800 bytes (0x000268 - 0x000320)
static_assert(sizeof(UCustomZoneSettingsConfigurationDetails) == 0x0310); // 784 bytes (0x000268 - 0x000310)
static_assert(sizeof(UCustomZoneSettingsConfigurationsList) == 0x02C8); // 712 bytes (0x000268 - 0x0002C8)
static_assert(sizeof(UCustomZoneSettingsDetailsDisplay) == 0x0300); // 768 bytes (0x000268 - 0x000300)
static_assert(sizeof(UCustomZoneSettingsEventDisplay) == 0x0280); // 640 bytes (0x000268 - 0x000280)
static_assert(sizeof(UCustomZoneSettingsHandlingMethodSelector) == 0x02B8); // 696 bytes (0x000268 - 0x0002B8)
static_assert(sizeof(UCustomZoneSettingsMap) == 0x0308); // 776 bytes (0x000268 - 0x000308)
static_assert(sizeof(UCustomZoneSettingsMenu) == 0x02C8); // 712 bytes (0x000268 - 0x0002C8)
static_assert(sizeof(UCustomZoneSettingsRegion) == 0x0410); // 1040 bytes (0x000268 - 0x000410)
static_assert(sizeof(UCustomZoneSettingsRegionDetails) == 0x0370); // 880 bytes (0x000268 - 0x000370)
static_assert(sizeof(UCustomZoneSettingsRegionsList) == 0x02F8); // 760 bytes (0x000268 - 0x0002F8)
static_assert(sizeof(UCustomZoneSettingsToolTip) == 0x0270); // 624 bytes (0x000268 - 0x000270)
static_assert(sizeof(UCustomZoneSettingsUIController) == 0x0270); // 624 bytes (0x000028 - 0x000270)
static_assert(sizeof(UCutObjectAction) == 0x00C0); // 192 bytes (0x0000A8 - 0x0000C0)
static_assert(sizeof(FVideoInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UCutsceneWidget) == 0x0340); // 832 bytes (0x000268 - 0x000340)
static_assert(sizeof(UDamageCustomization) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FDamageTargetTypeMapping) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UDamageData) == 0x0108); // 264 bytes (0x000030 - 0x000108)
static_assert(sizeof(UDamageDealer) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UDamageDirectionIndicator) == 0x0070); // 112 bytes (0x000028 - 0x000070)
static_assert(sizeof(UDamageReceiver) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UScumPointDamageType) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UScumRadialDamageType) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UDamageStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(ATrapItem) == 0x0AD0); // 2768 bytes (0x0009A0 - 0x000AD0)
static_assert(sizeof(ADamagingTrapItem) == 0x0AE0); // 2784 bytes (0x000AD0 - 0x000AE0)
static_assert(sizeof(FProjectileImpulseMultiplier) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FWeaponMalfunctionProbabilityCurves) == 0x03B8); // 952 bytes (0x000000 - 0x0003B8)
static_assert(sizeof(FGameResourceMixingRule) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FAbandonedBunkerAnnouncementSoundAndTime) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UDataSingleton) == 0x0EF8); // 3832 bytes (0x000028 - 0x000EF8)
static_assert(sizeof(UDbAsyncWorker) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UDbConnection) == 0x00C8); // 200 bytes (0x000028 - 0x0000C8)
static_assert(sizeof(UDbIdGenerator) == 0x0098); // 152 bytes (0x000028 - 0x000098)
static_assert(sizeof(UDbStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(ADcxBike) == 0x2068); // 8296 bytes (0x002010 - 0x002068)
static_assert(sizeof(ADcxBicycle) == 0x2140); // 8512 bytes (0x002068 - 0x002140)
static_assert(sizeof(UDcxBikeAnimInstance) == 0x0AB0); // 2736 bytes (0x000A48 - 0x000AB0)
static_assert(sizeof(UDcxBicycleAnimInstance) == 0x0AB0); // 2736 bytes (0x000AB0 - 0x000AB0)
static_assert(sizeof(UDcxBikeDriverMountSlot) == 0x0230); // 560 bytes (0x000188 - 0x000230)
static_assert(sizeof(UDcxBikePassengerMountSlot) == 0x0190); // 400 bytes (0x000188 - 0x000190)
static_assert(sizeof(UDcxBicycleDriverMountSlot) == 0x0230); // 560 bytes (0x000230 - 0x000230)
static_assert(sizeof(ADcxMotorcycle) == 0x2070); // 8304 bytes (0x002068 - 0x002070)
static_assert(sizeof(UDcxMotorcycleAnimInstance) == 0x0AB0); // 2736 bytes (0x000AB0 - 0x000AB0)
static_assert(sizeof(FDcxWheeledVehicleFlatTireWheelConfiguration) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(UDcxWheeledVehicleDriveComponent4W) == 0x04E8); // 1256 bytes (0x000450 - 0x0004E8)
static_assert(sizeof(FDcxWheeledVehicleTireEffectProperties) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(UDcxWheeledVehicleEffectsComponent) == 0x0128); // 296 bytes (0x0000B0 - 0x000128)
static_assert(sizeof(FDcxVehicleTireParticleData) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(UDcxWheeledVehicleTire) == 0x0108); // 264 bytes (0x0000E0 - 0x000108)
static_assert(sizeof(UDeathmatchParticipantStats) == 0x0058); // 88 bytes (0x000048 - 0x000058)
static_assert(sizeof(FDeathmatchParameters) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(ADeathmatchGameEvent) == 0x05A8); // 1448 bytes (0x000588 - 0x0005A8)
static_assert(sizeof(ADeathmatchLocationMarker) == 0x0440); // 1088 bytes (0x000418 - 0x000440)
static_assert(sizeof(UDebugRpcChannel) == 0x00B0); // 176 bytes (0x0000B0 - 0x0000B0)
static_assert(sizeof(UDecontaminateData) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UDedicatedServerRequest) == 0x00E8); // 232 bytes (0x000028 - 0x0000E8)
static_assert(sizeof(UDedicatedServerResponse) == 0x00D0); // 208 bytes (0x000028 - 0x0000D0)
static_assert(sizeof(ADeer2) == 0x0B90); // 2960 bytes (0x000B48 - 0x000B90)
static_assert(sizeof(FPrisonerInjuryTypeLikelihoods) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UDefaultDamageCustomization) == 0x0080); // 128 bytes (0x000028 - 0x000080)
static_assert(sizeof(UDefusingCuttingToolItemTag) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(FDemolitionSkillExperienceAwards) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FDemolitionSkillParametersPerTrapType) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FDemolitionSkillParametersPerSkillLevel) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(UDemolitionSkill) == 0x0360); // 864 bytes (0x0000B0 - 0x000360)
static_assert(sizeof(UDepotItemUserData) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(ADepotItem) == 0x0BC0); // 3008 bytes (0x000B90 - 0x000BC0)
static_assert(sizeof(FTooltipPanelData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UDerivedWidgetsData) == 0x01D0); // 464 bytes (0x000030 - 0x0001D0)
static_assert(sizeof(UDetectableMetalAssetData) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UDetectableTag) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(FWheelData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(ADialLockMinigameBase) == 0x03A0); // 928 bytes (0x000340 - 0x0003A0)
static_assert(sizeof(ADialLockMinigame) == 0x0400); // 1024 bytes (0x0003A0 - 0x000400)
static_assert(sizeof(ULockpickingMinigameConfiguration) == 0x0070); // 112 bytes (0x000050 - 0x000070)
static_assert(sizeof(UDialLockMinigameConfiguration) == 0x0070); // 112 bytes (0x000070 - 0x000070)
static_assert(sizeof(ADialLockSetCombinationMinigame) == 0x03A8); // 936 bytes (0x0003A0 - 0x0003A8)
static_assert(sizeof(UDialLockSetConfigurationMinigameConfiguration) == 0x0078); // 120 bytes (0x000070 - 0x000078)
static_assert(sizeof(UDialLockWidget) == 0x02A8); // 680 bytes (0x000280 - 0x0002A8)
static_assert(sizeof(FTabButtonStyle) == 0x0288); // 648 bytes (0x000000 - 0x000288)
static_assert(sizeof(FTabTextStyle) == 0x0098); // 152 bytes (0x000000 - 0x000098)
static_assert(sizeof(UDialogButton) == 0x0930); // 2352 bytes (0x000268 - 0x000930)
static_assert(sizeof(FDialogueSurvivalTipData) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FDialogueInfo) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FDialogueInfoContainer) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UDialogueData) == 0x00D0); // 208 bytes (0x000030 - 0x0000D0)
static_assert(sizeof(UDialogueSystemContainerWidget) == 0x0298); // 664 bytes (0x000268 - 0x000298)
static_assert(sizeof(UDialogueSystemUIController) == 0x00D0); // 208 bytes (0x000028 - 0x0000D0)
static_assert(sizeof(UDialPadButtonAssetData) == 0x00F0); // 240 bytes (0x000028 - 0x0000F0)
static_assert(sizeof(ADialPadMinigame) == 0x0458); // 1112 bytes (0x000340 - 0x000458)
static_assert(sizeof(UDialPadMinigameConfiguration) == 0x0070); // 112 bytes (0x000050 - 0x000070)
static_assert(sizeof(UDialPadWidget) == 0x0298); // 664 bytes (0x000280 - 0x000298)
static_assert(sizeof(UDiegeticLockState) == 0x02C8); // 712 bytes (0x000268 - 0x0002C8)
static_assert(sizeof(UDisablingReason) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UDisablingReason_EMP) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UTemporaryDisableablePart) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UTemporaryDisableable) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(ADistantLevel) == 0x0298); // 664 bytes (0x000220 - 0x000298)
static_assert(sizeof(FDistantLevelDescription) == 0x00A0); // 160 bytes (0x000000 - 0x0000A0)
static_assert(sizeof(FRecentlyUsedDistantLevelStaticMesh) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FRecentlyUsedDistantLevelStaticMeshLODs) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(ADistantLevelManager) == 0x0430); // 1072 bytes (0x000220 - 0x000430)
static_assert(sizeof(UDivingMaskTag) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(ATrader) == 0x09C8); // 2504 bytes (0x0009A0 - 0x0009C8)
static_assert(sizeof(ADoctor) == 0x0A30); // 2608 bytes (0x0009C8 - 0x000A30)
static_assert(sizeof(ADogTagItem) == 0x09D0); // 2512 bytes (0x0009A0 - 0x0009D0)
static_assert(sizeof(UPriceCategory) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(FDoorEntityUpgradeLock) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FDoorEntityUpgradeAttachment) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FDoorEntityRepData) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FDoorRepData) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(ADoor) == 0x0590); // 1424 bytes (0x000220 - 0x000590)
static_assert(sizeof(UDoorEntitySave) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(UDoorEntitySetup) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(FDoorUnlockDataDescription) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FDoorUnlockDataCollection) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UDoorLockingRegistry) == 0x0108); // 264 bytes (0x0000B0 - 0x000108)
static_assert(sizeof(UDoorUnlockData) == 0x0058); // 88 bytes (0x000028 - 0x000058)
static_assert(sizeof(UExpirableItemComponent) == 0x00E0); // 224 bytes (0x0000C8 - 0x0000E0)
static_assert(sizeof(UDoorUnlockItemComponent) == 0x00F0); // 240 bytes (0x0000E0 - 0x0000F0)
static_assert(sizeof(UUpgradeSlotWidget) == 0x02E8); // 744 bytes (0x000268 - 0x0002E8)
static_assert(sizeof(UBCUUpgradeSlotWidget) == 0x0420); // 1056 bytes (0x0002E8 - 0x000420)
static_assert(sizeof(UDoorUpgradeWidget) == 0x03A8); // 936 bytes (0x000340 - 0x0003A8)
static_assert(sizeof(ADoubleDoor) == 0x0598); // 1432 bytes (0x000590 - 0x000598)
static_assert(sizeof(ADoubleRegularDoorStatic) == 0x05D0); // 1488 bytes (0x000598 - 0x0005D0)
static_assert(sizeof(ADoubleSlidingDoorStatic) == 0x05D0); // 1488 bytes (0x000598 - 0x0005D0)
static_assert(sizeof(ADrinkItem) == 0x0A50); // 2640 bytes (0x000A48 - 0x000A50)
static_assert(sizeof(UDrinkWaterAssetData) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(FGearboxHandlingParameters) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FDrivingSkillParametersPerSkillLevel) == 0x0100); // 256 bytes (0x000000 - 0x000100)
static_assert(sizeof(UDrivingSkill) == 0x05D8); // 1496 bytes (0x0000B0 - 0x0005D8)
static_assert(sizeof(ADrone) == 0x0930); // 2352 bytes (0x000828 - 0x000930)
static_assert(sizeof(ADroneAIController) == 0x0568); // 1384 bytes (0x000450 - 0x000568)
static_assert(sizeof(ADroneCameraActor) == 0x07B0); // 1968 bytes (0x0007B0 - 0x0007B0)
static_assert(sizeof(UDroneDestructibleItemComponent) == 0x00C8); // 200 bytes (0x0000C8 - 0x0000C8)
static_assert(sizeof(UDroneSoundComponent) == 0x0170); // 368 bytes (0x000128 - 0x000170)
static_assert(sizeof(UDroneTargetData) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UDropdownContainerWithDialogue) == 0x02A8); // 680 bytes (0x000268 - 0x0002A8)
static_assert(sizeof(UDropdownColorPicker) == 0x02E8); // 744 bytes (0x0002A8 - 0x0002E8)
static_assert(sizeof(UDropdownMenuSelectionWidget) == 0x02B0); // 688 bytes (0x000268 - 0x0002B0)
static_assert(sizeof(UDropdownMenuColorSelectionWidget) == 0x02C0); // 704 bytes (0x0002B0 - 0x0002C0)
static_assert(sizeof(UDropdownMenuTextureSelectionWidget) == 0x02B8); // 696 bytes (0x0002B0 - 0x0002B8)
static_assert(sizeof(UDropdownMenuWidget) == 0x0290); // 656 bytes (0x000268 - 0x000290)
static_assert(sizeof(UDropItemOnStartEntityComponentSetup) == 0x0048); // 72 bytes (0x000048 - 0x000048)
static_assert(sizeof(UDropshipEncounterSaveState) == 0x0070); // 112 bytes (0x000038 - 0x000070)
static_assert(sizeof(FDropshipDataPerStance) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FDropshipDamageEffectData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(ADropship) == 0x0E90); // 3728 bytes (0x000828 - 0x000E90)
static_assert(sizeof(UDropshipAIControllerEncounterSaveState) == 0x0088); // 136 bytes (0x000080 - 0x000088)
static_assert(sizeof(ADropshipAIController) == 0x07A8); // 1960 bytes (0x000450 - 0x0007A8)
static_assert(sizeof(UDropshipAnimInstance) == 0x0310); // 784 bytes (0x0002B8 - 0x000310)
static_assert(sizeof(UDropshipDroppableSentryAnimInstance) == 0x02D0); // 720 bytes (0x0002B8 - 0x0002D0)
static_assert(sizeof(UDropshipMovementComponent) == 0x0DE0); // 3552 bytes (0x000DA0 - 0x000DE0)
static_assert(sizeof(ADropZoneDroppable) == 0x0280); // 640 bytes (0x000220 - 0x000280)
static_assert(sizeof(ADropZoneCargo) == 0x0290); // 656 bytes (0x000280 - 0x000290)
static_assert(sizeof(ADropZoneCrate) == 0x0290); // 656 bytes (0x000280 - 0x000290)
static_assert(sizeof(ADropZoneEquipmentTable) == 0x0238); // 568 bytes (0x000220 - 0x000238)
static_assert(sizeof(UDropZoneParticipantStats) == 0x0050); // 80 bytes (0x000048 - 0x000050)
static_assert(sizeof(FDropZoneParameters) == 0x002C); // 44 bytes (0x000000 - 0x00002C)
static_assert(sizeof(ADropZoneGameEvent) == 0x06E0); // 1760 bytes (0x000588 - 0x0006E0)
static_assert(sizeof(ADropZoneKey) == 0x09B0); // 2480 bytes (0x0009A0 - 0x0009B0)
static_assert(sizeof(ADropZoneLocationMarker) == 0x0520); // 1312 bytes (0x000418 - 0x000520)
static_assert(sizeof(ADropZoneSlot) == 0x0250); // 592 bytes (0x000220 - 0x000250)
static_assert(sizeof(UDualArcedProgressBar) == 0x02B8); // 696 bytes (0x000268 - 0x0002B8)
static_assert(sizeof(UDummyCollisionCapsule) == 0x0480); // 1152 bytes (0x000478 - 0x000480)
static_assert(sizeof(ADynamicNavModifierVolumeActor) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(UEconomyManagerRequest) == 0x00D8); // 216 bytes (0x000028 - 0x0000D8)
static_assert(sizeof(UEconomyManagerResponse) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FCurrencyDescription) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FBankCardTypeData) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(UEconomySpecificData) == 0x0388); // 904 bytes (0x000030 - 0x000388)
static_assert(sizeof(UEconomyStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(AEffectOverTimeDealer) == 0x02A8); // 680 bytes (0x000220 - 0x0002A8)
static_assert(sizeof(UElectricDoorAssetData) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UElectricianGlovesTag) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(AElectricityGeneratorItem) == 0x09F0); // 2544 bytes (0x0009A0 - 0x0009F0)
static_assert(sizeof(UEmblemData) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(AGrenadeItem) == 0x0A68); // 2664 bytes (0x0009A0 - 0x000A68)
static_assert(sizeof(AEMPGrenadeItem) == 0x0AA0); // 2720 bytes (0x000A68 - 0x000AA0)
static_assert(sizeof(UEmptySlot) == 0x0270); // 624 bytes (0x000268 - 0x000270)
static_assert(sizeof(UVirtualizedEncounterData) == 0x0090); // 144 bytes (0x000028 - 0x000090)
static_assert(sizeof(UVirtualizedEncounterData_BB) == 0x00E8); // 232 bytes (0x000090 - 0x0000E8)
static_assert(sizeof(UEncounterBBBase) == 0x0290); // 656 bytes (0x000210 - 0x000290)
static_assert(sizeof(FVirtualizedEncounterBBForeignCharacterData) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(UVirtualizedEncounterData_BBFlyingAttacker) == 0x0170); // 368 bytes (0x0000E8 - 0x000170)
static_assert(sizeof(UEncounterBBSpawnFlyingAttacker) == 0x0400); // 1024 bytes (0x000290 - 0x000400)
static_assert(sizeof(FEncounterSpawnTypeData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FEncounterSpawnPointTypeArrayData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UEncounterSpawnCharacters) == 0x0460); // 1120 bytes (0x000210 - 0x000460)
static_assert(sizeof(UEncounterCargoDropEvent) == 0x0478); // 1144 bytes (0x000460 - 0x000478)
static_assert(sizeof(UEncounterCargoDropEventFlyingGuardian) == 0x0490); // 1168 bytes (0x000478 - 0x000490)
static_assert(sizeof(UEncounterCharacterGroupObject) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UEncounterCharacterSpawnPreset) == 0x0088); // 136 bytes (0x000030 - 0x000088)
static_assert(sizeof(FVirtualizedEncounterCharacterData) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(UVirtualizedEncounterData_SpawnCharacters) == 0x00A8); // 168 bytes (0x000090 - 0x0000A8)
static_assert(sizeof(UVirtualizedEncounterData_Horde) == 0x00C8); // 200 bytes (0x0000A8 - 0x0000C8)
static_assert(sizeof(FHordeParametersPresetPair) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UEncounterHorde) == 0x0588); // 1416 bytes (0x000460 - 0x000588)
static_assert(sizeof(FPossibleEncounterData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UEncounterManagerCommonData) == 0x0390); // 912 bytes (0x000030 - 0x000390)
static_assert(sizeof(UEncounterManagerHordePreset) == 0x00C8); // 200 bytes (0x000030 - 0x0000C8)
static_assert(sizeof(UEncounterZoneSubZoneBoxComponent) == 0x0480); // 1152 bytes (0x000480 - 0x000480)
static_assert(sizeof(UVirtualizedEncounterData_SpawnAirborneCharacters) == 0x00C0); // 192 bytes (0x0000A8 - 0x0000C0)
static_assert(sizeof(UEncounterSpawnAirborneCharacters) == 0x04F0); // 1264 bytes (0x000460 - 0x0004F0)
static_assert(sizeof(FEncounterZoneSubZoneBoxComponentEditorData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FEncounterSubZoneBoxData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FEncounterSubZoneData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FEncounterSubZoneEditorData) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(AEncounterStaticZone) == 0x02A0); // 672 bytes (0x000220 - 0x0002A0)
static_assert(sizeof(UEncounterZoneData) == 0x00D0); // 208 bytes (0x000030 - 0x0000D0)
static_assert(sizeof(FEnduranceSkillExperienceAwards) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FEnduranceSkillParametersPerSkillLevel) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UEnduranceSkill) == 0x0170); // 368 bytes (0x0000C8 - 0x000170)
static_assert(sizeof(FCharacterTemplate) == 0x00E8); // 232 bytes (0x000000 - 0x0000E8)
static_assert(sizeof(FDeluxeVersion) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FPrisonerMountReplication) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(APrisoner) == 0x2200); // 8704 bytes (0x000828 - 0x002200)
static_assert(sizeof(UPrisonerUIData) == 0x0808); // 2056 bytes (0x000028 - 0x000808)
static_assert(sizeof(UPrisonerSkillsUIData) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UPrisonerSkillUIData) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(UPrisonerSkillUIData_Endurance) == 0x0060); // 96 bytes (0x000050 - 0x000060)
static_assert(sizeof(FEngineeringSkillExperienceAwards) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FEngineeringSkillParametersPerSkillLevel) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(UEngineeringSkill) == 0x0190); // 400 bytes (0x0000B0 - 0x000190)
static_assert(sizeof(UEntityDebuggerEntitySetup) == 0x0090); // 144 bytes (0x000080 - 0x000090)
static_assert(sizeof(UEntityLifeTimeComponentSetup) == 0x0048); // 72 bytes (0x000048 - 0x000048)
static_assert(sizeof(UEntityOverlapDetectionComponent) == 0x0180); // 384 bytes (0x0000B0 - 0x000180)
static_assert(sizeof(UEntitySystem) == 0x07A0); // 1952 bytes (0x000028 - 0x0007A0)
static_assert(sizeof(FEntityToCreateOnStartupParams) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UEntitySystemSettings) == 0x0088); // 136 bytes (0x000028 - 0x000088)
static_assert(sizeof(UEntitySystemSettingsProvider) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UEnvironmentDescriptionComponent) == 0x0500); // 1280 bytes (0x0004F8 - 0x000500)
static_assert(sizeof(UEventInsertCartridge) == 0x00A0); // 160 bytes (0x000090 - 0x0000A0)
static_assert(sizeof(UEventInsertMagazine) == 0x0098); // 152 bytes (0x000090 - 0x000098)
static_assert(sizeof(UExamineAction) == 0x00A8); // 168 bytes (0x0000A8 - 0x0000A8)
static_assert(sizeof(FItemSpawnerDataBasedOnPreset) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(FExamineItemSpawnerConstraint_MaxOccurrencesPerSpawnTypes) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FExamineItemSpawnerData) == 0x00B0); // 176 bytes (0x000000 - 0x0000B0)
static_assert(sizeof(UExamineAssetData) == 0x0200); // 512 bytes (0x000030 - 0x000200)
static_assert(sizeof(UExaminePrisonerAction) == 0x00B0); // 176 bytes (0x0000A8 - 0x0000B0)
static_assert(sizeof(UExpandableContainer) == 0x0288); // 648 bytes (0x000268 - 0x000288)
static_assert(sizeof(UExpirableEntityComponentSetup) == 0x0050); // 80 bytes (0x000048 - 0x000050)
static_assert(sizeof(UExplosionDamageType) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UFailurePenalty) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UExplosionFailurePenalty) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UExplosiveProtectionItemComponentState) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UExplosiveProtectionItemComponent) == 0x0150); // 336 bytes (0x0000C8 - 0x000150)
static_assert(sizeof(AExplosiveTrapItem) == 0x0BD0); // 3024 bytes (0x000AD0 - 0x000BD0)
static_assert(sizeof(UExteriorCharacterSpawnerComponent) == 0x0210); // 528 bytes (0x000208 - 0x000210)
static_assert(sizeof(AFakeItem) == 0x0298); // 664 bytes (0x000220 - 0x000298)
static_assert(sizeof(UFamePointDebugComponent) == 0x00C8); // 200 bytes (0x0000B0 - 0x0000C8)
static_assert(sizeof(UFamePointDebugWidget) == 0x0270); // 624 bytes (0x000268 - 0x000270)
static_assert(sizeof(FFamePointAwards) == 0x0138); // 312 bytes (0x000000 - 0x000138)
static_assert(sizeof(FFamePointPenalties) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(UFamePointSettings) == 0x0198); // 408 bytes (0x000030 - 0x000198)
static_assert(sizeof(UFamePointStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UFamePointTagSettings) == 0x0120); // 288 bytes (0x000030 - 0x000120)
static_assert(sizeof(FFarmingSkillParametersPerSkillLevel) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(UFarmingSkill) == 0x02E8); // 744 bytes (0x0000B0 - 0x0002E8)
static_assert(sizeof(UFertilizerItemComponent) == 0x00D8); // 216 bytes (0x0000C8 - 0x0000D8)
static_assert(sizeof(FFillItemWithReplenishableResourceInteractionData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(UFillItemWithReplenishableResourceAssetData) == 0x0070); // 112 bytes (0x000030 - 0x000070)
static_assert(sizeof(UFillWaterAction) == 0x00D0); // 208 bytes (0x0000A8 - 0x0000D0)
static_assert(sizeof(AFireItem) == 0x09C8); // 2504 bytes (0x0009B8 - 0x0009C8)
static_assert(sizeof(AFireplaceItem) == 0x09F0); // 2544 bytes (0x0009C8 - 0x0009F0)
static_assert(sizeof(AFireworksItem) == 0x09D0); // 2512 bytes (0x0009A0 - 0x0009D0)
static_assert(sizeof(AFireworksTrapItem) == 0x0B00); // 2816 bytes (0x000AD0 - 0x000B00)
static_assert(sizeof(UFishInstancedStaticMeshComponent) == 0x05A0); // 1440 bytes (0x0005A0 - 0x0005A0)
static_assert(sizeof(AFishingAttachment) == 0x09C0); // 2496 bytes (0x0009A0 - 0x0009C0)
static_assert(sizeof(AFishingAttachmentBait) == 0x0A10); // 2576 bytes (0x0009C0 - 0x000A10)
static_assert(sizeof(FBuoyancyConstraint) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FBuoyancy) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(AFishingAttachmentFloater) == 0x0B30); // 2864 bytes (0x0009C0 - 0x000B30)
static_assert(sizeof(AFishingAttachmentHook) == 0x0A40); // 2624 bytes (0x0009C0 - 0x000A40)
static_assert(sizeof(AFishingAttachmentReel) == 0x0A70); // 2672 bytes (0x0009C0 - 0x000A70)
static_assert(sizeof(AFishingAttachmentSinker) == 0x09C0); // 2496 bytes (0x0009C0 - 0x0009C0)
static_assert(sizeof(AFishingAttachmentWire) == 0x0A30); // 2608 bytes (0x0009C0 - 0x000A30)
static_assert(sizeof(UFishingBarWidget) == 0x0438); // 1080 bytes (0x000268 - 0x000438)
static_assert(sizeof(UFishingContainerWidget) == 0x0280); // 640 bytes (0x000268 - 0x000280)
static_assert(sizeof(UFishingReelAnimInstance) == 0x02C0); // 704 bytes (0x0002B8 - 0x0002C0)
static_assert(sizeof(AFishingRod) == 0x0CB0); // 3248 bytes (0x0009A0 - 0x000CB0)
static_assert(sizeof(UFishingRodAnimInstance) == 0x02F0); // 752 bytes (0x0002B8 - 0x0002F0)
static_assert(sizeof(AFishingTrophyActor) == 0x0230); // 560 bytes (0x000220 - 0x000230)
static_assert(sizeof(UFishingTrophyWidget) == 0x02D0); // 720 bytes (0x000268 - 0x0002D0)
static_assert(sizeof(UFishingWireComponent) == 0x0770); // 1904 bytes (0x000718 - 0x000770)
static_assert(sizeof(AFishingZoneIndicator) == 0x0240); // 576 bytes (0x000220 - 0x000240)
static_assert(sizeof(FFishStateParameters) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(AFishSchoolActor) == 0x0480); // 1152 bytes (0x000220 - 0x000480)
static_assert(sizeof(UFishSpawningPreset) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UFishSpeciesData) == 0x0088); // 136 bytes (0x000030 - 0x000088)
static_assert(sizeof(FFishSpawnData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UFishSpeciesPreset) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(AFlagAreaVisualizer) == 0x0230); // 560 bytes (0x000220 - 0x000230)
static_assert(sizeof(AFlagElementsExpansionItem) == 0x09B0); // 2480 bytes (0x0009A0 - 0x0009B0)
static_assert(sizeof(FRaidProtection) == 0x0040); // 64 bytes (0x00000C - 0x000040)
static_assert(sizeof(FRaidProtectionArray) == 0x0188); // 392 bytes (0x000108 - 0x000188)
static_assert(sizeof(ARaidProtectionManager) == 0x03D0); // 976 bytes (0x000220 - 0x0003D0)
static_assert(sizeof(AFlagSpecificRaidProtectionManager) == 0x03E8); // 1000 bytes (0x0003D0 - 0x0003E8)
static_assert(sizeof(UFlamethrowerComponent) == 0x0450); // 1104 bytes (0x0000B0 - 0x000450)
static_assert(sizeof(FIgnitableItemIgnitionRequirements) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UIgnitableItemComponent) == 0x0198); // 408 bytes (0x0000C8 - 0x000198)
static_assert(sizeof(UFlareItemComponent) == 0x01B8); // 440 bytes (0x000198 - 0x0001B8)
static_assert(sizeof(AFlareTrapItem) == 0x0B20); // 2848 bytes (0x000AD0 - 0x000B20)
static_assert(sizeof(AFlashbangItem) == 0x0A80); // 2688 bytes (0x000A68 - 0x000A80)
static_assert(sizeof(AFlashbangItemEffects) == 0x0270); // 624 bytes (0x000220 - 0x000270)
static_assert(sizeof(UFloatingWidgetCanvas) == 0x0148); // 328 bytes (0x000138 - 0x000148)
static_assert(sizeof(UFocusableWidgetInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(AFogSphere) == 0x0230); // 560 bytes (0x000220 - 0x000230)
static_assert(sizeof(FFoliageGeneralData) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FFoliageEffectsData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FFoliageAIPerceptionData) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FTreeCanopySphere) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FTreeCanopyCapsule) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FFoliageCanopyData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(UFoliageAssetData) == 0x00A0); // 160 bytes (0x000028 - 0x0000A0)
static_assert(sizeof(UFoliageInstanceCache) == 0x0080); // 128 bytes (0x000028 - 0x000080)
static_assert(sizeof(UFoliageInstancedComponent) == 0x06C0); // 1728 bytes (0x0006C0 - 0x0006C0)
static_assert(sizeof(UFoliageInstancedBush) == 0x06C0); // 1728 bytes (0x0006C0 - 0x0006C0)
static_assert(sizeof(UFoliageInstancedGrass) == 0x06C0); // 1728 bytes (0x0006C0 - 0x0006C0)
static_assert(sizeof(UFoliageInstancedTree) == 0x06C0); // 1728 bytes (0x0006C0 - 0x0006C0)
static_assert(sizeof(AFollowsMouseActor) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(UForceUnlockItemTag) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(FSubstancesData) == 0x00D0); // 208 bytes (0x000000 - 0x0000D0)
static_assert(sizeof(FMetabolismConfiguration) == 0x0460); // 1120 bytes (0x000000 - 0x000460)
static_assert(sizeof(UMetabolism) == 0x1108); // 4360 bytes (0x000028 - 0x001108)
static_assert(sizeof(UForeignSubstance) == 0x00A8); // 168 bytes (0x000028 - 0x0000A8)
static_assert(sizeof(UFortifiable) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UFortificationComponent) == 0x0590); // 1424 bytes (0x0004F8 - 0x000590)
static_assert(sizeof(FFortificationData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UFortificationEntityComponentSave) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(UFortificationEntityComponentSetup) == 0x0048); // 72 bytes (0x000048 - 0x000048)
static_assert(sizeof(UFortificationManager) == 0x01C8); // 456 bytes (0x0000B0 - 0x0001C8)
static_assert(sizeof(AFragGrenadeItem) == 0x0A70); // 2672 bytes (0x000A68 - 0x000A70)
static_assert(sizeof(UFuelItemTag) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UFireFanningItemTag) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UFundsOverviewUIController) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UFuseItemTag) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(AGameEventBorder) == 0x0290); // 656 bytes (0x000220 - 0x000290)
static_assert(sizeof(UGameEventCardWidget) == 0x0488); // 1160 bytes (0x000268 - 0x000488)
static_assert(sizeof(UGameEventInfoWidget) == 0x02A0); // 672 bytes (0x000268 - 0x0002A0)
static_assert(sizeof(UGameEventLeaderboardRow) == 0x02B0); // 688 bytes (0x000268 - 0x0002B0)
static_assert(sizeof(UGameEventLeaderboardWidget) == 0x02C8); // 712 bytes (0x000268 - 0x0002C8)
static_assert(sizeof(UGameEventLeftPanel) == 0x02B8); // 696 bytes (0x000268 - 0x0002B8)
static_assert(sizeof(UGameEventLoadoutMenuWidget) == 0x02A0); // 672 bytes (0x000268 - 0x0002A0)
static_assert(sizeof(AGameEventManager) == 0x0260); // 608 bytes (0x000220 - 0x000260)
static_assert(sizeof(UGameEventNotificationPanel) == 0x02C8); // 712 bytes (0x000268 - 0x0002C8)
static_assert(sizeof(UGameEventNotificationUIController) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UGameEventParticipantInfoCardWidget) == 0x02B0); // 688 bytes (0x000268 - 0x0002B0)
static_assert(sizeof(UGameEventParticipantStatsWidget) == 0x0310); // 784 bytes (0x000268 - 0x000310)
static_assert(sizeof(UGameEventParticipantStatsWidgetCTF) == 0x03A0); // 928 bytes (0x000310 - 0x0003A0)
static_assert(sizeof(UGameEventParticipantStatsWidgetCTFMini) == 0x0348); // 840 bytes (0x000310 - 0x000348)
static_assert(sizeof(UGameEventParticipantStatsWidgetDeathmatch) == 0x03A0); // 928 bytes (0x000310 - 0x0003A0)
static_assert(sizeof(UGameEventParticipantStatsWidgetDeathmatchMini) == 0x0340); // 832 bytes (0x000310 - 0x000340)
static_assert(sizeof(UGameEventParticipantStatsWidgetDropZone) == 0x03B0); // 944 bytes (0x000310 - 0x0003B0)
static_assert(sizeof(UGameEventParticipantStatsWidgetDropZoneMini) == 0x0348); // 840 bytes (0x000310 - 0x000348)
static_assert(sizeof(UGameEventParticipantStatsWidgetTeamDeathmatch) == 0x03A0); // 928 bytes (0x000310 - 0x0003A0)
static_assert(sizeof(UGameEventParticipantStatsWidgetTeamDeathmatchMini) == 0x0340); // 832 bytes (0x000310 - 0x000340)
static_assert(sizeof(UGameEventRightPanel) == 0x0268); // 616 bytes (0x000268 - 0x000268)
static_assert(sizeof(UGameEventRoundInfoWidget) == 0x0290); // 656 bytes (0x000268 - 0x000290)
static_assert(sizeof(UGameEventRoundInfoWidgetDeathmatch) == 0x0298); // 664 bytes (0x000290 - 0x000298)
static_assert(sizeof(UGameEventRoundInfoWidgetDropZone) == 0x02A0); // 672 bytes (0x000290 - 0x0002A0)
static_assert(sizeof(UGameEventRoundInfoWidgetTeamDeathmatch) == 0x0298); // 664 bytes (0x000290 - 0x000298)
static_assert(sizeof(FGameEventTeamColours) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(UGameEventScoreboardWidget) == 0x02F8); // 760 bytes (0x000268 - 0x0002F8)
static_assert(sizeof(UGameEventScoreboardWidgetMini) == 0x0318); // 792 bytes (0x0002F8 - 0x000318)
static_assert(sizeof(UGameEventsUIController) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UGameEventTeamHeaderWidget) == 0x0270); // 624 bytes (0x000268 - 0x000270)
static_assert(sizeof(UGameEventTeamHeaderWidgetCTF) == 0x02D8); // 728 bytes (0x000270 - 0x0002D8)
static_assert(sizeof(UGameEventTeamHeaderWidgetDropZone) == 0x02D8); // 728 bytes (0x000270 - 0x0002D8)
static_assert(sizeof(UGameEventTeamHeaderWidgetTeamDeathmatch) == 0x02D8); // 728 bytes (0x000270 - 0x0002D8)
static_assert(sizeof(UGameEventTeamInfoWidget) == 0x02F0); // 752 bytes (0x000268 - 0x0002F0)
static_assert(sizeof(AGameEventTransport) == 0x02A8); // 680 bytes (0x000220 - 0x0002A8)
static_assert(sizeof(UGamePaymentTransactionRequest) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UGamePaymentTransactionResponse) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FGameResourceConsumptionDataForeignSubstance) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UGameResourceConsumptionData) == 0x00E8); // 232 bytes (0x000028 - 0x0000E8)
static_assert(sizeof(UGameResourceContainer) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UGameResourceContainerProxyRegistry) == 0x0150); // 336 bytes (0x0000B0 - 0x000150)
static_assert(sizeof(UGameResourceContainerProxyForInfiniteResource) == 0x0088); // 136 bytes (0x000028 - 0x000088)
static_assert(sizeof(UGameResourceContainerProxyForReplenishableResource) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(UGameResourceItemTag) == 0x0070); // 112 bytes (0x000030 - 0x000070)
static_assert(sizeof(FEntityComponentId) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UGameResourceSlotEntityComponentSave) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UGameResourceSlotEntityComponentSetup) == 0x0088); // 136 bytes (0x000048 - 0x000088)
static_assert(sizeof(UGameResourceType) == 0x00B8); // 184 bytes (0x000028 - 0x0000B8)
static_assert(sizeof(UGameResourceType_Liquid) == 0x00B8); // 184 bytes (0x0000B8 - 0x0000B8)
static_assert(sizeof(UGameResourceType_Alcohol) == 0x00B8); // 184 bytes (0x0000B8 - 0x0000B8)
static_assert(sizeof(UGameResourceType_Money) == 0x00B8); // 184 bytes (0x0000B8 - 0x0000B8)
static_assert(sizeof(UGameResourceType_Water) == 0x00C0); // 192 bytes (0x0000B8 - 0x0000C0)
static_assert(sizeof(UGameResourceType_SoftDrink) == 0x00C0); // 192 bytes (0x0000C0 - 0x0000C0)
static_assert(sizeof(UGameResourceType_Solid) == 0x00B8); // 184 bytes (0x0000B8 - 0x0000B8)
static_assert(sizeof(UWashEyesHandler) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UWashEyesHandler_Clean) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UWashEyesHandler_Irritate) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UGameResourceWashData) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(FGardenSlot) == 0x0200); // 512 bytes (0x00000C - 0x000200)
static_assert(sizeof(FGardenSlotArray) == 0x0120); // 288 bytes (0x000108 - 0x000120)
static_assert(sizeof(AGarden) == 0x0470); // 1136 bytes (0x000220 - 0x000470)
static_assert(sizeof(FPlantGrowthStageData) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FStaticMeshMaterialPair) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(AGardenManager) == 0x06E8); // 1768 bytes (0x000220 - 0x0006E8)
static_assert(sizeof(UGasMaskTag) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(AGasTankItem) == 0x0A00); // 2560 bytes (0x0009A0 - 0x000A00)
static_assert(sizeof(UGaugeAssetData) == 0x00E0); // 224 bytes (0x000028 - 0x0000E0)
static_assert(sizeof(UGaugeLightAssetData) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(UGaugeClusterComponent) == 0x01F0); // 496 bytes (0x0000B0 - 0x0001F0)
static_assert(sizeof(AItemWithSkeletalMesh) == 0x09B0); // 2480 bytes (0x0009A0 - 0x0009B0)
static_assert(sizeof(AGeigerCounter) == 0x09E0); // 2528 bytes (0x0009B0 - 0x0009E0)
static_assert(sizeof(UGeigerCounterAnimInstance) == 0x02D0); // 720 bytes (0x0002B8 - 0x0002D0)
static_assert(sizeof(UGenericTooltip) == 0x04E0); // 1248 bytes (0x000268 - 0x0004E0)
static_assert(sizeof(UGhostTrailComponent) == 0x00B0); // 176 bytes (0x0000B0 - 0x0000B0)
static_assert(sizeof(AGib) == 0x0230); // 560 bytes (0x000220 - 0x000230)
static_assert(sizeof(FAquaticLifeSpawningVolumeDescription) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(AGlobalAquaticLifeManager) == 0x1740); // 5952 bytes (0x000220 - 0x001740)
static_assert(sizeof(AGlobalBirdSpawner2) == 0x02F8); // 760 bytes (0x000220 - 0x0002F8)
static_assert(sizeof(FEncounterStaticZoneDescription) == 0x0120); // 288 bytes (0x000000 - 0x000120)
static_assert(sizeof(FEncounterGroupedCharacterSpawnPoint) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FEncounterLegacyCharacterSpawnPoint) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(AGlobalEncounterManager) == 0x0680); // 1664 bytes (0x000220 - 0x000680)
static_assert(sizeof(AGlobalGuardedZoneManager) == 0x03A0); // 928 bytes (0x000220 - 0x0003A0)
static_assert(sizeof(AGlobalRaidProtectionManager) == 0x03F0); // 1008 bytes (0x0003D0 - 0x0003F0)
static_assert(sizeof(FButtonIcons) == 0x0110); // 272 bytes (0x000000 - 0x000110)
static_assert(sizeof(UGlobalUIData) == 0x02A0); // 672 bytes (0x000028 - 0x0002A0)
static_assert(sizeof(UGloveStatsTag) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UGradedArcedProgressBar) == 0x02C0); // 704 bytes (0x000268 - 0x0002C0)
static_assert(sizeof(UGraph2DWidget) == 0x01F8); // 504 bytes (0x000110 - 0x0001F8)
static_assert(sizeof(UGraphicsSettingsManager) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UGrappleActionComponent) == 0x0110); // 272 bytes (0x0000B0 - 0x000110)
static_assert(sizeof(FGrappleActionMontagePair) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UGrappleActionParameters) == 0x01A0); // 416 bytes (0x000030 - 0x0001A0)
static_assert(sizeof(UGrapplingWidget) == 0x0280); // 640 bytes (0x000268 - 0x000280)
static_assert(sizeof(UGrenadeAnimInstance) == 0x02D0); // 720 bytes (0x0002B8 - 0x0002D0)
static_assert(sizeof(UGroupedCharacterSpawnerComponent) == 0x0210); // 528 bytes (0x000208 - 0x000210)
static_assert(sizeof(AGuardedZoneManager) == 0x0250); // 592 bytes (0x000220 - 0x000250)
static_assert(sizeof(UHaircutAndMakeupService) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(FHalloweenSacrificePitRequiredItemVariants) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(AHalloweenSacrificePit) == 0x04C0); // 1216 bytes (0x000220 - 0x0004C0)
static_assert(sizeof(UHandgunSkill) == 0x0218); // 536 bytes (0x000218 - 0x000218)
static_assert(sizeof(AHandheldLightItem) == 0x09D8); // 2520 bytes (0x0009A0 - 0x0009D8)
static_assert(sizeof(UHandheldLightItemAnimInstance) == 0x02C0); // 704 bytes (0x0002B8 - 0x0002C0)
static_assert(sizeof(AHandheldSkeletalMeshLightItem) == 0x09E0); // 2528 bytes (0x0009D8 - 0x0009E0)
static_assert(sizeof(AHandheldSkeletalMeshLightItemWithGameResourceSlot) == 0x09E0); // 2528 bytes (0x0009E0 - 0x0009E0)
static_assert(sizeof(UHandPanel3) == 0x02F0); // 752 bytes (0x000268 - 0x0002F0)
static_assert(sizeof(UInventoryContainerWidget2) == 0x0268); // 616 bytes (0x000268 - 0x000268)
static_assert(sizeof(UHandsHolstersWidget2) == 0x0330); // 816 bytes (0x000268 - 0x000330)
static_assert(sizeof(UHasCustomRadialDamageHandler) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UHasLadderMarkersInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UHasOwningUser) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UHasProcessViewRotation) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UHazmatSuitTag) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(AHeadLamp) == 0x0A60); // 2656 bytes (0x000A40 - 0x000A60)
static_assert(sizeof(UHealthWidget) == 0x0340); // 832 bytes (0x000340 - 0x000340)
static_assert(sizeof(UHeatSourceDebuggerEntitySetup) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(UHeatSourceEntityComponentState) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UHeatSourceEntityComponentSetup) == 0x0178); // 376 bytes (0x000048 - 0x000178)
static_assert(sizeof(UHeatSourceLinkUserData) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UHeatSourceItemComponent) == 0x00E0); // 224 bytes (0x0000C8 - 0x0000E0)
static_assert(sizeof(FHeatSource) == 0x00A8); // 168 bytes (0x000000 - 0x0000A8)
static_assert(sizeof(UHeatSourceItemTag) == 0x00E8); // 232 bytes (0x000030 - 0x0000E8)
static_assert(sizeof(AHeatSourceManager) == 0x02E8); // 744 bytes (0x000220 - 0x0002E8)
static_assert(sizeof(AHeatSourceMarker) == 0x0260); // 608 bytes (0x000220 - 0x000260)
static_assert(sizeof(UHeatSourceMarkersComponent) == 0x0210); // 528 bytes (0x0001F8 - 0x000210)
static_assert(sizeof(FPhysicalHitReactData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UHitReactComponent) == 0x02E0); // 736 bytes (0x0000B0 - 0x0002E0)
static_assert(sizeof(UHitReactLandingParams) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(FHitReactBodyPartDataItem) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FHitReactDirectionData) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FHitReactMagnitudeData) == 0x0120); // 288 bytes (0x000000 - 0x000120)
static_assert(sizeof(FHitReactLandingData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UHitReactMapping) == 0x03E0); // 992 bytes (0x000030 - 0x0003E0)
static_assert(sizeof(UHoverPanelWidget) == 0x0268); // 616 bytes (0x000268 - 0x000268)
static_assert(sizeof(AHUD_John) == 0x0360); // 864 bytes (0x000310 - 0x000360)
static_assert(sizeof(UHUDHighlightingWidget) == 0x0370); // 880 bytes (0x000268 - 0x000370)
static_assert(sizeof(UHUDNotification) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UHUDNotificationDescription) == 0x0060); // 96 bytes (0x000040 - 0x000060)
static_assert(sizeof(UHudWidget) == 0x0430); // 1072 bytes (0x000268 - 0x000430)
static_assert(sizeof(FHuntingClueVisuals) == 0x00A0); // 160 bytes (0x000000 - 0x0000A0)
static_assert(sizeof(AHuntingClue) == 0x02C8); // 712 bytes (0x000220 - 0x0002C8)
static_assert(sizeof(FHuntingBiomeDescription) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(AHuntingManager) == 0x0430); // 1072 bytes (0x000220 - 0x000430)
static_assert(sizeof(UIgnitableExplosiveItemComponent) == 0x0210); // 528 bytes (0x000198 - 0x000210)
static_assert(sizeof(UImageSlotWidget) == 0x03E0); // 992 bytes (0x000268 - 0x0003E0)
static_assert(sizeof(UIndexedHierarchicalInstancedStaticMeshComponent) == 0x0740); // 1856 bytes (0x000690 - 0x000740)
static_assert(sizeof(UInfiniteResourceAssetData) == 0x00B0); // 176 bytes (0x000030 - 0x0000B0)
static_assert(sizeof(AInfluenceAreaVisualizer) == 0x0230); // 560 bytes (0x000220 - 0x000230)
static_assert(sizeof(UIngredientsForRecipeWidget) == 0x0288); // 648 bytes (0x000268 - 0x000288)
static_assert(sizeof(UInjectableSubstance) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UInsertCartridge) == 0x00A0); // 160 bytes (0x000090 - 0x0000A0)
static_assert(sizeof(UInsertCartridgeIntoMagazine) == 0x00A0); // 160 bytes (0x000090 - 0x0000A0)
static_assert(sizeof(UInsertMagazine) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(UInsertMagazineInsertCartridge) == 0x00A0); // 160 bytes (0x000090 - 0x0000A0)
static_assert(sizeof(UInspectedItemWidget) == 0x0280); // 640 bytes (0x000268 - 0x000280)
static_assert(sizeof(AInstrumentItem) == 0x0BA0); // 2976 bytes (0x0009A0 - 0x000BA0)
static_assert(sizeof(UInteractableInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(USpawnExaminedObjectsInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FSpawnedItems) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UInteractionComponent) == 0x0280); // 640 bytes (0x0000B0 - 0x000280)
static_assert(sizeof(UInteractionContextMenuBase) == 0x0290); // 656 bytes (0x000268 - 0x000290)
static_assert(sizeof(UInteractionContextMenuGroupHeader) == 0x0270); // 624 bytes (0x000268 - 0x000270)
static_assert(sizeof(UInteractionContextMenuLeaf) == 0x02A0); // 672 bytes (0x000268 - 0x0002A0)
static_assert(sizeof(UInteractionContextMenuLeafGroup) == 0x02B0); // 688 bytes (0x000268 - 0x0002B0)
static_assert(sizeof(UInteractionContextMenuSide) == 0x02A8); // 680 bytes (0x000268 - 0x0002A8)
static_assert(sizeof(UInteractionContextMenuUIController) == 0x0188); // 392 bytes (0x000028 - 0x000188)
static_assert(sizeof(UInteractionObject) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UInteractiveIngredientWidget) == 0x0340); // 832 bytes (0x000268 - 0x000340)
static_assert(sizeof(UInteriorCharacterSpawnerComponent) == 0x0210); // 528 bytes (0x000208 - 0x000210)
static_assert(sizeof(AInteriorReflEnvCubeSceneCapture) == 0x02D8); // 728 bytes (0x000238 - 0x0002D8)
static_assert(sizeof(UInteriorStaticMeshComponent) == 0x0500); // 1280 bytes (0x0004F8 - 0x000500)
static_assert(sizeof(AIntroVideoGameMode) == 0x0308); // 776 bytes (0x000308 - 0x000308)
static_assert(sizeof(UIntroVideoMenu) == 0x0270); // 624 bytes (0x000268 - 0x000270)
static_assert(sizeof(UInventoryCentralPanel) == 0x0280); // 640 bytes (0x000268 - 0x000280)
static_assert(sizeof(UInventoryPositionData) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UInventoryContainer) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UInventorySizeData) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UInventorySizeData2D) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UInventoryPositionData2D) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(FInventoryPositionDataRepHelper) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FInventoryItemPositionPair) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FInventoryContainer2DRepData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UInventoryContainer2D) == 0x0140); // 320 bytes (0x0000B0 - 0x000140)
static_assert(sizeof(UInventoryContainer2DLight) == 0x0140); // 320 bytes (0x000140 - 0x000140)
static_assert(sizeof(UInventoryPositionDataClothes) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FInventoryContainerClothesData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UInventoryContainerClothes) == 0x0090); // 144 bytes (0x000028 - 0x000090)
static_assert(sizeof(UInventoryContainerGrid) == 0x02A0); // 672 bytes (0x000268 - 0x0002A0)
static_assert(sizeof(UInventoryPositionDataHandsHolsters) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FInventoryContainerHandsHolstersData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UInventoryContainerHandsHolsters) == 0x00B8); // 184 bytes (0x000028 - 0x0000B8)
static_assert(sizeof(UInventoryItemWidget2Test) == 0x0278); // 632 bytes (0x000268 - 0x000278)
static_assert(sizeof(UInventoryContainerWidget2Test) == 0x02E0); // 736 bytes (0x000268 - 0x0002E0)
static_assert(sizeof(UInventoryPanelWidget2Test) == 0x02C0); // 704 bytes (0x000268 - 0x0002C0)
static_assert(sizeof(UInventoryContainerWidgetReborn) == 0x02B8); // 696 bytes (0x000268 - 0x0002B8)
static_assert(sizeof(UInventoryGridWidget) == 0x0270); // 624 bytes (0x000268 - 0x000270)
static_assert(sizeof(UInventoryNode) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UInventoryPanel) == 0x02D8); // 728 bytes (0x000268 - 0x0002D8)
static_assert(sizeof(UInventoryPanelSideLayerWidget) == 0x0270); // 624 bytes (0x000268 - 0x000270)
static_assert(sizeof(UInventoryPanelThirdIteration) == 0x03E8); // 1000 bytes (0x000268 - 0x0003E8)
static_assert(sizeof(UInventoryPanelWidget2) == 0x0268); // 616 bytes (0x000268 - 0x000268)
static_assert(sizeof(UInventorySlotUserWidget) == 0x02B8); // 696 bytes (0x000268 - 0x0002B8)
static_assert(sizeof(UInventoryUIController) == 0x0188); // 392 bytes (0x000028 - 0x000188)
static_assert(sizeof(UInventoryUIControllerReborn) == 0x0070); // 112 bytes (0x000028 - 0x000070)
static_assert(sizeof(UIsUnmountedOrMountedOnGroundCondition) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UItemActionDescription) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UItemAction) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(UItemActionSequenceDescription) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UItemActionSequence) == 0x0088); // 136 bytes (0x000050 - 0x000088)
static_assert(sizeof(UItemActionDescriptionLoadMagazine) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UItemActionSequenceLoadMagazine) == 0x0090); // 144 bytes (0x000088 - 0x000090)
static_assert(sizeof(UItemActionSequenceLoadMagazine_M1Clip) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(UItemActionSequenceLoadMagazine_RPKDrum) == 0x0098); // 152 bytes (0x000090 - 0x000098)
static_assert(sizeof(UItemClassWidget) == 0x02B0); // 688 bytes (0x000268 - 0x0002B0)
static_assert(sizeof(FItemContainersArray) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FItemContainerRepData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FItemContainersReplicationHelper) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(AItemContainerManager) == 0x0380); // 896 bytes (0x000220 - 0x000380)
static_assert(sizeof(UItemDropCircumstancesItemTag) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(AItemDropPlaceholder) == 0x0288); // 648 bytes (0x000220 - 0x000288)
static_assert(sizeof(UItemEntitySpawnerRegistrySetup) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(UItemGroup) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UItemInventoryDepotWidget2) == 0x02E0); // 736 bytes (0x000268 - 0x0002E0)
static_assert(sizeof(UItemInventoryWidget2) == 0x02F8); // 760 bytes (0x000268 - 0x0002F8)
static_assert(sizeof(UItemLightDisplay) == 0x02E8); // 744 bytes (0x000268 - 0x0002E8)
static_assert(sizeof(UItemObstructionTestCapsuleComponent) == 0x0480); // 1152 bytes (0x000478 - 0x000480)
static_assert(sizeof(UItemObstructionStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UItemPostSpawnAction) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UItemPostSpawnAction_SetAmmoAmount) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UItemPostSpawnAction_SetCashAmount) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UItemPostSpawnAction_SetClothesDirtiness) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UItemPostSpawnAction_SetResourceAmount) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UItemPostSpawnAction_SetUsage) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UItemPostSpawnAction_AbandonedBunkerKeycard) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UItemPostSpawnAction_KillboxKeycard) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UItemPostSpawnAction_Bedroll) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UItemRackSlotComponent) == 0x0230); // 560 bytes (0x0001F8 - 0x000230)
static_assert(sizeof(UItemRegistry) == 0x0100); // 256 bytes (0x0000B0 - 0x000100)
static_assert(sizeof(UItemRequirementMountPathBlocker) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UItemRootComponent) == 0x0210); // 528 bytes (0x0001F8 - 0x000210)
static_assert(sizeof(UItemsCraftingDetailsPanel) == 0x0388); // 904 bytes (0x000268 - 0x000388)
static_assert(sizeof(UItemsCraftingPanel) == 0x03E8); // 1000 bytes (0x000268 - 0x0003E8)
static_assert(sizeof(UItemsCraftingUIContext) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UItemsCraftingUIController) == 0x03F0); // 1008 bytes (0x000390 - 0x0003F0)
static_assert(sizeof(UItemSelection) == 0x0098); // 152 bytes (0x000030 - 0x000098)
static_assert(sizeof(UItemSelectionSlotWidget) == 0x02A8); // 680 bytes (0x000268 - 0x0002A8)
static_assert(sizeof(UItemSelectionWidget) == 0x02F0); // 752 bytes (0x000268 - 0x0002F0)
static_assert(sizeof(FItemSpawnerMarker) == 0x0180); // 384 bytes (0x000000 - 0x000180)
static_assert(sizeof(UItemSpawnerComponent) == 0x0220); // 544 bytes (0x0001F8 - 0x000220)
static_assert(sizeof(UItemSpawnerEvaluationResultEntityComponentSetup) == 0x0048); // 72 bytes (0x000048 - 0x000048)
static_assert(sizeof(AItemSpawnerGroup) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(AItemSpawnerVolume) == 0x0278); // 632 bytes (0x000258 - 0x000278)
static_assert(sizeof(UItemSpawningDataRegistry) == 0x0240); // 576 bytes (0x000028 - 0x000240)
static_assert(sizeof(AItemSpawningManager) == 0x1818); // 6168 bytes (0x000220 - 0x001818)
static_assert(sizeof(FItemSpawnerData) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(UItemSpawnerPreset) == 0x0098); // 152 bytes (0x000028 - 0x000098)
static_assert(sizeof(UItemSpawnerPreset2) == 0x00A0); // 160 bytes (0x000028 - 0x0000A0)
static_assert(sizeof(UItemSplitWidget) == 0x02A8); // 680 bytes (0x000268 - 0x0002A8)
static_assert(sizeof(UItemStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UItemStatusWidget) == 0x0340); // 832 bytes (0x000340 - 0x000340)
static_assert(sizeof(UItemTooltipTab) == 0x0150); // 336 bytes (0x000140 - 0x000150)
static_assert(sizeof(UItemTooltip) == 0x02B8); // 696 bytes (0x000268 - 0x0002B8)
static_assert(sizeof(UExtendedRichTextBlock) == 0x0680); // 1664 bytes (0x000680 - 0x000680)
static_assert(sizeof(UItemTooltipPanelElement) == 0x0270); // 624 bytes (0x000268 - 0x000270)
static_assert(sizeof(UItemTooltipPanelElement_Overview) == 0x0548); // 1352 bytes (0x000270 - 0x000548)
static_assert(sizeof(UItemTooltipPanelElement_OverviewText) == 0x0538); // 1336 bytes (0x000270 - 0x000538)
static_assert(sizeof(UItemTooltipPanelElement_OverviewTextParameter) == 0x0318); // 792 bytes (0x000270 - 0x000318)
static_assert(sizeof(UItemTooltipPanel) == 0x02B8); // 696 bytes (0x000268 - 0x0002B8)
static_assert(sizeof(UItemMainTooltipPanel) == 0x02C0); // 704 bytes (0x0002B8 - 0x0002C0)
static_assert(sizeof(UItemUserWidget) == 0x02A8); // 680 bytes (0x000288 - 0x0002A8)
static_assert(sizeof(AItemVirtualizationManager) == 0x0578); // 1400 bytes (0x000220 - 0x000578)
static_assert(sizeof(UItemVirtualizationVisitorComponent) == 0x00B8); // 184 bytes (0x0000B0 - 0x0000B8)
static_assert(sizeof(UItemWidget2) == 0x0520); // 1312 bytes (0x000268 - 0x000520)
static_assert(sizeof(UItemWidgetDragDropOperation) == 0x0090); // 144 bytes (0x000088 - 0x000090)
static_assert(sizeof(AItemWithText) == 0x09F0); // 2544 bytes (0x0009A0 - 0x0009F0)
static_assert(sizeof(UJournalPanelWidget) == 0x02B8); // 696 bytes (0x000268 - 0x0002B8)
static_assert(sizeof(UJournalUIController) == 0x03A8); // 936 bytes (0x000028 - 0x0003A8)
static_assert(sizeof(UKeyBinding) == 0x0300); // 768 bytes (0x000268 - 0x000300)
static_assert(sizeof(UKeyboardIllumination) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UKeyCardItemEntitySetup) == 0x00E8); // 232 bytes (0x000090 - 0x0000E8)
static_assert(sizeof(AKillBoxC4SpawnPoint) == 0x02D8); // 728 bytes (0x000220 - 0x0002D8)
static_assert(sizeof(FSpawnerConfiguration) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FRoomDifficultyConfiguration) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FRoomDefinition) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UKillboxComponent) == 0x0360); // 864 bytes (0x0000B0 - 0x000360)
static_assert(sizeof(APlaceableActorBlocker) == 0x0220); // 544 bytes (0x000220 - 0x000220)
static_assert(sizeof(AKillBoxDetectionField) == 0x0230); // 560 bytes (0x000220 - 0x000230)
static_assert(sizeof(AKillBoxSpawnPoint) == 0x0260); // 608 bytes (0x000220 - 0x000260)
static_assert(sizeof(UKillBoxTimerWidget) == 0x0288); // 648 bytes (0x000268 - 0x000288)
static_assert(sizeof(UKillFeedNotification) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UKillFeedNotificationDescription) == 0x0078); // 120 bytes (0x000040 - 0x000078)
static_assert(sizeof(UKillNotificationWidget) == 0x0288); // 648 bytes (0x000268 - 0x000288)
static_assert(sizeof(ULadderMarkersComponent) == 0x0220); // 544 bytes (0x0001F8 - 0x000220)
static_assert(sizeof(ALadderMarkersRegistry) == 0x0280); // 640 bytes (0x000220 - 0x000280)
static_assert(sizeof(ULadderStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(ULandingDamageCustomization) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FLandingEffectDataPerSeverity) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FLandingEffectDataPerPhysicalSurface) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(ULandingEffects) == 0x07F8); // 2040 bytes (0x000030 - 0x0007F8)
static_assert(sizeof(ALargeAquaticAnimal) == 0x0888); // 2184 bytes (0x000828 - 0x000888)
static_assert(sizeof(ULargeAquaticAnimalSpeciesData) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(ULaserTriggerComponent) == 0x0550); // 1360 bytes (0x0004E0 - 0x000550)
static_assert(sizeof(UFireSourceItemTag) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UItemOpenerTag) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCannedFoodTag) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(ALevelMarkers) == 0x02A0); // 672 bytes (0x000220 - 0x0002A0)
static_assert(sizeof(ULevelQuadTree) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(ALevelRadiationSource) == 0x0290); // 656 bytes (0x000220 - 0x000290)
static_assert(sizeof(ULevelUpNotification) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(ULevelUpNotificationDescription) == 0x0050); // 80 bytes (0x000040 - 0x000050)
static_assert(sizeof(ULevelUpNotificationWidget) == 0x02D0); // 720 bytes (0x000268 - 0x0002D0)
static_assert(sizeof(FAerodynamicSurface) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(ULiftComponent) == 0x0230); // 560 bytes (0x0001F8 - 0x000230)
static_assert(sizeof(ULoadingIconWidget) == 0x0268); // 616 bytes (0x000268 - 0x000268)
static_assert(sizeof(ULoadingScreen) == 0x0270); // 624 bytes (0x000268 - 0x000270)
static_assert(sizeof(ULockableItemComponent) == 0x00F8); // 248 bytes (0x0000C8 - 0x0000F8)
static_assert(sizeof(ALockBombDefusalMinigame) == 0x0550); // 1360 bytes (0x000530 - 0x000550)
static_assert(sizeof(ULockBombDefusalMinigameConfiguration) == 0x0070); // 112 bytes (0x000070 - 0x000070)
static_assert(sizeof(ULockpickable) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(ULockpickableLocksVisualComponent) == 0x0240); // 576 bytes (0x0001F8 - 0x000240)
static_assert(sizeof(ALockpickingMinigame) == 0x04E0); // 1248 bytes (0x000340 - 0x0004E0)
static_assert(sizeof(UStandardLockMinigameConfiguration) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(FThieverySkillExperienceAwards) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(ULockData) == 0x00B8); // 184 bytes (0x000028 - 0x0000B8)
static_assert(sizeof(UStandardLockData) == 0x00E0); // 224 bytes (0x0000B8 - 0x0000E0)
static_assert(sizeof(ULockBombData) == 0x00C0); // 192 bytes (0x0000B8 - 0x0000C0)
static_assert(sizeof(UCombinationLockData) == 0x00D0); // 208 bytes (0x0000B8 - 0x0000D0)
static_assert(sizeof(UDialLockData) == 0x0108); // 264 bytes (0x0000D0 - 0x000108)
static_assert(sizeof(UUpgradeItemTag) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(ULockItemTag) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(ULockProtectionTag) == 0x0070); // 112 bytes (0x000038 - 0x000070)
static_assert(sizeof(ULockpickingStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(ULockpickingTensionToolItemTag) == 0x0070); // 112 bytes (0x000030 - 0x000070)
static_assert(sizeof(ULockpickingWidget) == 0x0288); // 648 bytes (0x000280 - 0x000288)
static_assert(sizeof(ULockpickItemTag) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(ALockProtectionItem) == 0x09D0); // 2512 bytes (0x0009B8 - 0x0009D0)
static_assert(sizeof(UMessageBox) == 0x02C0); // 704 bytes (0x000268 - 0x0002C0)
static_assert(sizeof(ULogoutMessageBox) == 0x02D8); // 728 bytes (0x0002C0 - 0x0002D8)
static_assert(sizeof(UMainMenu) == 0x0320); // 800 bytes (0x000268 - 0x000320)
static_assert(sizeof(AMainMenuGameMode) == 0x0358); // 856 bytes (0x000308 - 0x000358)
static_assert(sizeof(AMainMenuHUD) == 0x0360); // 864 bytes (0x000348 - 0x000360)
static_assert(sizeof(AMenuPlayerController) == 0x0570); // 1392 bytes (0x000570 - 0x000570)
static_assert(sizeof(AMainMenuPlayerController) == 0x0590); // 1424 bytes (0x000570 - 0x000590)
static_assert(sizeof(UMalfunctionsContainerWidget) == 0x0310); // 784 bytes (0x000268 - 0x000310)
static_assert(sizeof(UMalfunctionWidget) == 0x0278); // 632 bytes (0x000268 - 0x000278)
static_assert(sizeof(UManualEnhancedImageTextWidget) == 0x0278); // 632 bytes (0x000268 - 0x000278)
static_assert(sizeof(UManualEnhancedImageWidget) == 0x0278); // 632 bytes (0x000268 - 0x000278)
static_assert(sizeof(UManualEntry) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UCodexEntry) == 0x0078); // 120 bytes (0x000060 - 0x000078)
static_assert(sizeof(UManualPanelWidget) == 0x02C0); // 704 bytes (0x000268 - 0x0002C0)
static_assert(sizeof(UManualStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UManualUIController) == 0x0088); // 136 bytes (0x000028 - 0x000088)
static_assert(sizeof(UVehicleMarkersData) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UVehicleMarkersRequest) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UVehicleMarkersResponse) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UMasterMenu) == 0x0358); // 856 bytes (0x000268 - 0x000358)
static_assert(sizeof(UMasterWidget) == 0x02A0); // 672 bytes (0x000268 - 0x0002A0)
static_assert(sizeof(UMasterWidgetMainMenu) == 0x02A8); // 680 bytes (0x0002A0 - 0x0002A8)
static_assert(sizeof(UMathStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(AMechanic) == 0x0A60); // 2656 bytes (0x0009C8 - 0x000A60)
static_assert(sizeof(FVehicleAttachmentAssociatedTradeables) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(UMechanicCommonData) == 0x00D0); // 208 bytes (0x000030 - 0x0000D0)
static_assert(sizeof(UMechanicInstallationService) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UMechanicRepairService) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(FDroneVisitTimeData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(AMechanoidsManager) == 0x0290); // 656 bytes (0x000220 - 0x000290)
static_assert(sizeof(UMedicalItemTag) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UMedicalService) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(FMedicalSkillParametersPerSkillLevel) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UMedicalSkill) == 0x00D8); // 216 bytes (0x0000B0 - 0x0000D8)
static_assert(sizeof(AMedicationItem) == 0x09C0); // 2496 bytes (0x0009A0 - 0x0009C0)
static_assert(sizeof(UMeleeAttackCollisionCapsule) == 0x0490); // 1168 bytes (0x000478 - 0x000490)
static_assert(sizeof(UMeleeCombatComponent) == 0x01B8); // 440 bytes (0x0000B0 - 0x0001B8)
static_assert(sizeof(UMeleeDetectHitCollisionCapsule) == 0x0480); // 1152 bytes (0x000478 - 0x000480)
static_assert(sizeof(UMeleeInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FMeleeSkillAttack) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(FMeleeSkillDodge) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FMeleeSkillAnimations) == 0x0098); // 152 bytes (0x000000 - 0x000098)
static_assert(sizeof(FMeleeSkillParametersPerSkillLevel) == 0x0088); // 136 bytes (0x000000 - 0x000088)
static_assert(sizeof(UMeleeSkillAnimationsPreset) == 0x04C8); // 1224 bytes (0x000030 - 0x0004C8)
static_assert(sizeof(UMeleeWeaponItemTag) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UMeleeWeaponsSkill) == 0x0108); // 264 bytes (0x000108 - 0x000108)
static_assert(sizeof(UMenuButton) == 0x0420); // 1056 bytes (0x000268 - 0x000420)
static_assert(sizeof(AMenuCameraController) == 0x0368); // 872 bytes (0x000220 - 0x000368)
static_assert(sizeof(UMenuHelpers) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UMeshHitZones) == 0x00D0); // 208 bytes (0x0000B0 - 0x0000D0)
static_assert(sizeof(ASceneComponentEffectsActor) == 0x0248); // 584 bytes (0x000220 - 0x000248)
static_assert(sizeof(AMeshSurfaceParticlesEffectActor) == 0x0298); // 664 bytes (0x000248 - 0x000298)
static_assert(sizeof(UMessage) == 0x0280); // 640 bytes (0x000268 - 0x000280)
static_assert(sizeof(UMessageBoxWithCheckBox) == 0x02E0); // 736 bytes (0x0002C0 - 0x0002E0)
static_assert(sizeof(UMessageBoxWithEditableText) == 0x02E8); // 744 bytes (0x0002C0 - 0x0002E8)
static_assert(sizeof(UMessageBoxWithListEntry) == 0x0270); // 624 bytes (0x000268 - 0x000270)
static_assert(sizeof(UMessageBoxWithList) == 0x02D0); // 720 bytes (0x0002C0 - 0x0002D0)
static_assert(sizeof(UMessageBoxWithNote) == 0x02C8); // 712 bytes (0x0002C0 - 0x0002C8)
static_assert(sizeof(UMessageContainer) == 0x0278); // 632 bytes (0x000268 - 0x000278)
static_assert(sizeof(UMetabolism_ICU_GraphWidget) == 0x0220); // 544 bytes (0x0001F8 - 0x000220)
static_assert(sizeof(UMetabolism_ICU_GraphWidget_EKG) == 0x0250); // 592 bytes (0x000220 - 0x000250)
static_assert(sizeof(UMetabolism_ICU_GraphWidget_RR) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(UMetabolism_ICU_GraphWidget_SPO2) == 0x0238); // 568 bytes (0x000220 - 0x000238)
static_assert(sizeof(UMetabolism_ICU_GraphWidget_ST) == 0x0240); // 576 bytes (0x000220 - 0x000240)
static_assert(sizeof(UMetabolism_ICU_GraphWidget_TEMP) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(UMetabolism_BCU_ICU_StatsPanel) == 0x0290); // 656 bytes (0x000268 - 0x000290)
static_assert(sizeof(UMetabolism_BCU_ICU_Monitor) == 0x02A8); // 680 bytes (0x000268 - 0x0002A8)
static_assert(sizeof(UMetabolism_ICU_Expandable_Stats) == 0x0288); // 648 bytes (0x000268 - 0x000288)
static_assert(sizeof(UMetabolism_ICU_EKG_Stats) == 0x0310); // 784 bytes (0x000288 - 0x000310)
static_assert(sizeof(UMetabolism_ICU_ST_Stats) == 0x0318); // 792 bytes (0x000288 - 0x000318)
static_assert(sizeof(UMetabolism_ICU_SPO2_Stats) == 0x02C0); // 704 bytes (0x000288 - 0x0002C0)
static_assert(sizeof(UMetabolism_ICU_RR_Stats) == 0x02E0); // 736 bytes (0x000288 - 0x0002E0)
static_assert(sizeof(UMetabolism_ICU_TEMP_Stats) == 0x0318); // 792 bytes (0x000288 - 0x000318)
static_assert(sizeof(FMetabolismAPBFontStyle) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(UMetabolismAdvancedProgressBar) == 0x04C0); // 1216 bytes (0x000268 - 0x0004C0)
static_assert(sizeof(UMetabolismBasicInfoPanel) == 0x02B0); // 688 bytes (0x000268 - 0x0002B0)
static_assert(sizeof(UMetabolismBodyEffectProgressBar) == 0x0368); // 872 bytes (0x000290 - 0x000368)
static_assert(sizeof(FMetabolismRadialProgressBarColorScheme) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(UMetabolismBodyOverviewPanel) == 0x0598); // 1432 bytes (0x000268 - 0x000598)
static_assert(sizeof(UMetabolismBodyReservesPanel) == 0x0280); // 640 bytes (0x000268 - 0x000280)
static_assert(sizeof(UMetabolismBodyStatsPanel) == 0x02E0); // 736 bytes (0x000268 - 0x0002E0)
static_assert(sizeof(UMetabolismCurrentStatDark) == 0x02E8); // 744 bytes (0x000268 - 0x0002E8)
static_assert(sizeof(UMetabolismCurrentStatLight) == 0x02C0); // 704 bytes (0x000268 - 0x0002C0)
static_assert(sizeof(UMetabolismDigestionPanel) == 0x02A0); // 672 bytes (0x000268 - 0x0002A0)
static_assert(sizeof(UMetabolismHealthPanel) == 0x02D8); // 728 bytes (0x000268 - 0x0002D8)
static_assert(sizeof(UMetabolismHumanBodyPanel) == 0x0700); // 1792 bytes (0x000268 - 0x000700)
static_assert(sizeof(UMetabolismLightItemDisplayPanel) == 0x02A8); // 680 bytes (0x000268 - 0x0002A8)
static_assert(sizeof(UMetabolismMacronutrientReserve) == 0x02A0); // 672 bytes (0x000268 - 0x0002A0)
static_assert(sizeof(UMetabolismMacronutrientReservesPanel) == 0x02A8); // 680 bytes (0x000268 - 0x0002A8)
static_assert(sizeof(UMetabolismMineralsPanel) == 0x02C0); // 704 bytes (0x000268 - 0x0002C0)
static_assert(sizeof(UMetabolismNutritionPanel) == 0x0280); // 640 bytes (0x000268 - 0x000280)
static_assert(sizeof(UMetabolismPerformanceDataPanel) == 0x0308); // 776 bytes (0x000268 - 0x000308)
static_assert(sizeof(FMetabolismRadialAttributeProgressBarColor) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(UMetabolismRadialAttributeProgressBar) == 0x03C8); // 968 bytes (0x000268 - 0x0003C8)
static_assert(sizeof(FMetabolismRadialProgressBarFontSettings) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(UMetabolismRadialProgressBar) == 0x0478); // 1144 bytes (0x000268 - 0x000478)
static_assert(sizeof(UMetabolismRightPanel) == 0x02A0); // 672 bytes (0x000268 - 0x0002A0)
static_assert(sizeof(FConsumableSave) == 0x0120); // 288 bytes (0x000000 - 0x000120)
static_assert(sizeof(FConsumableDigestionHandlerSave) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FDigestionItemSave) == 0x02E0); // 736 bytes (0x000000 - 0x0002E0)
static_assert(sizeof(FForeignSubstanceSave) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UMetabolismSave) == 0x02C8); // 712 bytes (0x000028 - 0x0002C8)
static_assert(sizeof(FMetabolismSPBColorScheme) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(UMetabolismSegmentedProgressBar) == 0x0320); // 800 bytes (0x000268 - 0x000320)
static_assert(sizeof(UMetabolismSkillProgressBar) == 0x02E0); // 736 bytes (0x000290 - 0x0002E0)
static_assert(sizeof(UMetabolismSkillProgressionPanel) == 0x02B0); // 688 bytes (0x000268 - 0x0002B0)
static_assert(sizeof(UMetabolismSkillProgressionTab) == 0x02A0); // 672 bytes (0x000268 - 0x0002A0)
static_assert(sizeof(UMetabolismStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMetabolismStatsPanel) == 0x02D8); // 728 bytes (0x000268 - 0x0002D8)
static_assert(sizeof(UMetabolismSymptomTitle) == 0x0280); // 640 bytes (0x000268 - 0x000280)
static_assert(sizeof(UMetabolismTissueGroupCheckbox) == 0x0298); // 664 bytes (0x000268 - 0x000298)
static_assert(sizeof(UMetabolismTitleAndAPB) == 0x02B8); // 696 bytes (0x000268 - 0x0002B8)
static_assert(sizeof(UMetabolismTreatmentPanel) == 0x02C0); // 704 bytes (0x000268 - 0x0002C0)
static_assert(sizeof(UMetabolismVitaminAndMineralReserve) == 0x02A0); // 672 bytes (0x000268 - 0x0002A0)
static_assert(sizeof(UMetabolismVitaminsPanel) == 0x02D8); // 728 bytes (0x000268 - 0x0002D8)
static_assert(sizeof(AMetalDetector) == 0x09F0); // 2544 bytes (0x0009A0 - 0x0009F0)
static_assert(sizeof(UMicInputIndicator) == 0x0298); // 664 bytes (0x000268 - 0x000298)
static_assert(sizeof(FZombieMeshVariation2) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FZombieRelaxedStanceAnimations) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FZombieRelaxedStanceVariation2) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FZombieCombatStanceAnimations) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FZombieCombatStanceVariation2) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FZombieTurnMontageDescription) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FZombieAttackDescription) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FZombieSleepingAnimationData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FWindowClimbingAnimationInfo) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(AZombie2) == 0x0B40); // 2880 bytes (0x000828 - 0x000B40)
static_assert(sizeof(AMiniatureZombie) == 0x0B40); // 2880 bytes (0x000B40 - 0x000B40)
static_assert(sizeof(UBaseMinigameAnimator) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UZoomMinigameAnimator) == 0x0058); // 88 bytes (0x000028 - 0x000058)
static_assert(sizeof(UFadeMinigameAnimator) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UMinigameValidationParams) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(ULockpickingMinigameValidationParams) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UDefusalMinigameValidationParams) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UMiscStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(AMobilePhone) == 0x09F0); // 2544 bytes (0x0009A0 - 0x0009F0)
static_assert(sizeof(UMobilePhoneAvailableQuestsPanel) == 0x0290); // 656 bytes (0x000268 - 0x000290)
static_assert(sizeof(UMobilePhoneItemComponent) == 0x00D0); // 208 bytes (0x0000C8 - 0x0000D0)
static_assert(sizeof(UMobilePhoneMainPanel) == 0x02D0); // 720 bytes (0x000268 - 0x0002D0)
static_assert(sizeof(AMobilePhoneMinigame) == 0x0390); // 912 bytes (0x000340 - 0x000390)
static_assert(sizeof(UMobilePhoneMinigameConfiguration) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UMobilePhoneQuestDetailsWidget) == 0x03C0); // 960 bytes (0x000268 - 0x0003C0)
static_assert(sizeof(UMobilePhoneQuestEntryWidget) == 0x03C0); // 960 bytes (0x000268 - 0x0003C0)
static_assert(sizeof(UMobilePhoneUIController) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(UModularCodexEntryElement) == 0x0278); // 632 bytes (0x000268 - 0x000278)
static_assert(sizeof(UModularCodexEntryElement_Text) == 0x0280); // 640 bytes (0x000278 - 0x000280)
static_assert(sizeof(UModularCodexEntryElement_Title) == 0x0280); // 640 bytes (0x000280 - 0x000280)
static_assert(sizeof(UModularCodexEntryElement_BulletPoint) == 0x0280); // 640 bytes (0x000278 - 0x000280)
static_assert(sizeof(UModularCodexEntryElement_HorizontalContainer) == 0x0280); // 640 bytes (0x000278 - 0x000280)
static_assert(sizeof(UModularCodexEntryElement_VerticalContainer) == 0x0280); // 640 bytes (0x000278 - 0x000280)
static_assert(sizeof(UModularCodexEntryElement_Note) == 0x0280); // 640 bytes (0x000278 - 0x000280)
static_assert(sizeof(UModularCodexEntryElement_Image) == 0x0288); // 648 bytes (0x000278 - 0x000288)
static_assert(sizeof(UModularCodexEntryElement_Video) == 0x0288); // 648 bytes (0x000278 - 0x000288)
static_assert(sizeof(UModularCodexEntryElementData) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UModularCodexEntryElementData_Text) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UModularCodexEntryElementData_Title) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UModularCodexEntryElementData_BulletPoint) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UModularCodexEntryElementData_HorizontalContainer) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UModularCodexEntryElementData_VerticalContainer) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UModularCodexEntryElementData_Note) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(FManualEnhancedImageTextInformation) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UModularCodexEntryElementData_Image) == 0x0070); // 112 bytes (0x000038 - 0x000070)
static_assert(sizeof(UModularCodexEntryElementData_Video) == 0x0070); // 112 bytes (0x000038 - 0x000070)
static_assert(sizeof(UModularTooltip) == 0x0288); // 648 bytes (0x000268 - 0x000288)
static_assert(sizeof(UModularTooltipElement) == 0x02F8); // 760 bytes (0x000268 - 0x0002F8)
static_assert(sizeof(UModularTooltipElement_Title) == 0x0300); // 768 bytes (0x0002F8 - 0x000300)
static_assert(sizeof(UModularTooltipElement_Value) == 0x0308); // 776 bytes (0x0002F8 - 0x000308)
static_assert(sizeof(UModularTooltipElement_Timer) == 0x0300); // 768 bytes (0x0002F8 - 0x000300)
static_assert(sizeof(UModularTooltipElement_Modifier) == 0x0308); // 776 bytes (0x0002F8 - 0x000308)
static_assert(sizeof(UModularTooltipElement_ValueWithModifier) == 0x0320); // 800 bytes (0x0002F8 - 0x000320)
static_assert(sizeof(UModularTooltipElement_AffectedBy) == 0x0308); // 776 bytes (0x0002F8 - 0x000308)
static_assert(sizeof(UModularTooltipElement_Affects) == 0x0308); // 776 bytes (0x0002F8 - 0x000308)
static_assert(sizeof(UModularTooltipElementData) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UModularTooltipElementData_Title) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(UModularTooltipElementData_Value) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(UModularTooltipElementData_Timer) == 0x0058); // 88 bytes (0x000028 - 0x000058)
static_assert(sizeof(UModularTooltipElementData_Modifier) == 0x0078); // 120 bytes (0x000028 - 0x000078)
static_assert(sizeof(UModularTooltipElementData_ValueWithModifier) == 0x0098); // 152 bytes (0x000028 - 0x000098)
static_assert(sizeof(UModularTooltipElementData_ValueWithModifier_Small) == 0x0098); // 152 bytes (0x000098 - 0x000098)
static_assert(sizeof(UModularTooltipElementData_ValueWithModifier_Large) == 0x0098); // 152 bytes (0x000098 - 0x000098)
static_assert(sizeof(UModularTooltipElementData_AffectedBy) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(UModularTooltipElementData_Affects) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(UModularTooltipSection) == 0x0298); // 664 bytes (0x000268 - 0x000298)
static_assert(sizeof(UMotorcycleSkill) == 0x05D8); // 1496 bytes (0x0005D8 - 0x0005D8)
static_assert(sizeof(UMountable) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMountee) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMountPath) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(UExternalMountPath) == 0x0120); // 288 bytes (0x000060 - 0x000120)
static_assert(sizeof(UInternalMountPath) == 0x0068); // 104 bytes (0x000060 - 0x000068)
static_assert(sizeof(UMountPathBlocker) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMountSlot) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FMovingSplineSoundData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UMovableAudioSpline) == 0x0590); // 1424 bytes (0x000550 - 0x000590)
static_assert(sizeof(FMovableCollisionFieldState) == 0x0003); // 3 bytes (0x000000 - 0x000003)
static_assert(sizeof(FMovableCollisionFieldMoveInfo) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UMovableCollisionFieldComponent) == 0x0118); // 280 bytes (0x0000B0 - 0x000118)
static_assert(sizeof(AMugshotRoom) == 0x02A0); // 672 bytes (0x000220 - 0x0002A0)
static_assert(sizeof(UMusicPlayerDisplayWidget) == 0x0310); // 784 bytes (0x000268 - 0x000310)
static_assert(sizeof(UNameableItemComponentState) == 0x0050); // 80 bytes (0x000040 - 0x000050)
static_assert(sizeof(UNameableItemComponent) == 0x0110); // 272 bytes (0x0000C8 - 0x000110)
static_assert(sizeof(UNetworkDataIdAsset) == 0x00D0); // 208 bytes (0x000030 - 0x0000D0)
static_assert(sizeof(UNetworkPredictionComponent) == 0x0200); // 512 bytes (0x0000B0 - 0x000200)
static_assert(sizeof(UNetworkStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(ANightVisionGogglesItem) == 0x0B10); // 2832 bytes (0x000A40 - 0x000B10)
static_assert(sizeof(ANoticeBoard) == 0x0270); // 624 bytes (0x000220 - 0x000270)
static_assert(sizeof(ANoticeBoardMinigame) == 0x0380); // 896 bytes (0x000340 - 0x000380)
static_assert(sizeof(UNoticeBoardMinigameConfiguration) == 0x0058); // 88 bytes (0x000050 - 0x000058)
static_assert(sizeof(UNoticeBoardMinigameWidget) == 0x02C8); // 712 bytes (0x000280 - 0x0002C8)
static_assert(sizeof(UNoticeBoardPanelWidget) == 0x02C0); // 704 bytes (0x000268 - 0x0002C0)
static_assert(sizeof(UNoticeBoardQuestEntryWidget) == 0x0358); // 856 bytes (0x000268 - 0x000358)
static_assert(sizeof(UNoticeBoardUIController) == 0x0078); // 120 bytes (0x000028 - 0x000078)
static_assert(sizeof(UNotificationPanelWidget) == 0x02A8); // 680 bytes (0x000268 - 0x0002A8)
static_assert(sizeof(ANotificationsManager) == 0x02D8); // 728 bytes (0x000220 - 0x0002D8)
static_assert(sizeof(FNotificationAndDelay) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UNotificationChain) == 0x0058); // 88 bytes (0x000028 - 0x000058)
static_assert(sizeof(UNotificationWidget) == 0x02A8); // 680 bytes (0x000268 - 0x0002A8)
static_assert(sizeof(UNPCControllerState) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UNPCControllerStateArmedNPCBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UNPCControllerStateArmedNPCBaseAlertedByDamage) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UNPCControllerStateArmedNPCBaseAlertedByGunshot) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(UNPCControllerStateArmedNPCBaseCombat) == 0x0090); // 144 bytes (0x000030 - 0x000090)
static_assert(sizeof(UNPCControllerStateArmedNPCBaseInvestigateLocation) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UNPCControllerStateArmedNPCBaseNone) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UNPCControllerStateArmedNPCBaseOpenDoor) == 0x0058); // 88 bytes (0x000030 - 0x000058)
static_assert(sizeof(UNPCControllerStateBrennerBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UNPCControllerStateBrennerAlerted) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UNPCControllerStateBrennerCombat) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UNPCControllerStateBrennerHibernate) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UNPCControllerStateBrennerHitReact) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UNPCControllerStateBrennerInvestigateArea) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UNPCControllerStateBrennerOpenDoor) == 0x0058); // 88 bytes (0x000030 - 0x000058)
static_assert(sizeof(UNPCControllerStateBrennerRage) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UNPCControllerStateBrennerReturnToHibernation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(ANPCDrifterAIController) == 0x05E0); // 1504 bytes (0x000598 - 0x0005E0)
static_assert(sizeof(UNPCControllerStateDrifterAlertedByDamage) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UNPCControllerStateDrifterAlertedByGunshot) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UNPCControllerStateDrifterCombat) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(UNPCControllerStateDrifterIdle) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UNPCControllerStateDrifterInvestigateLocation) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UNPCControllerStateDrifterMoveTowardsTargetLocation) == 0x0058); // 88 bytes (0x000030 - 0x000058)
static_assert(sizeof(UNPCControllerStateDrifterOpenDoor) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(ANPCGuardAIController) == 0x05E0); // 1504 bytes (0x000598 - 0x0005E0)
static_assert(sizeof(UNPCControllerStateGuardAlertedByDamage) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UNPCControllerStateGuardAlertedByGunshot) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UNPCControllerStateGuardCombat) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(UNPCControllerStateGuardIdle) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(UNPCControllerStateGuardInvestigateLocation) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UNPCControllerStateGuardOpenDoor) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UNPCControllerStateGuardReturnToPost) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(ANPCDrifter) == 0x0A10); // 2576 bytes (0x000A00 - 0x000A10)
static_assert(sizeof(ANPCGuard) == 0x0A20); // 2592 bytes (0x000A00 - 0x000A20)
static_assert(sizeof(UNPCInventoryComponent) == 0x0118); // 280 bytes (0x0000B0 - 0x000118)
static_assert(sizeof(UNumberPicker) == 0x02A8); // 680 bytes (0x000268 - 0x0002A8)
static_assert(sizeof(UObjectCondition) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UObjectStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UObstuctsEyesItemTag) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UObstuctsMouthItemTag) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(AOfflineRaidProtectionManager) == 0x0450); // 1104 bytes (0x0003D0 - 0x000450)
static_assert(sizeof(UOpenItemAction) == 0x00B8); // 184 bytes (0x0000A8 - 0x0000B8)
static_assert(sizeof(UOutpostEntriesPanelWidget) == 0x02A8); // 680 bytes (0x000268 - 0x0002A8)
static_assert(sizeof(FOutpostInformationTraderUIData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UOutpostInformationDropdownWidget) == 0x02E8); // 744 bytes (0x000268 - 0x0002E8)
static_assert(sizeof(UOutpostTraderDetailsPanelWidget) == 0x02F0); // 752 bytes (0x000268 - 0x0002F0)
static_assert(sizeof(UOutpostTraderEntryWidget) == 0x0300); // 768 bytes (0x000268 - 0x000300)
static_assert(sizeof(UPaddleItemTag) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(UPaintable) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FPaintJobColor) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UPaintJobColorsDataAsset) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UPaintJobStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FPrisonerAerialPoseData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FParachuteAnimParams) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FPrisonerAirMovementParameters) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UParachuteItemTag) == 0x0070); // 112 bytes (0x000030 - 0x000070)
static_assert(sizeof(UPauseMenu) == 0x0380); // 896 bytes (0x000268 - 0x000380)
static_assert(sizeof(UPauseMenuUIController) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(APersistentCollisionManager) == 0x0260); // 608 bytes (0x000220 - 0x000260)
static_assert(sizeof(UPersistentPhysicalMaterial) == 0x0090); // 144 bytes (0x000088 - 0x000090)
static_assert(sizeof(UPersistentLandscapeHeightfieldComponent) == 0x04D0); // 1232 bytes (0x000458 - 0x0004D0)
static_assert(sizeof(UPersistentLandscapeMeshComponent) == 0x04D0); // 1232 bytes (0x0004D0 - 0x0004D0)
static_assert(sizeof(UPersistentStaticMeshComponent) == 0x0478); // 1144 bytes (0x000458 - 0x000478)
static_assert(sizeof(UPersistentSplineMeshComponent) == 0x0480); // 1152 bytes (0x000478 - 0x000480)
static_assert(sizeof(UPersistentInstancedStaticMeshComponent) == 0x04A0); // 1184 bytes (0x000478 - 0x0004A0)
static_assert(sizeof(APesticideItem) == 0x09C0); // 2496 bytes (0x0009A0 - 0x0009C0)
static_assert(sizeof(UPhoenixTearsComponent) == 0x00D8); // 216 bytes (0x0000C8 - 0x0000D8)
static_assert(sizeof(UPhotoModeMainPanel) == 0x0468); // 1128 bytes (0x000268 - 0x000468)
static_assert(sizeof(APhotoModePawn) == 0x03E0); // 992 bytes (0x000280 - 0x0003E0)
static_assert(sizeof(FPhysicalSurfaceData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UPhysicalSurfacesData) == 0x06E8); // 1768 bytes (0x000030 - 0x0006E8)
static_assert(sizeof(FPhysicalSurfaceVehicleTireParticleData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FPhysicalSurfaceVehicleEffectsData) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FPhysicalSurfaceEffectsData) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(UPhysicalSurfacesEffectsData) == 0x0DA0); // 3488 bytes (0x000030 - 0x000DA0)
static_assert(sizeof(UPhysician) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UPhysicsStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UPickupItemAction) == 0x00A8); // 168 bytes (0x0000A8 - 0x0000A8)
static_assert(sizeof(UPickupItemAssetData) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UPlaceableActorBaseReplicatedState) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(FCraftingProcessPerIngredientSlotData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FCraftingProcess) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(APlaceableActorBase) == 0x04F0); // 1264 bytes (0x000220 - 0x0004F0)
static_assert(sizeof(UPlaceableActorBaseBuildingReplicatedState) == 0x0070); // 112 bytes (0x000050 - 0x000070)
static_assert(sizeof(FTilesData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSizeVariatedTilesData) == 0x0040); // 64 bytes (0x000018 - 0x000040)
static_assert(sizeof(APlaceableActorBaseBuilding) == 0x05F0); // 1520 bytes (0x0004F0 - 0x0005F0)
static_assert(sizeof(FConZBaseElementIdentifier) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(APlaceableActorBaseUpgrade) == 0x0558); // 1368 bytes (0x0004F0 - 0x000558)
static_assert(sizeof(APlaceableActorFortifications) == 0x0538); // 1336 bytes (0x0004F0 - 0x000538)
static_assert(sizeof(UPlaceableActorGardenReplicatedState) == 0x0068); // 104 bytes (0x000050 - 0x000068)
static_assert(sizeof(APlaceableActorGarden) == 0x05C0); // 1472 bytes (0x0004F0 - 0x0005C0)
static_assert(sizeof(APlaceableActorItems) == 0x04F8); // 1272 bytes (0x0004F0 - 0x0004F8)
static_assert(sizeof(APlaceableActorModularBaseBuilding) == 0x0680); // 1664 bytes (0x0005F0 - 0x000680)
static_assert(sizeof(FLineTraceSocketPair) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(APlaceableActorModularBaseBuildingFoundation) == 0x06B0); // 1712 bytes (0x000680 - 0x0006B0)
static_assert(sizeof(APlaceableActorTurret) == 0x0600); // 1536 bytes (0x0005F0 - 0x000600)
static_assert(sizeof(UPlaceableElementWidget) == 0x0280); // 640 bytes (0x000268 - 0x000280)
static_assert(sizeof(UPlaceableOnRackItemTag) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UPlaceableOnRackLargeItemTag) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UPlaceableOnWallRackItemTag) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UPlacedPlaceableWidget) == 0x02C8); // 712 bytes (0x000268 - 0x0002C8)
static_assert(sizeof(APlantGrowthDisplay) == 0x0278); // 632 bytes (0x000220 - 0x000278)
static_assert(sizeof(UPlantingPanel) == 0x0390); // 912 bytes (0x000268 - 0x000390)
static_assert(sizeof(UPlantingPanelUIController) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(UPlantSeedComponent) == 0x00D0); // 208 bytes (0x0000C8 - 0x0000D0)
static_assert(sizeof(UPlantPestSpecies) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(UPlantDiseaseSpecies) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(FPlantMesh) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FPlantStageMeshData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FPlantMeshData) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(UPlantSpecies) == 0x0100); // 256 bytes (0x000030 - 0x000100)
static_assert(sizeof(UPlantStatusIndicatorWidget) == 0x0508); // 1288 bytes (0x000268 - 0x000508)
static_assert(sizeof(UPlantStatusIndicatorUIController) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UTradeableDiscountCondition) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UPlasticSurgeryDiscountCondition) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UPlasticSurgeryMenuWidget) == 0x0438); // 1080 bytes (0x000268 - 0x000438)
static_assert(sizeof(UPlasticSurgeryMugshot) == 0x02F0); // 752 bytes (0x000268 - 0x0002F0)
static_assert(sizeof(UPlasticSurgeryService) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UPlayableInstrument) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UPlayEffectsWhenParticleCollides) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(APlayerDrone) == 0x0BF0); // 3056 bytes (0x000930 - 0x000BF0)
static_assert(sizeof(UPlayerManagementActivePlayer) == 0x0268); // 616 bytes (0x000268 - 0x000268)
static_assert(sizeof(UPlayerManagementActivePlayersList) == 0x0268); // 616 bytes (0x000268 - 0x000268)
static_assert(sizeof(UPlayerManagementMap) == 0x0268); // 616 bytes (0x000268 - 0x000268)
static_assert(sizeof(UPlayerManagementMenu) == 0x0288); // 648 bytes (0x000268 - 0x000288)
static_assert(sizeof(UPlayerManagementUIController) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UPlayerQuestComponent) == 0x05D8); // 1496 bytes (0x0000B0 - 0x0005D8)
static_assert(sizeof(UPlayerRpcChannel) == 0x0130); // 304 bytes (0x0000B0 - 0x000130)
static_assert(sizeof(UPossibleCookingIngredientWidget) == 0x0298); // 664 bytes (0x000268 - 0x000298)
static_assert(sizeof(FPowerCableMeshInfo) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UPowerCableMeshSet) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(FPowerNodeConnector) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(APowerNode) == 0x0258); // 600 bytes (0x000220 - 0x000258)
static_assert(sizeof(APracticeLockpickingItem) == 0x09C0); // 2496 bytes (0x0009A0 - 0x0009C0)
static_assert(sizeof(APracticeTrapItem) == 0x0AD0); // 2768 bytes (0x000AD0 - 0x000AD0)
static_assert(sizeof(UPresetColorPickerButton) == 0x02E0); // 736 bytes (0x000268 - 0x0002E0)
static_assert(sizeof(UPresetColorPicker) == 0x0338); // 824 bytes (0x000268 - 0x000338)
static_assert(sizeof(UPreviewAnimationComponent) == 0x0110); // 272 bytes (0x0000B0 - 0x000110)
static_assert(sizeof(UPreviousNextSwitchWidget) == 0x0298); // 664 bytes (0x000268 - 0x000298)
static_assert(sizeof(UPrimaryButton) == 0x0528); // 1320 bytes (0x000290 - 0x000528)
static_assert(sizeof(UPrisonerAction) == 0x0120); // 288 bytes (0x000108 - 0x000120)
static_assert(sizeof(UPrisonerActionDescription) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UPrisonerActionActivateSlot) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionActivateSlotDescription) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UPrisonerActionAddFertilizer) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionAddFertilizerDescription) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UPrisonerActionAddWeaponAttachment) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionAddWeaponAttachmentDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPrisonerActionAlignTransform) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionAlignTransformDescription) == 0x0090); // 144 bytes (0x000038 - 0x000090)
static_assert(sizeof(UPrisonerActionAnalyzeAnimalTrack) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionAnalyzeAnimalTrackDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPrisonerActionApplyFlagElementsExpansion) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionApplyFlagElementsExpansionDescription) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UPrisonerActionApplyPesticide) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionApplyPesticideDescription) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UPrisonerActionAttachItem) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionAttachItemDescription) == 0x0088); // 136 bytes (0x000038 - 0x000088)
static_assert(sizeof(UPrisonerActionAutoCraft) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionAutoCraftDescription) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UPrisonerActionBlowAir) == 0x0140); // 320 bytes (0x000120 - 0x000140)
static_assert(sizeof(UPrisonerActionBlowAirDescription) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UPrisonerActionBury) == 0x0150); // 336 bytes (0x000120 - 0x000150)
static_assert(sizeof(UPrisonerActionBuryDescription) == 0x0070); // 112 bytes (0x000038 - 0x000070)
static_assert(sizeof(UPrisonerActionChangeStance) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerActionChangeStanceDescription) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UPrisonerActionChangeStanceWaitEndOnOwningClient) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerActionChangeStanceWaitEndOnOwningClientDescription) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UPrisonerActionChangeVehicleWeaponAimingStance) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionChangeVehicleWeaponAimingStanceDescription) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UPrisonerActionChangeWeaponFiringMode) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionChangeWeaponFiringModeModeDescription) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UPrisonerActionChargeVehicleBattery) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionChargeVehicleBatteryDescription) == 0x0070); // 112 bytes (0x000038 - 0x000070)
static_assert(sizeof(UPrisonerActionCheckChainsawFuelStatus) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionCheckChainsawFuelStatusDescription) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UPrisonerActionCheckItemFuelStatus) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionCheckItemFuelStatusDescription) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UPrisonerActionCheckThermalSensor) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionCheckThermalSensorDescription) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UPrisonerActionCheckTime) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerActionCheckTimeDescription) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UPrisonerActionCheckWeaponAmmo) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerActionCheckWeaponAmmoDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPrisonerActionCheckWeaponFiringMode) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerActionCheckWeaponFiringModeDescription) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UPrisonerActionChopActor) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionChopActorDescription) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UPrisonerActionChopBaseElement) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionChopBaseElementDescription) == 0x00A0); // 160 bytes (0x000038 - 0x0000A0)
static_assert(sizeof(UPrisonerActionClaimKill) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionClaimKillDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPrisonerActionClean) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UUPrisonerActionCleanDescription) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UPrisonerActionClearWeaponMalfunction) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerActionClearWeaponMalfunctionDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPrisonerActionClimbOntoLadder) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionClimbOntoLadderDescription) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UPrisonerActionCollectSeeds) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionCollectSeedsDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPrisonerActionCommitSuicide) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionCommitSuicideDescription) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UPrisonerActionCraftItem) == 0x0138); // 312 bytes (0x000120 - 0x000138)
static_assert(sizeof(UPrisonerActionCraftItemDescription) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UPrisonerActionCutObject) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionCutObjectDescription) == 0x0068); // 104 bytes (0x000038 - 0x000068)
static_assert(sizeof(UPrisonerActionDecontaminate) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionDecontaminateDescription) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UPrisonerActionDecontaminateWithReplenishableResource) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerActionDecontaminateWithReplenishableResourceDescription) == 0x0088); // 136 bytes (0x000038 - 0x000088)
static_assert(sizeof(UPrisonerActionDefecate) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerActionDefecateDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPrisonerActionDestroyGarden) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionDestroyGardenDescription) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UPrisonerActionDestroyItem) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionDestroyItemDescription) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UPrisonerActionDisinfectItem) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionDisinfectItemDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPrisonerActionDownloadDataToBCUMemoryModule) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionDownloadDataToBCUMemoryModuleDescription) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UPrisonerActionDrainVehicleFuelIntoItem) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerActionDrainVehicleFuelIntoItemDescription) == 0x0070); // 112 bytes (0x000038 - 0x000070)
static_assert(sizeof(UPrisonerActionDrinkFromReplenishableResource) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionDrinkFromReplenishableResourceDescription) == 0x0080); // 128 bytes (0x000038 - 0x000080)
static_assert(sizeof(UPrisonerActionDrinkInteraction) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionDrinkInteractionDescription) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UPrisonerActionEatItem) == 0x0140); // 320 bytes (0x000120 - 0x000140)
static_assert(sizeof(UPrisonerActionEatItemDescription) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UPrisonerActionEnterCombatMode) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionEnterCombatModeDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPrisonerActionExecuteBodyConditionInteraction) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerActionExecuteBodyConditionInteractionDescription) == 0x0088); // 136 bytes (0x000038 - 0x000088)
static_assert(sizeof(UPrisonerActionExtinguishFire) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerActionExtinguishFireDescription) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UPrisonerActionExtinguishItem) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionExtinguishItemDescription) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UPrisonerActionExtractBloodSample) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionExtractBloodSampleDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPrisonerActionFillGameResourceContainer) == 0x0148); // 328 bytes (0x000120 - 0x000148)
static_assert(sizeof(UPrisonerActionFillGameResourceContainerWithReplenishableResource) == 0x0150); // 336 bytes (0x000148 - 0x000150)
static_assert(sizeof(UPrisonerActionFillGameResourceContainerDescription) == 0x0090); // 144 bytes (0x000038 - 0x000090)
static_assert(sizeof(UPrisonerActionFillGameResourceContainerWithReplenishableResourceDescription) == 0x00A8); // 168 bytes (0x000090 - 0x0000A8)
static_assert(sizeof(UPrisonerActionFillGameResourceContainerWithInfiniteResourceDescription) == 0x00F0); // 240 bytes (0x000090 - 0x0000F0)
static_assert(sizeof(UPrisonerActionFillVehicleFuelWithItem) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerActionFillVehicleFuelWithItemDescription) == 0x0070); // 112 bytes (0x000038 - 0x000070)
static_assert(sizeof(UPrisonerActionFillVehicleFuelWithReplenishableResource) == 0x0150); // 336 bytes (0x000120 - 0x000150)
static_assert(sizeof(UPrisonerActionFillVehicleFuelWithReplenishableResourceDescription) == 0x0088); // 136 bytes (0x000038 - 0x000088)
static_assert(sizeof(UPrisonerActionFillWater) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionFillWaterDescription) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UPrisonerActionFishing) == 0x0110); // 272 bytes (0x000108 - 0x000110)
static_assert(sizeof(UPrisonerActionFishingDescription) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UPrisonerActionFixTire) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerActionFixTireDescription) == 0x0080); // 128 bytes (0x000038 - 0x000080)
static_assert(sizeof(UPrisonerActionForceUnlock) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerActionForceUnlockDescription) == 0x00A0); // 160 bytes (0x000038 - 0x0000A0)
static_assert(sizeof(UPrisonerActionFuelFire) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerActionFuelFireDescription) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UPrisonerActionGesture) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionGestureDescription) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UPrisonerActionIgniteItem) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionIgniteItemDescription) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UPrisonerActionInjectSubstance) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerActionInjectSubstanceDescription) == 0x0068); // 104 bytes (0x000038 - 0x000068)
static_assert(sizeof(UPrisonerActionInsertArrow) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerActionInsertArrowDescription) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UPrisonerActionLeaveCombatMode) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionLeaveCombatModeDescription) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UPrisonerActionLightFire) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionLightFireDescription) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UPrisonerActionLoadAmmoIntoMagazine) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerActionLoadAmmoIntoMagazineDescription) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UPrisonerActionLootCorpse) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionLootCorpseDescription) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UPrisonerActionLootPrisoner) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionLootPrisonerDescription) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UPrisonerActionManipulateTrap) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionManipulateTrapDescription) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UPrisonerActionManualOpenBlastDoor) == 0x0140); // 320 bytes (0x000120 - 0x000140)
static_assert(sizeof(UPrisonerActionManualOpenBlastDoorDescription) == 0x00A0); // 160 bytes (0x000038 - 0x0000A0)
static_assert(sizeof(UPrisonerActionMinigame) == 0x0158); // 344 bytes (0x000120 - 0x000158)
static_assert(sizeof(UPrisonerActionMinigameDescription) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UPrisonerActionModifyBaseElementPaintJob) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionModifyBaseElementPaintJobDescription) == 0x0078); // 120 bytes (0x000038 - 0x000078)
static_assert(sizeof(UPrisonerActionModifyTurretPaintjob) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionModifyTurretPaintjobDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPrisonerActionModifyVehicleAttachmentPaintjob) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionModifyVehicleAttachmentPaintjobDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPrisonerActionModifyWeaponPaintjob) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionModifyWeaponPaintjobDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPrisonerActionMoveToLocation) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionMoveToLocationDescription) == 0x0068); // 104 bytes (0x000038 - 0x000068)
static_assert(sizeof(UPrisonerActionOpenItem) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionOpenItemDescription) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UPrisonerActionOperateBondage) == 0x0138); // 312 bytes (0x000120 - 0x000138)
static_assert(sizeof(UPrisonerActionOperateBondageDescription) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UPrisonerActionPairRemoteKeyAndSensor) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionPairRemoteKeyAndSensorDescription) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UPrisonerActionPickUpVehicle2W) == 0x0148); // 328 bytes (0x000120 - 0x000148)
static_assert(sizeof(UPrisonerActionPickUpVehicle2WDescription) == 0x00A0); // 160 bytes (0x000038 - 0x0000A0)
static_assert(sizeof(UPrisonerActionPlaceItemOnRack) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionPlaceItemOnRackDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPrisonerActionPlantSeed) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionPlantSeedDescription) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UPrisonerActionPullGrenadePin) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionPullGrenadePinDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPrisonerActionReloadWeapon) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerActionReloadWeaponDescription) == 0x0070); // 112 bytes (0x000038 - 0x000070)
static_assert(sizeof(UPrisonerActionRemoveItemFromHands) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerActionRemoveItemFromHandsDescription) == 0x0078); // 120 bytes (0x000038 - 0x000078)
static_assert(sizeof(UPrisonerActionRemovePlant) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionRemovePlantDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPrisonerActionRemoveWeaponAttachment) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionRemoveWeaponAttachmentDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPrisonerActionRemoveWeed) == 0x0138); // 312 bytes (0x000120 - 0x000138)
static_assert(sizeof(UPrisonerActionRemoveWeedDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPrisonerActionRepair) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerActionRepairDescription) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UPrisonerActionRepairBaseElement) == 0x0130); // 304 bytes (0x000130 - 0x000130)
static_assert(sizeof(UPrisonerActionRepairBaseElementDescription) == 0x00A8); // 168 bytes (0x000050 - 0x0000A8)
static_assert(sizeof(UPrisonerActionRepairFortification) == 0x0130); // 304 bytes (0x000130 - 0x000130)
static_assert(sizeof(UPrisonerActionRepairFortificationDescription) == 0x0068); // 104 bytes (0x000050 - 0x000068)
static_assert(sizeof(UPrisonerActionRepairItem) == 0x0130); // 304 bytes (0x000130 - 0x000130)
static_assert(sizeof(UPrisonerActionRepairItemDescription) == 0x0068); // 104 bytes (0x000050 - 0x000068)
static_assert(sizeof(UPrisonerActionRepairVehicle) == 0x0130); // 304 bytes (0x000130 - 0x000130)
static_assert(sizeof(UPrisonerActionRepairVehicleDescription) == 0x0058); // 88 bytes (0x000050 - 0x000058)
static_assert(sizeof(UPrisonerActionResuscitate) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionResuscitateDescription) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UPrisonerActionRollRevolverDrum) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionRollRevolverDrumDescription) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UPrisonerActionRussianRoulette) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionRussianRouletteDescription) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UPrisonerActionSearchObject) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerActionSearchGardenSlot) == 0x0130); // 304 bytes (0x000130 - 0x000130)
static_assert(sizeof(UPrisonerActionSearchObjectDescription) == 0x0070); // 112 bytes (0x000038 - 0x000070)
static_assert(sizeof(UPrisonerActionSearchGardenSlotDescription) == 0x0078); // 120 bytes (0x000070 - 0x000078)
static_assert(sizeof(UPrisonerActionSearchGround) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionSearchGroundDescription) == 0x0078); // 120 bytes (0x000038 - 0x000078)
static_assert(sizeof(UPrisonerActionSearchPrisoner) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerActionSearchPrisonerDescription) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UPrisonerActionSpill) == 0x0168); // 360 bytes (0x000120 - 0x000168)
static_assert(sizeof(UPrisonerActionSpillDescription) == 0x0090); // 144 bytes (0x000038 - 0x000090)
static_assert(sizeof(UPrisonerActionSpillAtLocation) == 0x0168); // 360 bytes (0x000168 - 0x000168)
static_assert(sizeof(UPrisonerActionSpillAtLocationDescription) == 0x00B8); // 184 bytes (0x000090 - 0x0000B8)
static_assert(sizeof(UPrisonerActionStartCarryingItem) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerActionStartCarryingItemDescription) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UPrisonerActionStartChainsawEngine) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionStartChainsawEngineDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPrisonerActionStartPlayingInstrument) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionStartPlayingInstrumentDescription) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UPrisonerActionStartResting) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionStartRestingDescription) == 0x00F0); // 240 bytes (0x000038 - 0x0000F0)
static_assert(sizeof(UPrisonerActionStopResting) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionStopRestingDescription) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UPrisonerActionTakeItemInHands) == 0x0138); // 312 bytes (0x000120 - 0x000138)
static_assert(sizeof(UPrisonerActionTakeItemInHandsDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPrisonerActionThrowItem) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerActionThrowItemDescription) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UPrisonerActionTreatPatient) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionTreatPatientDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPrisonerActionTriggerRemoteKey) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionTriggerRemoteKeyDescription) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UPrisonerActionTuneBow) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionTuneBowDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPrisonerActionUncraftItem) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionUncraftItemDescription) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UPrisonerActionUnequipWeapon) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionUnequipWeaponDescription) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UPrisonerActionUnloadAmmoFromWeapon) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerActionUnloadAmmoFromWeaponDescription) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UPrisonerActionUpgradeBCU) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionUpgradeBCUDescription) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UPrisonerActionUrinate) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerActionUrinateDescription) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UPrisonerActionVoiceline) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionVoicelineDescription) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UPrisonerActionVomit) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerActionVomitDescription) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UPrisonerActionWashCloth) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UUPrisonerActionWashClothDescription) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UPrisonerActionWashEyes) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionWashEyesDescription) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UPrisonerActionWashEyesWithReplenishableResourceDescription) == 0x0068); // 104 bytes (0x000050 - 0x000068)
static_assert(sizeof(UPrisonerActionWashEyesWithInfiniteResourceDescription) == 0x00B0); // 176 bytes (0x000050 - 0x0000B0)
static_assert(sizeof(UPrisonerActionWashWithReplenishableResource) == 0x0138); // 312 bytes (0x000120 - 0x000138)
static_assert(sizeof(UPrisonerActionWashWithReplenishableResourceDescription) == 0x0090); // 144 bytes (0x000038 - 0x000090)
static_assert(sizeof(UPrisonerActionWhistle) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerActionWhistleDescription) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UPrisonerAnimInstance) == 0x1050); // 4176 bytes (0x0002B8 - 0x001050)
static_assert(sizeof(UPrisonerAnimInstance_Aerial) == 0x0330); // 816 bytes (0x0002B8 - 0x000330)
static_assert(sizeof(UPrisonerAnimInstance_Airplane) == 0x03A0); // 928 bytes (0x0002B8 - 0x0003A0)
static_assert(sizeof(UPrisonerAnimInstance_Bike) == 0x0458); // 1112 bytes (0x0002B8 - 0x000458)
static_assert(sizeof(UPrisonerAnimInstance_Boat) == 0x0430); // 1072 bytes (0x0002B8 - 0x000430)
static_assert(sizeof(UPrisonerAnimInstance_FemaleCorrections) == 0x02D0); // 720 bytes (0x0002B8 - 0x0002D0)
static_assert(sizeof(UPrisonerAnimInstance_Fishing) == 0x02E0); // 736 bytes (0x0002B8 - 0x0002E0)
static_assert(sizeof(UPrisonerAnimInstance_Grappled) == 0x02C0); // 704 bytes (0x0002B8 - 0x0002C0)
static_assert(sizeof(UPrisonerAnimInstance_Parachute) == 0x02E0); // 736 bytes (0x0002B8 - 0x0002E0)
static_assert(sizeof(UPrisonerAnimInstance_PrisonerCreation) == 0x02E0); // 736 bytes (0x0002B8 - 0x0002E0)
static_assert(sizeof(UPrisonerAnimInstance_Quad) == 0x0470); // 1136 bytes (0x000458 - 0x000470)
static_assert(sizeof(UPrisonerAnimInstance_VehicleBase) == 0x10E0); // 4320 bytes (0x001050 - 0x0010E0)
static_assert(sizeof(UPrisonerAnimInstance_WeightLoad) == 0x02C0); // 704 bytes (0x0002B8 - 0x0002C0)
static_assert(sizeof(UPrisonerAnimInstance_WheelBarrow) == 0x03A0); // 928 bytes (0x0002B8 - 0x0003A0)
static_assert(sizeof(UPrisonerAnimNotify_PlayGearSound) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UPrisonerAnimStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FVisualParameter) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(UPrisonerAppearanceComponent) == 0x0150); // 336 bytes (0x0000B0 - 0x000150)
static_assert(sizeof(UPrisonerBodyCompositionMorphsComputer) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UPrisonerBodyCompositionMorphsComputer_CharacterCreationOrMugshot) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FPrisonerAppearance_HairStyle) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UPrisonerAppearanceDataAsset) == 0x0200); // 512 bytes (0x000030 - 0x000200)
static_assert(sizeof(FPrisonerAppearance_HairColorPreset) == 0x008C); // 140 bytes (0x000000 - 0x00008C)
static_assert(sizeof(FPrisonerAppearance_Tattoo) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(FPrisonerAppearance_TattooArray) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FPrisonerAppearance_FaceVariation) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FPrisonerAppearance_SkinTone) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FPrisonerAppearance_SkinParams) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FPrisonerAppearance_IrisColor) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FPrisonerAppearance_IrisVariation) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(UPrisonerAppearanceSetDataAsset) == 0x02D8); // 728 bytes (0x000030 - 0x0002D8)
static_assert(sizeof(UPrisonerAppearanceUIController) == 0x01F0); // 496 bytes (0x000028 - 0x0001F0)
static_assert(sizeof(UPrisonerBodyAbrasionsStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UPrisonerBodyMuscleGroupToBurnInjuryClassMappings) == 0x00F8); // 248 bytes (0x000030 - 0x0000F8)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffect) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffect_Damage) == 0x0158); // 344 bytes (0x000030 - 0x000158)
static_assert(sizeof(UPrisonerBodySimulationUIData) == 0x0058); // 88 bytes (0x000028 - 0x000058)
static_assert(sizeof(UPrisonerBodyEffectUIData) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomUIData) == 0x0098); // 152 bytes (0x000040 - 0x000098)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffectUIData) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffectUIData_Damage) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FPrisonerMaxMovementPaceVsSeverityKey) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FPrisonerMaxMovementPaceVsSeverity) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffect_MaxMovementPace) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffectUIData_MaxMovementPace) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffect_AbstractModifier) == 0x00C0); // 192 bytes (0x000030 - 0x0000C0)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffectUIData_AbstractModifier) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffect_StrengthModifier) == 0x00C0); // 192 bytes (0x0000C0 - 0x0000C0)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffectUIData_StrengthModifier) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffect_ConstitutionModifier) == 0x00C0); // 192 bytes (0x0000C0 - 0x0000C0)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffectUIData_ConstitutionModifier) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffect_DexterityModifier) == 0x00C0); // 192 bytes (0x0000C0 - 0x0000C0)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffectUIData_DexterityModifier) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffect_IntelligenceModifier) == 0x00C0); // 192 bytes (0x0000C0 - 0x0000C0)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffectUIData_IntelligenceModifier) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffect_HealingSpeedModifier) == 0x00C0); // 192 bytes (0x0000C0 - 0x0000C0)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffectUIData_HealingSpeedModifier) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffect_ImmuneSystemEfficiencyModifier) == 0x00C0); // 192 bytes (0x0000C0 - 0x0000C0)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffectUIData_ImmuneSystemEfficiencyModifier) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffect_PerformanceScoreModifier) == 0x00C0); // 192 bytes (0x0000C0 - 0x0000C0)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffectUIData_PerformanceScoreModifier) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffect_GroundMovementSpeedModifier) == 0x00C0); // 192 bytes (0x0000C0 - 0x0000C0)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffectUIData_GroundMovementSpeedModifier) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffect_WaterMovementSpeedModifier) == 0x00C0); // 192 bytes (0x0000C0 - 0x0000C0)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffect_MaxStaminaModifier) == 0x00C0); // 192 bytes (0x0000C0 - 0x0000C0)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffectUIData_MaxStaminaModifier) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UPrisonerBodyEffect) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UPrisonerBodyConditionOrSymptom) == 0x00A0); // 160 bytes (0x000040 - 0x0000A0)
static_assert(sizeof(UPrisonerBodyCondition) == 0x00C0); // 192 bytes (0x0000A0 - 0x0000C0)
static_assert(sizeof(UPrisonerBodyCondition_Injury) == 0x00C0); // 192 bytes (0x0000C0 - 0x0000C0)
static_assert(sizeof(FBandage) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FBandages) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UPrisonerBodyCondition_Abrasions) == 0x06E8); // 1768 bytes (0x0000C0 - 0x0006E8)
static_assert(sizeof(UPrisonerBodyConditionUIData) == 0x01A8); // 424 bytes (0x000098 - 0x0001A8)
static_assert(sizeof(UPrisonerBodyConditionUIData_Abrasions) == 0x01E8); // 488 bytes (0x0001A8 - 0x0001E8)
static_assert(sizeof(UPrisonerBodyCondition_AcuteRadiationSyndrome) == 0x0310); // 784 bytes (0x0000C0 - 0x000310)
static_assert(sizeof(UPrisonerBodyConditionUIData_AcuteRadiationSyndrome) == 0x01B0); // 432 bytes (0x0001A8 - 0x0001B0)
static_assert(sizeof(UPrisonerBodyCondition_BandagesTreatment) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UPrisonerBodyCondition_BasicInjury) == 0x0158); // 344 bytes (0x0000C0 - 0x000158)
static_assert(sizeof(UPrisonerBodyCondition_BladderFull) == 0x00E8); // 232 bytes (0x0000C0 - 0x0000E8)
static_assert(sizeof(UPrisonerBodyCondition_BleedingInjury) == 0x0530); // 1328 bytes (0x0000C0 - 0x000530)
static_assert(sizeof(UPrisonerBodyConditionUIData_BleedingInjury) == 0x01E8); // 488 bytes (0x0001A8 - 0x0001E8)
static_assert(sizeof(UPrisonerBodyCondition_BurnInjury) == 0x0618); // 1560 bytes (0x0000C0 - 0x000618)
static_assert(sizeof(UPrisonerBodyConditionUIData_BurnInjury) == 0x01E0); // 480 bytes (0x0001A8 - 0x0001E0)
static_assert(sizeof(UPrisonerBodyCondition_Choking) == 0x00D0); // 208 bytes (0x0000C0 - 0x0000D0)
static_assert(sizeof(UPrisonerBodyCondition_ColonFull) == 0x0100); // 256 bytes (0x0000C0 - 0x000100)
static_assert(sizeof(UPrisonerBodyCondition_Drunkenness) == 0x01F0); // 496 bytes (0x0000C0 - 0x0001F0)
static_assert(sizeof(UPrisonerBodyCondition_EnergyDeficiency) == 0x0168); // 360 bytes (0x0000C0 - 0x000168)
static_assert(sizeof(UPrisonerBodyConditionUIData_EnergyDeficiency) == 0x01B0); // 432 bytes (0x0001A8 - 0x0001B0)
static_assert(sizeof(UPrisonerBodyCondition_Exhaustion) == 0x0170); // 368 bytes (0x0000C0 - 0x000170)
static_assert(sizeof(UPrisonerBodyConditionUIData_Exhaustion) == 0x01C0); // 448 bytes (0x0001A8 - 0x0001C0)
static_assert(sizeof(UPrisonerBodyCondition_FoodDisgust) == 0x0138); // 312 bytes (0x0000C0 - 0x000138)
static_assert(sizeof(UPrisonerBodyConditionUIData_FoodDisgust) == 0x01A8); // 424 bytes (0x0001A8 - 0x0001A8)
static_assert(sizeof(UPrisonerConsumableDigestionHandler_FoodDisgust) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UPrisonerConsumableDigestionHandler_FoodDisgustAntidote) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UPrisonerBodyCondition_FootAbrasions) == 0x06E8); // 1768 bytes (0x0006E8 - 0x0006E8)
static_assert(sizeof(FPrisonerBodyBoneGroupsVsSeverityKey) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FPrisonerBodyBoneGroupsVsSeverity) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FPrisonerBodyMuscleGroupsVsSeverityKey) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FPrisonerBodyMuscleGroupsVsSeverity) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FPrisonerBodyOrganGroupsVsSeverityKey) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FPrisonerBodyOrganGroupsVsSeverity) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UPrisonerBodyCondition_ForeignSubstancePoisoning) == 0x0190); // 400 bytes (0x0000C0 - 0x000190)
static_assert(sizeof(UPrisonerBodyConditionUIData_ForeignSubstancePoisoning) == 0x01D0); // 464 bytes (0x0001A8 - 0x0001D0)
static_assert(sizeof(UPrisonerBodyCondition_HandAbrasions) == 0x06F0); // 1776 bytes (0x0006E8 - 0x0006F0)
static_assert(sizeof(UPrisonerBodyCondition_HealthLow) == 0x0150); // 336 bytes (0x0000C0 - 0x000150)
static_assert(sizeof(UPrisonerBodyCondition_HeavyInjuries) == 0x00E0); // 224 bytes (0x0000C0 - 0x0000E0)
static_assert(sizeof(UPrisonerBodyCondition_Hyperthermia) == 0x0108); // 264 bytes (0x0000C0 - 0x000108)
static_assert(sizeof(UPrisonerBodyConditionUIData_Hyperthermia) == 0x01A8); // 424 bytes (0x0001A8 - 0x0001A8)
static_assert(sizeof(UPrisonerBodyCondition_Hypothermia) == 0x0108); // 264 bytes (0x0000C0 - 0x000108)
static_assert(sizeof(UPrisonerBodyConditionUIData_Hypothermia) == 0x01A8); // 424 bytes (0x0001A8 - 0x0001A8)
static_assert(sizeof(UPrisonerBodyCondition_Infection) == 0x0128); // 296 bytes (0x0000C0 - 0x000128)
static_assert(sizeof(UPrisonerBodyConditionUIData_Infection) == 0x01B8); // 440 bytes (0x0001A8 - 0x0001B8)
static_assert(sizeof(UPrisonerBodyCondition_InhalationPoisoning) == 0x0228); // 552 bytes (0x0000C0 - 0x000228)
static_assert(sizeof(UPrisonerBodyConditionUIData_InhalationPoisoning) == 0x01D0); // 464 bytes (0x0001A8 - 0x0001D0)
static_assert(sizeof(UPrisonerBodyCondition_KillBoxGasPoisoning) == 0x00F8); // 248 bytes (0x0000C0 - 0x0000F8)
static_assert(sizeof(UPrisonerBodyConditionUIData_KillBoxGasPoisoning) == 0x01A8); // 424 bytes (0x0001A8 - 0x0001A8)
static_assert(sizeof(UPrisonerBodyCondition_TimeDrivenSeverity) == 0x0158); // 344 bytes (0x0000C0 - 0x000158)
static_assert(sizeof(UPrisonerBodyCondition_Knockout) == 0x0170); // 368 bytes (0x000158 - 0x000170)
static_assert(sizeof(UPrisonerBodyCondition_NutrientDeficiency) == 0x0170); // 368 bytes (0x0000C0 - 0x000170)
static_assert(sizeof(UPrisonerBodyConditionUIData_NutrientDeficiency) == 0x01B0); // 432 bytes (0x0001A8 - 0x0001B0)
static_assert(sizeof(UPrisonerBodyCondition_Overburdened) == 0x0148); // 328 bytes (0x0000C0 - 0x000148)
static_assert(sizeof(UPrisonerBodyConditionUIData_Overburdened) == 0x01A8); // 424 bytes (0x0001A8 - 0x0001A8)
static_assert(sizeof(FPrisonerActionDifficultyCurve) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UPrisonerBodyCondition_RadiationPresence) == 0x0160); // 352 bytes (0x0000C0 - 0x000160)
static_assert(sizeof(UPrisonerBodyConditionUIData_RadiationPresence) == 0x01C0); // 448 bytes (0x0001A8 - 0x0001C0)
static_assert(sizeof(UPrisonerBodyConditionWithCauses) == 0x00D0); // 208 bytes (0x0000C0 - 0x0000D0)
static_assert(sizeof(UPrisonerBodyCondition_Sepsis) == 0x00F0); // 240 bytes (0x0000D0 - 0x0000F0)
static_assert(sizeof(UPrisonerBodyConditionWithCausesUIData) == 0x01B8); // 440 bytes (0x0001A8 - 0x0001B8)
static_assert(sizeof(UPrisonerBodyConditionUIData_Sepsis) == 0x01C0); // 448 bytes (0x0001B8 - 0x0001C0)
static_assert(sizeof(UPrisonerBodyCondition_StaminaLow) == 0x0100); // 256 bytes (0x0000C0 - 0x000100)
static_assert(sizeof(UPrisonerBodyCondition_StomachEmpty) == 0x00E0); // 224 bytes (0x0000C0 - 0x0000E0)
static_assert(sizeof(UPrisonerBodyCondition_StomachFull) == 0x0138); // 312 bytes (0x0000C0 - 0x000138)
static_assert(sizeof(UPrisonerBodyCondition_TearGasExposure) == 0x0160); // 352 bytes (0x0000C0 - 0x000160)
static_assert(sizeof(UPrisonerBodyCondition_TrenchFoot) == 0x06F8); // 1784 bytes (0x0000C0 - 0x0006F8)
static_assert(sizeof(UPrisonerBodyConditionUIData_TrenchFoot) == 0x01B0); // 432 bytes (0x0001A8 - 0x0001B0)
static_assert(sizeof(UPrisonerBodyCondition_TutorialInjury) == 0x0338); // 824 bytes (0x0000C0 - 0x000338)
static_assert(sizeof(UPrisonerBodyConditionUIData_TutorialInjury) == 0x01B0); // 432 bytes (0x0001A8 - 0x0001B0)
static_assert(sizeof(UPrisonerBodyConditionCause) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UPrisonerBodyConditionCause_Sepsis) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UPrisonerBodyConditionCauseUIData) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UPrisonerBodyConditionCauseUIData_Sepsis) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UPrisonerBodyConditionInteraction) == 0x0080); // 128 bytes (0x000028 - 0x000080)
static_assert(sizeof(UPrisonerBodyConditionInteraction_RemoveBandages) == 0x0088); // 136 bytes (0x000080 - 0x000088)
static_assert(sizeof(UPrisonerBodyConditionInteractionQueryResults) == 0x00A0); // 160 bytes (0x000028 - 0x0000A0)
static_assert(sizeof(UPrisonerBodyConditionInteractionItemTag) == 0x0090); // 144 bytes (0x000030 - 0x000090)
static_assert(sizeof(UPrisonerBodyConditionTreatInteractionItemTag) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(FPBCTIIT_ApplyBandagesOrDisinfect_Disinfect_PerSkillData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UPBCTIIT_ApplyBandagesOrDisinfect_Disinfect) == 0x0100); // 256 bytes (0x000090 - 0x000100)
static_assert(sizeof(FPBCTIIT_ApplyBandagesOrDisinfect_ApplyBandages_PerSkillData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UPBCTIIT_ApplyBandagesOrDisinfect_ApplyBandages) == 0x0110); // 272 bytes (0x000090 - 0x000110)
static_assert(sizeof(UPBCIQR_ApplyBandagesOrDisinfect_Disinfect) == 0x00A8); // 168 bytes (0x0000A0 - 0x0000A8)
static_assert(sizeof(UPBCIQR_ApplyBandagesOrDisinfect_ApplyBandages) == 0x00C0); // 192 bytes (0x0000A0 - 0x0000C0)
static_assert(sizeof(UPrisonerBodyConditionTreatInteraction) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(FPBCTI_ApplyBandagesOrDisinfect_DisinfectData) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FPBCTI_ApplyBandagesOrDisinfect_ApplyBandagesData) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(UPrisonerBodyConditionTreatInteraction_ApplyBandagesOrDisinfect) == 0x0128); // 296 bytes (0x000080 - 0x000128)
static_assert(sizeof(FPBCTIIT_ApplyGel_PerSkillData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UPBCTIIT_ApplyGel) == 0x0100); // 256 bytes (0x000090 - 0x000100)
static_assert(sizeof(UPBCIQR_ApplyGel) == 0x00A8); // 168 bytes (0x0000A0 - 0x0000A8)
static_assert(sizeof(FPBCTI_ApplyGelData) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(UPrisonerBodyConditionTreatInteraction_ApplyGel) == 0x00C0); // 192 bytes (0x000080 - 0x0000C0)
static_assert(sizeof(UPrisonerBodyEffect_AntibioticsReaction) == 0x00D0); // 208 bytes (0x000040 - 0x0000D0)
static_assert(sizeof(UPrisonerBodyEffectUIData_AntibioticsReaction) == 0x0060); // 96 bytes (0x000040 - 0x000060)
static_assert(sizeof(UPrisonerBodyEffect_Coma) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UPrisonerBodyEffect_CoolingSwingItem) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UPrisonerBodyEffect_Death) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UPrisonerBodyEffect_ExhaustionChange) == 0x0088); // 136 bytes (0x000040 - 0x000088)
static_assert(sizeof(UPrisonerBodyEffectUIData_ExhaustionChange) == 0x0078); // 120 bytes (0x000040 - 0x000078)
static_assert(sizeof(UPrisonerBodyEffect_InfectionController) == 0x00D0); // 208 bytes (0x000040 - 0x0000D0)
static_assert(sizeof(UPrisonerBodyEffect_Limping) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UPrisonerBodyEffect_NotificationCooldown) == 0x0050); // 80 bytes (0x000040 - 0x000050)
static_assert(sizeof(UPrisonerBodyMuscleGroupToInfectionClassMappings) == 0x00F8); // 248 bytes (0x000030 - 0x0000F8)
static_assert(sizeof(UAsepsisItemTag) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UPrisonerBodyInfectionStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UPrisonerBodySimulationComponent) == 0x0728); // 1832 bytes (0x0000B0 - 0x000728)
static_assert(sizeof(FPrisonerBodySimulationData_ConsumableDigestionHandlersForValueRange) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FPrisonerBodySimulationData_ConsumableDigestionHandlersForValueRanges) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FPrisonerBodySimulationData_Effects_ExhaustionChange) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FPrisonerBodySimulationData_Effects) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(UPrisonerBodySimulationData) == 0x0708); // 1800 bytes (0x000030 - 0x000708)
static_assert(sizeof(FPrisonerBodyEffectSave) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UPrisonerBodySimulationSave) == 0x00C8); // 200 bytes (0x000028 - 0x0000C8)
static_assert(sizeof(UPrisonerBodySimulationStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UPrisonerBodySimulationUIDataImpl) == 0x0110); // 272 bytes (0x000058 - 0x000110)
static_assert(sizeof(UPrisonerBodySimulationUIStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UPrisonerBodySymptom) == 0x00B8); // 184 bytes (0x0000A0 - 0x0000B8)
static_assert(sizeof(UPrisonerBodySymptom_AttributeChange) == 0x0108); // 264 bytes (0x0000B8 - 0x000108)
static_assert(sizeof(UPrisonerBodySymptomUIData) == 0x00B0); // 176 bytes (0x000098 - 0x0000B0)
static_assert(sizeof(UPrisonerBodySymptomUIData_AttributeChange) == 0x00C0); // 192 bytes (0x0000B0 - 0x0000C0)
static_assert(sizeof(UPrisonerBodySymptomCause) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UPrisonerBodySymptomCause_Blackout) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UPrisonerBodySymptom_Blackout) == 0x00B8); // 184 bytes (0x0000B8 - 0x0000B8)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffect_Blackout) == 0x00C8); // 200 bytes (0x000030 - 0x0000C8)
static_assert(sizeof(UPrisonerBodySymptomCause_Bleeding) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UPrisonerBodySymptom_Bleeding) == 0x0260); // 608 bytes (0x0000B8 - 0x000260)
static_assert(sizeof(UPrisonerBodySymptomUIData_Bleeding) == 0x00B8); // 184 bytes (0x0000B0 - 0x0000B8)
static_assert(sizeof(UPrisonerBodySymptomCause_BloodshotEyes) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UPrisonerBodySymptom_BloodshotEyes) == 0x00C0); // 192 bytes (0x0000B8 - 0x0000C0)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffect_BloodshotEyes) == 0x00D0); // 208 bytes (0x000030 - 0x0000D0)
static_assert(sizeof(UPrisonerBodySymptomCause_BlurredVision) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UPrisonerBodySymptom_BlurredVision) == 0x00D0); // 208 bytes (0x0000B8 - 0x0000D0)
static_assert(sizeof(UPrisonerBodySymptomUIData_BlurredVision) == 0x00B0); // 176 bytes (0x0000B0 - 0x0000B0)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffect_BlurredVision) == 0x01D8); // 472 bytes (0x000030 - 0x0001D8)
static_assert(sizeof(UPrisonerBodySymptom_BoostOfEnergy) == 0x0148); // 328 bytes (0x0000B8 - 0x000148)
static_assert(sizeof(UPrisonerBodySymptomUIData_BoostOfEnergy) == 0x00D8); // 216 bytes (0x0000B0 - 0x0000D8)
static_assert(sizeof(UPrisonerBodySymptom_BreathingObstructed) == 0x00C0); // 192 bytes (0x0000B8 - 0x0000C0)
static_assert(sizeof(UPrisonerBodySymptomUIData_BreathingObstructed) == 0x00B0); // 176 bytes (0x0000B0 - 0x0000B0)
static_assert(sizeof(UPrisonerBodySymptomCause_PeriodicSound) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UPrisonerBodySymptomCause_Burping) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UPrisonerBodySymptom_PeriodicSound) == 0x00D8); // 216 bytes (0x0000B8 - 0x0000D8)
static_assert(sizeof(UPrisonerBodySymptom_Burping) == 0x00D8); // 216 bytes (0x0000D8 - 0x0000D8)
static_assert(sizeof(UPrisonerBodySymptomCause_PeriodicAffect) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UPrisonerBodySymptomCause_Diarrhea) == 0x0048); // 72 bytes (0x000048 - 0x000048)
static_assert(sizeof(UPrisonerBodySymptom_PeriodicAffect) == 0x00E8); // 232 bytes (0x0000B8 - 0x0000E8)
static_assert(sizeof(UPrisonerBodySymptom_Diarrhea) == 0x00E8); // 232 bytes (0x0000E8 - 0x0000E8)
static_assert(sizeof(UPrisonerBodySymptomCause_Disorientation) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UPrisonerBodySymptom_Disorientation) == 0x00C0); // 192 bytes (0x0000B8 - 0x0000C0)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffect_Disorientation) == 0x00D0); // 208 bytes (0x000030 - 0x0000D0)
static_assert(sizeof(UPrisonerBodySymptomCause_Dizziness) == 0x0048); // 72 bytes (0x000048 - 0x000048)
static_assert(sizeof(UPrisonerBodySymptom_Dizziness) == 0x0298); // 664 bytes (0x0000E8 - 0x000298)
static_assert(sizeof(UPrisonerBodySymptomCause_DoubleVision) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UPrisonerBodySymptom_DoubleVision) == 0x00C0); // 192 bytes (0x0000B8 - 0x0000C0)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffect_DoubleVision) == 0x00D0); // 208 bytes (0x000030 - 0x0000D0)
static_assert(sizeof(UPrisonerBodySymptomCause_EyePressure) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UPrisonerBodySymptom_EyePressure) == 0x00C0); // 192 bytes (0x0000B8 - 0x0000C0)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffect_EyePressure) == 0x00D0); // 208 bytes (0x000030 - 0x0000D0)
static_assert(sizeof(UPrisonerBodySymptomCause_Farting) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UPrisonerBodySymptom_Farting) == 0x00D8); // 216 bytes (0x0000D8 - 0x0000D8)
static_assert(sizeof(UPrisonerBodySymptomCause_Fatigue) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UPrisonerBodySymptom_Fatigue) == 0x00C0); // 192 bytes (0x0000B8 - 0x0000C0)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffect_Fatigue) == 0x00D0); // 208 bytes (0x000030 - 0x0000D0)
static_assert(sizeof(UPrisonerBodySymptomUIData_Fatigue) == 0x00B8); // 184 bytes (0x0000B0 - 0x0000B8)
static_assert(sizeof(UPrisonerBodySymptomCauseUIData) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UPrisonerBodySymptomCauseUIData_Fatigue) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UPrisonerBodySymptom_FeelingCold) == 0x00C0); // 192 bytes (0x0000B8 - 0x0000C0)
static_assert(sizeof(UPrisonerBodySymptomUIData_FeelingCold) == 0x00B0); // 176 bytes (0x0000B0 - 0x0000B0)
static_assert(sizeof(UPrisonerBodySymptom_FeelingHot) == 0x00C0); // 192 bytes (0x0000B8 - 0x0000C0)
static_assert(sizeof(UPrisonerBodySymptomUIData_FeelingHot) == 0x00B0); // 176 bytes (0x0000B0 - 0x0000B0)
static_assert(sizeof(UPrisonerBodySymptomCause_Hallucinations) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(FPrisonerHallucinationSymptomSeverityLevelParams) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FPrisonerHallucinationIllusionInfo) == 0x0088); // 136 bytes (0x000000 - 0x000088)
static_assert(sizeof(UPrisonerBodySymptom_Hallucinations) == 0x0228); // 552 bytes (0x0000B8 - 0x000228)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffect_Hallucinations) == 0x00C8); // 200 bytes (0x000030 - 0x0000C8)
static_assert(sizeof(UPrisonerHallucinationEpisode) == 0x0110); // 272 bytes (0x000028 - 0x000110)
static_assert(sizeof(UPrisonerBodySymptomCause_HeightenedSenses) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UPrisonerBodySymptom_HeightenedSenses) == 0x00C0); // 192 bytes (0x0000B8 - 0x0000C0)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffect_HeightenedSenses) == 0x00D0); // 208 bytes (0x000030 - 0x0000D0)
static_assert(sizeof(UPrisonerBodySymptom_Hunger) == 0x0140); // 320 bytes (0x0000B8 - 0x000140)
static_assert(sizeof(UPrisonerBodySymptomCause_Leukopenia) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UPrisonerBodySymptom_Leukopenia) == 0x00C0); // 192 bytes (0x0000B8 - 0x0000C0)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffect_Leukopenia) == 0x00D0); // 208 bytes (0x000030 - 0x0000D0)
static_assert(sizeof(UPrisonerBodySymptomUIData_Leukopenia) == 0x00B8); // 184 bytes (0x0000B0 - 0x0000B8)
static_assert(sizeof(UPrisonerBodySymptomCauseUIData_Leukopenia) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UPrisonerBodySymptomCause_Nausea) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UPrisonerBodySymptom_Nausea) == 0x00C0); // 192 bytes (0x0000B8 - 0x0000C0)
static_assert(sizeof(UPrisonerBodySymptomUIData_Nausea) == 0x00B8); // 184 bytes (0x0000B0 - 0x0000B8)
static_assert(sizeof(UPrisonerBodySymptom_NeedToDefecate) == 0x0140); // 320 bytes (0x0000B8 - 0x000140)
static_assert(sizeof(UPrisonerBodySymptom_NeedToUrinate) == 0x0140); // 320 bytes (0x0000B8 - 0x000140)
static_assert(sizeof(UPrisonerBodySymptomCause_Pain) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UPrisonerBodySymptom_Pain) == 0x00C8); // 200 bytes (0x0000B8 - 0x0000C8)
static_assert(sizeof(UPrisonerBodySymptomUIData_Pain) == 0x00C8); // 200 bytes (0x0000B0 - 0x0000C8)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffect_PeriodicAffect) == 0x0160); // 352 bytes (0x000030 - 0x000160)
static_assert(sizeof(UPrisonerBodySymptomCause_PhoenixTearsPresence) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UPrisonerBodySymptom_PhoenixTearsPresence) == 0x00B8); // 184 bytes (0x0000B8 - 0x0000B8)
static_assert(sizeof(UPrisonerBodySymptomUIData_PhoenixTearsPresence) == 0x00B8); // 184 bytes (0x0000B0 - 0x0000B8)
static_assert(sizeof(UPrisonerBodySymptom_StomachFullness) == 0x01C8); // 456 bytes (0x0000B8 - 0x0001C8)
static_assert(sizeof(UPrisonerBodySymptomUIData_StomachFullness) == 0x00B8); // 184 bytes (0x0000B0 - 0x0000B8)
static_assert(sizeof(UPrisonerBodySymptomCause_StomachGrowling) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UPrisonerBodySymptom_StomachGrowling) == 0x00D8); // 216 bytes (0x0000D8 - 0x0000D8)
static_assert(sizeof(UPrisonerBodySymptom_Thirst) == 0x0140); // 320 bytes (0x0000B8 - 0x000140)
static_assert(sizeof(UPrisonerBodySymptomCause_Unconsciousness) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UPrisonerBodySymptom_Unconsciousness) == 0x00B8); // 184 bytes (0x0000B8 - 0x0000B8)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffect_Unconsciousness) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UPrisonerBodySymptomCause_Vomiting) == 0x0048); // 72 bytes (0x000048 - 0x000048)
static_assert(sizeof(UPrisonerBodySymptom_Vomiting) == 0x0100); // 256 bytes (0x0000E8 - 0x000100)
static_assert(sizeof(UPrisonerBodySymptomCause_Weakness) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UPrisonerBodySymptom_Weakness) == 0x00C0); // 192 bytes (0x0000B8 - 0x0000C0)
static_assert(sizeof(UPrisonerBodyConditionOrSymptomSideEffect_Weakness) == 0x00D8); // 216 bytes (0x000030 - 0x0000D8)
static_assert(sizeof(UPrisonerBodySymptomUIData_Weakness) == 0x00C0); // 192 bytes (0x0000B0 - 0x0000C0)
static_assert(sizeof(UPrisonerBodySymptomCauseUIData_Weakness) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UPrisonerBodySymptom_WetFeet) == 0x0148); // 328 bytes (0x0000B8 - 0x000148)
static_assert(sizeof(UPrisonerBodySymptomUIData_WetFeet) == 0x00B8); // 184 bytes (0x0000B0 - 0x0000B8)
static_assert(sizeof(UPrisonerBodySymptomNotifier) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FBasicPrisonerBodySymptomNotificationParameters) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UBasicPrisonerBodySymptomNotifier) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UPrisonerBuryComponent) == 0x00C8); // 200 bytes (0x0000C0 - 0x0000C8)
static_assert(sizeof(FPrisonerCharacterMeshDecayMultiplierData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UPrisonerCharacterMesh) == 0x0090); // 144 bytes (0x000060 - 0x000090)
static_assert(sizeof(FPrisonerMeleeAttackTypes) == 0x0088); // 136 bytes (0x000000 - 0x000088)
static_assert(sizeof(FPrisonerTurnMontageDescription) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FThrowingAnimationSet) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FPrisonerCommonData_ResponseIdles) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UPrisonerCommonData) == 0x1250); // 4688 bytes (0x000030 - 0x001250)
static_assert(sizeof(UPrisonerConsumableDigestionHandler_Exhaustion) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UPrisonerConsumableUserData) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(FCorpseSkeletalMeshRepData) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FCorpseStaticMeshRepData) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FCorpsePoseData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(APrisonerCorpse) == 0x0750); // 1872 bytes (0x000220 - 0x000750)
static_assert(sizeof(UPrisonerCreationUIController) == 0x04B0); // 1200 bytes (0x000028 - 0x0004B0)
static_assert(sizeof(UPrisonerUIDebugData) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UPrisonerDebugUI_SkillItem) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UPrisonerDebugUI_SkillEntryWidget) == 0x0278); // 632 bytes (0x000268 - 0x000278)
static_assert(sizeof(UPrisonerDebugUI_BodyConditionItem) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UPrisonerDebugUI_BodyStateItem) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UPrisonerDebugUI_BodyEffectItem) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UPrisonerDebugUI_BodyConditionEntryWidget) == 0x0278); // 632 bytes (0x000268 - 0x000278)
static_assert(sizeof(UPrisonerDebugUI_MainWidget) == 0x02F8); // 760 bytes (0x000268 - 0x0002F8)
static_assert(sizeof(UPrisonerEntitySetup) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(UPrisonerExcretionUserData) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UPrisonerFirstPersonSubviewComponent) == 0x08C0); // 2240 bytes (0x0007D0 - 0x0008C0)
static_assert(sizeof(UPrisonerFirstPersonVehicleAimingSubviewComponent) == 0x08C0); // 2240 bytes (0x0008C0 - 0x0008C0)
static_assert(sizeof(UPrisonerViewComponent) == 0x00D0); // 208 bytes (0x0000B0 - 0x0000D0)
static_assert(sizeof(FPrisonerFirstPersonSubviewBlendOverride) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UPrisonerFirstPersonViewComponent) == 0x0210); // 528 bytes (0x0000D0 - 0x000210)
static_assert(sizeof(UPrisonerFishingComponent) == 0x00D0); // 208 bytes (0x0000C0 - 0x0000D0)
static_assert(sizeof(UPrisonerForeignSubstance) == 0x0140); // 320 bytes (0x0000A8 - 0x000140)
static_assert(sizeof(UPrisonerForeignSubstance_Antibiotics) == 0x0140); // 320 bytes (0x000140 - 0x000140)
static_assert(sizeof(UPrisonerForeignSubstance_AttributeModifier) == 0x0160); // 352 bytes (0x000140 - 0x000160)
static_assert(sizeof(UPrisonerForeignSubstance_Painkillers) == 0x0140); // 320 bytes (0x000140 - 0x000140)
static_assert(sizeof(UPrisonerForeignSubstance_Toxins) == 0x0140); // 320 bytes (0x000140 - 0x000140)
static_assert(sizeof(UPrisonerForeignSubstanceStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(APrisonerHallucinationIllusion) == 0x0220); // 544 bytes (0x000220 - 0x000220)
static_assert(sizeof(APrisonerHallucinationIllusion_SeeFirearmsAsSticksAndBananas) == 0x0240); // 576 bytes (0x000220 - 0x000240)
static_assert(sizeof(APrisonerHallucinationIllusion_SeeOtherPlayersExtremelyFatOrSkinny) == 0x0270); // 624 bytes (0x000220 - 0x000270)
static_assert(sizeof(APrisonerHallucinationIllusion_SeeOtherPlayersWithWeirdMasks) == 0x0250); // 592 bytes (0x000220 - 0x000250)
static_assert(sizeof(APrisonerHallucinationIllusion_SpawnCompanionCrow) == 0x0520); // 1312 bytes (0x000220 - 0x000520)
static_assert(sizeof(APrisonerHallucinationIllusion_SpawnFakeItemsThatDisappearOnPickup) == 0x0288); // 648 bytes (0x000220 - 0x000288)
static_assert(sizeof(APrisonerHallucinationIllusion_SpawnMiniatureZombies) == 0x0288); // 648 bytes (0x000220 - 0x000288)
static_assert(sizeof(FMapHUDObject) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FMapHUDPrisonerObject) == 0x0040); // 64 bytes (0x000018 - 0x000040)
static_assert(sizeof(FMapHUDHomeLocationObject) == 0x0048); // 72 bytes (0x000018 - 0x000048)
static_assert(sizeof(FMapHUDWorldEventsObject) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FMapHUDOtherPlayersObject) == 0x00C0); // 192 bytes (0x000018 - 0x0000C0)
static_assert(sizeof(FMapHUDDroneObject) == 0x0038); // 56 bytes (0x000018 - 0x000038)
static_assert(sizeof(FMapHUDVehiclesObject) == 0x00C0); // 192 bytes (0x000018 - 0x0000C0)
static_assert(sizeof(FMapHUDFlagsObject) == 0x00C0); // 192 bytes (0x000018 - 0x0000C0)
static_assert(sizeof(FMapHUDQuestObject) == 0x0080); // 128 bytes (0x000018 - 0x000080)
static_assert(sizeof(APrisonerHUD) == 0x0A00); // 2560 bytes (0x000348 - 0x000A00)
static_assert(sizeof(FClothesPartSet) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(UPrisonerInventoryComponent) == 0x03A0); // 928 bytes (0x0000B0 - 0x0003A0)
static_assert(sizeof(UPrisonerLifeIndicatorsSprite) == 0x0378); // 888 bytes (0x000268 - 0x000378)
static_assert(sizeof(UPrisonerSpawnEquipment) == 0x00A8); // 168 bytes (0x000030 - 0x0000A8)
static_assert(sizeof(UPrisonerLoadout) == 0x0098); // 152 bytes (0x000030 - 0x000098)
static_assert(sizeof(UPrisonerMakeoverUIController) == 0x0188); // 392 bytes (0x000028 - 0x000188)
static_assert(sizeof(UPrisonerMeshManager) == 0x08D0); // 2256 bytes (0x000230 - 0x0008D0)
static_assert(sizeof(UPrisonerMetabolismUIData) == 0x0100); // 256 bytes (0x000028 - 0x000100)
static_assert(sizeof(UPrisonerMetabolismUIDataImpl) == 0x03C8); // 968 bytes (0x000100 - 0x0003C8)
static_assert(sizeof(FPrisonerGroundStanceData) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FPrisonerAquaticModeData) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FPrisonerAerialPosePair) == 0x0002); // 2 bytes (0x000000 - 0x000002)
static_assert(sizeof(FPrisonerAerialPoseTransition) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FWindowMantlingAnimationInfo) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FLedgeMantlingAnimationInfo) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FPrisonerMovementParams) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FConditionalPrisonerMovementParams) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(UPrisonerMovementCommonData) == 0x0380); // 896 bytes (0x000030 - 0x000380)
static_assert(sizeof(FPrisonerClimbAnimationInfo) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FWaterForceWhenSwimmingParams) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FLadderInfoRepData) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(UPrisonerMovementComponent) == 0x1550); // 5456 bytes (0x000DA0 - 0x001550)
static_assert(sizeof(FPrisonerMovementSettings_Ground) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FPrisonerMovementSettings_Air) == 0x00F8); // 248 bytes (0x000000 - 0x0000F8)
static_assert(sizeof(FPrisonerMovementSettings_Water) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FPrisonerMovementSettings_Misc) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UPrisonerMovementSettings) == 0x01A0); // 416 bytes (0x000030 - 0x0001A0)
static_assert(sizeof(UPrisonerMovementDebugWidget) == 0x0280); // 640 bytes (0x000268 - 0x000280)
static_assert(sizeof(UPrisonerMusicPlayerComponent) == 0x0150); // 336 bytes (0x0000C0 - 0x000150)
static_assert(sizeof(UPrisonerNameChangeRequest) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(UPrisonerNameChangeResponse) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UPrisonerPhotoModeAnimInstance) == 0x0380); // 896 bytes (0x0002B8 - 0x000380)
static_assert(sizeof(UPrisonerPrisonWalletComponent) == 0x0180); // 384 bytes (0x0000C0 - 0x000180)
static_assert(sizeof(UPrisonerResponseIdle) == 0x0098); // 152 bytes (0x000028 - 0x000098)
static_assert(sizeof(UPrisonerResponseIdle_StaminaInRange) == 0x00A8); // 168 bytes (0x000098 - 0x0000A8)
static_assert(sizeof(UPrisonerResponseIdle_BodyConditionOrSymptomPresence) == 0x00B0); // 176 bytes (0x000098 - 0x0000B0)
static_assert(sizeof(UPrisonerResponseIdle_NeedToUrinate) == 0x0098); // 152 bytes (0x000098 - 0x000098)
static_assert(sizeof(UPrisonerResponseIdle_NeedToDefecate) == 0x0098); // 152 bytes (0x000098 - 0x000098)
static_assert(sizeof(FPrisonerRestingData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FPrisonerRestingDataAutonomous) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(UPrisonerRestingComponent) == 0x0120); // 288 bytes (0x0000C0 - 0x000120)
static_assert(sizeof(UTeleportUserData) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UPrisonerTeleportUserData) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UPrisonerShotsFiredTrackerComponent) == 0x00C0); // 192 bytes (0x0000B0 - 0x0000C0)
static_assert(sizeof(FPrisonerInitialSkillInfo) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSkillRecord) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UPrisonerSkillComponent) == 0x02C0); // 704 bytes (0x0000B0 - 0x0002C0)
static_assert(sizeof(UPrisonerSkillsUIDataImpl) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(FActiveMovingThroughFoliageSounds) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UPrisonerSoundComponent) == 0x02F8); // 760 bytes (0x000128 - 0x0002F8)
static_assert(sizeof(UPrisonerStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UPrisonerSubview) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UPrisonerThirdPersonAerialSubviewComponent) == 0x07B0); // 1968 bytes (0x0001F8 - 0x0007B0)
static_assert(sizeof(FLocalOffsetCurves) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UPrisonerThirdPersonSubviewComponent) == 0x0900); // 2304 bytes (0x000290 - 0x000900)
static_assert(sizeof(FPrisonerThirdPersonSubviewBlendOverride) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UPrisonerThirdPersonViewComponent) == 0x0200); // 512 bytes (0x0000D0 - 0x000200)
static_assert(sizeof(UPrisonerThrowComponent) == 0x00D0); // 208 bytes (0x0000C0 - 0x0000D0)
static_assert(sizeof(UPrisonerTradingComponent) == 0x00C8); // 200 bytes (0x0000B0 - 0x0000C8)
static_assert(sizeof(UPrisonerTreatmentUIController) == 0x0268); // 616 bytes (0x000028 - 0x000268)
static_assert(sizeof(UPrisonerUIDataController) == 0x0358); // 856 bytes (0x000028 - 0x000358)
static_assert(sizeof(UPrisonerUIDataImpl) == 0x0848); // 2120 bytes (0x000808 - 0x000848)
static_assert(sizeof(UPrisonerUIDataRequest) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UPrisonerUIDataResponse) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UPrisonerUIDebugDataRequest) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UPrisonerUIDebugDataResponse) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UPrisonerUIStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UPrisonerUITooltipCache) == 0x01B8); // 440 bytes (0x000028 - 0x0001B8)
static_assert(sizeof(UPrisonerActionDismountWeaponFromVehicle) == 0x0138); // 312 bytes (0x000120 - 0x000138)
static_assert(sizeof(UPrisonerActionDismountWeaponFromVehicleDescription) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UPrisonerVehicleAction_ForcePush) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerVehicleAction_ForcePushDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPrisonerVehicleAction_ForceUnmount) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerVehicleAction_ForceUnmountDescription) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UPrisonerVehicleAction_InstallAttachment) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerVehicleAction_InstallAttachmentDescription) == 0x0090); // 144 bytes (0x000038 - 0x000090)
static_assert(sizeof(UPrisonerVehicleAction_ModifyAttachmentPaintjob) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerVehicleAction_ModifyAttachmentPaintjobDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPrisonerVehicleAction_Mount) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerVehicleAction_MountDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPrisonerActionMountWeaponToVehicle) == 0x0138); // 312 bytes (0x000120 - 0x000138)
static_assert(sizeof(UPrisonerActionMountWeaponToVehicleDescription) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UPrisonerVehicleAction_OpenOrCloseDoor) == 0x0138); // 312 bytes (0x000120 - 0x000138)
static_assert(sizeof(UPrisonerVehicleAction_OpenOrCloseDoorDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPrisonerVehicleAction_QuickInstallAttachment) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerVehicleAction_QuickInstallAttachmentDescription) == 0x0068); // 104 bytes (0x000038 - 0x000068)
static_assert(sizeof(UPrisonerVehicleAction_QuickRemoveAttachment) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerVehicleAction_QuickRemoveAttachmentDescription) == 0x0068); // 104 bytes (0x000038 - 0x000068)
static_assert(sizeof(UPrisonerVehicleAction_QuickRepairAttachment) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerVehicleAction_QuickRepairAttachmentDescription) == 0x0068); // 104 bytes (0x000038 - 0x000068)
static_assert(sizeof(UPrisonerVehicleAction_RemoveAttachment) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerVehicleAction_RemoveAttachmentDescription) == 0x0088); // 136 bytes (0x000038 - 0x000088)
static_assert(sizeof(UPrisonerVehicleAction_RepairAttachment) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPrisonerVehicleAction_RepairAttachmentDescription) == 0x0080); // 128 bytes (0x000038 - 0x000080)
static_assert(sizeof(UPrisonerVehicleAction_SetupCarJack) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerVehicleAction_SetupCarJackDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPrisonerVehicleAction_SwitchMountSlot) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPrisonerVehicleAction_SwitchMountSlotDescription) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UPrisonerVehicleAction_Unmount) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPrisonerVehicleAction_UnmountDescription) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(FProjectileData) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FFiredShotDescriptionRep) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(AProjectile) == 0x0468); // 1128 bytes (0x000220 - 0x000468)
static_assert(sizeof(UAmmunitionArrowSpawningParams) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(FProjectileArrowData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(AProjectileArrow) == 0x04A8); // 1192 bytes (0x000468 - 0x0004A8)
static_assert(sizeof(AProjectileExplosive) == 0x04A8); // 1192 bytes (0x000468 - 0x0004A8)
static_assert(sizeof(UExplosiveAmmunitionArrowSpawningParams) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(AProjectileExplosiveArrow) == 0x04A8); // 1192 bytes (0x0004A8 - 0x0004A8)
static_assert(sizeof(AProjectileFlare) == 0x04E0); // 1248 bytes (0x000468 - 0x0004E0)
static_assert(sizeof(AProjectileGrenade) == 0x04A8); // 1192 bytes (0x0004A8 - 0x0004A8)
static_assert(sizeof(FImpactEffectData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UProjectileImpactEffects) == 0x0470); // 1136 bytes (0x000030 - 0x000470)
static_assert(sizeof(UProjectilePool) == 0x0088); // 136 bytes (0x000028 - 0x000088)
static_assert(sizeof(AProjectileRocket) == 0x04D8); // 1240 bytes (0x0004A8 - 0x0004D8)
static_assert(sizeof(AProjectileShotgun) == 0x0478); // 1144 bytes (0x000468 - 0x000478)
static_assert(sizeof(UProjectileStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UQuartalPieProgressBar) == 0x0280); // 640 bytes (0x000268 - 0x000280)
static_assert(sizeof(UQuestInteractableAssetUserData) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(AQuestBook) == 0x0260); // 608 bytes (0x000220 - 0x000260)
static_assert(sizeof(AQuestBookMinigame) == 0x03E0); // 992 bytes (0x000340 - 0x0003E0)
static_assert(sizeof(UQuestBookMinigameConfiguration) == 0x0058); // 88 bytes (0x000050 - 0x000058)
static_assert(sizeof(UQuestBookMinigameWidget) == 0x0318); // 792 bytes (0x000280 - 0x000318)
static_assert(sizeof(UQuestBookPagesWidget) == 0x0290); // 656 bytes (0x000268 - 0x000290)
static_assert(sizeof(FPageSplatterInfo) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UQuestBookPageWidget) == 0x03E8); // 1000 bytes (0x000268 - 0x0003E8)
static_assert(sizeof(UQuestCommonData) == 0x00A8); // 168 bytes (0x000030 - 0x0000A8)
static_assert(sizeof(FMapLocationMarker) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UQuestCondition) == 0x0078); // 120 bytes (0x000028 - 0x000078)
static_assert(sizeof(UQuestCondition_BodyCondition) == 0x00A8); // 168 bytes (0x000078 - 0x0000A8)
static_assert(sizeof(UQuestCondition_CircularMenuOpened) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UQuestCondition_CircularSubMenuOpened) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UQuestCondition_ClickUIButton) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UQuestCondition_CustomZone) == 0x0088); // 136 bytes (0x000078 - 0x000088)
static_assert(sizeof(UQuestCondition_DrivingWaypoint) == 0x00B8); // 184 bytes (0x000078 - 0x0000B8)
static_assert(sizeof(UQuestCondition_Elimination) == 0x00E0); // 224 bytes (0x000078 - 0x0000E0)
static_assert(sizeof(UQuestCondition_HudMode) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UQuestCondition_InputMapping) == 0x00B8); // 184 bytes (0x000078 - 0x0000B8)
static_assert(sizeof(UQuestCondition_Interactable) == 0x00B0); // 176 bytes (0x000078 - 0x0000B0)
static_assert(sizeof(FInteractableDescription) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(UQuestCondition_InteractablePersistentMesh) == 0x00D0); // 208 bytes (0x0000B0 - 0x0000D0)
static_assert(sizeof(UQuestCondition_InteractableUserData) == 0x00F8); // 248 bytes (0x0000B0 - 0x0000F8)
static_assert(sizeof(UQuestCondition_ItemEquipped) == 0x00A8); // 168 bytes (0x000078 - 0x0000A8)
static_assert(sizeof(FQuestItem) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FQuestItemSet_Data) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UQuestItemSet_Asset) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UQuestCondition_ItemSet) == 0x00A0); // 160 bytes (0x000078 - 0x0000A0)
static_assert(sizeof(FVicinityItems) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UQuestCondition_ItemsInVicinity) == 0x0088); // 136 bytes (0x000078 - 0x000088)
static_assert(sizeof(UQuestCondition_PlaceableActor) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UQuestCondition_PrisonerActionMatcher) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UQuestCondition_PrisonerActionMatcher_CraftItem) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UQuestCondition_PrisonerActionMatcher_CutObject) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UQuestCondition_PrisonerActionMatcher_LightFire) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UQuestCondition_PrisonerActionMatcher_FuelFire) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UQuestCondition_PrisonerActionMatcher_ChopObject) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UQuestCondition_PrisonerActionMatcher_SearchObject) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UQuestCondition_PrisonerActionMatcher_ThrowItem) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UQuestCondition_PrisonerActionMatcher_EatItem) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UQuestCondition_PrisonerActionMatcher_ExecuteBodyConditionInteraction) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UQuestCondition_PrisonerAction) == 0x0090); // 144 bytes (0x000078 - 0x000090)
static_assert(sizeof(UQuestCondition_TalkToNPC) == 0x00A0); // 160 bytes (0x000078 - 0x0000A0)
static_assert(sizeof(UQuestCondition_UITabOpen) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UQuestCondition_UITabOpen_ManualWidget) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UQuestCondition_Wait) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(AQuestDrivingWaypoint) == 0x0258); // 600 bytes (0x000220 - 0x000258)
static_assert(sizeof(UQuestEntriesPanelWidget) == 0x02A0); // 672 bytes (0x000268 - 0x0002A0)
static_assert(sizeof(UQuestEntryDetailsPanelWidget) == 0x0380); // 896 bytes (0x000268 - 0x000380)
static_assert(sizeof(UQuestEntryWidget) == 0x02E8); // 744 bytes (0x000268 - 0x0002E8)
static_assert(sizeof(UQuestGiverComponent) == 0x0118); // 280 bytes (0x0000B0 - 0x000118)
static_assert(sizeof(UQuestInteractableComponent) == 0x0510); // 1296 bytes (0x0004F8 - 0x000510)
static_assert(sizeof(AQuestInteractable) == 0x02C0); // 704 bytes (0x000220 - 0x0002C0)
static_assert(sizeof(FQuestGiverSetup) == 0x0110); // 272 bytes (0x000000 - 0x000110)
static_assert(sizeof(FSpecialQuestSetupArray) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(UQuestManagerData) == 0x0178); // 376 bytes (0x000030 - 0x000178)
static_assert(sizeof(FCircularArea) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FCircularAreaGroup) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UCircularAreaGroupComponent) == 0x0210); // 528 bytes (0x0001F8 - 0x000210)
static_assert(sizeof(FComponentSoftPtrWithZeroTransform) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FComponentReferenceCollection) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(AQuestManager) == 0x0688); // 1672 bytes (0x000220 - 0x000688)
static_assert(sizeof(FTraderSpecialDeal) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FQuestRewards) == 0x0128); // 296 bytes (0x000000 - 0x000128)
static_assert(sizeof(UQuestSetup) == 0x0118); // 280 bytes (0x000030 - 0x000118)
static_assert(sizeof(UQuestTimerTextBlock) == 0x0360); // 864 bytes (0x000268 - 0x000360)
static_assert(sizeof(UQuestTrackingCheckbox) == 0x04C8); // 1224 bytes (0x000268 - 0x0004C8)
static_assert(sizeof(FQuestTrackingDataWidgetStyle) == 0x0150); // 336 bytes (0x000000 - 0x000150)
static_assert(sizeof(UQuestTrackingDataWidget) == 0x03D0); // 976 bytes (0x000268 - 0x0003D0)
static_assert(sizeof(UQuestTrackingWidget) == 0x0328); // 808 bytes (0x000268 - 0x000328)
static_assert(sizeof(FQuestGiverUIData) == 0x0098); // 152 bytes (0x000000 - 0x000098)
static_assert(sizeof(UQuestUIData) == 0x0208); // 520 bytes (0x000030 - 0x000208)
static_assert(sizeof(UQuickAccessBarWidget) == 0x02D8); // 728 bytes (0x000268 - 0x0002D8)
static_assert(sizeof(UQuickAccessItemSwitcher3) == 0x02E8); // 744 bytes (0x000268 - 0x0002E8)
static_assert(sizeof(UQuickAccessItemWidget) == 0x03F8); // 1016 bytes (0x000268 - 0x0003F8)
static_assert(sizeof(UQuickAccessManager) == 0x0120); // 288 bytes (0x000028 - 0x000120)
static_assert(sizeof(AQuiver) == 0x1DF0); // 7664 bytes (0x000A40 - 0x001DF0)
static_assert(sizeof(ARabbit2) == 0x09D0); // 2512 bytes (0x0009C8 - 0x0009D0)
static_assert(sizeof(ASimpleAnimalAIController) == 0x04F8); // 1272 bytes (0x000450 - 0x0004F8)
static_assert(sizeof(ARabbit2AIController) == 0x0508); // 1288 bytes (0x0004F8 - 0x000508)
static_assert(sizeof(ARackItem) == 0x0BB0); // 2992 bytes (0x000B90 - 0x000BB0)
static_assert(sizeof(FRadiationSourceDescription) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(ARadiationManager) == 0x02F8); // 760 bytes (0x000220 - 0x0002F8)
static_assert(sizeof(URadioComponent) == 0x0400); // 1024 bytes (0x0003C8 - 0x000400)
static_assert(sizeof(ARadioItem) == 0x09C0); // 2496 bytes (0x0009A0 - 0x0009C0)
static_assert(sizeof(URadioTrack) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(URadioCategory) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(URadioCategoryShuffle) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(URadioProgram) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(FRadioProgramData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(ARadioStation) == 0x0298); // 664 bytes (0x000220 - 0x000298)
static_assert(sizeof(ARagItem) == 0x0AF0); // 2800 bytes (0x0009B8 - 0x000AF0)
static_assert(sizeof(URagItemEntitySave) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(URagItemEntitySetup) == 0x0098); // 152 bytes (0x000090 - 0x000098)
static_assert(sizeof(URaidProtectionSelectionWidget) == 0x0430); // 1072 bytes (0x000268 - 0x000430)
static_assert(sizeof(URainCollectionManager) == 0x0138); // 312 bytes (0x0000B0 - 0x000138)
static_assert(sizeof(URainCollectorComponent) == 0x00F8); // 248 bytes (0x0000C8 - 0x0000F8)
static_assert(sizeof(URangedResourceConsumerComponent) == 0x00F0); // 240 bytes (0x0000C8 - 0x0000F0)
static_assert(sizeof(URangedResourceConsumerComponentMultipleProviders) == 0x00F0); // 240 bytes (0x0000F0 - 0x0000F0)
static_assert(sizeof(URangedResourceConsumerComponentSingleProvider) == 0x00F0); // 240 bytes (0x0000F0 - 0x0000F0)
static_assert(sizeof(FConnectionSaveData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(URangedResourceConsumerEntityComponentSave) == 0x0070); // 112 bytes (0x000028 - 0x000070)
static_assert(sizeof(URangedResourceConsumerEntityComponentSetup) == 0x0068); // 104 bytes (0x000048 - 0x000068)
static_assert(sizeof(URangedResourceConsumerEntityComponentSetupMultipleProviders) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(URangedResourceConsumerEntityComponentStateSingleProvider) == 0x0070); // 112 bytes (0x000070 - 0x000070)
static_assert(sizeof(URangedResourceConsumerEntityComponentSetupSingleProvider) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(URangedResourceProviderComponent) == 0x0118); // 280 bytes (0x0000C8 - 0x000118)
static_assert(sizeof(URangedResourceProviderComponentContinousAmount) == 0x0118); // 280 bytes (0x000118 - 0x000118)
static_assert(sizeof(URangedResourceProviderEntityComponentSave) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(URangedResourceProviderEntityComponentSetup) == 0x0068); // 104 bytes (0x000048 - 0x000068)
static_assert(sizeof(URangedResourceProviderEntityComponentContinousAmountSave) == 0x0060); // 96 bytes (0x000060 - 0x000060)
static_assert(sizeof(URangedResourceProviderEntityComponentContinousAmountSetup) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(ARazor) == 0x0930); // 2352 bytes (0x000828 - 0x000930)
static_assert(sizeof(ARazorAIController) == 0x07B0); // 1968 bytes (0x000450 - 0x0007B0)
static_assert(sizeof(URazorAnimInstance) == 0x03A0); // 928 bytes (0x0002B8 - 0x0003A0)
static_assert(sizeof(FRazorTurnMontageDescription) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FRazorAttackMontageDescription) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FRazorDeathAnimationData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FRazorUpperBodyPitchRangeData) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(URazorCommonData) == 0x02A0); // 672 bytes (0x000030 - 0x0002A0)
static_assert(sizeof(URazorMovementComponent) == 0x0EA0); // 3744 bytes (0x000DA0 - 0x000EA0)
static_assert(sizeof(ARazorSpawnPoint) == 0x02D0); // 720 bytes (0x000220 - 0x0002D0)
static_assert(sizeof(ARecastNavMesh_Brenner) == 0x0578); // 1400 bytes (0x000578 - 0x000578)
static_assert(sizeof(ARecastNavMesh_Humanoids) == 0x0578); // 1400 bytes (0x000578 - 0x000578)
static_assert(sizeof(ARecastNavMesh_LargeAnimals) == 0x0578); // 1400 bytes (0x000578 - 0x000578)
static_assert(sizeof(ARecastNavMesh_Sentries) == 0x0578); // 1400 bytes (0x000578 - 0x000578)
static_assert(sizeof(ARecastNavMesh_SmallAnimals) == 0x0578); // 1400 bytes (0x000578 - 0x000578)
static_assert(sizeof(URecipeIngredientButton) == 0x0320); // 800 bytes (0x000268 - 0x000320)
static_assert(sizeof(ARefrigeratorItem) == 0x0BA0); // 2976 bytes (0x000B90 - 0x000BA0)
static_assert(sizeof(ARegularDoorStatic) == 0x05B0); // 1456 bytes (0x000590 - 0x0005B0)
static_assert(sizeof(ARemoteKeyItem) == 0x09D0); // 2512 bytes (0x0009A0 - 0x0009D0)
static_assert(sizeof(ARemoteSensorItem) == 0x09F0); // 2544 bytes (0x0009A0 - 0x0009F0)
static_assert(sizeof(URemoteSensorRegistry) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(UWeaponActionUnloadAmmoSequence) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(URemoveCartridge) == 0x0058); // 88 bytes (0x000050 - 0x000058)
static_assert(sizeof(URemoveMagazineInsertCartridge) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(URemoveMagazineInsertMagazine) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(URemoveMagazineInsertMagazineInsertCartridge) == 0x00A0); // 160 bytes (0x000090 - 0x0000A0)
static_assert(sizeof(URemoveMagazineRemoveCartridge) == 0x0058); // 88 bytes (0x000050 - 0x000058)
static_assert(sizeof(URepairableItemTag) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(URepairStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FRequiredRepairingItemTagParams) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FRepairToolItemParams) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(URepairToolItemTag) == 0x0088); // 136 bytes (0x000030 - 0x000088)
static_assert(sizeof(UReplenishableResourceComponent) == 0x0690); // 1680 bytes (0x000638 - 0x000690)
static_assert(sizeof(UReplenishableResourceManager) == 0x0230); // 560 bytes (0x0000B0 - 0x000230)
static_assert(sizeof(AReplicatedEffectsActor) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(AReplicatedExplosionEffectsActor) == 0x02D0); // 720 bytes (0x000228 - 0x0002D0)
static_assert(sizeof(AReportingManager) == 0x07D0); // 2000 bytes (0x000220 - 0x0007D0)
static_assert(sizeof(URequestMinigameToolsRequest) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(URequestMinigameToolsResponse) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UResistanceSkill) == 0x00C8); // 200 bytes (0x0000C8 - 0x0000C8)
static_assert(sizeof(UResourceIndicatorWidget) == 0x0278); // 632 bytes (0x000268 - 0x000278)
static_assert(sizeof(UBaseResourceLightAnimator) == 0x0168); // 360 bytes (0x000028 - 0x000168)
static_assert(sizeof(UResourceSpotLightAnimator) == 0x0180); // 384 bytes (0x000168 - 0x000180)
static_assert(sizeof(UResourcePointLightAnimator) == 0x0178); // 376 bytes (0x000168 - 0x000178)
static_assert(sizeof(UResourceLockingManager) == 0x01A0); // 416 bytes (0x0000B0 - 0x0001A0)
static_assert(sizeof(UResourcePoweredLightItemComponent) == 0x0130); // 304 bytes (0x0000C8 - 0x000130)
static_assert(sizeof(FRespawnParameters) == 0x006C); // 108 bytes (0x000000 - 0x00006C)
static_assert(sizeof(URespawnSettings) == 0x00B8); // 184 bytes (0x000030 - 0x0000B8)
static_assert(sizeof(URestAssetData) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(URestorableMeshInstancesManager) == 0x0350); // 848 bytes (0x0000B0 - 0x000350)
static_assert(sizeof(URichTextInlineTextDecorator) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(URiflesSkill) == 0x0218); // 536 bytes (0x000218 - 0x000218)
static_assert(sizeof(URizzonerMovementComponent) == 0x1900); // 6400 bytes (0x000DA0 - 0x001900)
static_assert(sizeof(FRunningSkillExperienceAwards) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FRunningSkillParametersPerSkillLevel) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(URunningSkill) == 0x0138); // 312 bytes (0x0000C8 - 0x000138)
static_assert(sizeof(UPrisonerSkillUIData_Running) == 0x0058); // 88 bytes (0x000050 - 0x000058)
static_assert(sizeof(UScopeableItemComponentState) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(FScopeZoomLevelSettings) == 0x0570); // 1392 bytes (0x000000 - 0x000570)
static_assert(sizeof(UScopeableItemComponent) == 0x0120); // 288 bytes (0x0000C8 - 0x000120)
static_assert(sizeof(UScreenSpaceHealthWidget) == 0x0268); // 616 bytes (0x000268 - 0x000268)
static_assert(sizeof(UScrollingSizeBox) == 0x02C8); // 712 bytes (0x000268 - 0x0002C8)
static_assert(sizeof(USearchBox) == 0x0308); // 776 bytes (0x000268 - 0x000308)
static_assert(sizeof(FSearchPerItemData) == 0x00E8); // 232 bytes (0x000000 - 0x0000E8)
static_assert(sizeof(USearchItemDataAsset) == 0x0078); // 120 bytes (0x000030 - 0x000078)
static_assert(sizeof(USearchForItemsAssetData) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(USedentaryNPCAnimInstance) == 0x02D0); // 720 bytes (0x0002B8 - 0x0002D0)
static_assert(sizeof(FSedentaryNPCHeadAnimationAndAudio) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(USedentaryNPCBackgroundInteraction) == 0x00A0); // 160 bytes (0x000028 - 0x0000A0)
static_assert(sizeof(USedentaryNPCHeadAnimInstance) == 0x0400); // 1024 bytes (0x0002B8 - 0x000400)
static_assert(sizeof(USelectionOverlayWidget) == 0x02E8); // 744 bytes (0x000268 - 0x0002E8)
static_assert(sizeof(USentryEncounterSaveState) == 0x0078); // 120 bytes (0x000038 - 0x000078)
static_assert(sizeof(FSentryMeleeAttackDescription) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSentryPatrolPoint) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSentryDamageEffectData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(ASentry2) == 0x0F10); // 3856 bytes (0x000828 - 0x000F10)
static_assert(sizeof(USentryAIControllerEncounterSaveState) == 0x0088); // 136 bytes (0x000080 - 0x000088)
static_assert(sizeof(FDetectionDelayTimerData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSentryCombatBehaviorMode) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(ASentryAIController2) == 0x0910); // 2320 bytes (0x000450 - 0x000910)
static_assert(sizeof(FInPlaceTurnAnimationInfo) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FInPlaceTurningData) == 0x002C); // 44 bytes (0x000000 - 0x00002C)
static_assert(sizeof(FSentryGlitchingPartInfo) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(USentryAnimInstance2) == 0x0400); // 1024 bytes (0x0002B8 - 0x000400)
static_assert(sizeof(USentryFirstPersonViewComponent) == 0x00D0); // 208 bytes (0x0000D0 - 0x0000D0)
static_assert(sizeof(FSentryHotZoneVolumeData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(ASentryGuardVolume2) == 0x02B8); // 696 bytes (0x000258 - 0x0002B8)
static_assert(sizeof(USentryMovementComponent) == 0x0DF0); // 3568 bytes (0x000DA0 - 0x000DF0)
static_assert(sizeof(USentryHotZoneBoxComponent) == 0x0480); // 1152 bytes (0x000480 - 0x000480)
static_assert(sizeof(ASentrySpawner2) == 0x02B8); // 696 bytes (0x000220 - 0x0002B8)
static_assert(sizeof(USentryThirdPersonViewComponent) == 0x0100); // 256 bytes (0x0000D0 - 0x000100)
static_assert(sizeof(USerializationStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UServerBrowser) == 0x0510); // 1296 bytes (0x000268 - 0x000510)
static_assert(sizeof(UServerBrowserCheckboxWidget) == 0x02D0); // 720 bytes (0x000268 - 0x0002D0)
static_assert(sizeof(UServerBrowserDropdownEntryWidget) == 0x02C8); // 712 bytes (0x000268 - 0x0002C8)
static_assert(sizeof(UServerBrowserDropdownWidget) == 0x02E0); // 736 bytes (0x000268 - 0x0002E0)
static_assert(sizeof(FServerInfo) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(UServerInfoWidget) == 0x03F0); // 1008 bytes (0x000268 - 0x0003F0)
static_assert(sizeof(UServerPriceCache) == 0x0228); // 552 bytes (0x000028 - 0x000228)
static_assert(sizeof(UServerSettingsMenu) == 0x0610); // 1552 bytes (0x000608 - 0x000610)
static_assert(sizeof(UServerSettingsUIController) == 0x0288); // 648 bytes (0x0001E8 - 0x000288)
static_assert(sizeof(AShark) == 0x08C0); // 2240 bytes (0x000888 - 0x0008C0)
static_assert(sizeof(ASharkAIController) == 0x0598); // 1432 bytes (0x000450 - 0x000598)
static_assert(sizeof(USharkAnimInstance) == 0x0360); // 864 bytes (0x0002B8 - 0x000360)
static_assert(sizeof(USharpMeleeWeaponItemTag) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(AShelterItem) == 0x09B0); // 2480 bytes (0x0009A0 - 0x0009B0)
static_assert(sizeof(UShotsFiredTrackerWidget) == 0x0270); // 624 bytes (0x000268 - 0x000270)
static_assert(sizeof(ASilentAlarmTrapItem) == 0x0B00); // 2816 bytes (0x000AD0 - 0x000B00)
static_assert(sizeof(USimpleDropdownEntryCategoryTitle) == 0x0270); // 624 bytes (0x000268 - 0x000270)
static_assert(sizeof(USimpleTextDropdownEntry) == 0x02B0); // 688 bytes (0x000268 - 0x0002B0)
static_assert(sizeof(USimpleTextDropdownEntryWithCheckBox) == 0x02C8); // 712 bytes (0x0002B0 - 0x0002C8)
static_assert(sizeof(USimulatedShooter) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(USimulatedShooterFiringStrategy) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(USimulatedShooterFiringStrategy_Flamethrower) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(USimulatedShooterFiringStrategy_Projectile) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(USimulatedShooterFiringStrategy_Hitscan) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(USimulatedShooterFiringStrategy_SpawnProjectile) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(USingletonStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(ASkeletalWeaponAttachment) == 0x09D8); // 2520 bytes (0x0009D0 - 0x0009D8)
static_assert(sizeof(USkillClasses) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(USkillEventHandler) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(USkydivingHUD) == 0x0268); // 616 bytes (0x000268 - 0x000268)
static_assert(sizeof(FSliderWithLabelAndNumberTextStyle) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FSliderWithLabelAndNumberStyle) == 0x0158); // 344 bytes (0x000000 - 0x000158)
static_assert(sizeof(USliderWithLabelAndNumber) == 0x14D0); // 5328 bytes (0x000DC0 - 0x0014D0)
static_assert(sizeof(ASlidingDoorStatic) == 0x05B0); // 1456 bytes (0x000590 - 0x0005B0)
static_assert(sizeof(FSmokableSubstance) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USmokableItemComponent) == 0x0280); // 640 bytes (0x000198 - 0x000280)
static_assert(sizeof(USmokableTag) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(ASmokeGrenadeItem) == 0x0A98); // 2712 bytes (0x000A68 - 0x000A98)
static_assert(sizeof(FSnipingSkillExperienceAwards) == 0x0034); // 52 bytes (0x000000 - 0x000034)
static_assert(sizeof(USnipingSkill) == 0x01C8); // 456 bytes (0x0000B0 - 0x0001C8)
static_assert(sizeof(USortByButton) == 0x02C0); // 704 bytes (0x000268 - 0x0002C0)
static_assert(sizeof(ASoundEmitter) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(USoundNotification) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USoundNotificationDescription) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(USoundReducingItemTag) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(ASpline) == 0x0230); // 560 bytes (0x000220 - 0x000230)
static_assert(sizeof(ASoundSpline) == 0x0288); // 648 bytes (0x000230 - 0x000288)
static_assert(sizeof(USpawnChoiceWidget) == 0x02E8); // 744 bytes (0x000268 - 0x0002E8)
static_assert(sizeof(FParticleCollisionDecalData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(USpawnDecalWhenParticleCollides) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(USpawnMenuWidget) == 0x0380); // 896 bytes (0x000268 - 0x000380)
static_assert(sizeof(USpawnScreen) == 0x02D0); // 720 bytes (0x000268 - 0x0002D0)
static_assert(sizeof(USpawnSectorSelectorWidget) == 0x0278); // 632 bytes (0x000268 - 0x000278)
static_assert(sizeof(USphereMotionTriggerComponent) == 0x0550); // 1360 bytes (0x000528 - 0x000550)
static_assert(sizeof(ASplineSnagGeneratedActor) == 0x0220); // 544 bytes (0x000220 - 0x000220)
static_assert(sizeof(ASplineZone) == 0x0238); // 568 bytes (0x000230 - 0x000238)
static_assert(sizeof(USprayPaintItemTag) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(USquadEditor) == 0x0378); // 888 bytes (0x000268 - 0x000378)
static_assert(sizeof(USquadEmblemWidget) == 0x0288); // 648 bytes (0x000268 - 0x000288)
static_assert(sizeof(USquadLeftPanel) == 0x03B0); // 944 bytes (0x000268 - 0x0003B0)
static_assert(sizeof(USquadListing) == 0x02F8); // 760 bytes (0x000268 - 0x0002F8)
static_assert(sizeof(USquadMemberPanel) == 0x03D8); // 984 bytes (0x000268 - 0x0003D8)
static_assert(sizeof(USquadPenaltyManager) == 0x0140); // 320 bytes (0x000028 - 0x000140)
static_assert(sizeof(USquadRankingsCache) == 0x00E8); // 232 bytes (0x0000B0 - 0x0000E8)
static_assert(sizeof(USquadRightPanel) == 0x0348); // 840 bytes (0x000268 - 0x000348)
static_assert(sizeof(USquadTooltip) == 0x0280); // 640 bytes (0x000268 - 0x000280)
static_assert(sizeof(USquadUIController) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(USquareCheckbox) == 0x0288); // 648 bytes (0x000268 - 0x000288)
static_assert(sizeof(AStartLocation) == 0x0258); // 600 bytes (0x000250 - 0x000258)
static_assert(sizeof(FStartLocationDescription) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(AStartLocationManager) == 0x0230); // 560 bytes (0x000220 - 0x000230)
static_assert(sizeof(UStaticDoorReplicator) == 0x0120); // 288 bytes (0x0000B0 - 0x000120)
static_assert(sizeof(AStaticRadioItem) == 0x09C0); // 2496 bytes (0x0009C0 - 0x0009C0)
static_assert(sizeof(UStatisticsDetailsWidget) == 0x0398); // 920 bytes (0x000268 - 0x000398)
static_assert(sizeof(UStatisticsListRow) == 0x0280); // 640 bytes (0x000268 - 0x000280)
static_assert(sizeof(UStatisticsListWidget) == 0x0290); // 656 bytes (0x000268 - 0x000290)
static_assert(sizeof(UStatisticsPanelWidget) == 0x0278); // 632 bytes (0x000268 - 0x000278)
static_assert(sizeof(UStatisticsSubcategoryTab) == 0x02A8); // 680 bytes (0x000268 - 0x0002A8)
static_assert(sizeof(FStealthSkillExperienceAwards) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UStealthSkill) == 0x00D8); // 216 bytes (0x0000B0 - 0x0000D8)
static_assert(sizeof(USubtitleWidget) == 0x0278); // 632 bytes (0x000268 - 0x000278)
static_assert(sizeof(USurfaceHardnessData) == 0x0088); // 136 bytes (0x000030 - 0x000088)
static_assert(sizeof(FCompassSkillParametersPerSkillLevel) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(USurvivalSkill) == 0x00B8); // 184 bytes (0x0000B0 - 0x0000B8)
static_assert(sizeof(ASurvivalStatsHandler) == 0x0298); // 664 bytes (0x000220 - 0x000298)
static_assert(sizeof(FTipAndItems) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(USurvivalTipEventListener) == 0x0070); // 112 bytes (0x000028 - 0x000070)
static_assert(sizeof(USurvivalTipManager) == 0x0190); // 400 bytes (0x000028 - 0x000190)
static_assert(sizeof(USurvivalTipsView) == 0x0318); // 792 bytes (0x000268 - 0x000318)
static_assert(sizeof(USurvivalTipWidget) == 0x0338); // 824 bytes (0x000268 - 0x000338)
static_assert(sizeof(USwimmingSkill) == 0x00C8); // 200 bytes (0x0000C8 - 0x0000C8)
static_assert(sizeof(USwingItemComponent) == 0x0338); // 824 bytes (0x0000C8 - 0x000338)
static_assert(sizeof(ASwitch) == 0x0268); // 616 bytes (0x000220 - 0x000268)
static_assert(sizeof(USwitchboardComponent) == 0x01C8); // 456 bytes (0x0000B0 - 0x0001C8)
static_assert(sizeof(ASwitchboardMinigame) == 0x0400); // 1024 bytes (0x000340 - 0x000400)
static_assert(sizeof(USwitchboardMinigameConfiguration) == 0x0110); // 272 bytes (0x000050 - 0x000110)
static_assert(sizeof(FSwitchMaterialEmissiveColorProperties) == 0x002C); // 44 bytes (0x000000 - 0x00002C)
static_assert(sizeof(USwitchboardSwitchAssetData) == 0x00C0); // 192 bytes (0x000028 - 0x0000C0)
static_assert(sizeof(UTabButton) == 0x0C88); // 3208 bytes (0x000290 - 0x000C88)
static_assert(sizeof(UTabButtonAlertable) == 0x0D08); // 3336 bytes (0x000C88 - 0x000D08)
static_assert(sizeof(UTabButtonInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UTabContainer) == 0x02D8); // 728 bytes (0x000268 - 0x0002D8)
static_assert(sizeof(UTabElement) == 0x02B8); // 696 bytes (0x000268 - 0x0002B8)
static_assert(sizeof(UTabGroup) == 0x02C0); // 704 bytes (0x000268 - 0x0002C0)
static_assert(sizeof(UTabMenu) == 0x0468); // 1128 bytes (0x000268 - 0x000468)
static_assert(sizeof(UTabMenuUIController) == 0x0258); // 600 bytes (0x000028 - 0x000258)
static_assert(sizeof(UTabModeTab) == 0x0490); // 1168 bytes (0x000290 - 0x000490)
static_assert(sizeof(UTacticsSkill) == 0x0160); // 352 bytes (0x0000B0 - 0x000160)
static_assert(sizeof(FHandsPoseCorrections) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(UHandsCorrectionsData) == 0x01B8); // 440 bytes (0x000030 - 0x0001B8)
static_assert(sizeof(FItemFirstPersonUpperBodyAnimationsData) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(UItemFirstPersonAnimationsDataAsset) == 0x0098); // 152 bytes (0x000030 - 0x000098)
static_assert(sizeof(UTakeInHandsAssetData) == 0x0150); // 336 bytes (0x000030 - 0x000150)
static_assert(sizeof(UTaskEntriesDropdownWidget) == 0x02C8); // 712 bytes (0x000268 - 0x0002C8)
static_assert(sizeof(UTaskEntriesPanelWidget) == 0x02D0); // 720 bytes (0x000268 - 0x0002D0)
static_assert(sizeof(UTaskEntryDetailsPanelWidget) == 0x0430); // 1072 bytes (0x000268 - 0x000430)
static_assert(sizeof(UTaskEntryWidget) == 0x02D8); // 728 bytes (0x000268 - 0x0002D8)
static_assert(sizeof(UTaskSetup) == 0x0208); // 520 bytes (0x000030 - 0x000208)
static_assert(sizeof(UTeamDeathmatchParticipantStats) == 0x0048); // 72 bytes (0x000048 - 0x000048)
static_assert(sizeof(FTeamDeathmatchParameters) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(ATeamDeathmatchGameEvent) == 0x05A8); // 1448 bytes (0x000588 - 0x0005A8)
static_assert(sizeof(ATeamDeathmatchLocationMarker) == 0x0440); // 1088 bytes (0x000418 - 0x000440)
static_assert(sizeof(UTeamInvitationWidget) == 0x02B8); // 696 bytes (0x000268 - 0x0002B8)
static_assert(sizeof(ATearGasGrenadeItem) == 0x0AD0); // 2768 bytes (0x000A98 - 0x000AD0)
static_assert(sizeof(UTelemetryCheckbox) == 0x0278); // 632 bytes (0x000268 - 0x000278)
static_assert(sizeof(UTelemetryMenu) == 0x02D8); // 728 bytes (0x000268 - 0x0002D8)
static_assert(sizeof(UTelemetrySetting) == 0x0278); // 632 bytes (0x000268 - 0x000278)
static_assert(sizeof(FTeleportUserDataReplicator) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FTeleportRepData) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(UTeleportComponent) == 0x00F0); // 240 bytes (0x0000B0 - 0x0000F0)
static_assert(sizeof(UTeleportComponentOwner) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UTeleportSubject) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(ATempPlayerStart) == 0x0250); // 592 bytes (0x000250 - 0x000250)
static_assert(sizeof(FTextBoxTextStyle) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FTextBoxWithLabelStyle) == 0x0158); // 344 bytes (0x000000 - 0x000158)
static_assert(sizeof(UTextBoxWithLabel) == 0x19F8); // 6648 bytes (0x000268 - 0x0019F8)
static_assert(sizeof(UTextInputWidget) == 0x0328); // 808 bytes (0x000268 - 0x000328)
static_assert(sizeof(UTextOnlyTooltip) == 0x0270); // 624 bytes (0x000268 - 0x000270)
static_assert(sizeof(UTextStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UTexture2DStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UThermalSensorComponent) == 0x0100); // 256 bytes (0x0000B0 - 0x000100)
static_assert(sizeof(AThermometer) == 0x09B0); // 2480 bytes (0x0009A0 - 0x0009B0)
static_assert(sizeof(UThieverySkill) == 0x00E0); // 224 bytes (0x0000B0 - 0x0000E0)
static_assert(sizeof(FMeleeWeaponDesc) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(UThrowableItemTag) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UThrowingComponent) == 0x1610); // 5648 bytes (0x0001E0 - 0x001610)
static_assert(sizeof(UThrowingQuickAccessItemWidget) == 0x02C8); // 712 bytes (0x000268 - 0x0002C8)
static_assert(sizeof(ATimeControllableLight) == 0x0248); // 584 bytes (0x000230 - 0x000248)
static_assert(sizeof(ATimeControllableSpotLight) == 0x0248); // 584 bytes (0x000230 - 0x000248)
static_assert(sizeof(ATimedGiftSpawner) == 0x0288); // 648 bytes (0x000220 - 0x000288)
static_assert(sizeof(UTriggerComponentState) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UTimedTriggerComponentState) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UTimedTriggerComponent) == 0x0510); // 1296 bytes (0x0004E0 - 0x000510)
static_assert(sizeof(FTireSurfaceAudioEntry) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UTireToSurfaceAudioData) == 0x0268); // 616 bytes (0x000030 - 0x000268)
static_assert(sizeof(UTitleAndDescriptionTooltip) == 0x0278); // 632 bytes (0x000268 - 0x000278)
static_assert(sizeof(UToggleCamouflageAction) == 0x00A8); // 168 bytes (0x0000A0 - 0x0000A8)
static_assert(sizeof(UTooltipBase) == 0x02A0); // 672 bytes (0x000268 - 0x0002A0)
static_assert(sizeof(FTournamentStats) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(ATournament) == 0x0270); // 624 bytes (0x000220 - 0x000270)
static_assert(sizeof(UTournamentScoreboardRowWidget) == 0x0290); // 656 bytes (0x000268 - 0x000290)
static_assert(sizeof(UTournamentScoreboardWidget) == 0x0280); // 640 bytes (0x000268 - 0x000280)
static_assert(sizeof(ATrackingMarker2) == 0x0288); // 648 bytes (0x000220 - 0x000288)
static_assert(sizeof(UTradeable) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UNPCInteractionBoxComponent) == 0x0490); // 1168 bytes (0x000480 - 0x000490)
static_assert(sizeof(FSedentaryNPCMarker) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(ATradeOutpostBuilding) == 0x0548); // 1352 bytes (0x0004C8 - 0x000548)
static_assert(sizeof(ATradeOutpostManager) == 0x0260); // 608 bytes (0x000220 - 0x000260)
static_assert(sizeof(UVehicleSpawnBoxComponent) == 0x0490); // 1168 bytes (0x000480 - 0x000490)
static_assert(sizeof(FTraderMarker) == 0x00D0); // 208 bytes (0x000068 - 0x0000D0)
static_assert(sizeof(FTraderLocationMarker) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FSpawnedDepotsHelperStruct) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(ATradePost) == 0x0610); // 1552 bytes (0x000548 - 0x000610)
static_assert(sizeof(UTraderBuyPanel) == 0x04C8); // 1224 bytes (0x000268 - 0x0004C8)
static_assert(sizeof(UTraderBuyUIController) == 0x0218); // 536 bytes (0x000028 - 0x000218)
static_assert(sizeof(UTraderForPlayerAndDepotItemRequest) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UTraderForPlayerAndDepotItemResponse) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UTraderDepotPanel) == 0x02D0); // 720 bytes (0x000268 - 0x0002D0)
static_assert(sizeof(FTraderDropdownMenuEntry) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(UTraderDropdownMenu) == 0x02E0); // 736 bytes (0x000268 - 0x0002E0)
static_assert(sizeof(UTraderFilterFamePointsButton) == 0x03D0); // 976 bytes (0x000268 - 0x0003D0)
static_assert(sizeof(UTraderItemButton) == 0x0468); // 1128 bytes (0x000268 - 0x000468)
static_assert(sizeof(UTraderItemCategoryButton) == 0x0340); // 832 bytes (0x000268 - 0x000340)
static_assert(sizeof(UTraderMainPanel) == 0x02A8); // 680 bytes (0x000268 - 0x0002A8)
static_assert(sizeof(UTraderMainUIController) == 0x00D0); // 208 bytes (0x000028 - 0x0000D0)
static_assert(sizeof(UTraderManagingComponent) == 0x0108); // 264 bytes (0x0000B0 - 0x000108)
static_assert(sizeof(FTraderMarkerTradeableOverrideStruct) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(UTraderPersonalityDataAsset) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UTraderSellListEntry) == 0x0310); // 784 bytes (0x000268 - 0x000310)
static_assert(sizeof(UTraderSellPanel) == 0x0368); // 872 bytes (0x000268 - 0x000368)
static_assert(sizeof(UTraderSellUIController) == 0x0088); // 136 bytes (0x000028 - 0x000088)
static_assert(sizeof(FTradeablesResponseData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(UEconomyManagerResponseData) == 0x0058); // 88 bytes (0x000028 - 0x000058)
static_assert(sizeof(UTradeStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UTradingOutpostDescriptionDataAsset) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UTrapData) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(UTrapItemUserData) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UTrapItemEntitySetup) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(UTrapRefuelItemTag) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UTrashCarouselWidget) == 0x05A0); // 1440 bytes (0x0002B8 - 0x0005A0)
static_assert(sizeof(UTrashNamedCarouselWidget) == 0x0410); // 1040 bytes (0x0002B8 - 0x000410)
static_assert(sizeof(UTrashNamedSliderWidget) == 0x0440); // 1088 bytes (0x0002B8 - 0x000440)
static_assert(sizeof(UTrashSliderWidget) == 0x0778); // 1912 bytes (0x0002B8 - 0x000778)
static_assert(sizeof(UTriggerFailurePenalty) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UTriggerItemTag) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(ATurretInfluenceAreaVisualizer) == 0x0238); // 568 bytes (0x000230 - 0x000238)
static_assert(sizeof(FCountedAmmunitionData) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FPackedState) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(ATurretItem) == 0x0C80); // 3200 bytes (0x0009A0 - 0x000C80)
static_assert(sizeof(UTurretItemAnimInstance) == 0x02D0); // 720 bytes (0x0002B8 - 0x0002D0)
static_assert(sizeof(UTurretItemEntitySave) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UTurretItemEntitySetup) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(FTurretPaintjobPatternParams) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(UTurretPaintjobItemComponent) == 0x0128); // 296 bytes (0x0000C8 - 0x000128)
static_assert(sizeof(UTurretPaintjobCommonData) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UTwitchDropsMainMenuButtonWidget) == 0x04C0); // 1216 bytes (0x000268 - 0x0004C0)
static_assert(sizeof(UTwitchDropsManager) == 0x01A0); // 416 bytes (0x000028 - 0x0001A0)
static_assert(sizeof(UTwitchDropsUIController) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(UUIBaseContext) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UUIContainerSubobject) == 0x0090); // 144 bytes (0x000028 - 0x000090)
static_assert(sizeof(UUIROWidgetDragDropOperation) == 0x0090); // 144 bytes (0x000088 - 0x000090)
static_assert(sizeof(UUIRepresentableObjectWidget) == 0x0318); // 792 bytes (0x000268 - 0x000318)
static_assert(sizeof(UUIRepresentationSubobject) == 0x00B0); // 176 bytes (0x000028 - 0x0000B0)
static_assert(sizeof(FGenericUISounds) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FNotificationUISounds) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FBankATMUISounds) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FTraderUISounds) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FItemsCraftingUISounds) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FBaseBuildingUISounds) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FCookingUISounds) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FJournalUISounds) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FManualUISounds) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSquadUISounds) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FEventsUISounds) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FQuestUISounds) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(FSettingsUISounds) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(UUISoundsData) == 0x0218); // 536 bytes (0x000030 - 0x000218)
static_assert(sizeof(UUIStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UUnarmedCombatInputRedirector) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(AUnderwaterPostProcessVolume) == 0x07D0); // 2000 bytes (0x0007D0 - 0x0007D0)
static_assert(sizeof(UItemUnpackingSpawnMethod) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UItemUnpackingAmmunitionSpawnMethod) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FItemUnpackingSpawnedItem) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UUnpackableTag) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UUnusableWorldItemTag) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UUpdateableNotification) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UUpdateableNotificationDescription) == 0x0090); // 144 bytes (0x000078 - 0x000090)
static_assert(sizeof(UUserManager) == 0x00A0); // 160 bytes (0x000028 - 0x0000A0)
static_assert(sizeof(UUser) == 0x0128); // 296 bytes (0x000028 - 0x000128)
static_assert(sizeof(UUserProfile) == 0x0178); // 376 bytes (0x000028 - 0x000178)
static_assert(sizeof(UValueProviderInteger) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UValueProviderString) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FVehicleAttachmentSave) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UVehicleBaseSave) == 0x0058); // 88 bytes (0x000028 - 0x000058)
static_assert(sizeof(UVehicleDamageRegionAssetData) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(FVehicleAttachmentMeshSetup) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(FVehicleAttachmentAdditionalSocket) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FVehicleAttachmentDestructionEffectMesh) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FVehicleAttachmentDestructionEffectParticle) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FVehicleAttachmentDestructionEffect) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FVehiclePaintjobPatternParams) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(UVehicleAttachment) == 0x0568); // 1384 bytes (0x000028 - 0x000568)
static_assert(sizeof(UVehicleAttachment_Airfoil) == 0x0580); // 1408 bytes (0x000568 - 0x000580)
static_assert(sizeof(FVehicleAttachmentAlternatorSetup) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UVehicleAttachment_Alternator) == 0x0580); // 1408 bytes (0x000568 - 0x000580)
static_assert(sizeof(UVehicleAttachment_Armor) == 0x0570); // 1392 bytes (0x000568 - 0x000570)
static_assert(sizeof(FVehicleAttachmentBatterySetup) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FVehicleAttachmentBatterySimulationData) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(UVehicleAttachment_Battery) == 0x05A0); // 1440 bytes (0x000568 - 0x0005A0)
static_assert(sizeof(FVehicleServiceItemSlot) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UVehicleAttachment_Chassis) == 0x05A0); // 1440 bytes (0x000568 - 0x0005A0)
static_assert(sizeof(UVehicleAttachment_StaticPart) == 0x0570); // 1392 bytes (0x000568 - 0x000570)
static_assert(sizeof(FDashboardMaterialParameter) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FDashboardMaterialParameterCache) == 0x0110); // 272 bytes (0x000000 - 0x000110)
static_assert(sizeof(UVehicleAttachment_Dashboard) == 0x06B0); // 1712 bytes (0x000570 - 0x0006B0)
static_assert(sizeof(UVehicleAttachment_DashboardWithMountInteractions) == 0x06B0); // 1712 bytes (0x0006B0 - 0x0006B0)
static_assert(sizeof(FVehicleAttachmentDoorAnimationSet) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FVehicleAttachmentDoorSetup) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(UVehicleAttachment_Door) == 0x05D0); // 1488 bytes (0x000568 - 0x0005D0)
static_assert(sizeof(UVehicleWithDoors) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FVehicleAttachmentEngineBlockSetup) == 0x0168); // 360 bytes (0x000000 - 0x000168)
static_assert(sizeof(FVehicleAttachmentEngineBlockSimulationData) == 0x002C); // 44 bytes (0x000000 - 0x00002C)
static_assert(sizeof(UVehicleAttachment_EngineBlock) == 0x0770); // 1904 bytes (0x000568 - 0x000770)
static_assert(sizeof(UVehicleWithEngineBlock) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FVehicleGearSetup) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FVehicleAttachmentGearboxSetup) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FVehicleAttachmentGearboxSimulationData) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(UVehicleAttachment_Gearbox) == 0x05D0); // 1488 bytes (0x000568 - 0x0005D0)
static_assert(sizeof(UVehicleWithGearbox) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UVehicleAttachment_InventoryExpansion) == 0x0590); // 1424 bytes (0x000570 - 0x000590)
static_assert(sizeof(FVehicleLightReference) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FVATMaterialParam) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FVehicleLightsData) == 0x0098); // 152 bytes (0x000000 - 0x000098)
static_assert(sizeof(FLightsAttachmentSimulationData) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(UVehicleAttachment_Lights) == 0x05B0); // 1456 bytes (0x000568 - 0x0005B0)
static_assert(sizeof(UVehicleAttachment_MountableInventoryExpansion) == 0x0640); // 1600 bytes (0x000590 - 0x000640)
static_assert(sizeof(UVehicleAttachment_Radio) == 0x0660); // 1632 bytes (0x000568 - 0x000660)
static_assert(sizeof(UVehicleAttachment_Seat) == 0x05A0); // 1440 bytes (0x000568 - 0x0005A0)
static_assert(sizeof(UVehicleWithDashboard) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FWeaponMountSetup) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UVehicleAttachment_WeaponMount) == 0x0580); // 1408 bytes (0x000568 - 0x000580)
static_assert(sizeof(UVehicleAttachment_Wheel) == 0x05C0); // 1472 bytes (0x000568 - 0x0005C0)
static_assert(sizeof(UVehicleAttachment_DcxWheel) == 0x05D0); // 1488 bytes (0x0005C0 - 0x0005D0)
static_assert(sizeof(FVehicleAttachmentWheelSetup) == 0x0044); // 68 bytes (0x000000 - 0x000044)
static_assert(sizeof(UVehicleAttachment_ConstrainedWheel) == 0x0740); // 1856 bytes (0x0005C0 - 0x000740)
static_assert(sizeof(UVehicleWithWheels) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UVehicleAttachmentDashboardAnimInstance) == 0x02E0); // 736 bytes (0x0002B8 - 0x0002E0)
static_assert(sizeof(UVehicleAttachmentHealthWidget) == 0x0298); // 664 bytes (0x000268 - 0x000298)
static_assert(sizeof(AVehicleAttachmentItem) == 0x09B0); // 2480 bytes (0x0009A0 - 0x0009B0)
static_assert(sizeof(UVehicleAttachmentParent) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UVehicleSlotIdAssetData) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UMountableVehicleAttachment) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UVehicleAttachmentTag) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UVehicleBaseAnimInstance) == 0x02C0); // 704 bytes (0x0002B8 - 0x0002C0)
static_assert(sizeof(UVehicleBasePushMountSlot) == 0x01C0); // 448 bytes (0x000188 - 0x0001C0)
static_assert(sizeof(UVehicleSystem) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FWaterParticleTransform) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(UVehicleBuoyancySystem) == 0x0158); // 344 bytes (0x000030 - 0x000158)
static_assert(sizeof(UVehicleCameraComponent) == 0x07D0); // 2000 bytes (0x0007D0 - 0x0007D0)
static_assert(sizeof(UVehicleCameraStabilizerComponent) == 0x02A0); // 672 bytes (0x0001F8 - 0x0002A0)
static_assert(sizeof(UVehicleCheatControllerComponent) == 0x00B8); // 184 bytes (0x0000B0 - 0x0000B8)
static_assert(sizeof(FVehicleCorpseBurningParticles) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(AVehicleCorpse) == 0x02C0); // 704 bytes (0x000220 - 0x0002C0)
static_assert(sizeof(AVehicleCraftedItem) == 0x09B0); // 2480 bytes (0x0009A0 - 0x0009B0)
static_assert(sizeof(UVehicleDoorsComponent) == 0x00C8); // 200 bytes (0x0000B0 - 0x0000C8)
static_assert(sizeof(UVehicleElectricalDevice) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UVehicleElectricalSystem) == 0x0078); // 120 bytes (0x000030 - 0x000078)
static_assert(sizeof(UVehicleEntitySetup) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(FVehicleForcePushParams) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(UVehicleForcePushComponent) == 0x00D8); // 216 bytes (0x0000B0 - 0x0000D8)
static_assert(sizeof(UVehicleGroupSpawningPreset) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UVehicleHudWidget) == 0x0318); // 792 bytes (0x000268 - 0x000318)
static_assert(sizeof(AVehicleItemContainer) == 0x0BD0); // 3024 bytes (0x000B90 - 0x000BD0)
static_assert(sizeof(FVehicleManualSpawnPresetArray) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(AVehicleManager) == 0x0680); // 1664 bytes (0x000220 - 0x000680)
static_assert(sizeof(UVehicleMeshComponent) == 0x0F00); // 3840 bytes (0x000ED8 - 0x000F00)
static_assert(sizeof(UVehicleMountSlot) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UVehicleMountSlotIndicators) == 0x0288); // 648 bytes (0x000268 - 0x000288)
static_assert(sizeof(UVehicleMountSlotsWidget) == 0x0278); // 632 bytes (0x000268 - 0x000278)
static_assert(sizeof(UVehicleMountSlotWidget) == 0x0278); // 632 bytes (0x000268 - 0x000278)
static_assert(sizeof(UVehiclePaintjobItemComponent) == 0x0120); // 288 bytes (0x0000C8 - 0x000120)
static_assert(sizeof(UVehiclePaintjobCommonData) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UVehiclePartDescriptionComponent) == 0x0480); // 1152 bytes (0x000480 - 0x000480)
static_assert(sizeof(UVehiclePowertrainComponent) == 0x00C8); // 200 bytes (0x0000B0 - 0x0000C8)
static_assert(sizeof(UVehiclePresetNode) == 0x0070); // 112 bytes (0x000028 - 0x000070)
static_assert(sizeof(UVehiclePreset) == 0x00A0); // 160 bytes (0x000030 - 0x0000A0)
static_assert(sizeof(UVehicleServiceComponent) == 0x00D0); // 208 bytes (0x0000B0 - 0x0000D0)
static_assert(sizeof(UVehicleServiceItemComponent) == 0x00C8); // 200 bytes (0x0000B0 - 0x0000C8)
static_assert(sizeof(FVehicleServiceData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UVehicleServiceRegistry) == 0x0110); // 272 bytes (0x0000B0 - 0x000110)
static_assert(sizeof(UVehicleServiceStationSaveObject) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UStaticVehicleServiceStationSaveObject) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(AVehicleServiceStation) == 0x02D8); // 728 bytes (0x000220 - 0x0002D8)
static_assert(sizeof(UPortableVehicleServiceStationSaveObject) == 0x0088); // 136 bytes (0x000028 - 0x000088)
static_assert(sizeof(APortableVehicleServiceStation) == 0x0340); // 832 bytes (0x0002D8 - 0x000340)
static_assert(sizeof(UVehicleServiceStationAnimInstance) == 0x02D0); // 720 bytes (0x0002B8 - 0x0002D0)
static_assert(sizeof(UVehicleServiceToolTag) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(FWeaponTypeMontage) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FVehicleWeaponAimingStanceTransitionMontages) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FVehicleWeaponAimingStanceTransitionCurves) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FFirstPersonViewParameters) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FVehicleWeaponAimingFirstPersonData) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FBasePoseAimOffsetPair) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FVehicleThirdPersonWeaponTypeData) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FVehicleWeaponAimingThirdPersonData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FVehicleWeaponAimingStanceData) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(UVehicleWeaponAimingParameters) == 0x0128); // 296 bytes (0x000028 - 0x000128)
static_assert(sizeof(AVehicleSpawner) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(FVehicleSpawnerMarker) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(UVehicleSpawnerComponent) == 0x0210); // 528 bytes (0x0001F8 - 0x000210)
static_assert(sizeof(AVehicleTrajectoryVisualizer) == 0x0250); // 592 bytes (0x000220 - 0x000250)
static_assert(sizeof(UVehicleUIDataController) == 0x00B8); // 184 bytes (0x000028 - 0x0000B8)
static_assert(sizeof(FWeaponMountData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UVehicleWeaponsSystem) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(UVerificationStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UVerticalScrollBoxDropdownContent) == 0x0278); // 632 bytes (0x000268 - 0x000278)
static_assert(sizeof(UVicinityContainer3) == 0x02A8); // 680 bytes (0x000268 - 0x0002A8)
static_assert(sizeof(UVicinityContainerRowItemWidget) == 0x05D0); // 1488 bytes (0x000520 - 0x0005D0)
static_assert(sizeof(UVicinityPanel3) == 0x0520); // 1312 bytes (0x000268 - 0x000520)
static_assert(sizeof(UVideoSettingsManager) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UVisionEffectsComponent) == 0x1560); // 5472 bytes (0x0000B0 - 0x001560)
static_assert(sizeof(UVisualOverlayItemTag) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UVoiceAudioComponent) == 0x0880); // 2176 bytes (0x000860 - 0x000880)
static_assert(sizeof(UVoiceChatComponent) == 0x0130); // 304 bytes (0x0000B0 - 0x000130)
static_assert(sizeof(UVoiceDecoder) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(FVoltageMatchingSwitchElementsPairing) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FVoltageMatchingElementRow) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(AVoltageMatchingMinigame) == 0x04E8); // 1256 bytes (0x000340 - 0x0004E8)
static_assert(sizeof(UVoltageMatchingMinigameConfiguration) == 0x0058); // 88 bytes (0x000050 - 0x000058)
static_assert(sizeof(FVoltageMatchingElementIndicator) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UVoltageMatchingScreensWidget) == 0x02A8); // 680 bytes (0x000268 - 0x0002A8)
static_assert(sizeof(UVoltageMatchingWidget) == 0x0288); // 648 bytes (0x000280 - 0x000288)
static_assert(sizeof(AVolumeZone) == 0x0260); // 608 bytes (0x000258 - 0x000260)
static_assert(sizeof(AVoteSystemManager) == 0x02C8); // 712 bytes (0x000220 - 0x0002C8)
static_assert(sizeof(UVoteTopic) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(UVoteTopic_InitiateCargoDrop) == 0x0048); // 72 bytes (0x000048 - 0x000048)
static_assert(sizeof(UVoteTopic_SetTimeOfDay) == 0x0050); // 80 bytes (0x000048 - 0x000050)
static_assert(sizeof(UVoteTopic_SetWeather) == 0x0050); // 80 bytes (0x000048 - 0x000050)
static_assert(sizeof(FMessageStruct) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(UWarning) == 0x0278); // 632 bytes (0x000268 - 0x000278)
static_assert(sizeof(UWarningNotification) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWarningNotificationDescription) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UWarningSignWidget) == 0x0270); // 624 bytes (0x000268 - 0x000270)
static_assert(sizeof(UWaterDetectionComponent) == 0x0110); // 272 bytes (0x0000C8 - 0x000110)
static_assert(sizeof(UWaterSurfaceAssetData) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UWaypointScreenWidget) == 0x0288); // 648 bytes (0x000268 - 0x000288)
static_assert(sizeof(UWaypointWidget) == 0x0398); // 920 bytes (0x000340 - 0x000398)
static_assert(sizeof(UWeaponAccuracyGroup) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UWeaponActionSequence) == 0x0068); // 104 bytes (0x000028 - 0x000068)
static_assert(sizeof(UWeaponActionRocketLauncherArmSequence) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(UWeaponActionRocketLauncherUnarmSequence) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(UWeaponActionWornOutFiringConditions) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UWeaponAmmoDisplayContainerWidget) == 0x0290); // 656 bytes (0x000268 - 0x000290)
static_assert(sizeof(UWeaponAmmoDisplayWidget) == 0x0278); // 632 bytes (0x000268 - 0x000278)
static_assert(sizeof(UWeaponAnimInstance) == 0x0310); // 784 bytes (0x0002D0 - 0x000310)
static_assert(sizeof(AWeaponAttachmentMagazine) == 0x0AA0); // 2720 bytes (0x0009D8 - 0x000AA0)
static_assert(sizeof(AWeaponAttachmentAutoCrossbowMagazine) == 0x0AA0); // 2720 bytes (0x000AA0 - 0x000AA0)
static_assert(sizeof(AWeaponAttachmentBayonet) == 0x09D0); // 2512 bytes (0x0009D0 - 0x0009D0)
static_assert(sizeof(AWeaponAttachmentCharm) == 0x09E0); // 2528 bytes (0x0009D8 - 0x0009E0)
static_assert(sizeof(AWeaponAttachmentFlashlight) == 0x0A00); // 2560 bytes (0x0009D0 - 0x000A00)
static_assert(sizeof(FMeshMaterialPair) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(AWeaponAttachmentGhillie) == 0x0A30); // 2608 bytes (0x0009D0 - 0x000A30)
static_assert(sizeof(AWeaponAttachmentSight) == 0x09D8); // 2520 bytes (0x0009D0 - 0x0009D8)
static_assert(sizeof(AWeaponAttachmentScope) == 0x09E0); // 2528 bytes (0x0009D8 - 0x0009E0)
static_assert(sizeof(AWeaponAttachmentNightVisionScope) == 0x09F0); // 2544 bytes (0x0009E0 - 0x0009F0)
static_assert(sizeof(AWeaponAttachmentScopeRail) == 0x09E0); // 2528 bytes (0x0009D0 - 0x0009E0)
static_assert(sizeof(AWeaponAttachmentSuppressor) == 0x09E0); // 2528 bytes (0x0009D0 - 0x0009E0)
static_assert(sizeof(AWeaponAttachmentUniversalFlashlight) == 0x0A50); // 2640 bytes (0x000A00 - 0x000A50)
static_assert(sizeof(AWeaponAutoCrossbow) == 0x4430); // 17456 bytes (0x003008 - 0x004430)
static_assert(sizeof(UWeaponAutoCrossbowAnimInstance) == 0x0320); // 800 bytes (0x000310 - 0x000320)
static_assert(sizeof(FWeaponBowAimOffsets) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FWeaponBowArmsShake) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FWeaponBowStateDataReplicated) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(AWeaponBow) == 0x3450); // 13392 bytes (0x003008 - 0x003450)
static_assert(sizeof(UWeaponBowAnimInstance) == 0x0330); // 816 bytes (0x000310 - 0x000330)
static_assert(sizeof(AWeaponCrossbow) == 0x3060); // 12384 bytes (0x003008 - 0x003060)
static_assert(sizeof(UWeaponCrossbowAnimInstance) == 0x0320); // 800 bytes (0x000310 - 0x000320)
static_assert(sizeof(UWeaponDamageGroup) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(UWeaponDamageStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UWeaponDisassemblyToolItemTag) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(AWeaponFlamethrower) == 0x3100); // 12544 bytes (0x003008 - 0x003100)
static_assert(sizeof(UWeaponHandler) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(AWeaponHolsterItem) == 0x0A80); // 2688 bytes (0x000A40 - 0x000A80)
static_assert(sizeof(UWeaponItemEntitySetup) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(UWeaponScopeItemComponent) == 0x0270); // 624 bytes (0x000120 - 0x000270)
static_assert(sizeof(UWeaponNightVisionScopeItemComponent) == 0x0310); // 784 bytes (0x000270 - 0x000310)
static_assert(sizeof(FWeaponPaintjobPatternParams) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(UWeaponPaintjobCommonData) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UWeaponPaintjobItemComponent) == 0x0120); // 288 bytes (0x0000C8 - 0x000120)
static_assert(sizeof(UWeaponRecoilGroup) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(AWeaponRevolver) == 0x3070); // 12400 bytes (0x003008 - 0x003070)
static_assert(sizeof(UWeaponRevolverAnimInstance) == 0x0320); // 800 bytes (0x000310 - 0x000320)
static_assert(sizeof(AWeaponRocketLauncher) == 0x3070); // 12400 bytes (0x003008 - 0x003070)
static_assert(sizeof(UWeaponRocketLauncherAnimInstance) == 0x0320); // 800 bytes (0x000310 - 0x000320)
static_assert(sizeof(UWeaponScopeWidget) == 0x0280); // 640 bytes (0x000268 - 0x000280)
static_assert(sizeof(UWeaponFirstPersonAnimationsDataAsset) == 0x00E8); // 232 bytes (0x000098 - 0x0000E8)
static_assert(sizeof(UWeaponSightItemComponent) == 0x00E0); // 224 bytes (0x0000C8 - 0x0000E0)
static_assert(sizeof(UWeaponState) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UWeaponStateActive) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWeaponStateActiveManualFiring) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWeaponStateAutoCrossbowActive) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWeaponStateFiring) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWeaponStateAutoCrossbowFire) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UWeaponStateBowActive) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWeaponStateBowAnticipateDraw) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UWeaponStateBowAnticipateFiring) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UWeaponStateBowCancelFiring) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UWeaponStateBowDraw) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(UWeaponStateBowFire) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWeaponStateBowFireAndInsertArrow) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UWeaponStateBowFiring) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UWeaponStateBowInsertArrow) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UWeaponStateBowRemoveArrow) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UWeaponStateChamberBullet) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UWeaponStateCheckAmmo) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UWeaponStateClearMalfunction) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UWeaponStateCrossbowActive) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWeaponStateCrossbowFire) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWeaponStateCrossbowFireAndInsertArrow) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWeaponStateEquipping) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWeaponStateFiringAutomatic) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UWeaponStateFiringBurst) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UWeaponStateFiringManual) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UWeaponStateFiringSemiAutomatic) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UWeaponStateInactive) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWeaponStateReload) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UWeaponStateRevolverActive) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWeaponStateRevolverFire) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UWeaponStateRocketLauncherActiveArmed) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWeaponStateRocketLauncherActiveUnarmed) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWeaponStateRocketLauncherArm) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UWeaponStateRocketLauncherUnarm) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UWeaponStateUnEquipping) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWeaponStateUnloadAmmo) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(AWeatherAmbientSounds) == 0x0258); // 600 bytes (0x000220 - 0x000258)
static_assert(sizeof(FAmbientOcclusionPostProcessSettings) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FRandomRollStage) == 0x0098); // 152 bytes (0x000000 - 0x000098)
static_assert(sizeof(FMultistageRandomRoll) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(AWeatherController2) == 0x16C0); // 5824 bytes (0x000220 - 0x0016C0)
static_assert(sizeof(UWeedRemovalToolItemTag) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(AWetnessManager) == 0x0270); // 624 bytes (0x000220 - 0x000270)
static_assert(sizeof(UWetnessStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UWettable) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FWheelBarrowParametersPerMovementPace) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(AWheelBarrow) == 0x24A0); // 9376 bytes (0x001D60 - 0x0024A0)
static_assert(sizeof(UWheelBarrowDriverCapsuleComponent) == 0x04B0); // 1200 bytes (0x000478 - 0x0004B0)
static_assert(sizeof(UWheelBarrowMountSlot) == 0x0188); // 392 bytes (0x000188 - 0x000188)
static_assert(sizeof(UWheelBarrowDriverMountSlot) == 0x0190); // 400 bytes (0x000188 - 0x000190)
static_assert(sizeof(UWinCounterWidget) == 0x0268); // 616 bytes (0x000268 - 0x000268)
static_assert(sizeof(UWindowFortificationsType) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(UWindowMarkersComponent) == 0x0260); // 608 bytes (0x0001F8 - 0x000260)
static_assert(sizeof(UWindowMarkersRegistry) == 0x0200); // 512 bytes (0x0000B0 - 0x000200)
static_assert(sizeof(AWindVane) == 0x0250); // 592 bytes (0x000220 - 0x000250)
static_assert(sizeof(UWorldCraftingMarkerWidget) == 0x0378); // 888 bytes (0x000340 - 0x000378)
static_assert(sizeof(UWorldDoorOwnershipManager) == 0x0100); // 256 bytes (0x0000B0 - 0x000100)
static_assert(sizeof(AWorldEventManager) == 0x0250); // 592 bytes (0x000220 - 0x000250)
static_assert(sizeof(AWorldItemSpawner) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(UWorldItemSpawnerComponent) == 0x04C0); // 1216 bytes (0x000458 - 0x0004C0)
static_assert(sizeof(UWorldQuestMarkerWidget) == 0x0378); // 888 bytes (0x000340 - 0x000378)
static_assert(sizeof(UWorldStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(AWristwatch) == 0x02B8); // 696 bytes (0x000220 - 0x0002B8)
static_assert(sizeof(UXMLStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UYesNoDialog) == 0x02C8); // 712 bytes (0x000268 - 0x0002C8)
static_assert(sizeof(UZombie2EncounterSaveState) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UZombie2AIControllerEncounterSaveState) == 0x0088); // 136 bytes (0x000080 - 0x000088)
static_assert(sizeof(AZombieAIController2) == 0x0910); // 2320 bytes (0x000450 - 0x000910)
static_assert(sizeof(UZombieAnimInstance2) == 0x03B0); // 944 bytes (0x0002B8 - 0x0003B0)
static_assert(sizeof(UZombieArmorDamageReductionAssetData) == 0x0058); // 88 bytes (0x000028 - 0x000058)
static_assert(sizeof(UZombieImpersonatingItemTag) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UZombieKamikazeComponent) == 0x01F8); // 504 bytes (0x0000B0 - 0x0001F8)
static_assert(sizeof(AZombieKamikazeDummyTrap) == 0x0AE0); // 2784 bytes (0x000AD0 - 0x000AE0)
static_assert(sizeof(UZombieMovementComponent2) == 0x0F30); // 3888 bytes (0x000DA0 - 0x000F30)
static_assert(sizeof(UZombieSoundComponent2) == 0x0168); // 360 bytes (0x000128 - 0x000168)
static_assert(sizeof(FZoneConfiguration) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UZoneConfigurationDataAsset) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UZoneRegistry) == 0x00B8); // 184 bytes (0x0000B0 - 0x0000B8)
static_assert(sizeof(FWidgetDisplayInfo) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FInteractionData) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FCharacterActionReplicationHelper) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FEnvironmentDescription) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FCharacterActionAck) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FMeleeAttackCapsule) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(FMeleeAttackCapsuleHitInfo) == 0x0160); // 352 bytes (0x000000 - 0x000160)
static_assert(sizeof(FBaseInteractionEvent) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FPrisonerTeleportRequest) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSectorId) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FMiniGameEndParams) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FAmmunitionArrowSpawningParamsHelper) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FBaseInteractionParams) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FTriggeredEventData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FWeaponMalfunctionProbability) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FWeaponMalfunctionEventDescription) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FFireShotDescription) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FFireShotProjectileDescription) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FFireShotProjectileData) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FAchievementStats) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FAchievements) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FActiveQuest) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FActiveTask) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(FPrisonerPlayerInfo) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FPrisonerSkillInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FArmedNPCRecentProjectileDamage) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FGamePaymentTransactionRequestData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FBankCardOperationRequestData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FBankTransactionRequestData) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FCurrencyConversionRequestData) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FBankAccountRegistryRequestData) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FBankCardOwnershipPayloadData) == 0x0003); // 3 bytes (0x000000 - 0x000003)
static_assert(sizeof(FBaseDamageInteractionEvent) == 0x00A8); // 168 bytes (0x000008 - 0x0000A8)
static_assert(sizeof(FBasicNotificationDescriptionData) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FBrennerUpperBodyPitchRangeData) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FBrennerAttackDescription) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FBuildingsArray) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FScumPointDamageEvent) == 0x00C0); // 192 bytes (0x0000B8 - 0x0000C0)
static_assert(sizeof(FBurnPointDamageEvent) == 0x00D0); // 208 bytes (0x0000C0 - 0x0000D0)
static_assert(sizeof(FCharacterActionAnimationDescription) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FCharacterMeshClassArray) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FHitByMeleeImpactSoundsInfo) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FCharacterStats) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FCharacterStatsItem) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FSelectedChoppingTool) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FPlayerUnsubscribeData) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(FTraderUnsubscribeData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FNetPackedProjectileDamageEvent) == 0x0120); // 288 bytes (0x0000C0 - 0x000120)
static_assert(sizeof(FCollisionPointDamageEvent) == 0x0170); // 368 bytes (0x0000C0 - 0x000170)
static_assert(sizeof(FRepActionData) == 0x0003); // 3 bytes (0x000000 - 0x000003)
static_assert(sizeof(FBaseElementSpawnParams) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FBaseInteractionVisitor) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FConZOnDemandElementData) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FConZPlacementQueryParams) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FConZBaseElementInteractionData) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FConZBaseInteractionData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FConZBaseData) == 0x0190); // 400 bytes (0x000000 - 0x000190)
static_assert(sizeof(FConZElementColoringData) == 0x0002); // 2 bytes (0x000000 - 0x000002)
static_assert(sizeof(FConZItemElementData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FConZFlagElementData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FConZBaseElementData) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FConZBaseElementTransformData) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FBoatParametersPerMovementPace_Deprecated) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FActiveHit) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FVirtualizedWaterSpline) == 0x00A0); // 160 bytes (0x000000 - 0x0000A0)
static_assert(sizeof(FWaterQueryResult) == 0x00F0); // 240 bytes (0x000000 - 0x0000F0)
static_assert(sizeof(FConZOceanLocationProperties) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FConZMapLocationProperties) == 0x0003); // 3 bytes (0x000000 - 0x000003)
static_assert(sizeof(FCookedFoodIngredientNetData) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FCookingUtilitySlotInstance_UserSetData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FCookingUtilityUITableRow) == 0x0018); // 24 bytes (0x000008 - 0x000018)
static_assert(sizeof(FCraftingIngredientConsumptionData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FCriminalRecordUIData) == 0x0238); // 568 bytes (0x000000 - 0x000238)
static_assert(sizeof(FSkillTemplateUIData) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FCutsceneSubtitlesTableRow) == 0x0030); // 48 bytes (0x000008 - 0x000030)
static_assert(sizeof(FRadialDamageDescription) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FDamageMultiplierTracker) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FScumRadialDamageEvent) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(FSlidingDoorPartInfo) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FDummyCollisionCapsuleInfo) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FEncounterSpawnTypeArrayData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FEventsRankingStats) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FEventsRankingStatsItem) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FExplosionRadialDamageEvent) == 0x00B8); // 184 bytes (0x000048 - 0x0000B8)
static_assert(sizeof(FFilteredPrimaryAssetId) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FFishingMinigameData) == 0x0074); // 116 bytes (0x000000 - 0x000074)
static_assert(sizeof(FFishingData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FAttachComponentData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FFloatingWidgetUIData) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FFundsOverviewUIData) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FGameEventNotificationUIData) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FPlayerPawnBirdInfo) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FGlobalRaidProtectionPlayerLoginMessagesData) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FGlobalRaidProtectionRaidPeriod) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FHitReactResult) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FPhysicalAnimationDesc) == 0x0034); // 52 bytes (0x000000 - 0x000034)
static_assert(sizeof(FInteractionQueryParameters) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FInventoryStackMemberData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FInventoryNodeWidgetData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FItemGeneralParametersTableRow) == 0x0078); // 120 bytes (0x000008 - 0x000078)
static_assert(sizeof(FItemObstructionTestCapsule) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FItemLootTreeNodeTableRow) == 0x0038); // 56 bytes (0x000020 - 0x000038)
static_assert(sizeof(FItemSpawningParametersTableRow) == 0x0078); // 120 bytes (0x000008 - 0x000078)
static_assert(sizeof(FItemSpawningCooldownGroupTableRow) == 0x0018); // 24 bytes (0x000008 - 0x000018)
static_assert(sizeof(FLazyLoadedObjectPtr) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FCombinationLockGetCombinationRequestData) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FCombinationLockUnlockAttemptRequestData) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FVehicleMarkerData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FVehicleAttachmentPriceDataPerClassMap) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FMeleeAction) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FMeleeDodge) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FMeleeAttack) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FCheckMeleeAttackCapsuleCollisionData) == 0x00D0); // 208 bytes (0x000000 - 0x0000D0)
static_assert(sizeof(FAttackedByMeleeData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FMeshHitZone) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FMeshInstanceId) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FMinigameToolRequestData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FModularTooltipSectionData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FMovableMeshComponentData) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FNotificationDescriptionReplicationHelper) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FNPCGuardAttackDescription) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FNutrientsRDA) == 0x006C); // 108 bytes (0x000000 - 0x00006C)
static_assert(sizeof(FPackedLocation) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FPlaceableActorStateReplicationHelper) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FPlayerLoginInfo) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FTrackingDataNetPackedBits) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(FQuestCycleStatsKey) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FQuestLifetimeStatsKey) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FTrackingDataSetId) == 0x0008); // 8 bytes (0x000008 - 0x000008)
static_assert(sizeof(FTrackedQuest) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FPlayerRpcChannelServerDataResponseNetSerializer) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FPlayerRpcChannelServerDataRequestNetSerializer) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FPrisonerFPWeaponFOVSettings) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FInstrumentEvent) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FPrisonerAppearanceId) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FPrisonerBodySimulationData_BodyPartMappingArray) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FWindowInfo) == 0x00C0); // 192 bytes (0x000000 - 0x0000C0)
static_assert(sizeof(FWindowDetectionParams) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FLadderDetectionParams) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FClimbableObstacleInfo) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FPrisonerConditionalSpawnEquipment) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(FMusicPlayerPlaybackOptions) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FPrisonerNameChangeRequestData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FPrisonerReportingEventsMap) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FPrisonerReportingEvents) == 0x0288); // 648 bytes (0x000000 - 0x000288)
static_assert(sizeof(FLastDamageDealtInfo) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FThrowingItemData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FPrisonerDistanceTravelledContext) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSkillExperienceChange) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FBodyConditionSpriteData) == 0x0160); // 352 bytes (0x000000 - 0x000160)
static_assert(sizeof(FDerivedPrisonerSkillComponentUIData) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FControllerDigestionItem) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FPrisonerViewInfo) == 0x0610); // 1552 bytes (0x0005F0 - 0x000610)
static_assert(sizeof(FTaskInstance) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FQuestInstance) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FQuestGiverIdentifier) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FTaskInstanceId) == 0x0008); // 8 bytes (0x000008 - 0x000008)
static_assert(sizeof(FTrackingDataId) == 0x0008); // 8 bytes (0x000008 - 0x000008)
static_assert(sizeof(FQuickAccessClientSyncData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FQuickAccessSlotData) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FEngineeringEventData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FRequiredItemForItemTagParams) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FReplenishableResource) == 0x00A0); // 160 bytes (0x000000 - 0x0000A0)
static_assert(sizeof(FReplenishableResourceSlotDescription) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FRequestSpamFilter) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FResourceNetworkGUID) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FAreaResourceLockNetwork) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FActorResourceLockNetwork) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FMeshInstancesRestoreOptions) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FRestorableMeshInstanceId) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FPriceUpdateData) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(FMultiplierByClass) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FDamageMultipliers) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSkillEventWeapon) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSkillEventWeaponClearedMalfunction) == 0x0002); // 2 bytes (0x000001 - 0x000002)
static_assert(sizeof(FSkillEventWeaponProjectileHitTarget) == 0x0028); // 40 bytes (0x000001 - 0x000028)
static_assert(sizeof(FSkillEventWeaponReload) == 0x0001); // 1 bytes (0x000001 - 0x000001)
static_assert(sizeof(FSkillEventWeaponFireShot) == 0x0001); // 1 bytes (0x000001 - 0x000001)
static_assert(sizeof(FSquadLeaveInfo) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FCaughtFishData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FFishingStats) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FSurvivalStats) == 0x0190); // 400 bytes (0x000000 - 0x000190)
static_assert(sizeof(FSurvivalTipData) == 0x0030); // 48 bytes (0x000008 - 0x000030)
static_assert(sizeof(FConZWeaponDescRow) == 0x0038); // 56 bytes (0x000008 - 0x000038)
static_assert(sizeof(FConZConsoleVariableRow) == 0x0028); // 40 bytes (0x000008 - 0x000028)
static_assert(sizeof(FConZDimensionRow) == 0x0020); // 32 bytes (0x000008 - 0x000020)
static_assert(sizeof(FConZFontRow) == 0x0070); // 112 bytes (0x000008 - 0x000070)
static_assert(sizeof(FConZColorRow) == 0x0028); // 40 bytes (0x000008 - 0x000028)
static_assert(sizeof(FTeleportRequest) == 0x002C); // 44 bytes (0x000000 - 0x00002C)
static_assert(sizeof(FTournamentParameters) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FTrackingDataSet) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FTradeOutpostManagerDescription) == 0x00B8); // 184 bytes (0x000000 - 0x0000B8)
static_assert(sizeof(FTradeableClassAndQuantity) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FEconomyManagerRequestData) == 0x00B0); // 176 bytes (0x000000 - 0x0000B0)
static_assert(sizeof(FConZTradeableDescRow) == 0x0158); // 344 bytes (0x000008 - 0x000158)
static_assert(sizeof(FTradeableClassDataOverrideReplicationHelper) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FPerTraderOverrideDataHelper) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FTradeableOverrideData) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FTraderRuntimeId) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FLegalTender) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FTrapTriggerParams) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FUserProfileAuthorityInfo) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FUserServerHistoryItem) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FVehicleInfo) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FDamageAdjacentAttachment) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FVehicleAttachmentSlotId) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FInputValue) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FClientEffectData) == 0x00B4); // 180 bytes (0x000000 - 0x0000B4)
static_assert(sizeof(FVehicleBaseTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FVehicleSpawnerInfo) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(FVehiclePartDescription) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FVehicleServiceRequest_InstallAttachment) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FVehicleTireEffectProperties) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FVehicleMaterialParameterDescription) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FVehicleEngineStallingParameters) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(FVehicleExhaustParticles) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FVehicleExhaustEffects) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FVehicleExhaustEffectsParameters) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FVehicleDamagedEffectsParameters) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FVersion) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FClassesArray) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FWeaponBowDrawData) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FWeaponTypeAimOffset) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FWeaponCheckAmmoData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FWeaponUnloadAmmoData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FWeatherReplicatedStateSnapshot) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FWorldEventDrawData) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FZombieRagdollAutoRecovery) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(offsetof(FAbandonedBunkerConnectionBinding, ActivationTag) == 0x0000);
static_assert(offsetof(UAbandonedBunkerConnectionSetup, Bindings) == 0x0030);
static_assert(offsetof(FItemSpawnerPreset_Node, Nodes) == 0x0000);
static_assert(offsetof(FItemSpawnerPreset_Node, Rarity) == 0x0030);
static_assert(offsetof(FItemSpawnerPreset_Item, Item) == 0x0000);
static_assert(offsetof(FItemSpawnerPreset_Item, Rarity) == 0x0028);
static_assert(offsetof(FItemSpawnerPreset_Subpreset, Preset) == 0x0000);
static_assert(offsetof(FItemSpawnerPreset_Subpreset, Rarity) == 0x0008);
static_assert(offsetof(FItemSpawnerPresetWithOverrides, Preset) == 0x0000);
static_assert(offsetof(FItemSpawnerPresetWithOverrides, Nodes) == 0x0010);
static_assert(offsetof(FItemSpawnerPresetWithOverrides, Items) == 0x0028);
static_assert(offsetof(FItemSpawnerPresetWithOverrides, Subpresets) == 0x0040);
static_assert(offsetof(FItemSpawnerPresetWithOverrides, Quantity) == 0x0074);
static_assert(offsetof(FAbandonedBunkerFloorSetup, DoorUnlockData) == 0x0000);
static_assert(offsetof(FAbandonedBunkerFloorSetup, KeyCardItem) == 0x0008);
static_assert(offsetof(FAbandonedBunkerFloorSetup, ZombieKeycardSpawnerPreset) == 0x0010);
static_assert(offsetof(FAbandonedBunkerFloorSetup, FloorId) == 0x00C8);
static_assert(offsetof(FAbandonedBunkerFloorSetup, SchematicMesh) == 0x00D0);
static_assert(offsetof(FAbandonedBunkerFloorSetup, SlaveSwitchboards) == 0x00D8);
static_assert(offsetof(FAbandonedBunkerFloorSetup, MasterSwitchboard) == 0x00E8);
static_assert(offsetof(AAbandonedBunker, _sprite) == 0x0308);
static_assert(offsetof(AAbandonedBunker, _masterKeycardUnlockData) == 0x0320);
static_assert(offsetof(AAbandonedBunker, _floorSetup) == 0x0328);
static_assert(offsetof(AAbandonedBunker, _connectionSetup) == 0x0338);
static_assert(offsetof(AAbandonedBunker, _alwaysPoweredRooms) == 0x0340);
static_assert(offsetof(AAbandonedBunker, _killboxRoom) == 0x0364);
static_assert(offsetof(AAbandonedBunker, _killboxRoomTag) == 0x036C);
static_assert(offsetof(AAbandonedBunker, _poweredRoomIds) == 0x0378);
static_assert(offsetof(AAbandonedBunker, _alarmedRoomIds) == 0x0388);
static_assert(offsetof(AAbandonedBunker, _knockoutTeleportLocationTransforms) == 0x0398);
static_assert(offsetof(AAbandonedBunker, _temporaryOverrideActivationReservation) == 0x0438);
static_assert(offsetof(AAbandonedBunker, _currentActivationReservation) == 0x0450);
static_assert(offsetof(AAbandonedBunker, _abandonedBunkerManagerComponent) == 0x0478);
static_assert(offsetof(AAbandonedBunker, _razorNavigationInvokerComponent) == 0x0480);
static_assert(offsetof(AAbandonedBunkerBCUMemoryModuleTerminal, _mesh) == 0x0228);
static_assert(offsetof(AAbandonedBunkerBCUMemoryModuleTerminal, _progressBarMesh) == 0x0230);
static_assert(offsetof(AAbandonedBunkerBCUMemoryModuleTerminal, _cooldown) == 0x0238);
static_assert(offsetof(AAbandonedBunkerBCUMemoryModuleTerminal, _lastDownloadTime) == 0x0240);
static_assert(offsetof(AAbandonedBunkerBCUMemoryModuleTerminal, _downloadActionStartAudio) == 0x0260);
static_assert(offsetof(AAbandonedBunkerBCUMemoryModuleTerminal, _downloadActionStopAudio) == 0x0268);
static_assert(offsetof(AAbandonedBunkerDialPad, _minigameClass) == 0x0228);
static_assert(offsetof(AAbandonedBunkerDialPad, _minigameConfigurationClass) == 0x0230);
static_assert(offsetof(AAbandonedBunkerDialPad, _hackingMinigameClass) == 0x0238);
static_assert(offsetof(AAbandonedBunkerDialPad, _hackingMinigameConfiguration) == 0x0240);
static_assert(offsetof(AAbandonedBunkerDialPad, _connectedDoor) == 0x0248);
static_assert(offsetof(AAbandonedBunkerDialPad, _lockedColor) == 0x0250);
static_assert(offsetof(AAbandonedBunkerDialPad, _unlockedColor) == 0x0260);
static_assert(offsetof(AAbandonedBunkerDialPad, _offColor) == 0x0270);
static_assert(offsetof(AAbandonedBunkerDialPad, _wornButtons) == 0x0288);
static_assert(offsetof(UAbandonedBunkerDoorComponent, _outerDoor) == 0x0500);
static_assert(offsetof(UAbandonedBunkerDoorComponent, _doorOpenMethod) == 0x0508);
static_assert(offsetof(UAbandonedBunkerDoorComponent, _directionTowardsInside) == 0x0514);
static_assert(offsetof(UAbandonedBunkerDoorComponent, _roomId) == 0x0524);
static_assert(offsetof(UAbandonedBunkerDoorComponent, _hackingMinigameClass) == 0x0548);
static_assert(offsetof(UAbandonedBunkerDoorComponent, _hackingMinigameConfiguration) == 0x0550);
static_assert(offsetof(FUnlockLocation, Transform) == 0x0000);
static_assert(offsetof(AItemContainer, _rootComponent) == 0x0230);
static_assert(offsetof(AItemContainer, _unlockPositionMarker) == 0x0250);
static_assert(offsetof(AItemContainer, _upgradeItemsClasses) == 0x0288);
static_assert(offsetof(AItemContainer, _lockData) == 0x0298);
static_assert(offsetof(AItemContainer, _originalUpgradeItemClasses) == 0x02B8);
static_assert(offsetof(AItemContainer, _originalLockData) == 0x02C8);
static_assert(offsetof(AItemContainer, _famePointAwardTag) == 0x0304);
static_assert(offsetof(UAbandonedBunkerLightComponent, _controlType) == 0x00B0);
static_assert(offsetof(UAbandonedBunkerLightComponent, _lightComponents) == 0x00C0);
static_assert(offsetof(UAbandonedBunkerLightComponent, _meshComponents) == 0x00E8);
static_assert(offsetof(UAbandonedBunkerLightComponent, _particleComponents) == 0x0110);
static_assert(offsetof(UAbandonedBunkerLightComponent, _niagaraComponents) == 0x0128);
static_assert(offsetof(UAbandonedBunkerLightComponent, _audioComponents) == 0x0140);
static_assert(offsetof(UAbandonedBunkerLightComponent, _audioEventStart) == 0x0150);
static_assert(offsetof(UAbandonedBunkerLightComponent, _audioEventStop) == 0x0158);
static_assert(offsetof(FEntitySetup_Component, Name) == 0x0000);
static_assert(offsetof(FEntitySetup_Component, Component) == 0x0008);
static_assert(offsetof(UEntitySetup, Actor) == 0x0048);
static_assert(offsetof(UEntitySetup, Components) == 0x0070);
static_assert(offsetof(AAbandonedBunkerSwitchboard, _disabledSwitches) == 0x0270);
static_assert(offsetof(AAbandonedBunkerSwitchboard, _switchboardComponent) == 0x0280);
static_assert(offsetof(AAbandonedBunkerSwitchboard, _gaugeClusterComponent) == 0x0288);
static_assert(offsetof(AAbandonedBunkerSwitchboard, _defaultFuseGaugeTag) == 0x02A0);
static_assert(offsetof(AAbandonedBunkerSwitchboard, _attachedFuseGaugeTag) == 0x02A8);
static_assert(offsetof(AAbandonedBunkerSwitchboard, _fuseAttachmentSocketName) == 0x02B0);
static_assert(offsetof(AAbandonedBunkerSwitchboard, _masterSwitchboardMinigameClass) == 0x02B8);
static_assert(offsetof(AAbandonedBunkerSwitchboard, _masterSwitchboardMinigameConfigurationClass) == 0x02C0);
static_assert(offsetof(AAbandonedBunkerSwitchboard, _slaveSwitchboardMinigameClass) == 0x02C8);
static_assert(offsetof(AAbandonedBunkerSwitchboard, _slaveSwitchboardMinigameConfigurationClass) == 0x02D0);
static_assert(offsetof(AAbandonedBunkerSwitchboard, _decalTransform) == 0x02E0);
static_assert(offsetof(AAbandonedBunkerSwitchboard, _switchFlippedAudioEvent) == 0x0310);
static_assert(offsetof(AAbandonedBunkerSwitchboard, _fuseAddedAudioEvent) == 0x0318);
static_assert(offsetof(AAbandonedBunkerSwitchboard, _fuseBurnedAudioEvent) == 0x0320);
static_assert(offsetof(AAbandonedBunkerSwitchboard, _repAttachedFuseItem) == 0x0330);
static_assert(offsetof(AAbandonedBunkerSwitchboard, _attachedFuseItem) == 0x0338);
static_assert(offsetof(UAbandonedBunkerZoneBoxComponent, _roomId) == 0x0480);
static_assert(offsetof(UAbandonedBunkerZoneCommonData, NoiseAccumulationMultiplierPerNoiseTag) == 0x0058);
static_assert(offsetof(UAbandonedBunkerZoneCommonData, EnemyActivationEventCooldownRange) == 0x00D0);
static_assert(offsetof(UAbandonedBunkerZoneCommonData, EnemyActivationEventRespawnCooldownRange) == 0x00E0);
static_assert(offsetof(UAbandonedBunkerZoneCommonData, RazorClass) == 0x00F8);
static_assert(offsetof(UAbandonedBunkerZoneCommonData, BrennerClass) == 0x0120);
static_assert(offsetof(UAbandonedBunkerZoneCommonData, NaturalRazorLimitRange) == 0x0148);
static_assert(offsetof(UAbandonedBunkerZoneCommonData, VentilationRazorLimitRange) == 0x0164);
static_assert(offsetof(UAbandonedBunkerZoneCommonData, VentilationRazorsSpawnedPerAlarmEvent) == 0x0174);
static_assert(offsetof(UAbandonedBunkerZoneCommonData, DropshipSentryEncounterClass) == 0x0190);
static_assert(offsetof(UAbandonedBunkerZoneCommonData, SentryNavigationInvokerClass) == 0x0198);
static_assert(offsetof(UAbandonedBunkerZoneCommonData, VaultRoomId) == 0x01A8);
static_assert(offsetof(UAbandonedBunkerZoneManagerComponent, _razorNormalSpawnTransforms) == 0x0208);
static_assert(offsetof(UAbandonedBunkerZoneManagerComponent, _razorSpawnPoints) == 0x0218);
static_assert(offsetof(UAbandonedBunkerZoneManagerComponent, _brennerSpawnPoints) == 0x0228);
static_assert(offsetof(UAbandonedBunkerZoneManagerComponent, _dropshipSentryEncounterSpawnLocation) == 0x0238);
static_assert(offsetof(UActionProgressWidget, Progress) == 0x02A0);
static_assert(offsetof(UActionProgressWidget, Cancel) == 0x02A8);
static_assert(offsetof(UActionProgressWidget, PercentageText) == 0x02B0);
static_assert(offsetof(UActionProgressWidget, Percent) == 0x02B8);
static_assert(offsetof(UAdjustableSeparator, _slotSizeBox) == 0x0268);
static_assert(offsetof(UAdjustableSeparator, _divider) == 0x0270);
static_assert(offsetof(FAdminCommandArgumentDescription, Name) == 0x0000);
static_assert(offsetof(FAdminCommandArgumentDescription, Description) == 0x0018);
static_assert(offsetof(FAdminCommandArgumentDescription, Data) == 0x0038);
static_assert(offsetof(UAdminCommand, _verb) == 0x0028);
static_assert(offsetof(UAdminCommand, _argumentDescriptions) == 0x0038);
static_assert(offsetof(UAdminCommand, _requiredExecutorLevel) == 0x0052);
static_assert(offsetof(UAdminCommand, _description) == 0x0060);
static_assert(offsetof(UAdminCommand_AddOrRemoveWidget, _widgetClassesByName) == 0x00A0);
static_assert(offsetof(UAdminCommand_AddPrisonerBodyEffect, _bodyEffectClass) == 0x00A0);
static_assert(offsetof(UAdminCommand_AdminLight, _adminLightComponent) == 0x00A0);
static_assert(offsetof(UAdminCommand_CookRecipe, _recipe) == 0x00A0);
static_assert(offsetof(UAdminCommand_EquipParachute, _parachuteClass) == 0x00A0);
static_assert(offsetof(UAdminCommand_ExportItemLootTree, _lootTreeToExport) == 0x00A0);
static_assert(offsetof(UAdminCommand_ForceEncounterAtPlayerLocation, _encounterClass) == 0x00A0);
static_assert(offsetof(FSearchItemSpawnerPresetArray, ItemSpawnerPresets) == 0x0000);
static_assert(offsetof(UAdminCommand_ListItemsSpawnLocations, _itemSpawnerPresets) == 0x00A0);
static_assert(offsetof(UAdminCommand_ListItemsSpawnLocations, _itemClasses) == 0x00C0);
static_assert(offsetof(UAdminCommand_ListPrimaryAssets, _primaryAssetType) == 0x00A0);
static_assert(offsetof(UAdminCommand_ListPrisonerBodyEffects, _bodyEffectClass) == 0x00A0);
static_assert(offsetof(UAdminCommand_ListSpawnedVehicles, _vehicleSpawnGroupsByCategory) == 0x00A0);
static_assert(offsetof(UAdminCommand_RemovePrisonerBodyEffect, _bodyEffectClass) == 0x00A0);
static_assert(offsetof(UAdminCommand_SpawnPrimaryActorAsset, _primaryAssetType) == 0x00A0);
static_assert(offsetof(UAdminCommand_SpawnPrimaryActorAsset, _spawnOffset) == 0x0100);
static_assert(offsetof(UAdminCommand_SpawnDebugAnimalTrack, _primaryAssetType) == 0x00A0);
static_assert(offsetof(UAdminCommand_SpawnReflectionSphere, _actorClass) == 0x00A0);
static_assert(offsetof(UAdminCommand_ToggleFamePointsDebugVisualization, _famePointDebugComponentClass) == 0x00A0);
static_assert(offsetof(UAdminCommandArgumentCompletion_Constant, _completionValues) == 0x0038);
static_assert(offsetof(UAdminCommandArgumentCompletion_Enum, _enum) == 0x0038);
static_assert(offsetof(UAdminCommandArgumentCompletion_PrimaryAsset, _primaryAssetType) == 0x0038);
static_assert(offsetof(UAdminCommandArgumentCompletion_Widget, _commandClass) == 0x0038);
static_assert(offsetof(UAdminCommandArgumentDataTypeBase, DataTypeName) == 0x0030);
static_assert(offsetof(UAdminCommandArgumentDataTypeBase, ArgumentCompletion) == 0x0048);
static_assert(offsetof(UAdminCommandArgumentDataType_Location, _defaultValue) == 0x0108);
static_assert(offsetof(UAdminCommandArgumentDataType_String, _defaultValue) == 0x0108);
static_assert(offsetof(UAdminCommandArgumentDataType_Transform, _defaultValue) == 0x0110);
static_assert(offsetof(UAdminCommandArgumentDataType_TransformOrLocation, _defaultLocationValue) == 0x0108);
static_assert(offsetof(UAdminCommandCompletionManager, _commands) == 0x0028);
static_assert(offsetof(UAdminCommandRegistry, _commands) == 0x0038);
static_assert(offsetof(UAdminLight, _intensityVersusTimeOfDay) == 0x0360);
static_assert(offsetof(UAdminPlantPanel, _seedingButton) == 0x0270);
static_assert(offsetof(UAdminPlantPanel, _vegetatingButton) == 0x0278);
static_assert(offsetof(UAdminPlantPanel, _floweringButton) == 0x0280);
static_assert(offsetof(UAdminPlantPanel, _ripeningButton) == 0x0288);
static_assert(offsetof(UAdminPlantPanel, _killButton) == 0x0290);
static_assert(offsetof(UAdminPlantPanel, _addWeedButton) == 0x0298);
static_assert(offsetof(UAdminPlantPanel, _removeWeedButton) == 0x02A0);
static_assert(offsetof(UAdminPlantPanel, _removePlantButton) == 0x02A8);
static_assert(offsetof(UAdminPlantPanel, _addWaterButton) == 0x02B0);
static_assert(offsetof(FAITeamAttitude, ObserverTeamResponseToOtherSubteam) == 0x0000);
static_assert(offsetof(FAITeamAttitude, ObserverTeamResponseToSameSubteam) == 0x0001);
static_assert(offsetof(FAITeamAttitude, ObserverTeamResponseToNullSubteam) == 0x0002);
static_assert(offsetof(FAITeamAttitudeData, AttitudePerTeam) == 0x0000);
static_assert(offsetof(UAIManager, _teamAttitudes) == 0x0040);
static_assert(offsetof(FVehicleAttachmentMissingParticleEffect, ParticleEffect) == 0x0000);
static_assert(offsetof(FVehicleAttachmentMissingParticleEffect, Offset) == 0x0010);
static_assert(offsetof(FVehicleAttachmentMissingParticleEffect, SpawnedEffect) == 0x0040);
static_assert(offsetof(FVehicleAttachmentSlot, PossibleAttachmentAssetIds) == 0x0000);
static_assert(offsetof(FVehicleAttachmentSlot, StateTags) == 0x0010);
static_assert(offsetof(FVehicleAttachmentSlot, ParticleEffectsToPlayWhileMissingAttachment) == 0x0030);
static_assert(offsetof(FVehicleAttachmentSlot, ServiceModeMaterial) == 0x0048);
static_assert(offsetof(FVehicleAttachmentSlot, _previewMesh) == 0x0050);
static_assert(offsetof(FRepairableParams, RepairableTypes) == 0x0000);
static_assert(offsetof(FRepairableParams, MinSkillLevelRequired) == 0x0031);
static_assert(offsetof(FVehicleImpactEffects, ParticleSystem) == 0x0008);
static_assert(offsetof(FVehicleImpactEffects, ParticlesScale) == 0x0010);
static_assert(offsetof(FVehicleImpactEffects, AudioEvent) == 0x0020);
static_assert(offsetof(FVehicleImpactEffects, CameraShake) == 0x0028);
static_assert(offsetof(FVehicleDamageHandlerParams, DamageRegions) == 0x0000);
static_assert(offsetof(AVehicleBase, _vehicleMeshComponent) == 0x0478);
static_assert(offsetof(AVehicleBase, _submergedInWaterDamagePerSecond) == 0x04A4);
static_assert(offsetof(AVehicleBase, _itemContainer) == 0x0500);
static_assert(offsetof(AVehicleBase, _vehicleAttachments) == 0x0508);
static_assert(offsetof(AVehicleBase, _repVehicleAttachments) == 0x0518);
static_assert(offsetof(AVehicleBase, _chassisSlot) == 0x0538);
static_assert(offsetof(AVehicleBase, _lockInfluencingAttachmentSlotTags) == 0x0598);
static_assert(offsetof(AVehicleBase, _lockingAttachmentSlotTags) == 0x05B8);
static_assert(offsetof(AVehicleBase, _vehicleSystems) == 0x05D8);
static_assert(offsetof(AVehicleBase, _repServerEntitySetupAndId) == 0x0600);
static_assert(offsetof(AVehicleBase, _forcePushComponent) == 0x0AC8);
static_assert(offsetof(AVehicleBase, _attachmentHealthWidgets) == 0x0AD0);
static_assert(offsetof(AVehicleBase, _attachmentHealthWidget) == 0x0B20);
static_assert(offsetof(AVehicleBase, _entityOverlapDetection) == 0x0B28);
static_assert(offsetof(AVehicleBase, _networkPrediction) == 0x0B30);
static_assert(offsetof(AVehicleBase, _serverCollisionProfileName) == 0x0B38);
static_assert(offsetof(AVehicleBase, SpawnGroup) == 0x0B5C);
static_assert(offsetof(AVehicleBase, _itemContainerClass) == 0x0B78);
static_assert(offsetof(AVehicleBase, _repairableParams) == 0x0B90);
static_assert(offsetof(AVehicleBase, _repLocationWhenNotSimulatingPhysics) == 0x0BCC);
static_assert(offsetof(AVehicleBase, _repRotationWhenNotSimulatingPhysics) == 0x0BD8);
static_assert(offsetof(AVehicleBase, _serviceComponent) == 0x0C68);
static_assert(offsetof(AVehicleBase, _cameraStabilizer) == 0x0D48);
static_assert(offsetof(AVehicleBase, _healthBarCaption) == 0x0D60);
static_assert(offsetof(AVehicleBase, _impactEffects) == 0x0D78);
static_assert(offsetof(AVehicleBase, _instantDestructionExplosionEffect) == 0x0E90);
static_assert(offsetof(AVehicleBase, _instantDestructionExplosionAudioEvent) == 0x0E98);
static_assert(offsetof(AVehicleBase, _mountSlotIndicatorsWidget) == 0x0F38);
static_assert(offsetof(AVehicleBase, _vehicleHandlingSkill) == 0x0F50);
static_assert(offsetof(AVehicleBase, _aiNoiseLevel) == 0x0F68);
static_assert(offsetof(AVehicleBase, _aiNoiseOffset) == 0x0F74);
static_assert(offsetof(AVehicleBase, _supportedNavAgents) == 0x0F88);
static_assert(offsetof(AVehicleBase, _smokeParticlesLow) == 0x0FA8);
static_assert(offsetof(AVehicleBase, _smokeParticlesMedium) == 0x0FB0);
static_assert(offsetof(AVehicleBase, _smokeParticlesHigh) == 0x0FB8);
static_assert(offsetof(AVehicleBase, _smokeParticleSystemComponent) == 0x0FC8);
static_assert(offsetof(AVehicleBase, _smokeParticlesOffset) == 0x0FD0);
static_assert(offsetof(AVehicleBase, _transientHeatSourceParameters) == 0x0FE0);
static_assert(offsetof(AVehicleBase, _transientHeatSourceOffset) == 0x1004);
static_assert(offsetof(AVehicleBase, _physicsDominanceGroup) == 0x1018);
static_assert(offsetof(AVehicleBase, _mountSlotsBySwitchSeatIndex) == 0x1020);
static_assert(offsetof(AVehicleBase, _mountPathBlockers) == 0x1030);
static_assert(offsetof(AVehicleBase, _toggleMainLightsDeviceControlTag) == 0x1040);
static_assert(offsetof(AVehicleBase, _toggleRadioDeviceControlTag) == 0x1048);
static_assert(offsetof(AVehicleBase, _changeRadioStationDeviceControlTag) == 0x1050);
static_assert(offsetof(AVehicleBase, _increaseRadioVolumeDeviceControlTag) == 0x1058);
static_assert(offsetof(AVehicleBase, _decreaseRadioVolumeDeviceControlTag) == 0x1060);
static_assert(offsetof(AVehicleBase, _unlockTransform) == 0x1070);
static_assert(offsetof(AVehicleBase, _aiTeam) == 0x10A8);
static_assert(offsetof(AVehicleBase, _damageHandlerParams) == 0x1110);
static_assert(offsetof(AVehicleBase, _damageRatios) == 0x1120);
static_assert(offsetof(AVehicleBase, _passengerDamageVsCollisionDamage) == 0x1178);
static_assert(offsetof(AVehicleBase, _damageHandlerSerializedData) == 0x1220);
static_assert(offsetof(AVehicleBase, _driver) == 0x1258);
static_assert(offsetof(AVehicleBase, _driverRep) == 0x1260);
static_assert(offsetof(ADcxWheeledVehicle, _driveComponent) == 0x1D80);
static_assert(offsetof(ADcxWheeledVehicle, _doorsComponent) == 0x1D88);
static_assert(offsetof(ADcxWheeledVehicle, _effectsComponent) == 0x1D90);
static_assert(offsetof(ADcxWheeledVehicle, _ignitionStartEventDeviceControlTag) == 0x1DD8);
static_assert(offsetof(ADcxWheeledVehicle, _ignitionEndEventDeviceControlTag) == 0x1DE0);
static_assert(offsetof(ADcxWheeledVehicle, _brakeLightsEnableDeviceControlTag) == 0x1DE8);
static_assert(offsetof(ADcxWheeledVehicle, _brakeLightsDisableDeviceControlTag) == 0x1DF0);
static_assert(offsetof(ADcxWheeledVehicle, _reverseLightsEnableDeviceControlTag) == 0x1DF8);
static_assert(offsetof(ADcxWheeledVehicle, _reverseLightsDisableDeviceControlTag) == 0x1E00);
static_assert(offsetof(ADcxWheeledVehicle, _hornStartAudioEvent) == 0x1E28);
static_assert(offsetof(ADcxWheeledVehicle, _hornStopAudioEvent) == 0x1E30);
static_assert(offsetof(ADcxWheeledVehicle, _speedToPushForceCurve) == 0x1E50);
static_assert(offsetof(ADcxWheeledVehicle, _pusherActionDifficultyVsSpeed) == 0x1E68);
static_assert(offsetof(ADcxWheeledVehicle, _pusherBaseStrengthChangeRateSpeedInfluenceVsSpeed) == 0x1EF0);
static_assert(offsetof(ADcxWheeledVehicle, _pusherBaseConstitutionChangeRateModifierVsSpeed) == 0x1F78);
static_assert(offsetof(FAerodynamicSurfaceControlData, Tags) == 0x0000);
static_assert(offsetof(FTargetTypeDamageMultiplier, _multipliers) == 0x0000);
static_assert(offsetof(AAirplane, _physicsLiftComponent) == 0x2030);
static_assert(offsetof(AAirplane, _aerodynamicSurfaceMap) == 0x2038);
static_assert(offsetof(AAirplane, _throttleLevelRange) == 0x20C4);
static_assert(offsetof(AAirplane, _throttlePerLevel) == 0x20D8);
static_assert(offsetof(AAirplane, _brakeLerpAmountPerSkillLevel) == 0x2170);
static_assert(offsetof(AAirplane, _rollLerpAmountPerSkillLevel) == 0x21C8);
static_assert(offsetof(AAirplane, _yawLerpAmountPerSkillLevel) == 0x2220);
static_assert(offsetof(AAirplane, _pitchLerpAmountPerSkillLevel) == 0x2278);
static_assert(offsetof(AAirplane, _controlResetLerpAmountPerSkillLevel) == 0x22D0);
static_assert(offsetof(AAirplane, _handbrakeFactorVsVelocity) == 0x2328);
static_assert(offsetof(AAirplane, _criticalAttachmentSlotTags) == 0x23B8);
static_assert(offsetof(AAirplane, _propellerMesh) == 0x23E0);
static_assert(offsetof(AAirplane, _propellerMaterial) == 0x23E8);
static_assert(offsetof(AAirplane, _propellerMaterialDynamic) == 0x23F0);
static_assert(offsetof(AAirplane, _classesToIgnorePropellerDamage) == 0x23F8);
static_assert(offsetof(AAirplane, _explosionTargetTypeMultiplier) == 0x2420);
static_assert(offsetof(AAirplane, _deathExplosionAudioEvent) == 0x2430);
static_assert(offsetof(AAirplane, _deathExplosionParticleSystem) == 0x2438);
static_assert(offsetof(AAirplane, _deathExplosionParticleSystemScale) == 0x2440);
static_assert(offsetof(UDcxWheeledVehicleAnimInstance, EngineState) == 0x0A48);
static_assert(offsetof(UDcxWheeledVehicleAnimInstance, DoorOpenPercentage) == 0x0A60);
static_assert(offsetof(UDcxWheeledVehicleAnimInstance, DoorWindowOpenPercentage) == 0x0A70);
static_assert(offsetof(UAirplaneAnimInstance, stickRotator) == 0x0AC4);
static_assert(offsetof(UAirplaneAnimInstance, headingRotator) == 0x0AD0);
static_assert(offsetof(UAirplaneLegsFrontAnimInstance, _vehicleWheels) == 0x02C0);
static_assert(offsetof(UAirplaneLegsFrontAnimInstance, _leftWheelDcxBoneName) == 0x02C8);
static_assert(offsetof(UAirplaneLegsFrontAnimInstance, _rightWheelDcxBoneName) == 0x02D0);
static_assert(offsetof(UAirplaneLegsRearInstance, _vehicleWheels) == 0x02C0);
static_assert(offsetof(UAirplaneLegsRearInstance, _rearWheelDcxBoneName) == 0x02C8);
static_assert(offsetof(AAmbientSounds, ForestMask) == 0x0224);
static_assert(offsetof(AAmbientSounds, CoastalForestAudioEvent) == 0x0230);
static_assert(offsetof(AAmbientSounds, ContinentalForest1AudioEvent) == 0x0238);
static_assert(offsetof(AAmbientSounds, ContinentalForest2AudioEvent) == 0x0240);
static_assert(offsetof(AAmbientSounds, ContinentalForest3AudioEvent) == 0x0248);
static_assert(offsetof(AAmbientSounds, UndergroundAudioEvent) == 0x0250);
static_assert(offsetof(AAmbientSounds, CityMask) == 0x0258);
static_assert(offsetof(AAmbientSounds, CityAudioEvent) == 0x0268);
static_assert(offsetof(AAmbientSounds, LargeVillageAudioEvent) == 0x0270);
static_assert(offsetof(AAmbientSounds, SmallVillageAudioEvent) == 0x0278);
static_assert(offsetof(AAmbientSounds, IndustrialAreaAudioEvent) == 0x0280);
static_assert(offsetof(FItemMotionNoise, AudioEvent) == 0x0000);
static_assert(offsetof(FCraftingPart, ItemClass) == 0x0000);
static_assert(offsetof(FAttachmentSocketDataItem, BoneName) == 0x0000);
static_assert(offsetof(FAttachmentSocketDataItem, MountType) == 0x0008);
static_assert(offsetof(FAttachmentSocketDataItem, MountedItem) == 0x0010);
static_assert(offsetof(FAttachmentSocket, Items) == 0x0000);
static_assert(offsetof(FAttachmentSocketOffset, BoneName) == 0x0000);
static_assert(offsetof(FAttachmentSocketOffset, Location) == 0x0008);
static_assert(offsetof(FAttachmentSocketOffset, Rotation) == 0x0014);
static_assert(offsetof(FCraftingIngredientInstance, Type) == 0x0000);
static_assert(offsetof(FInventoryStackData, _stackClass) == 0x0000);
static_assert(offsetof(FInventoryStackData, _data) == 0x0018);
static_assert(offsetof(AItem, Mesh) == 0x0310);
static_assert(offsetof(AItem, _genericTeamId) == 0x0428);
static_assert(offsetof(AItem, ThrowingComponent) == 0x0438);
static_assert(offsetof(AItem, _caption) == 0x0440);
static_assert(offsetof(AItem, _description) == 0x0458);
static_assert(offsetof(AItem, _choppingRecipeDataAsset) == 0x04A0);
static_assert(offsetof(AItem, _blueprintPlacementBlockingType) == 0x04AD);
static_assert(offsetof(AItem, _overrideSkeletalMesh) == 0x04C8);
static_assert(offsetof(AItem, _overrideSkeletalMeshRelativeTransform) == 0x04D0);
static_assert(offsetof(AItem, _ifExhausted) == 0x0500);
static_assert(offsetof(AItem, _requiredDLC) == 0x050A);
static_assert(offsetof(AItem, _inventoryIcon) == 0x0510);
static_assert(offsetof(AItem, _inventoryIconInHands) == 0x0538);
static_assert(offsetof(AItem, _outsideInventoryIcon) == 0x0560);
static_assert(offsetof(AItem, _inventoryWhiteList) == 0x0590);
static_assert(offsetof(AItem, _inventoryBlackList) == 0x05A0);
static_assert(offsetof(AItem, _uiRepresentationSubobject) == 0x05B8);
static_assert(offsetof(AItem, _uiContainerSubobject) == 0x05C0);
static_assert(offsetof(AItem, _spawnTimeoutPerPlayer) == 0x05CC);
static_assert(offsetof(AItem, _itemLocation) == 0x05D4);
static_assert(offsetof(AItem, _rarity) == 0x05E3);
static_assert(offsetof(AItem, _itemSpawnTypes) == 0x05E8);
static_assert(offsetof(AItem, _itemSpawnGroup) == 0x0608);
static_assert(offsetof(AItem, _spawnLocationOffset) == 0x0610);
static_assert(offsetof(AItem, _spawnRotationOffset) == 0x061C);
static_assert(offsetof(AItem, _itemTags) == 0x0640);
static_assert(offsetof(AItem, _ownedItemTags) == 0x0650);
static_assert(offsetof(AItem, _noiseLevel) == 0x0660);
static_assert(offsetof(AItem, _motionNoise) == 0x0668);
static_assert(offsetof(AItem, _inventoryHandlingSound) == 0x0670);
static_assert(offsetof(AItem, _destroyedSound) == 0x0678);
static_assert(offsetof(AItem, _defaultCraftingParts) == 0x0680);
static_assert(offsetof(AItem, _attachmentSocketMountType) == 0x06B8);
static_assert(offsetof(AItem, _attachmentSockets) == 0x06C0);
static_assert(offsetof(AItem, _holsterAttachmentSocketMountType) == 0x06D0);
static_assert(offsetof(AItem, _attachmentSocketsOffset) == 0x06D8);
static_assert(offsetof(AItem, _placementMeshOverride) == 0x0730);
static_assert(offsetof(AItem, _staticMeshHolsterOverride) == 0x0738);
static_assert(offsetof(AItem, _skeletalMeshHolsterOverride) == 0x0740);
static_assert(offsetof(AItem, _stackableClasses) == 0x0768);
static_assert(offsetof(AItem, _craftingIngredientInstances) == 0x0780);
static_assert(offsetof(AItem, _skeletalMeshComponent) == 0x0790);
static_assert(offsetof(AItem, _repServerEntitySetupAndId) == 0x07B8);
static_assert(offsetof(AItem, _itemComponents) == 0x07C0);
static_assert(offsetof(AItem, _attachParentObject) == 0x07D0);
static_assert(offsetof(AItem, _visibilityReplication) == 0x07D8);
static_assert(offsetof(AItem, _rootComponent) == 0x0858);
static_assert(offsetof(AItem, _stacks) == 0x0870);
static_assert(offsetof(AItem, _stackExhaustedSuccessorItem) == 0x0880);
static_assert(offsetof(AItem, _craftingParts) == 0x0918);
static_assert(offsetof(AItem, _survivalTipToShowOnPickup) == 0x0964);
static_assert(offsetof(AItem, _survivalTipToShowOnEquip) == 0x096C);
static_assert(offsetof(AAmmunitionItem, AmmunitionTag) == 0x09A0);
static_assert(offsetof(AAmmunitionItem, AmmunitionTypeString) == 0x09A8);
static_assert(offsetof(AAmmunitionItem, projectileClass) == 0x09B8);
static_assert(offsetof(AAmmunitionItem, CartridgeMesh) == 0x09C0);
static_assert(offsetof(AAmmunitionItem, CasingMesh) == 0x09C8);
static_assert(offsetof(AAmmunitionItem, UsedBadRoundMesh) == 0x09D0);
static_assert(offsetof(AAmmunitionArrow, BrokenArrowClass) == 0x09F8);
static_assert(offsetof(UAmmunitionBoneListAssetData, CartridgeBoneNames) == 0x0028);
static_assert(offsetof(AAmmunitionBoxItem, AmmunitionItemClass) == 0x09A0);
static_assert(offsetof(AAmmunitionExplosiveArrow, _startBeepingEvent) == 0x0A18);
static_assert(offsetof(AAmmunitionExplosiveArrow, _stopBeepingEvent) == 0x0A20);
static_assert(offsetof(AAmmunitionExplosiveArrow, _targetTypeMultiplier) == 0x0A48);
static_assert(offsetof(AAmmunitionExplosiveArrow, _detonationPointSocketName) == 0x0A58);
static_assert(offsetof(AAmmunitionExplosiveArrow, _effectsActorClass) == 0x0A60);
static_assert(offsetof(FHitEffects, ParticleSystem) == 0x0008);
static_assert(offsetof(FHitEffects, ParticlesScale) == 0x0010);
static_assert(offsetof(FHitEffects, AudioEvent) == 0x0020);
static_assert(offsetof(FHitEffects, CameraShake) == 0x0028);
static_assert(offsetof(AConZCharacter, ChoppingRecipeDataAsset) == 0x0540);
static_assert(offsetof(AConZCharacter, ItemRepresentation) == 0x0550);
static_assert(offsetof(AConZCharacter, HeadBoneName) == 0x0558);
static_assert(offsetof(AConZCharacter, BodyPartByBoneName) == 0x0560);
static_assert(offsetof(AConZCharacter, EnteredIndoorEnvironmentAudioEvent) == 0x05C0);
static_assert(offsetof(AConZCharacter, EnteredOutdoorEnvironmentAudioEvent) == 0x05C8);
static_assert(offsetof(AConZCharacter, EnteredUndergroundAudioEvent) == 0x05D0);
static_assert(offsetof(AConZCharacter, LeftUndergroundAudioEvent) == 0x05D8);
static_assert(offsetof(AConZCharacter, VoiceChatComponent) == 0x05F8);
static_assert(offsetof(AConZCharacter, _gender) == 0x060C);
static_assert(offsetof(AConZCharacter, _genericTeamId) == 0x0610);
static_assert(offsetof(AConZCharacter, SoundComponent) == 0x0620);
static_assert(offsetof(AConZCharacter, _physicsDominanceGroup) == 0x0660);
static_assert(offsetof(AConZCharacter, _hitDamageVsVehicleSpeedInKph) == 0x0668);
static_assert(offsetof(AConZCharacter, _effectsOnVehicleHit) == 0x0670);
static_assert(offsetof(AConZCharacter, _physicsAssetOnServer) == 0x07A0);
static_assert(offsetof(AConZCharacter, _aiTeam) == 0x07A8);
static_assert(offsetof(AConZCharacter, _actionsList) == 0x07B0);
static_assert(offsetof(AConZCharacter, _grappleActionComponent) == 0x07E8);
static_assert(offsetof(AConZCharacter, _hiddenSpawnType) == 0x080E);
static_assert(offsetof(AAnimal2, SpeciesName) == 0x0830);
static_assert(offsetof(AAnimal2, SpeciesType) == 0x0848);
static_assert(offsetof(AAnimal2, ActivityCycle) == 0x0849);
static_assert(offsetof(AAnimal2, HitReactComponent) == 0x0850);
static_assert(offsetof(AAnimal2, HitReactType) == 0x0858);
static_assert(offsetof(AAnimal2, EyesViewPointSocketName) == 0x0860);
static_assert(offsetof(AAnimal2, TargetLocationSocketName) == 0x0868);
static_assert(offsetof(AAnimal2, _animalStance) == 0x0908);
static_assert(offsetof(UConZCharacterMovementComponent, _navWalkingCollisionResponseToWorldStatic) == 0x0B40);
static_assert(offsetof(UConZCharacterMovementComponent, _navWalkingCollisionResponseToWorldDynamic) == 0x0B41);
static_assert(offsetof(FConZCharacterTagSoundArray, AudioEvents) == 0x0000);
static_assert(offsetof(UCharacterSoundComponent, AttachedSoundsAttachPointName) == 0x00B0);
static_assert(offsetof(UCharacterSoundComponent, ImpactSounds) == 0x00B8);
static_assert(offsetof(UCharacterSoundComponent, PainSounds) == 0x00C0);
static_assert(offsetof(UCharacterSoundComponent, _audioEventsPerTag) == 0x00D8);
static_assert(offsetof(UAnimal2SoundComponent, IdleAudioEvent) == 0x0128);
static_assert(offsetof(UAnimal2SoundComponent, AngryAudioEvent) == 0x0130);
static_assert(offsetof(UAnimal2SoundComponent, AttackAudioEvent) == 0x0138);
static_assert(offsetof(UAnimal2SoundComponent, ScaredAudioEvent) == 0x0140);
static_assert(offsetof(UAnimal2SoundComponent, AlertedAudioEvent) == 0x0148);
static_assert(offsetof(UAnimal2SoundComponent, TakeDamageAudioEvent) == 0x0150);
static_assert(offsetof(UAnimal2SoundComponent, KillAudioEvent) == 0x0158);
static_assert(offsetof(UAnimal2SoundComponent, AnimalFootstep) == 0x0160);
static_assert(offsetof(UAnimal2AnimInstance, InverseLocomotionBias) == 0x02B8);
static_assert(offsetof(UAnimal2AnimInstance, stance) == 0x02C8);
static_assert(offsetof(UAnimal2AnimInstance, SlopeRootTiltRotation) == 0x02CC);
static_assert(offsetof(AConZAIController, _flyingRandomMovementExtent) == 0x03C4);
static_assert(offsetof(AConZAIController, _classesToIgnoreWhenFlyMoving) == 0x03D8);
static_assert(offsetof(AComplexAnimalAIController, Agressivness) == 0x0450);
static_assert(offsetof(AComplexAnimalAIController, NormalAISenseSight) == 0x04F0);
static_assert(offsetof(AComplexAnimalAIController, NormalAISenseHearing) == 0x04F8);
static_assert(offsetof(AComplexAnimalAIController, RelaxedAISenseHearing) == 0x0500);
static_assert(offsetof(AComplexAnimalAIController, AlertedAISenseHearing) == 0x0508);
static_assert(offsetof(AComplexAnimalAIController, SleepAISenseSight) == 0x0510);
static_assert(offsetof(AComplexAnimalAIController, _animal) == 0x0518);
static_assert(offsetof(USkill, Caption) == 0x0030);
static_assert(offsetof(USkill, ReplicationID) == 0x0048);
static_assert(offsetof(USkill, _skillIcon) == 0x0068);
static_assert(offsetof(USkill, _uiDataClass) == 0x00A8);
static_assert(offsetof(UAnimNotify_CharacterActionNotify, CharacterActionNotifyType) == 0x0038);
static_assert(offsetof(UAnimNotify_ConditionalPlayParticleEffectForItem, PSTemplate) == 0x0038);
static_assert(offsetof(UAnimNotify_ConditionalPlayParticleEffectForItem, LocationOffset) == 0x0040);
static_assert(offsetof(UAnimNotify_ConditionalPlayParticleEffectForItem, RotationOffset) == 0x004C);
static_assert(offsetof(UAnimNotify_ConditionalPlayParticleEffectForItem, Scale) == 0x0058);
static_assert(offsetof(UAnimNotify_ConditionalPlayParticleEffectForItem, SocketName) == 0x0084);
static_assert(offsetof(UAnimNotify_FishingActionNotify, FishingActionNotifyType) == 0x0038);
static_assert(offsetof(UAnimNotify_MagazineUpdateAmmunitionMeshes, ammoIndices) == 0x0040);
static_assert(offsetof(UAnimNotify_MakeNoise, noiseLevel) == 0x0038);
static_assert(offsetof(UAnimNotify_MakeNoise, NoiseTag) == 0x003C);
static_assert(offsetof(UAnimNotify_PaddlingSwitchHands, _newState) == 0x0038);
static_assert(offsetof(UAnimNotify_PlaySoundBySurface, AudioEvent) == 0x0038);
static_assert(offsetof(UAnimNotify_PlaySoundBySurface, TraceChannel) == 0x0040);
static_assert(offsetof(UAnimNotify_PlaySoundOnOwner, AudioEvent) == 0x0038);
static_assert(offsetof(UAnimNotify_PlaySubtitledSound, AudioEvent) == 0x0038);
static_assert(offsetof(UAnimNotify_PlaySubtitledSound, Subtitles) == 0x0040);
static_assert(offsetof(UAnimNotify_QuestBookMinigameNotify, _type) == 0x0038);
static_assert(offsetof(UAnimNotify_SmokableItemSwitchMeshParent, DesiredParentSocket) == 0x0038);
static_assert(offsetof(UAnimNotify_WaterPaddle, ParticleSystem) == 0x0038);
static_assert(offsetof(UAnimNotify_WaterPaddle, AudioEvent) == 0x0040);
static_assert(offsetof(UAnimNotify_WaterPaddle, AttachPointName) == 0x0054);
static_assert(offsetof(UAnimNotify_WeaponActionNotify, WeaponActionNotifyType) == 0x0038);
static_assert(offsetof(UAnimNotify_WeaponEjectCasing, EmitterSocketName) == 0x0038);
static_assert(offsetof(UAnimNotify_WeaponUpdateAmmunitionMeshes, ammoIndices) == 0x0040);
static_assert(offsetof(UAnimNotifyState_DrainStamina, DrainType) == 0x0030);
static_assert(offsetof(UAnimNotifyState_Fade, _forAction) == 0x0038);
static_assert(offsetof(FMeleeHitDetectionMarker, Transform) == 0x0010);
static_assert(offsetof(FMeleeHitDetectionMarker, RootMotion) == 0x0040);
static_assert(offsetof(UAnimNotifyState_Melee, _attackCapsuleAttachment) == 0x0030);
static_assert(offsetof(UAnimNotifyState_Melee, _hitSeverity) == 0x003C);
static_assert(offsetof(UAnimNotifyState_Melee, _attackType) == 0x003F);
static_assert(offsetof(UAnimNotifyState_Melee, _hitDetectionMarkersRootBoneParentName) == 0x0040);
static_assert(offsetof(UAnimNotifyState_Melee, _hitDetectionMarkers) == 0x0048);
static_assert(offsetof(UAnimNotifyState_PhysicalAnimation, BodyProfileName) == 0x0034);
static_assert(offsetof(UAnimNotifyState_PhysicalAnimation, ConstraintProfileName) == 0x003C);
static_assert(offsetof(UAnimNotifyState_PhysicalAnimation, BoneName) == 0x0044);
static_assert(offsetof(UAnimNotifyState_PhysicalAnimation, StrengthBlendCurveName) == 0x004C);
static_assert(offsetof(UAnimNotifyState_PhysicalAnimation, PhysicsBlendCurveName) == 0x0054);
static_assert(offsetof(UAnimNotifyState_PlaySoundOnOwnerRanged, BeginAudioEvent) == 0x0030);
static_assert(offsetof(UAnimNotifyState_PlaySoundOnOwnerRanged, EndAudioEvent) == 0x0038);
static_assert(offsetof(UAnimNotifyState_ShowAmmunitionMeshes, CustomMeshComponentsBoneNames) == 0x0038);
static_assert(offsetof(UAnimNotifyState_ShowAmmunitionMeshes, ammoIndices) == 0x0050);
static_assert(offsetof(UAnimNotifyState_WeaponRevolverDrumRotationDirection, RotationDirection) == 0x0030);
static_assert(offsetof(UAnimNotifyState_WeaponShowAmmunitionMeshes, ammoIndices) == 0x0038);
static_assert(offsetof(AAquaticLifeSpawningVolume, _waterZoneType) == 0x0258);
static_assert(offsetof(AAquaticLifeSpawningVolume, _fishSpeciesPreset) == 0x0260);
static_assert(offsetof(AAquaticLifeSpawningVolume, _fishSpawningPreset) == 0x0268);
static_assert(offsetof(URangedWeaponsSkill, NoSkillExperienceAwards) == 0x00C0);
static_assert(offsetof(URangedWeaponsSkill, BasicSkillExperienceAwards) == 0x0100);
static_assert(offsetof(URangedWeaponsSkill, MediumSkillExperienceAwards) == 0x0140);
static_assert(offsetof(URangedWeaponsSkill, AdvancedSkillExperienceAwards) == 0x0180);
static_assert(offsetof(URangedWeaponsSkill, AboveAdvancedSkillExperienceAwards) == 0x01C0);
static_assert(offsetof(URangedWeaponsSkill, NoSkillParameters) == 0x0200);
static_assert(offsetof(URangedWeaponsSkill, BasicSkillParameters) == 0x0204);
static_assert(offsetof(URangedWeaponsSkill, MediumSkillParameters) == 0x0208);
static_assert(offsetof(URangedWeaponsSkill, AdvancedSkillParameters) == 0x020C);
static_assert(offsetof(URangedWeaponsSkill, AboveAdvancedSkillParameters) == 0x0210);
static_assert(offsetof(AClothesItem, _characterMesh) == 0x09A0);
static_assert(offsetof(AClothesItem, _maxPaceWhenEquipped) == 0x09D5);
static_assert(offsetof(AClothesItem, _inventoryContainer2D) == 0x0A38);
static_assert(offsetof(UCharacterAction, PreActionsDescriptions) == 0x0058);
static_assert(offsetof(UCharacterAction, PostActionsDescriptions) == 0x0068);
static_assert(offsetof(UCharacterAction, ParentAction) == 0x0078);
static_assert(offsetof(UCharacterAction, _preActions) == 0x0080);
static_assert(offsetof(UCharacterAction, _postActions) == 0x0090);
static_assert(offsetof(UCharacterAction, _progressWidget) == 0x00A0);
static_assert(offsetof(UCharacterAction, _description) == 0x00C0);
static_assert(offsetof(FArmedNPCAimCorrection, LeftHandRotator) == 0x0000);
static_assert(offsetof(FArmedNPCAimCorrection, AimOffsetPitch) == 0x0010);
static_assert(offsetof(FArmedNPCAimCorrection, AimOffsetYaw) == 0x0098);
static_assert(offsetof(UArmedNPCAimCorrectionsData, HandgunCorrections) == 0x0030);
static_assert(offsetof(UArmedNPCAimCorrectionsData, RifleCorrections) == 0x0150);
static_assert(offsetof(UArmedNPCAimCorrectionsData, CorrectionsPerWeapon) == 0x0270);
static_assert(offsetof(UConZCharacterEncounterSaveState, AIControllerData) == 0x0028);
static_assert(offsetof(UArmedNPCBaseEncounterSaveState, Personality) == 0x0049);
static_assert(offsetof(AArmedNPCBase, _trapOverlapDetection) == 0x0880);
static_assert(offsetof(AArmedNPCBase, _baseInteractionComponent) == 0x0888);
static_assert(offsetof(AArmedNPCBase, _navigationInvokerComponent) == 0x0890);
static_assert(offsetof(AArmedNPCBase, _meleeCombatComponent) == 0x0898);
static_assert(offsetof(AArmedNPCBase, _inventoryComponent) == 0x08A0);
static_assert(offsetof(AArmedNPCBase, RightHandAttachmentSocket) == 0x08A8);
static_assert(offsetof(AArmedNPCBase, LeftHandAttachmentSocket) == 0x08B8);
static_assert(offsetof(AArmedNPCBase, _meleeTarget) == 0x08D0);
static_assert(offsetof(AArmedNPCBase, _itemInHands) == 0x08D8);
static_assert(offsetof(AArmedNPCBase, _hitReactComponent) == 0x08F8);
static_assert(offsetof(AArmedNPCBase, _pace) == 0x0900);
static_assert(offsetof(AArmedNPCBase, _armedNPCBaseCommonData) == 0x0908);
static_assert(offsetof(AArmedNPCBase, _aimLocationTargetForSimulatedProxy) == 0x0950);
static_assert(offsetof(AArmedNPCBase, _weaponManual) == 0x0960);
static_assert(offsetof(AArmedNPCBase, _meleeSkillAnimationsPreset) == 0x0970);
static_assert(offsetof(AArmedNPCBaseAIController, _sightSenseConfigCombat) == 0x0450);
static_assert(offsetof(AArmedNPCBaseAIController, _hearingSenseConfigCombat) == 0x0458);
static_assert(offsetof(AArmedNPCBaseAIController, _touchSenseConfig) == 0x0460);
static_assert(offsetof(AArmedNPCBaseAIController, _noiseAccumulationMultiplierPerNoiseTag) == 0x0468);
static_assert(offsetof(UArmedNPCBaseAnimInstance, _desiredMovementPace) == 0x02C8);
static_assert(offsetof(UArmedNPCBaseAnimInstance, _stance) == 0x02C9);
static_assert(offsetof(UArmedNPCBaseAnimInstance, _acceleration) == 0x02D4);
static_assert(offsetof(UArmedNPCBaseAnimInstance, _velocity) == 0x02E0);
static_assert(offsetof(UArmedNPCBaseAnimInstance, _movementDirectionBeforeGroundStop) == 0x0300);
static_assert(offsetof(UArmedNPCBaseAnimInstance, _animationSet) == 0x0303);
static_assert(offsetof(UArmedNPCBaseAnimInstance, _animationSetBeforeGroundStop) == 0x0304);
static_assert(offsetof(UArmedNPCBaseAnimInstance, _combatMode) == 0x0306);
static_assert(offsetof(UArmedNPCBaseAnimInstance, _weaponType) == 0x0307);
static_assert(offsetof(UArmedNPCBaseAnimInstance, _handRAimLocation) == 0x0314);
static_assert(offsetof(UArmedNPCBaseAnimInstance, _supportingHandIKLocation) == 0x0320);
static_assert(offsetof(UArmedNPCBaseAnimInstance, _meleeSkill_PrimaryIdleAnimation) == 0x0338);
static_assert(offsetof(UArmedNPCBaseAnimInstance, _meleeSkill_TiredIdleAnimation) == 0x0340);
static_assert(offsetof(UArmedNPCBaseAnimInstance, _meleeSkill_WalkingIdleAnimation) == 0x0348);
static_assert(offsetof(UArmedNPCBaseAnimInstance, _meleeSkill_BlockIdleAnimation) == 0x0350);
static_assert(offsetof(UArmedNPCBaseAnimInstance, _meleeSkill_AimOffsetBlendSpace) == 0x0358);
static_assert(offsetof(UArmedNPCBaseAnimInstance, _handAimCorrectionRotator) == 0x0370);
static_assert(offsetof(FArmedNPCMeleeAttackTypes, PrimaryMeleeAttackTypeWhenNotMoving) == 0x0000);
static_assert(offsetof(FArmedNPCMeleeAttackTypes, PrimaryMeleeAttackTypeWhenWalking) == 0x0008);
static_assert(offsetof(FArmedNPCMeleeAttackTypes, PrimaryMeleeAttackTypeWhenJogging) == 0x0010);
static_assert(offsetof(FArmedNPCMeleeAttackTypes, PrimaryMeleeAttackTypeWhenRunning) == 0x0018);
static_assert(offsetof(FArmedNPCMeleeAttackTypes, PrimaryMeleeAttackTypeWhenFalling) == 0x0020);
static_assert(offsetof(FArmedNPCMeleeAttackTypes, SecondaryMeleeAttackTypeWhenNotMoving) == 0x0028);
static_assert(offsetof(FArmedNPCMeleeAttackTypes, SecondaryMeleeAttackTypeWhenWalking) == 0x0030);
static_assert(offsetof(FArmedNPCMeleeAttackTypes, SecondaryMeleeAttackTypeWhenJogging) == 0x0038);
static_assert(offsetof(FArmedNPCMeleeAttackTypes, SecondaryMeleeAttackTypeWhenRunning) == 0x0040);
static_assert(offsetof(FArmedNPCMeleeAttackTypes, SecondaryMeleeAttackTypeWhenFalling) == 0x0048);
static_assert(offsetof(FArmedNPCMeleeAttackTypes, ComboMeleeAttackTypeWhenNotMoving) == 0x0050);
static_assert(offsetof(FArmedNPCMeleeAttackTypes, ComboMeleeAttackTypeWhenWalking) == 0x0058);
static_assert(offsetof(FArmedNPCMeleeAttackTypes, ComboMeleeAttackTypeWhenJogging) == 0x0060);
static_assert(offsetof(FArmedNPCMeleeAttackTypes, ComboMeleeAttackTypeWhenRunning) == 0x0068);
static_assert(offsetof(FArmedNPCMeleeAttackTypes, ComboMeleeAttackTypeWhenFalling) == 0x0070);
static_assert(offsetof(FArmedNPCMeleeAttackTypes, BashMeleeAttackType) == 0x0078);
static_assert(offsetof(FArmedNPCMeleeAttackTypes, WeaponBayonetMeleeAttackType) == 0x0080);
static_assert(offsetof(UArmedNPCBaseCommonData, SightAndAwarenessRange) == 0x0034);
static_assert(offsetof(UArmedNPCBaseCommonData, Variations) == 0x0040);
static_assert(offsetof(UArmedNPCBaseCommonData, DifficultyLevelSettings) == 0x0068);
static_assert(offsetof(UArmedNPCBaseCommonData, DamageCustomizationData) == 0x0070);
static_assert(offsetof(UArmedNPCBaseCommonData, PhysicalSurfacesData) == 0x0080);
static_assert(offsetof(UArmedNPCBaseCommonData, HeadBoneName) == 0x0088);
static_assert(offsetof(UArmedNPCBaseCommonData, MeleSkillLevel) == 0x0090);
static_assert(offsetof(UArmedNPCBaseCommonData, BoxingSkillAnimationsPreset) == 0x0098);
static_assert(offsetof(UArmedNPCBaseCommonData, MeleeAttackTypes) == 0x00A0);
static_assert(offsetof(UArmedNPCBaseCommonData, MeleeAttackCapsulesAttachmentForItemInRHand) == 0x0128);
static_assert(offsetof(UArmedNPCBaseCommonData, HitReactTypeWhenStanding) == 0x0130);
static_assert(offsetof(UArmedNPCBaseCommonData, HitReactTypeWhenStandingInCombatMode) == 0x0138);
static_assert(offsetof(UArmedNPCBaseCommonData, HitReactTypeWhenCrouching) == 0x0140);
static_assert(offsetof(UArmedNPCBaseCommonData, HitReactTypeWhenProne) == 0x0148);
static_assert(offsetof(UArmedNPCBaseCommonData, AnimationsForEvents) == 0x0150);
static_assert(offsetof(FWeaponManualSettingsHandgun, SpreadType) == 0x0004);
static_assert(offsetof(FWeaponManualSettingsHandgun, TimeBetweenShot) == 0x0014);
static_assert(offsetof(FWeaponManualSettingsHandgun, FiringPauseDuration) == 0x001C);
static_assert(offsetof(FWeaponManualSettingsHandgun, ReloadPauseDuration) == 0x0024);
static_assert(offsetof(FWeaponManualSettingsRifleAutomatic, SpreadType) == 0x0004);
static_assert(offsetof(FWeaponManualSettingsRifleAutomatic, FiringPauseDuration) == 0x0014);
static_assert(offsetof(FWeaponManualSettingsRifleAutomatic, ReloadPauseDuration) == 0x001C);
static_assert(offsetof(FWeaponManualSettingsRifleManual, SpreadType) == 0x0004);
static_assert(offsetof(FWeaponManualSettingsRifleManual, TimeBetweenShot) == 0x0010);
static_assert(offsetof(FWeaponManualSettingsRifleManual, FiringPauseDuration) == 0x0018);
static_assert(offsetof(FWeaponManualSettingsRifleManual, ReloadPauseDuration) == 0x0020);
static_assert(offsetof(FWeaponManualSettingsBow, SpreadType) == 0x0004);
static_assert(offsetof(FWeaponManualSettingsBow, DrawHoldDuration) == 0x0010);
static_assert(offsetof(FWeaponManualSettingsBow, FiringPauseDuration) == 0x0018);
static_assert(offsetof(FWeaponManualSettingsBow, ReloadPauseDuration) == 0x0020);
static_assert(offsetof(FWeaponManualSettingsCrossBow, SpreadType) == 0x0004);
static_assert(offsetof(FWeaponManualSettingsCrossBow, FiringPauseDuration) == 0x0010);
static_assert(offsetof(FWeaponManualSettingsCrossBow, ReloadPauseDuration) == 0x0018);
static_assert(offsetof(FArmedNPCDifficultyLevelSettingProperties, MeleeCooldownDuration) == 0x0000);
static_assert(offsetof(FArmedNPCDifficultyLevelSettingProperties, HandgunSettings) == 0x0008);
static_assert(offsetof(FArmedNPCDifficultyLevelSettingProperties, RifleAutomaticSettings) == 0x0034);
static_assert(offsetof(FArmedNPCDifficultyLevelSettingProperties, RifleManualSettings) == 0x0058);
static_assert(offsetof(FArmedNPCDifficultyLevelSettingProperties, BowSettings) == 0x0080);
static_assert(offsetof(FArmedNPCDifficultyLevelSettingProperties, CrossBowSettings) == 0x00AC);
static_assert(offsetof(UArmedNPCDifficultyLevelSettings, Levels) == 0x0030);
static_assert(offsetof(UArmedNPCSoundComponent, RelaxedStanceEnteredAudioEvent) == 0x0138);
static_assert(offsetof(UArmedNPCSoundComponent, AlertedStanceEnteredAudioEvent) == 0x0140);
static_assert(offsetof(UArmedNPCSoundComponent, CombatStanceEnteredAudioEvent) == 0x0148);
static_assert(offsetof(UArmedNPCSoundComponent, FootstepAudioEvent) == 0x0150);
static_assert(offsetof(UArmedNPCSoundComponent, StopAllAudioEvent) == 0x0158);
static_assert(offsetof(UArmedNPCSoundComponent, DeathAudioEvent) == 0x0160);
static_assert(offsetof(UArmedNPCSoundComponent, StartSearchCorpseAudioEvent) == 0x0168);
static_assert(offsetof(UArmedNPCSoundComponent, StopSearchCorpseAudioEvent) == 0x0170);
static_assert(offsetof(UArmedNPCSoundComponent, FootstepsAudioEvent) == 0x0178);
static_assert(offsetof(UArmedNPCSoundComponent, VoiceLinesByPersonality) == 0x0180);
static_assert(offsetof(FArmedNPCVariation, BodyMesh) == 0x0000);
static_assert(offsetof(FArmedNPCVariation, BodyMeshWhenSearched) == 0x0028);
static_assert(offsetof(FArmedNPCVariation, Gender) == 0x0070);
static_assert(offsetof(FArmedNPCVariation, CorpseChoppingRecipeDataAsset) == 0x0078);
static_assert(offsetof(FArmedNPCVariation, DamageCustomizationData) == 0x0080);
static_assert(offsetof(UArmedNPCVariationsData, Physical) == 0x0030);
static_assert(offsetof(UArmedNPCVoiceLinesData, Lines) == 0x0030);
static_assert(offsetof(UArmedNPCWeaponManualBow, AmmoClass) == 0x0040);
static_assert(offsetof(UArmedNPCWeaponManualCrossbow, AmmoClass) == 0x0038);
static_assert(offsetof(FProximityReplenishedResourceDescription, ReplenishAmount) == 0x0004);
static_assert(offsetof(FReplenishableResourceDescription, Type) == 0x0008);
static_assert(offsetof(FReplenishableResourceDescription, InSocketTypes) == 0x0010);
static_assert(offsetof(FReplenishableResourceDescription, OutSocketTypes) == 0x0030);
static_assert(offsetof(FReplenishableResourceDescription, PeriodicReplenishment) == 0x0058);
static_assert(offsetof(FReplenishableResourceDescription, ProximityReplenishment) == 0x0068);
static_assert(offsetof(UReplenishableResourceBaseComponent, _replenishableResourceDescription) == 0x05A8);
static_assert(offsetof(UReplenishableResourceBaseComponent, _replenishableResourceAmountMaterialParameterName) == 0x0630);
static_assert(offsetof(UAttachableItemComponent, _attachRelativeTransform) == 0x00E0);
static_assert(offsetof(UAttachableItemComponent, _interactionText) == 0x0118);
static_assert(offsetof(UAudibleButtonComponent, _audioEvents) == 0x0028);
static_assert(offsetof(UAudioDeviceDisplay, _deviceName) == 0x0268);
static_assert(offsetof(UItemAnimInstance, _owningPrisonerStance) == 0x02C0);
static_assert(offsetof(UWeaponAttachmentMagazineAnimInstance, _ammoCountType) == 0x02D6);
static_assert(offsetof(UAvailabilityGrid, _waterImageAssetTag) == 0x0048);
static_assert(offsetof(FDrivingSkillEngineStallingParameters, ThrottleCurve) == 0x0010);
static_assert(offsetof(FDrivingSkillEngineStallingParameters, BrakeCurve) == 0x0020);
static_assert(offsetof(FDrivingSkillEngineStallingParameters, ForceMagnitudeScaleCurve) == 0x0030);
static_assert(offsetof(FAviationSkillParametersPerSkillLevel, EngineHandlingParameters) == 0x0034);
static_assert(offsetof(FAviationSkillParametersPerSkillLevel, EngineStallingByAccelerationParameters) == 0x0040);
static_assert(offsetof(FAviationSkillParametersPerSkillLevel, EngineStallingByUpShiftParameters) == 0x0080);
static_assert(offsetof(FAviationSkillParametersPerSkillLevel, EngineStallingWhenStartingViaMotion) == 0x00C0);
static_assert(offsetof(UAviationSkill, NoSkillExperienceAwards) == 0x00B0);
static_assert(offsetof(UAviationSkill, BasicSkillExperienceAwards) == 0x00B8);
static_assert(offsetof(UAviationSkill, MediumSkillExperienceAwards) == 0x00C0);
static_assert(offsetof(UAviationSkill, AdvancedSkillExperienceAwards) == 0x00C8);
static_assert(offsetof(UAviationSkill, AboveAdvancedSkillExperienceAwards) == 0x00D0);
static_assert(offsetof(UAviationSkill, NoSkillParameters) == 0x00D8);
static_assert(offsetof(UAviationSkill, BasicSkillParameters) == 0x01D8);
static_assert(offsetof(UAviationSkill, MediumSkillParameters) == 0x02D8);
static_assert(offsetof(UAviationSkill, AdvancedSkillParameters) == 0x03D8);
static_assert(offsetof(UAviationSkill, AboveAdvancedSkillParameters) == 0x04D8);
static_assert(offsetof(UAwarenessSkill, EnterFocusModeAudioEvent) == 0x00C0);
static_assert(offsetof(UAwarenessSkill, LeaveFocusModeAudioEvent) == 0x00C8);
static_assert(offsetof(UAwarenessSkill, NoSkillExperienceAwards) == 0x00E0);
static_assert(offsetof(UAwarenessSkill, BasicSkillExperienceAwards) == 0x00EC);
static_assert(offsetof(UAwarenessSkill, MediumSkillExperienceAwards) == 0x00F8);
static_assert(offsetof(UAwarenessSkill, AdvancedSkillExperienceAwards) == 0x0104);
static_assert(offsetof(UAwarenessSkill, AboveAdvancedSkillExperienceAwards) == 0x0110);
static_assert(offsetof(UAwarenessSkill, NoSkillParameters) == 0x011C);
static_assert(offsetof(UAwarenessSkill, BasicSkillParameters) == 0x0170);
static_assert(offsetof(UAwarenessSkill, MediumSkillParameters) == 0x01C4);
static_assert(offsetof(UAwarenessSkill, AdvancedSkillParameters) == 0x0218);
static_assert(offsetof(UAwarenessSkill, AboveAdvancedSkillParameters) == 0x026C);
static_assert(offsetof(UBadAdjustableSeparator, UpperSizeBox) == 0x0268);
static_assert(offsetof(UBankAccountRegistryResponse, _payload) == 0x0028);
static_assert(offsetof(UBankATMAccountInfo, _accountNumber) == 0x0280);
static_assert(offsetof(UBankATMAccountInfo, _accountName) == 0x0288);
static_assert(offsetof(UBankATMAccountInfo, _cardType) == 0x0290);
static_assert(offsetof(UBankATMAccountInfo, _renewalAmount) == 0x0298);
static_assert(offsetof(UBankATMAccountInfo, _goldAmountHorizontalBox) == 0x02A0);
static_assert(offsetof(UBankATMAccountInfo, _goldAmount) == 0x02A8);
static_assert(offsetof(UBankATMAccountInfo, _btnReturn) == 0x02B0);
static_assert(offsetof(UBankATMAccountInfo, _cardTypeFontColor) == 0x02B8);
static_assert(offsetof(UBankATMAccountSummary, _accountBalance) == 0x0268);
static_assert(offsetof(UBankATMAccountSummary, _ATMOperationalTransactionLimitHorizontalBox) == 0x0270);
static_assert(offsetof(UBankATMAccountSummary, _ATMOperationalTransactionLimit) == 0x0278);
static_assert(offsetof(UBankATMAccountSummary, _cardOperationalTransactionLimitHorizontalBox) == 0x0280);
static_assert(offsetof(UBankATMAccountSummary, _cardOperationalTransactionLimit) == 0x0288);
static_assert(offsetof(FBankATMBoughtCardStateVisual, FontColor) == 0x0000);
static_assert(offsetof(FBankATMBoughtCardStateVisual, BrushColor) == 0x0028);
static_assert(offsetof(UBankATMBoughtCard, _cardQualityType) == 0x0280);
static_assert(offsetof(UBankATMBoughtCard, _cardBrushes) == 0x0288);
static_assert(offsetof(UBankATMBoughtCard, _normalVisuals) == 0x02D8);
static_assert(offsetof(UBankATMBoughtCard, _hoveredVisuals) == 0x0318);
static_assert(offsetof(UBankATMBoughtCard, _pressedVisuals) == 0x0358);
static_assert(offsetof(UBankATMBoughtCard, _visualOverlay) == 0x0398);
static_assert(offsetof(UBankATMBoughtCard, _imgCardBackground) == 0x03A0);
static_assert(offsetof(UBankATMBoughtCard, _textCardType) == 0x03A8);
static_assert(offsetof(UBankATMBoughtCard, _textCardNumber) == 0x03B0);
static_assert(offsetof(UBankATMBoughtCard, _optionsCircleSwitcher) == 0x03B8);
static_assert(offsetof(UBankATMBuyableCard, _cardQualityType) == 0x0280);
static_assert(offsetof(UBankATMBuyableCard, _normalVisuals) == 0x0284);
static_assert(offsetof(UBankATMBuyableCard, _hoveredAndPressedVisuals) == 0x0290);
static_assert(offsetof(UBankATMBuyableCard, _disabledVisuals) == 0x029C);
static_assert(offsetof(UBankATMBuyableCard, _visualStateSwitcher) == 0x02A8);
static_assert(offsetof(UBankATMBuyableCard, _toggleablePlusCircle) == 0x02B0);
static_assert(offsetof(UBankATMBuyableCard, _textCardType) == 0x02B8);
static_assert(offsetof(UBankATMBuyableCard, _textFreeRenewals) == 0x02C0);
static_assert(offsetof(UBankATMBuyableCard, _textDigitsOfPin) == 0x02C8);
static_assert(offsetof(UBankATMBuyableCard, _textOperationalTransactionLimit) == 0x02D0);
static_assert(offsetof(UBankATMBuyableCard, _textGoldPurchaseAvailable) == 0x02D8);
static_assert(offsetof(UBankATMBuyableCard, _textCardCost) == 0x02E0);
static_assert(offsetof(UBankATMCardManagementOptionsScreen, _btnRenew) == 0x02B8);
static_assert(offsetof(UBankATMCardManagementOptionsScreen, _btnDelete) == 0x02C0);
static_assert(offsetof(UBankATMCardManagementOptionsScreen, _btnReturn) == 0x02C8);
static_assert(offsetof(UBankATMCardManagementOptionsScreen, _popupMessage) == 0x02D0);
static_assert(offsetof(FBankATMCarouselCardStateVisual, Padding) == 0x0000);
static_assert(offsetof(UBankATMCarouselCard, _typeSwitcher) == 0x0280);
static_assert(offsetof(UBankATMCarouselCard, _numberLabel) == 0x0288);
static_assert(offsetof(UBankATMCarouselCard, _ownershipIcon) == 0x0290);
static_assert(offsetof(UBankATMCarouselCard, _expirationNotice) == 0x0298);
static_assert(offsetof(UBankATMCarouselCard, _stolenCardColor) == 0x02A0);
static_assert(offsetof(UBankATMCarouselCard, _normalVisuals) == 0x02AC);
static_assert(offsetof(UBankATMCarouselCard, _hoveredVisuals) == 0x02BC);
static_assert(offsetof(UBankATMCarouselCard, _pressedVisuals) == 0x02CC);
static_assert(offsetof(UBankATMCarouselCard, _disabledVisuals) == 0x02DC);
static_assert(offsetof(UBankATMChooseTransaction, _btnWithdraw) == 0x02E0);
static_assert(offsetof(UBankATMChooseTransaction, _btnDeposit) == 0x02E8);
static_assert(offsetof(UBankATMChooseTransaction, _btnTransfer) == 0x02F0);
static_assert(offsetof(UBankATMChooseTransaction, _btnEjectCard) == 0x02F8);
static_assert(offsetof(UBankATMChooseTransaction, _btnAccountInfo) == 0x0300);
static_assert(offsetof(UBankATMChooseTransaction, _btnBuyGold) == 0x0308);
static_assert(offsetof(UBankATMChooseTransaction, _btnSellGold) == 0x0310);
static_assert(offsetof(UBankATMEnterPin, _pinEnteringSwitcher) == 0x0288);
static_assert(offsetof(UBankATMEnterPin, _enterPinTitleMessage) == 0x0290);
static_assert(offsetof(UBankATMEnterPin, _pinSlotsPanel) == 0x0298);
static_assert(offsetof(UBankATMEnterPin, _pinSlotClass) == 0x02A0);
static_assert(offsetof(UBankATMEnterPin, _incorrectPinWarning) == 0x02A8);
static_assert(offsetof(UBankATMEnterPin, _remainingAttemptsLabel) == 0x02B0);
static_assert(offsetof(UBankATMEnterPin, _btnReturn) == 0x02B8);
static_assert(offsetof(UBankATMEnterPin, _btnSubmit) == 0x02C0);
static_assert(offsetof(UBankATMErrorPopup, _popupMessage) == 0x0268);
static_assert(offsetof(UBankATMGoldTrading, _btnEjectCard) == 0x02C0);
static_assert(offsetof(UBankATMGoldTrading, _buttonSwitcher) == 0x02C8);
static_assert(offsetof(UBankATMGoldTrading, _btnReturn) == 0x02D0);
static_assert(offsetof(UBankATMGoldTrading, _btnSubmit) == 0x02D8);
static_assert(offsetof(UBankATMGoldTrading, _btnNo) == 0x02E0);
static_assert(offsetof(UBankATMGoldTrading, _btnYes) == 0x02E8);
static_assert(offsetof(UBankATMGoldTrading, _subsectionSwitcher) == 0x02F0);
static_assert(offsetof(UBankATMGoldTrading, _goldBuyConversionLabel) == 0x02F8);
static_assert(offsetof(UBankATMGoldTrading, _editBuyAmount) == 0x0300);
static_assert(offsetof(UBankATMGoldTrading, _creditsLostLabel) == 0x0308);
static_assert(offsetof(UBankATMGoldTrading, _goldSellConversionLabel) == 0x0310);
static_assert(offsetof(UBankATMGoldTrading, _editSellAmount) == 0x0318);
static_assert(offsetof(UBankATMGoldTrading, _creditsGainedLabel) == 0x0320);
static_assert(offsetof(UBankATMGoldTrading, _questionLabel) == 0x0328);
static_assert(offsetof(UBankATMGoldTrading, _errorLabel) == 0x0330);
static_assert(offsetof(UBankATMGoldTrading, _goldValueGraph) == 0x0338);
static_assert(offsetof(UBankATMGoldTrading, _goldBalanceTextBlock) == 0x0340);
static_assert(offsetof(UBankATMGoldTrading, _fundsSourceWarning) == 0x0348);
static_assert(offsetof(UBankATMGoldValueGraph, _yAxisVerticalBox) == 0x0268);
static_assert(offsetof(UBankATMGoldValueGraph, _graphShadedAreaImg) == 0x0270);
static_assert(offsetof(UBankATMGoldValueGraph, _xAxisHorizontalBox) == 0x0278);
static_assert(offsetof(UBankATMGoldValueGraph, _graphDescriptionTextBox) == 0x0280);
static_assert(offsetof(UBankATMMainPanel, _virtualMouseCursorWidget) == 0x0278);
static_assert(offsetof(UBankATMMainPanel, _panelSwitcher) == 0x0290);
static_assert(offsetof(UBankATMMainPanel, _welcomeScreen) == 0x0298);
static_assert(offsetof(UBankATMMainPanel, _enterPinScreen) == 0x02A0);
static_assert(offsetof(UBankATMMainPanel, _chooseTransactionScreen) == 0x02A8);
static_assert(offsetof(UBankATMMainPanel, _moneyTransferScreen) == 0x02B0);
static_assert(offsetof(UBankATMMainPanel, _goldTradingScreen) == 0x02B8);
static_assert(offsetof(UBankATMMainPanel, _manageCardsScreen) == 0x02C0);
static_assert(offsetof(UBankATMMainPanel, _accountInfoScreen) == 0x02C8);
static_assert(offsetof(UBankATMMainPanel, _accountSummaryHeader) == 0x02D0);
static_assert(offsetof(UBankATMMainPanel, _loadingOverlay) == 0x02D8);
static_assert(offsetof(UBankATMManageCards, _screenSwitcher) == 0x0290);
static_assert(offsetof(UBankATMManageCards, _boughtCardsHorizontalBox) == 0x0298);
static_assert(offsetof(UBankATMManageCards, _boughtCardStarter) == 0x02A0);
static_assert(offsetof(UBankATMManageCards, _boughtCardGold) == 0x02A8);
static_assert(offsetof(UBankATMManageCards, _boughtCardClassic) == 0x02B0);
static_assert(offsetof(UBankATMManageCards, _textNoCards) == 0x02B8);
static_assert(offsetof(UBankATMManageCards, _buyableCardsHorizontalBox) == 0x02C0);
static_assert(offsetof(UBankATMManageCards, _buyableCardClassic) == 0x02C8);
static_assert(offsetof(UBankATMManageCards, _buyableCardGold) == 0x02D0);
static_assert(offsetof(UBankATMManageCards, _textInventoryBalance) == 0x02D8);
static_assert(offsetof(UBankATMManageCards, _textAccountBalance) == 0x02E0);
static_assert(offsetof(UBankATMManageCards, _btnBack) == 0x02E8);
static_assert(offsetof(UBankATMManageCards, _cardManagementOptionsScreen) == 0x02F0);
static_assert(offsetof(UBankATMManageCards, _purchaseConfirmationScreen) == 0x02F8);
static_assert(offsetof(UBankATMManageCards, _cancellationConfirmationScreen) == 0x0300);
static_assert(offsetof(UBankATMManageCards, _renewalConfirmationScreen) == 0x0308);
static_assert(offsetof(AMinigame, _rootComponent) == 0x0258);
static_assert(offsetof(AMinigame, _captureCam) == 0x0260);
static_assert(offsetof(AMinigame, _captureMaskCam) == 0x0268);
static_assert(offsetof(AMinigame, _minigameWidget) == 0x0278);
static_assert(offsetof(AMinigame, _minigameWidgetClass) == 0x0280);
static_assert(offsetof(AMinigame, _introAnimatorClasses) == 0x02C0);
static_assert(offsetof(AMinigame, _outroAnimatorClasses) == 0x02D0);
static_assert(offsetof(AMinigame, _simulatedMontage) == 0x02E1);
static_assert(offsetof(AMinigame, _simulatedAudioStart) == 0x02E8);
static_assert(offsetof(AMinigame, _simulatedAudioStop) == 0x02F0);
static_assert(offsetof(AMinigame, _takeInHandsItemTagClasses) == 0x02F8);
static_assert(offsetof(AMinigame, _introAnimators) == 0x0320);
static_assert(offsetof(AMinigame, _outroAnimators) == 0x0330);
static_assert(offsetof(ABankATMMinigame, _uiController) == 0x0340);
static_assert(offsetof(ABankATMMinigame, _bankATMMesh) == 0x0348);
static_assert(offsetof(ABankATMMinigame, _bankATMWidget) == 0x0350);
static_assert(offsetof(ABankATMMinigame, _zoomStartLocation) == 0x0358);
static_assert(offsetof(ABankATMMinigame, _zoomEndLocation) == 0x0364);
static_assert(offsetof(ABankATMMinigame, _zoomCurve) == 0x0370);
static_assert(offsetof(ABankATMMinigame, _atmMesh) == 0x0390);
static_assert(offsetof(ABankATMMinigame, _tabletMesh) == 0x0398);
static_assert(offsetof(UMinigameConfiguration, minigameClass) == 0x0028);
static_assert(offsetof(UBankATMMoneyTransfer, _btnEjectCard) == 0x02A8);
static_assert(offsetof(UBankATMMoneyTransfer, _buttonSwitcher) == 0x02B0);
static_assert(offsetof(UBankATMMoneyTransfer, _btnReturn) == 0x02B8);
static_assert(offsetof(UBankATMMoneyTransfer, _btnSubmit) == 0x02C0);
static_assert(offsetof(UBankATMMoneyTransfer, _btnNo) == 0x02C8);
static_assert(offsetof(UBankATMMoneyTransfer, _btnYes) == 0x02D0);
static_assert(offsetof(UBankATMMoneyTransfer, _subsectionSwitcher) == 0x02D8);
static_assert(offsetof(UBankATMMoneyTransfer, _editAccountNumber) == 0x02E0);
static_assert(offsetof(UBankATMMoneyTransfer, _editTransferAmount) == 0x02E8);
static_assert(offsetof(UBankATMMoneyTransfer, _editDepositAmount) == 0x02F0);
static_assert(offsetof(UBankATMMoneyTransfer, _editWithdrawAmount) == 0x02F8);
static_assert(offsetof(UBankATMMoneyTransfer, _questionLabel) == 0x0300);
static_assert(offsetof(UBankATMMoneyTransfer, _errorLabel) == 0x0308);
static_assert(offsetof(UBankATMMoneyTransfer, _commissionPercentageTextBlock) == 0x0310);
static_assert(offsetof(UBankATMMoneyTransfer, _inventoryBalanceTextBlock) == 0x0318);
static_assert(offsetof(FBankATMMyCardsButtonStateVisual, FontColor) == 0x0000);
static_assert(offsetof(FBankATMMyCardsButtonStateVisual, BackgroundBrush) == 0x0010);
static_assert(offsetof(FBankATMMyCardsButtonStateVisual, CardIconBrush) == 0x0098);
static_assert(offsetof(UBankATMMyCardsButton, _background) == 0x0280);
static_assert(offsetof(UBankATMMyCardsButton, _cardIcon) == 0x0288);
static_assert(offsetof(UBankATMMyCardsButton, _labelMy) == 0x0290);
static_assert(offsetof(UBankATMMyCardsButton, _labelCards) == 0x0298);
static_assert(offsetof(UBankATMMyCardsButton, _normalVisuals) == 0x02A8);
static_assert(offsetof(UBankATMMyCardsButton, _hoveredVisuals) == 0x03C8);
static_assert(offsetof(UBankATMMyCardsButton, _pressedVisuals) == 0x04E8);
static_assert(offsetof(UBankATMMyCardsButton, _disabledVisuals) == 0x0608);
static_assert(offsetof(UBankATMPinSlot, _pinNumberTypeSwitcher) == 0x0278);
static_assert(offsetof(UBankATMPinSlot, _pinNumber) == 0x0280);
static_assert(offsetof(UBankATMPinSlot, _animatedEntryBar) == 0x0288);
static_assert(offsetof(UBankATMPinSlot, _enterNumber) == 0x0290);
static_assert(offsetof(UBankATMPinSlot, _enterNumberLast) == 0x0298);
static_assert(offsetof(FBankATMPointingButtonStateVisual, FontColor) == 0x0000);
static_assert(offsetof(FBankATMPointingButtonStateVisual, BackgroundBrush) == 0x0010);
static_assert(offsetof(UBankATMPointingButton, _titleText) == 0x0290);
static_assert(offsetof(UBankATMPointingButton, _backgroundImage) == 0x02B0);
static_assert(offsetof(UBankATMPointingButton, _titleLabel) == 0x02B8);
static_assert(offsetof(UBankATMPointingButton, _normalVisuals) == 0x02C8);
static_assert(offsetof(UBankATMPointingButton, _hoveredVisuals) == 0x0360);
static_assert(offsetof(UBankATMPointingButton, _pressedVisuals) == 0x03F8);
static_assert(offsetof(UBankATMPointingButton, _disabledVisuals) == 0x0490);
static_assert(offsetof(FBankATMVirtualEditboxStateVisual, OutlineColor) == 0x0000);
static_assert(offsetof(UBankATMVirtualEditbox, _hintText) == 0x0280);
static_assert(offsetof(UBankATMVirtualEditbox, _outline) == 0x0298);
static_assert(offsetof(UBankATMVirtualEditbox, _hintLabel) == 0x02A0);
static_assert(offsetof(UBankATMVirtualEditbox, _editboxLabel) == 0x02A8);
static_assert(offsetof(UBankATMVirtualEditbox, _inactiveVisuals) == 0x02B4);
static_assert(offsetof(UBankATMVirtualEditbox, _activeVisuals) == 0x02C4);
static_assert(offsetof(UBankATMVirtualEditbox, _disabledVisuals) == 0x02D4);
static_assert(offsetof(UBankATMWelcomeScreen, _btnCardsPrevious) == 0x0288);
static_assert(offsetof(UBankATMWelcomeScreen, _btnCardsNext) == 0x0290);
static_assert(offsetof(UBankATMWelcomeScreen, _cardCarousel) == 0x0298);
static_assert(offsetof(UBankATMWelcomeScreen, _btnMyCards) == 0x02A0);
static_assert(offsetof(UBankATMYesNoConfirmationScreen, _textDialog) == 0x0288);
static_assert(offsetof(UBankATMYesNoConfirmationScreen, _btnCancel) == 0x0290);
static_assert(offsetof(UBankATMYesNoConfirmationScreen, _btnYes) == 0x0298);
static_assert(offsetof(UBankCardItemComponent, _ownerUserProfileId) == 0x00C8);
static_assert(offsetof(UBankCardItemComponent, _bankCardType) == 0x00D8);
static_assert(offsetof(ASedentaryNPC, _headMesh) == 0x0828);
static_assert(offsetof(ASedentaryNPC, _originalLocation) == 0x0830);
static_assert(offsetof(ASedentaryNPC, _tradeOutpostBuilding) == 0x0840);
static_assert(offsetof(ASedentaryNPC, _animationHeadScale) == 0x0880);
static_assert(offsetof(ASedentaryNPC, _faceIdleAnimation) == 0x0890);
static_assert(offsetof(ASedentaryNPC, _headYawClampValues) == 0x0898);
static_assert(offsetof(ASedentaryNPC, _headPitchClampValues) == 0x08A8);
static_assert(offsetof(ASedentaryNPC, _eyesYawAngleRange) == 0x08C4);
static_assert(offsetof(ASedentaryNPC, _eyesPitchAngleRange) == 0x08D4);
static_assert(offsetof(ASedentaryNPC, _blinkingPeriodRange) == 0x08F0);
static_assert(offsetof(ASedentaryNPC, _backgroundInteractions) == 0x0908);
static_assert(offsetof(ASedentaryNPC, _activeBackgroundInteraction) == 0x0918);
static_assert(offsetof(ABanker, _bankMinigameClass) == 0x09A8);
static_assert(offsetof(UBankTransactionAssetData, BankATMMinigame) == 0x0030);
static_assert(offsetof(UBarberShopMenuWidget, _overlayMenu) == 0x0270);
static_assert(offsetof(UBarberShopMenuWidget, _sliderHairStyle) == 0x0278);
static_assert(offsetof(UBarberShopMenuWidget, _hairStyleUpgradeConditionDisplay) == 0x0280);
static_assert(offsetof(UBarberShopMenuWidget, _facialHairVerticalBox) == 0x0288);
static_assert(offsetof(UBarberShopMenuWidget, _sliderMoustacheStyle) == 0x0290);
static_assert(offsetof(UBarberShopMenuWidget, _moustacheStyleUpgradeConditionDisplay) == 0x0298);
static_assert(offsetof(UBarberShopMenuWidget, _sliderBeardStyle) == 0x02A0);
static_assert(offsetof(UBarberShopMenuWidget, _beardStyleUpgradeConditionDisplay) == 0x02A8);
static_assert(offsetof(UBarberShopMenuWidget, _presetColorPickerHairColor) == 0x02B0);
static_assert(offsetof(UBarberShopMenuWidget, _dropdownColorPickerEyeshadow) == 0x02B8);
static_assert(offsetof(UBarberShopMenuWidget, _dropdownColorPickerEyeliner) == 0x02C0);
static_assert(offsetof(UBarberShopMenuWidget, _makeupVerticalBox) == 0x02C8);
static_assert(offsetof(UBarberShopMenuWidget, _sliderEyesMakeupMetalness) == 0x02D0);
static_assert(offsetof(UBarberShopMenuWidget, _sliderEyesMakeupIntensity) == 0x02D8);
static_assert(offsetof(UBarberShopMenuWidget, _dropdownColorPickerLipstickColor) == 0x02E0);
static_assert(offsetof(UBarberShopMenuWidget, _sliderLipstickGlossiness) == 0x02E8);
static_assert(offsetof(UBarberShopMenuWidget, _sliderLipstickIntensity) == 0x02F0);
static_assert(offsetof(UBarberShopMenuWidget, _buttonRandomize) == 0x02F8);
static_assert(offsetof(UBarberShopMenuWidget, _buttonApply) == 0x0300);
static_assert(offsetof(UBarberShopMenuWidget, _overlayConfirmation) == 0x0308);
static_assert(offsetof(UBarberShopMenuWidget, _buttonCancelConfirmation) == 0x0310);
static_assert(offsetof(UBarberShopMenuWidget, _buttonContinueConfirmation) == 0x0318);
static_assert(offsetof(UBarberShopMenuWidget, _faceOptionsScrollbox) == 0x0320);
static_assert(offsetof(FElementSnapMarker, Transform) == 0x0000);
static_assert(offsetof(FElementSnapMarker, Slack) == 0x0030);
static_assert(offsetof(FElementSnapMarker, ForbiddenAreaCenter) == 0x0040);
static_assert(offsetof(FElementSnapMarker, ForbiddenAreaExtent) == 0x004C);
static_assert(offsetof(FElementSnapMarker, RequiredElementSize) == 0x005C);
static_assert(offsetof(FElementSnapMarker, RequiredElementSizeTolerance) == 0x0068);
static_assert(offsetof(FBaseBuildingSizeVariation, Component) == 0x0000);
static_assert(offsetof(FLadderMarker, FirstStep) == 0x0000);
static_assert(offsetof(FLadderMarker, LastStep) == 0x0030);
static_assert(offsetof(FLadderMarker, Edge) == 0x0040);
static_assert(offsetof(FLadderMarker, CapsuleBias) == 0x0070);
static_assert(offsetof(FLadderMarker, PhysicalSurfaceForSounds) == 0x0092);
static_assert(offsetof(FWindowMarker, NavSupportedAgents) == 0x0004);
static_assert(offsetof(FWindowMarker, WindowFortificationsType) == 0x0018);
static_assert(offsetof(FWindowMarker, AdditionalMarkerIndicesToModify) == 0x0020);
static_assert(offsetof(FWindowMarker, Vertex1) == 0x0030);
static_assert(offsetof(FWindowMarker, Vertex2) == 0x003C);
static_assert(offsetof(FWindowMarker, FortificationScaleXZ) == 0x0054);
static_assert(offsetof(FWindowMarker, FortificationLocationCorrection) == 0x0060);
static_assert(offsetof(FBaseElementDamageZone, BoundsMin) == 0x0000);
static_assert(offsetof(FBaseElementDamageZone, BoundsMax) == 0x000C);
static_assert(offsetof(FRotatedZone, Center) == 0x0000);
static_assert(offsetof(FRotatedZone, Extent) == 0x000C);
static_assert(offsetof(FRotatedZone, Rotation) == 0x0018);
static_assert(offsetof(FBaseElementDestructionZone, Bounds) == 0x0000);
static_assert(offsetof(FBaseElementDestructionZone, CompositeZoneComponents) == 0x0020);
static_assert(offsetof(UBaseBuildingComponent, _name) == 0x04F8);
static_assert(offsetof(UBaseBuildingComponent, _baseElementType) == 0x0508);
static_assert(offsetof(UBaseBuildingComponent, _staticMeshVariations) == 0x0518);
static_assert(offsetof(UBaseBuildingComponent, _choppingRecipeAsset) == 0x0528);
static_assert(offsetof(UBaseBuildingComponent, _collisionDamageModifierFromEnergy) == 0x0550);
static_assert(offsetof(UBaseBuildingComponent, _weatherMaskMesh) == 0x0558);
static_assert(offsetof(UBaseBuildingComponent, _maxInstancesServerSettingTag) == 0x056C);
static_assert(offsetof(UBaseBuildingComponent, _upgradeRecipe) == 0x0578);
static_assert(offsetof(UBaseBuildingComponent, _placementHeightType) == 0x0593);
static_assert(offsetof(UBaseBuildingComponent, _maxRotationWhilePlacing) == 0x0598);
static_assert(offsetof(UBaseBuildingComponent, _elementSnapMarkers) == 0x05A8);
static_assert(offsetof(UBaseBuildingComponent, _sizeVariations) == 0x05B8);
static_assert(offsetof(UBaseBuildingComponent, _repairableParams) == 0x05D8);
static_assert(offsetof(UBaseBuildingComponent, _destructionParticles) == 0x0618);
static_assert(offsetof(UBaseBuildingComponent, _destructionParticlesSpawnTransforms) == 0x0628);
static_assert(offsetof(UBaseBuildingComponent, _destructionSound) == 0x0638);
static_assert(offsetof(UBaseBuildingComponent, _doorClass) == 0x0648);
static_assert(offsetof(UBaseBuildingComponent, _ladderMarkers) == 0x0658);
static_assert(offsetof(UBaseBuildingComponent, _windowMarkers) == 0x0670);
static_assert(offsetof(UBaseBuildingComponent, _damageZones) == 0x0680);
static_assert(offsetof(UBaseBuildingComponent, _destructionZones) == 0x06A0);
static_assert(offsetof(UBaseBuildingComponent, _replenishableResourceDescription) == 0x06B8);
static_assert(offsetof(UBaseBuildingComponent, _collisionChannelName) == 0x0744);
static_assert(offsetof(UBaseBuildingItemComponent, _itemClass) == 0x0750);
static_assert(offsetof(FElementQueryMarker, SocketClass) == 0x0008);
static_assert(offsetof(FElementQueryMarker, Transform) == 0x0010);
static_assert(offsetof(FModularElementSnapMarkerSocket, Type) == 0x0000);
static_assert(offsetof(FModularElementSnapMarkerSocket, InType) == 0x0008);
static_assert(offsetof(FModularElementSnapMarkerSocket, OutType) == 0x0010);
static_assert(offsetof(FModularElementSnapMarker, Name) == 0x0000);
static_assert(offsetof(FModularElementSnapMarker, Transform) == 0x0010);
static_assert(offsetof(FModularElementSnapMarker, Socket) == 0x0040);
static_assert(offsetof(FModularElementSnapMarker, RequiredServerSettingName) == 0x006C);
static_assert(offsetof(FElementSnapMarkerOverride, OverrideType) == 0x0000);
static_assert(offsetof(FElementSnapMarkerOverride, SnapMarkersToRemove) == 0x0008);
static_assert(offsetof(FElementMorphQuery, QueryName) == 0x0004);
static_assert(offsetof(FElementMorphQuery, Markers) == 0x0010);
static_assert(offsetof(FElementMorphQuery, StaticMesh) == 0x0020);
static_assert(offsetof(FElementMorphQuery, MarkersOverride) == 0x0028);
static_assert(offsetof(UModularBaseBuildingComponent, _availableOrientations) == 0x0750);
static_assert(offsetof(UModularBaseBuildingComponent, _elementStabilityMarkers) == 0x0768);
static_assert(offsetof(UModularBaseBuildingComponent, _modularElementSnapMarkers) == 0x0778);
static_assert(offsetof(UModularBaseBuildingComponent, _elementMorphQueries) == 0x0788);
static_assert(offsetof(UModularBaseBuildingComponent, _floatingCheckLocations) == 0x0798);
static_assert(offsetof(UBaseBuildingDetailsPanel, _bigItemCraftingButton) == 0x0270);
static_assert(offsetof(UBaseBuildingDetailsPanel, _descriptionTextBlock) == 0x0278);
static_assert(offsetof(UBaseBuildingDetailsPanel, _expandIngredientsCheckBox) == 0x0280);
static_assert(offsetof(UBaseBuildingDetailsPanel, _recipeIngredientButtonsWrapBox) == 0x0288);
static_assert(offsetof(UBaseBuildingDetailsPanel, _possibleIngredientsOverlay) == 0x0290);
static_assert(offsetof(UBaseBuildingDetailsPanel, _possibleRecipeIngredientButtonsWrapBox) == 0x0298);
static_assert(offsetof(UBaseBuildingDetailsPanel, _recipeIngredientButtonClass) == 0x02A0);
static_assert(offsetof(UBaseBuildingDetailsPanel, _possibleRecipeIngredientButtonClass) == 0x02A8);
static_assert(offsetof(UBaseBuildingPanel, _craftingCategoriesTabButtonsContainer) == 0x0270);
static_assert(offsetof(UBaseBuildingPanel, _searchBox) == 0x0278);
static_assert(offsetof(UBaseBuildingPanel, _categoriesDetailsSwitcher) == 0x0280);
static_assert(offsetof(UBaseBuildingPanel, _selectedCategoryTitle) == 0x0288);
static_assert(offsetof(UBaseBuildingPanel, _categoriesScrollBox) == 0x0290);
static_assert(offsetof(UBaseBuildingPanel, _baseBuildingDetailsPanel) == 0x0298);
static_assert(offsetof(UBaseBuildingPanel, _detailsAndBackButton) == 0x02A0);
static_assert(offsetof(UBaseBuildingPanel, _detailsTooltipText) == 0x02A8);
static_assert(offsetof(UBaseBuildingPanel, _backTooltipText) == 0x02C0);
static_assert(offsetof(UBaseBuildingPanel, _placeButton) == 0x02D8);
static_assert(offsetof(UBaseBuildingPanel, _placeTooltipText) == 0x02E0);
static_assert(offsetof(UBaseBuildingPanel, _placedPlaceablesContainer) == 0x02F8);
static_assert(offsetof(UBaseBuildingPanel, _collapseAllButton) == 0x0300);
static_assert(offsetof(UBaseBuildingPanel, _expandAllButton) == 0x0308);
static_assert(offsetof(UBaseBuildingPanel, _craftingRecipeButtonsContainerClass) == 0x0310);
static_assert(offsetof(UBaseBuildingPanel, _categoriesPadding) == 0x0318);
static_assert(offsetof(UBaseBuildingPanel, _tooltipClass) == 0x0328);
static_assert(offsetof(FCraftingRecipeAndIngredientButtonVisualData, SelectedBorderColor) == 0x000C);
static_assert(offsetof(FCraftingRecipeAndIngredientButtonVisualData, DefaultBorderColor) == 0x001C);
static_assert(offsetof(FCraftingRecipeAndIngredientButtonVisualData, EmptyWidgetImage) == 0x0030);
static_assert(offsetof(FCraftingRecipeAndIngredientButtonVisualData, CanCraftLinesImage) == 0x00B8);
static_assert(offsetof(FCraftingRecipeAndIngredientButtonVisualData, MissingSomeIngredientsLinesImage) == 0x0140);
static_assert(offsetof(FCraftingRecipeAndIngredientButtonVisualData, MissingAllIngredientsLinesImage) == 0x01C8);
static_assert(offsetof(FCraftingRecipeAndIngredientButtonVisualData, TransparentPixel) == 0x0250);
static_assert(offsetof(UCraftingUIControllerBase, _craftingRecipeAndIngredientButtonVisualData) == 0x00B8);
static_assert(offsetof(UCraftingUIControllerBase, _dataAsset) == 0x0388);
static_assert(offsetof(UBaseItemContainerWidget, GridPanel) == 0x0288);
static_assert(offsetof(UBaseItemContainerWidget, HighlightBorder) == 0x0290);
static_assert(offsetof(UBaseItemWidget, ParentInventory) == 0x0268);
static_assert(offsetof(UBaseItemWidget, _imageWidget) == 0x0280);
static_assert(offsetof(UBasicGameResourceContainerComponent, _repResourceType) == 0x00E8);
static_assert(offsetof(UBasicGameResourceContainerComponent, _resourceFillingInSocketTypes) == 0x00F8);
static_assert(offsetof(UBasicGameResourceContainerComponent, _resourceFillingOutSocketTypes) == 0x0118);
static_assert(offsetof(UBasicGameResourceContainerComponent, _requiredItemTagsForFilling) == 0x0138);
static_assert(offsetof(UBasicGameResourceContainerComponent, _interactionText) == 0x0158);
static_assert(offsetof(UBasicGameResourceContainerComponent, _resourceFillingMontage) == 0x0170);
static_assert(offsetof(UBasicGameResourceContainerComponent, _resourceStartFillingAudioEvent) == 0x0178);
static_assert(offsetof(UBasicGameResourceContainerComponent, _resourceStopFillingAudioEvent) == 0x0180);
static_assert(offsetof(UBasicGameResourceContainerComponent, _targetStanceWhenFilling) == 0x0190);
static_assert(offsetof(UBasicGameResourceContainerComponent, _spillStartAudioEvent) == 0x0198);
static_assert(offsetof(UBasicGameResourceContainerComponent, _spillStopAudioEvent) == 0x01A0);
static_assert(offsetof(UBasicGameResourceContainerComponent, _spillMontage) == 0x01A8);
static_assert(offsetof(UBasicGameResourceContainerComponent, _spillMontageEnd) == 0x01B0);
static_assert(offsetof(UBasicGameResourceContainerComponent, _particles) == 0x01B8);
static_assert(offsetof(UBasicGameResourceContainerComponent, _drinkStartAudioEvent) == 0x01D0);
static_assert(offsetof(UBasicGameResourceContainerComponent, _drinkStopAudioEvent) == 0x01D8);
static_assert(offsetof(UBasicGameResourceSlotItemComponent, _repResourceClass) == 0x0110);
static_assert(offsetof(ABasicLadder, _mesh) == 0x0220);
static_assert(offsetof(ABasicLadder, _ladderMarkers) == 0x0228);
static_assert(offsetof(UNotificationDescription, Target) == 0x0028);
static_assert(offsetof(UNotificationDescription, TargetUserProfileId) == 0x0030);
static_assert(offsetof(UBasicNotificationDescription, Message) == 0x0040);
static_assert(offsetof(UBasicNotificationDescription, Icon) == 0x0060);
static_assert(offsetof(FEditableParameter, Name) == 0x0000);
static_assert(offsetof(FParameterVector, Value) == 0x0010);
static_assert(offsetof(FParameterVector4, Value) == 0x0010);
static_assert(offsetof(UFueledHeatSource, _heatSourceParams) == 0x0030);
static_assert(offsetof(UFueledHeatSource, _interactionHitComponent) == 0x0058);
static_assert(offsetof(UFueledHeatSource, _fireParticlesComponent) == 0x0068);
static_assert(offsetof(UFueledHeatSource, _niagaraFireParticlesComponent) == 0x0070);
static_assert(offsetof(UFueledHeatSource, _particleParametersInt32) == 0x0078);
static_assert(offsetof(UFueledHeatSource, _particleParametersFloat) == 0x0088);
static_assert(offsetof(UFueledHeatSource, _particleParametersVector) == 0x0098);
static_assert(offsetof(UFueledHeatSource, _particleParametersVector4) == 0x00A8);
static_assert(offsetof(UFueledHeatSource, _fireLightComponent) == 0x00B8);
static_assert(offsetof(UFueledHeatSource, _startBurningAudioEvent) == 0x00C8);
static_assert(offsetof(UFueledHeatSource, _stopBurningAudioEvent) == 0x00D0);
static_assert(offsetof(UFueledHeatSource, _fireAudioComponent) == 0x00D8);
static_assert(offsetof(UFueledHeatSource, _fireTransform) == 0x00E0);
static_assert(offsetof(UFueledHeatSource, _meshComponent) == 0x0118);
static_assert(offsetof(UFueledHeatSource, _swapMeshes) == 0x0120);
static_assert(offsetof(UFueledHeatSource, _litMaterial) == 0x0138);
static_assert(offsetof(UFueledHeatSource, _unlitMaterial) == 0x0140);
static_assert(offsetof(UFueledHeatSource, _meshTransform) == 0x0150);
static_assert(offsetof(UBatchFuelHeatSource, _initialFuelCombustionParams) == 0x0224);
static_assert(offsetof(UBatchFuelHeatSource, _heightForBlowAirAnimation) == 0x0234);
static_assert(offsetof(ABatteryChargerItem, _inventoryContainer2D) == 0x09B8);
static_assert(offsetof(ABatteryChargerItem, _rangedResourceConsumerComponent) == 0x09C0);
static_assert(offsetof(UGameResourceContainerEntityComponentSave, ResourceType) == 0x0028);
static_assert(offsetof(UGameResourceContainerEntityComponentSetup, AcceptedResourceType) == 0x0048);
static_assert(offsetof(UGameResourceContainerEntityComponentSetup, DefaultResourceType) == 0x0050);
static_assert(offsetof(ABCULockItem, _batterySlot) == 0x09A8);
static_assert(offsetof(ABCULockItem, _connectedServerUserProfileId) == 0x09B0);
static_assert(offsetof(ABCUMemoryModuleItem, _upgradeStartAudio) == 0x09A8);
static_assert(offsetof(ABCUMemoryModuleItem, _upgradeStopAudio) == 0x09B0);
static_assert(offsetof(ABCUMemoryModuleItem, _upgradeSuccessAudio) == 0x09B8);
static_assert(offsetof(ABCUMemoryModuleItem, _upgradeFailureAudio) == 0x09C0);
static_assert(offsetof(ABCUMemoryModuleItem, _tradeableServiceClass) == 0x09D0);
static_assert(offsetof(UTraderService, _storeIcon) == 0x0030);
static_assert(offsetof(UBedrollVirtualizedItemUserData, Occupant) == 0x0028);
static_assert(offsetof(UBedrollVirtualizedItemUserData, TimerStart) == 0x0030);
static_assert(offsetof(UBedrollVirtualizedItemUserData, TimerDuration) == 0x0038);
static_assert(offsetof(ABedroll, _occupiedUserProfileId) == 0x0A40);
static_assert(offsetof(ABedroll, _meshInHands) == 0x0A50);
static_assert(offsetof(ABedroll, _materialInHands) == 0x0A58);
static_assert(offsetof(ABedroll, _meshOnGround) == 0x0A60);
static_assert(offsetof(ABedroll, _materialOnGround) == 0x0A68);
static_assert(offsetof(UBigItemCraftingButton, _favouriteStar) == 0x02E0);
static_assert(offsetof(UBigItemCraftingButton, _quantityDataOverlay) == 0x02E8);
static_assert(offsetof(UBigItemCraftingButton, _icon) == 0x02F0);
static_assert(offsetof(UBigItemCraftingButton, _title) == 0x02F8);
static_assert(offsetof(UBigItemCraftingButton, _quantity) == 0x0300);
static_assert(offsetof(UBigItemCraftingButton, _quantityFadeout) == 0x0308);
static_assert(offsetof(UBigItemCraftingButton, _quantityBackground) == 0x0310);
static_assert(offsetof(UBigItemCraftingButton, _quantityBackgroundFadeout) == 0x0318);
static_assert(offsetof(UBigItemCraftingButton, _changeQuantity) == 0x0320);
static_assert(offsetof(FHuntingBiomeParameters, BiomeData) == 0x0000);
static_assert(offsetof(ABiome, _root) == 0x0220);
static_assert(offsetof(ABiome, _visualizationSphere) == 0x0228);
static_assert(offsetof(ABiome, _parameters) == 0x0238);
static_assert(offsetof(FAnimalSpawnData, SpawnWeights) == 0x001C);
static_assert(offsetof(UBiomeData, BiomeTag) == 0x0030);
static_assert(offsetof(UBiomeData, VisualizationMaterial) == 0x0038);
static_assert(offsetof(ABird2, _states) == 0x09D8);
static_assert(offsetof(UBird2AnimInstance, SlopeRootTiltRotation) == 0x02C4);
static_assert(offsetof(ABloodStain, _mesh) == 0x0228);
static_assert(offsetof(ABloodStain, _name) == 0x0230);
static_assert(offsetof(ABloodStain, _sampleExtractionText) == 0x0248);
static_assert(offsetof(ABloodStain, _sampleExtractionTool) == 0x0260);
static_assert(offsetof(ABloodStain, _sampleExtractionProduct) == 0x0268);
static_assert(offsetof(ABloodStain, _sampleExtractionMontage) == 0x0270);
static_assert(offsetof(ABloodStain, _sampleExtractionStartAudioEvent) == 0x0278);
static_assert(offsetof(ABloodStain, _sampleExtractionStopAudioEvent) == 0x0280);
static_assert(offsetof(ABoat, _advancedBuoyancyComponent) == 0x1D68);
static_assert(offsetof(ABoat, _powertrainComponent) == 0x1D70);
static_assert(offsetof(ABoat, _motorWaterSplashParticleComponent) == 0x1D78);
static_assert(offsetof(ABoat, _forcePosition) == 0x1D88);
static_assert(offsetof(ABoat, _driverActionDifficultyVsSpeed) == 0x1DA0);
static_assert(offsetof(ABoat, _driverActionDifficultyVsForce) == 0x1E28);
static_assert(offsetof(ABoat, _driverConstitutionChangeRateModifierVsSpeed) == 0x1EB0);
static_assert(offsetof(ABoat, _driverStrengthChangeRateModifierVsSpeed) == 0x1F38);
static_assert(offsetof(ABoat, _parametersPerMovementPace) == 0x1FC0);
static_assert(offsetof(ABoat, _maxSpeedModifierInterpedWithDriverDexterity) == 0x2008);
static_assert(offsetof(ABoat, _rudderEfficiencyBySpeedKmH) == 0x2038);
static_assert(offsetof(ABoat, _sidewaysVelocityFalloff) == 0x20C0);
static_assert(offsetof(ABoat, _speedKmhVsDensityMultiplier) == 0x2148);
static_assert(offsetof(ABoat, _paddlingState) == 0x21E8);
static_assert(offsetof(ABoat, _rowForceMultiplierPerKph) == 0x21F8);
static_assert(offsetof(ABoat, _rowTurnMultiplierPerKph) == 0x2288);
static_assert(offsetof(ABoat, _rowingAudioEvent) == 0x2310);
static_assert(offsetof(ABoat, _sailCollisionShapeName) == 0x2328);
static_assert(offsetof(ABoat, _windIntensityInterval) == 0x2334);
static_assert(offsetof(ABoat, _sailingForceMultiplierPerKph) == 0x2340);
static_assert(offsetof(ABoat, _sailingTurnMultiplierPerKph) == 0x23D0);
static_assert(offsetof(ABoat, _sailingRudderStartAudioEvent) == 0x2458);
static_assert(offsetof(ABoat, _sailingRudderEndAudioEvent) == 0x2460);
static_assert(offsetof(ABoat, _sailsTautAudioEvent) == 0x2468);
static_assert(offsetof(ABoat, _sailsDeploymentRatioVsForceMultiplier) == 0x2488);
static_assert(offsetof(ABoat, _sdfType) == 0x2534);
static_assert(offsetof(ABoat, _LOarWaterParticles) == 0x2538);
static_assert(offsetof(ABoat, _ROarWaterParticles) == 0x2540);
static_assert(offsetof(ABoat, _dryVolume) == 0x2548);
static_assert(offsetof(FPrisonerRestingParameters, mode) == 0x0000);
static_assert(offsetof(FPrisonerRestingParameters, RestingAnimation) == 0x0008);
static_assert(offsetof(FPrisonerRestingParameters, EndRestLocations) == 0x0010);
static_assert(offsetof(FPrisonerRestingParameters, Transform) == 0x0020);
static_assert(offsetof(FPrisonerRestingParameters, Item) == 0x0058);
static_assert(offsetof(UVehicleBaseMountSlot, AttachmentOwner) == 0x0030);
static_assert(offsetof(UVehicleBaseMountSlot, MountSocketName) == 0x0038);
static_assert(offsetof(UVehicleBaseMountSlot, MountedCollisionShapeName) == 0x0040);
static_assert(offsetof(UVehicleBaseMountSlot, Type) == 0x0048);
static_assert(offsetof(UVehicleBaseMountSlot, InteractionMaterial) == 0x0050);
static_assert(offsetof(UVehicleBaseMountSlot, MountedAnimInstanceClass) == 0x0058);
static_assert(offsetof(UVehicleBaseMountSlot, MountedAnimation) == 0x0060);
static_assert(offsetof(UVehicleBaseMountSlot, MountedBlendspace) == 0x0068);
static_assert(offsetof(UVehicleBaseMountSlot, MountedBlendspaceFP) == 0x0070);
static_assert(offsetof(UVehicleBaseMountSlot, DefaultPrisonerRestingParameters) == 0x0080);
static_assert(offsetof(UVehicleBaseMountSlot, SlotId) == 0x00E0);
static_assert(offsetof(UVehicleBaseMountSlot, MountInteractionCaption) == 0x00E8);
static_assert(offsetof(UVehicleBaseMountSlot, _mountee) == 0x0108);
static_assert(offsetof(UVehicleBaseMountSlot, _reservee) == 0x0110);
static_assert(offsetof(UVehicleBaseMountSlot, _weaponAimingParametersClass) == 0x0120);
static_assert(offsetof(UVehicleBaseMountSlot, _reachabilityFromSkyStateTag) == 0x012C);
static_assert(offsetof(UVehicleBaseMountSlot, _prisonerViewpointOffset) == 0x0138);
static_assert(offsetof(UVehicleBaseMountSlot, _prisonerFeetOffset) == 0x0144);
static_assert(offsetof(UVehicleBaseMountSlot, _externalMountPaths) == 0x0150);
static_assert(offsetof(UVehicleBaseMountSlot, _emergencyMountPaths) == 0x0160);
static_assert(offsetof(UVehicleBaseMountSlot, _internalMountPaths) == 0x0170);
static_assert(offsetof(UBoatMountSlot, _controlType) == 0x0188);
static_assert(offsetof(UBoatMountSlot, _startEngineStartAnimation) == 0x0190);
static_assert(offsetof(UBoatMountSlot, _startEngineLoopAnimation) == 0x0198);
static_assert(offsetof(UBoatMountSlot, _startEngineLongLoopAnimation) == 0x01A0);
static_assert(offsetof(UBoatMountSlot, _startEngineEndAnimation) == 0x01A8);
static_assert(offsetof(FSplineDescription, SplineComponent) == 0x0000);
static_assert(offsetof(FSplineDescription, SplineMeshComponents) == 0x0008);
static_assert(offsetof(FSplineDescription, SplineStartConnector) == 0x0018);
static_assert(offsetof(FSplineDescription, SplineEndConnector) == 0x0020);
static_assert(offsetof(ABombDefusalMinigameBase, _timeBomb) == 0x0340);
static_assert(offsetof(ABombDefusalMinigameBase, _splineConnectorMesh) == 0x0348);
static_assert(offsetof(ABombDefusalMinigameBase, _wireButtonsSize) == 0x0358);
static_assert(offsetof(ABombDefusalMinigameBase, _defusalTool) == 0x0368);
static_assert(offsetof(ABombDefusalMinigameBase, _minDefusingToolOffsetFromCenter) == 0x0374);
static_assert(offsetof(ABombDefusalMinigameBase, _maxDefusingToolOffsetFromCenter) == 0x0380);
static_assert(offsetof(ABombDefusalMinigameBase, _greenLedLight) == 0x0390);
static_assert(offsetof(ABombDefusalMinigameBase, _redLedLight) == 0x0398);
static_assert(offsetof(ABombDefusalMinigameBase, _yellowLedLight) == 0x03A0);
static_assert(offsetof(ABombDefusalMinigameBase, _ledLights) == 0x03A8);
static_assert(offsetof(ABombDefusalMinigameBase, _ledLightMesh) == 0x03B8);
static_assert(offsetof(ABombDefusalMinigameBase, _wireMesh) == 0x03C8);
static_assert(offsetof(ABombDefusalMinigameBase, _wiresEndPositions) == 0x03D0);
static_assert(offsetof(ABombDefusalMinigameBase, _wires) == 0x03E0);
static_assert(offsetof(ABombDefusalMinigameBase, _splines) == 0x0400);
static_assert(offsetof(ABombDefusalMinigameBase, _wiresForwardAxis) == 0x0430);
static_assert(offsetof(ABombDefusalMinigameBase, _wirePointsOffset) == 0x0458);
static_assert(offsetof(ABombDefusalMinigameBase, _additionalWireEndPointOffset) == 0x0468);
static_assert(offsetof(ABombDefusalMinigameBase, _cutWireSegment0) == 0x0478);
static_assert(offsetof(ABombDefusalMinigameBase, _cutWireSegment1) == 0x0480);
static_assert(offsetof(ABombDefusalMinigameBase, _cutWireSegment2) == 0x0488);
static_assert(offsetof(ABombDefusalMinigameBase, _cutWireSegment3) == 0x0490);
static_assert(offsetof(ABombDefusalMinigameBase, _cutWireSegment4) == 0x0498);
static_assert(offsetof(ABombDefusalMinigameBase, _cutWireSegment5) == 0x04A0);
static_assert(offsetof(ABombDefusalMinigameBase, _uncutWireSegment0) == 0x04A8);
static_assert(offsetof(ABombDefusalMinigameBase, _uncutWireSegment1) == 0x04B0);
static_assert(offsetof(ABombDefusalMinigameBase, _uncutWireSegment2) == 0x04B8);
static_assert(offsetof(ABombDefusalMinigameBase, _uncutWireSegment3) == 0x04C0);
static_assert(offsetof(ABombDefusalMinigameBase, _uncutWireSegment4) == 0x04C8);
static_assert(offsetof(ABombDefusalMinigameBase, _uncutWireSegment5) == 0x04D0);
static_assert(offsetof(ABombDefusalMinigameBase, _wireBox1) == 0x04D8);
static_assert(offsetof(ABombDefusalMinigameBase, _wireBox2) == 0x04E0);
static_assert(offsetof(ABombDefusalMinigameBase, _wireBox3) == 0x04E8);
static_assert(offsetof(ABombDefusalMinigameBase, _wireBox4) == 0x04F0);
static_assert(offsetof(ABombDefusalMinigameBase, _wireBox5) == 0x04F8);
static_assert(offsetof(ABombDefusalMinigameBase, _wireBox6) == 0x0500);
static_assert(offsetof(ABombDefusalMinigameBase, _bombDefusalTimerStartSound) == 0x0508);
static_assert(offsetof(ABombDefusalMinigameBase, _bombDefusalTimerStopSound) == 0x0510);
static_assert(offsetof(ABombDefusalMinigameBase, _cutWireSound) == 0x0518);
static_assert(offsetof(ABombDefusalMinigameBase, _bombDefusedSound) == 0x0520);
static_assert(offsetof(UBombDefusalWidget, _remainingTimeMinutes1) == 0x0280);
static_assert(offsetof(UBombDefusalWidget, _remainingTimeMinutes2) == 0x0288);
static_assert(offsetof(UBombDefusalWidget, _remainingTimeSeconds1) == 0x0290);
static_assert(offsetof(UBombDefusalWidget, _remainingTimeSeconds2) == 0x0298);
static_assert(offsetof(UBondageComponent, _bondageItem) == 0x0ED8);
static_assert(offsetof(UBondageComponent, _boundBodyPart) == 0x0EE0);
static_assert(offsetof(UBondageItemTag, BondageMesh) == 0x0030);
static_assert(offsetof(UBondageItemTag, HandsBoundIdleFPAnimation) == 0x0050);
static_assert(offsetof(UBondageItemTag, HandsBoundIdleTPAnimation) == 0x0058);
static_assert(offsetof(UBondageItemTag, HandsBoundMontage) == 0x0060);
static_assert(offsetof(UBondageItemTag, HandsAdjustMontage) == 0x0068);
static_assert(offsetof(UBondageItemTag, HandsBoundStruggleMontage) == 0x0070);
static_assert(offsetof(UBondageItemTag, HandsFreedMontage) == 0x0078);
static_assert(offsetof(UBondageItemTag, BindingHandsMontage) == 0x0080);
static_assert(offsetof(UBondageItemTag, AdjustingHandsMontage) == 0x0088);
static_assert(offsetof(UBondageItemTag, HandsBoundSuicideMontage) == 0x0090);
static_assert(offsetof(AWeaponAttachment, LowestMiddleSocketName) == 0x09A0);
static_assert(offsetof(AWeaponAttachment, HighestMiddleSocketName) == 0x09A8);
static_assert(offsetof(AWeaponAttachment, _staticMeshWhenAttached) == 0x09B8);
static_assert(offsetof(UMeleeSkill, AnimationsPreset) == 0x00B0);
static_assert(offsetof(UMeleeSkill, _noSkillExperienceAwards) == 0x00B8);
static_assert(offsetof(UMeleeSkill, _basicSkillExperienceAwards) == 0x00C8);
static_assert(offsetof(UMeleeSkill, _mediumSkillExperienceAwards) == 0x00D8);
static_assert(offsetof(UMeleeSkill, _advancedSkillExperienceAwards) == 0x00E8);
static_assert(offsetof(UMeleeSkill, _aboveAdvancedSkillExperienceAwards) == 0x00F8);
static_assert(offsetof(FObjectConditionContainer, _objectConditions) == 0x0000);
static_assert(offsetof(UTriggerComponent, _triggeringActorConditions) == 0x04D0);
static_assert(offsetof(UMotionTriggerComponent, TriggerForwardVector) == 0x04E0);
static_assert(offsetof(UMotionTriggerComponent, _motionDetectorStartSound) == 0x0500);
static_assert(offsetof(UMotionTriggerComponent, _motionDetectorEndSound) == 0x0508);
static_assert(offsetof(UBoxMotionTriggerComponent, BoxCollisionComponent) == 0x0528);
static_assert(offsetof(UBoxMotionTriggerComponent, _triggerSize) == 0x0530);
static_assert(offsetof(ABrenner, _navigationInvokerComponent) == 0x0870);
static_assert(offsetof(ABrenner, _hitReactComponent) == 0x0878);
static_assert(offsetof(ABrenner, _flamethrowerComponent) == 0x0880);
static_assert(offsetof(ABrenner, _brennerCommonData) == 0x0888);
static_assert(offsetof(ABrenner, _state) == 0x0918);
static_assert(offsetof(ABrenner, _flamethrowerTarget) == 0x091C);
static_assert(offsetof(ABrennerAIController, _sightSenseConfigCombat) == 0x0450);
static_assert(offsetof(ABrennerAIController, _hearingSenseConfigCombat) == 0x0458);
static_assert(offsetof(ABrennerAIController, _touchSenseConfig) == 0x0460);
static_assert(offsetof(ABrennerAIController, _noiseAccumulationMultiplierPerNoiseTag) == 0x0468);
static_assert(offsetof(ABrennerAIController, _hibernateLocation) == 0x04B8);
static_assert(offsetof(ABrennerAIController, _statesByEnum) == 0x04D0);
static_assert(offsetof(UBrennerAnimInstance, _brennerState) == 0x02C8);
static_assert(offsetof(UBrennerAnimInstance, _desiredMovementPace) == 0x02C9);
static_assert(offsetof(UBrennerAnimInstance, _acceleration) == 0x02CC);
static_assert(offsetof(UBrennerAnimInstance, _velocity) == 0x02DC);
static_assert(offsetof(UBrennerAnimInstance, _flamethrowerAimLocation) == 0x02F4);
static_assert(offsetof(FBrennerCommonData_BleedingParticles, Particles) == 0x0000);
static_assert(offsetof(FBrennerCommonData_BleedingParticles, AttachSocketName) == 0x0028);
static_assert(offsetof(UBrennerCommonData, SightAndAwarenessRange) == 0x0038);
static_assert(offsetof(UBrennerCommonData, FlamethrowerRange) == 0x0050);
static_assert(offsetof(UBrennerCommonData, _animationsForEvents) == 0x0060);
static_assert(offsetof(UBrennerCommonData, FrontAttacks) == 0x0090);
static_assert(offsetof(UBrennerCommonData, BackAttacks) == 0x00A0);
static_assert(offsetof(UBrennerCommonData, LegAttacks) == 0x00B0);
static_assert(offsetof(UBrennerCommonData, AllAroundAttacks) == 0x00C0);
static_assert(offsetof(UBrennerCommonData, ChargeAttacks) == 0x00D0);
static_assert(offsetof(UBrennerCommonData, HeadBoneName) == 0x00E0);
static_assert(offsetof(UBrennerCommonData, HitReactTypeStanding) == 0x00E8);
static_assert(offsetof(UBrennerCommonData, BleedingParticles) == 0x0110);
static_assert(offsetof(UBrennerCommonData, HibernateAudioEvent) == 0x0140);
static_assert(offsetof(UBrennerCommonData, AlertedAudioEvent) == 0x0148);
static_assert(offsetof(UBrennerCommonData, CombatAudioEvent) == 0x0150);
static_assert(offsetof(UBrennerCommonData, ChargeAudioEvent) == 0x0158);
static_assert(offsetof(UBruisingComponent, BruisingData) == 0x00B0);
static_assert(offsetof(UBruisingComponent, _renderTargetByLayer) == 0x00C8);
static_assert(offsetof(FBruisePatch, Layer) == 0x0000);
static_assert(offsetof(FBruisePatch, AllowedZones) == 0x0008);
static_assert(offsetof(FBruisePatch, Texture) == 0x0020);
static_assert(offsetof(FBruisePatch, Offset) == 0x0028);
static_assert(offsetof(UBruisingData, Patches) == 0x0030);
static_assert(offsetof(FBuildingNavLinkData, LeftNodeRelativePosition) == 0x0000);
static_assert(offsetof(FBuildingNavLinkData, RightNodeRelativePosition) == 0x000C);
static_assert(offsetof(FBuildingNavLinkData, Direction) == 0x0018);
static_assert(offsetof(FBuildingNavLinkData, SupportedAgents) == 0x001C);
static_assert(offsetof(ABuilding, _ladderMarkers) == 0x0240);
static_assert(offsetof(ABuilding, _windowMarkers) == 0x0260);
static_assert(offsetof(ABuilding, _generatedNavLinkDataByWindowIndex) == 0x03C8);
static_assert(offsetof(ABuilding, _generatedNavLinkDataByDoorRuntimeId) == 0x0418);
static_assert(offsetof(ABuilding, _doorNavArea) == 0x0468);
static_assert(offsetof(ABuilding, _windowNavArea) == 0x0470);
static_assert(offsetof(UBuildingEntitySave, BuildingData) == 0x0028);
static_assert(offsetof(FBuildingData, EntityData) == 0x0008);
static_assert(offsetof(FBuildingsReplicationHelper, BuildingsData) == 0x0000);
static_assert(offsetof(ABuildingManager, _buildings) == 0x0268);
static_assert(offsetof(ABuildingManager, _buildingsDataRepHelper) == 0x02C0);
static_assert(offsetof(ABunkerBoundsTagActor, _bunkerId) == 0x0220);
static_assert(offsetof(ABunkerBoundsTagActor, _bounds) == 0x0228);
static_assert(offsetof(UItemComponentStateBase, ID) == 0x0028);
static_assert(offsetof(UItemComponentStateBase, ComponentName) == 0x0030);
static_assert(offsetof(UBuriableItemComponentState, BurierUserId) == 0x0048);
static_assert(offsetof(FBurialInformation, BurierUserId) == 0x0000);
static_assert(offsetof(FBurialInformation, BurialLocation) == 0x000C);
static_assert(offsetof(UBuriableItemComponent, _repBurialInformation) == 0x00E8);
static_assert(offsetof(UBuriableItemComponent, _buriedMesh) == 0x0108);
static_assert(offsetof(UBuriableItemComponent, _buriedMeshScale) == 0x0110);
static_assert(offsetof(UBuriableItemComponent, _buriedMeshRelativeLocation) == 0x011C);
static_assert(offsetof(UBuriableItemComponent, _spriteMarkerBillboard) == 0x0138);
static_assert(offsetof(UBuriableItemComponent, _spriteMarkerData) == 0x0140);
static_assert(offsetof(UBuriableItemComponent, _spriteMarkerRelativeLocation) == 0x0168);
static_assert(offsetof(FBuryMaterialData, Material) == 0x0000);
static_assert(offsetof(FBuryMaterialData, BreachActionParticles) == 0x0008);
static_assert(offsetof(FBuryMaterialData, BreachActionSound) == 0x0010);
static_assert(offsetof(FBuryMaterialData, DumpActionParticles) == 0x0018);
static_assert(offsetof(FBuryMaterialData, DumpActionSound) == 0x0020);
static_assert(offsetof(UBuryToolItemTag, BladeTipSocket) == 0x003C);
static_assert(offsetof(UBuryToolItemTag, BladeCenterSocket) == 0x0044);
static_assert(offsetof(FCamouflageSkillParametersPerSkillLevel, VisibilityFadeByDistanceWhileStandingInMeters) == 0x0010);
static_assert(offsetof(FCamouflageSkillParametersPerSkillLevel, VisibilityFadeByDistanceWhileCrouchingInMeters) == 0x0018);
static_assert(offsetof(FCamouflageSkillParametersPerSkillLevel, VisibilityFadeByDistanceWhileInProneInMeters) == 0x0020);
static_assert(offsetof(FCamouflageSkillParametersPerSkillLevel, PhysicalSurfaceVisibilityInfluenceDistanceInMeters) == 0x0028);
static_assert(offsetof(UCamouflageSkill, NoSkillExperienceAwards) == 0x0154);
static_assert(offsetof(UCamouflageSkill, BasicSkillExperienceAwards) == 0x0158);
static_assert(offsetof(UCamouflageSkill, MediumSkillExperienceAwards) == 0x015C);
static_assert(offsetof(UCamouflageSkill, AdvancedSkillExperienceAwards) == 0x0160);
static_assert(offsetof(UCamouflageSkill, AboveAdvancedSkillExperienceAwards) == 0x0164);
static_assert(offsetof(UCamouflageSkill, NoSkillParameters) == 0x0168);
static_assert(offsetof(UCamouflageSkill, BasicSkillParameters) == 0x0198);
static_assert(offsetof(UCamouflageSkill, MediumSkillParameters) == 0x01C8);
static_assert(offsetof(UCamouflageSkill, AdvancedSkillParameters) == 0x01F8);
static_assert(offsetof(UCamouflageSkill, AboveAdvancedSkillParameters) == 0x0228);
static_assert(offsetof(FCargoDropSpawnerPreset, Preset) == 0x0000);
static_assert(offsetof(FCargoDropSpawnerPreset, SpawnerPreset) == 0x0008);
static_assert(offsetof(ACargoDropContainer, LandSound) == 0x0230);
static_assert(offsetof(ACargoDropContainer, WarningSound) == 0x0238);
static_assert(offsetof(ACargoDropContainer, DetonationSound) == 0x0240);
static_assert(offsetof(ACargoDropContainer, DetonationParticles) == 0x0248);
static_assert(offsetof(ACargoDropContainer, CameraShakeClass) == 0x0250);
static_assert(offsetof(ACargoDropContainer, MajorSpawnerOptions) == 0x0258);
static_assert(offsetof(ACargoDropContainer, MajorSpawnerPresetOptions) == 0x0268);
static_assert(offsetof(ACargoDropContainer, MinorSpawnerOptions) == 0x0278);
static_assert(offsetof(ACargoDropContainer, UnlockLockersAudioEvent) == 0x0288);
static_assert(offsetof(ACargoDropContainer, _parachuteMesh) == 0x0290);
static_assert(offsetof(ACargoDropContainer, _flareParticles) == 0x0298);
static_assert(offsetof(ACargoDropContainer, _dustParticles) == 0x02A0);
static_assert(offsetof(ACargoDropContainer, _timerWidget) == 0x02A8);
static_assert(offsetof(ACargoDropContainer, _lockStateWidget) == 0x02B0);
static_assert(offsetof(ACargoDropContainer, _endLocation) == 0x02C8);
static_assert(offsetof(ACargoDropContainer, _rotation) == 0x02D4);
static_assert(offsetof(ACargoDropContainer, _cargoLockers) == 0x02F0);
static_assert(offsetof(AWorldEvent, Location) == 0x0220);
static_assert(offsetof(AWorldEvent, IconTexture) == 0x0230);
static_assert(offsetof(ACargoDropEvent, CargoDropClasses) == 0x0248);
static_assert(offsetof(ACargoDropEvent, _encounterClasses) == 0x02B0);
static_assert(offsetof(ACargoDropEvent, _zombieEncounterTag) == 0x0300);
static_assert(offsetof(ACargoDropEvent, _dropshipEncounterTag) == 0x0308);
static_assert(offsetof(FCarouselTextStyle, Padding) == 0x0000);
static_assert(offsetof(FCarouselTextStyle, HorizontalAlignment) == 0x0010);
static_assert(offsetof(FCarouselTextStyle, VerticalAlignment) == 0x0011);
static_assert(offsetof(FCarouselTextStyle, Font) == 0x0018);
static_assert(offsetof(FCarouselTextStyle, ColorAndOpacity) == 0x0070);
static_assert(offsetof(FCarouselStyle, LeftArrowIcon) == 0x0000);
static_assert(offsetof(FCarouselStyle, RightArrowIcon) == 0x0278);
static_assert(offsetof(FCarouselStyle, ValueText) == 0x04F0);
static_assert(offsetof(UCarousel, _selectionDisplay) == 0x0288);
static_assert(offsetof(UCarousel, _leftArrow) == 0x0290);
static_assert(offsetof(UCarousel, _rightArrow) == 0x0298);
static_assert(offsetof(UCarousel, _carouselValues) == 0x02A0);
static_assert(offsetof(UCarousel, _selectedAndFocusedCarouselStyle) == 0x02B8);
static_assert(offsetof(UCarousel, _selectedAndUnfocusedCarouselStyle) == 0x0828);
static_assert(offsetof(UCarousel, _unselectedCarouselStyle) == 0x0D98);
static_assert(offsetof(UCarousel, _highlightedCarouselStyle) == 0x1308);
static_assert(offsetof(UCarousel, _disabledCarouselStyle) == 0x1878);
static_assert(offsetof(FCarouselWithLabelStyle, FocusBackgroundImage) == 0x0000);
static_assert(offsetof(FCarouselWithLabelStyle, LabelText) == 0x0088);
static_assert(offsetof(UCarouselWithLabel, _name) == 0x1E10);
static_assert(offsetof(UCarouselWithLabel, _focusBackgroundImage) == 0x1E18);
static_assert(offsetof(UCarouselWithLabel, _label) == 0x1E20);
static_assert(offsetof(UCarouselWithLabel, _selectedAndFocusedCWLStyle) == 0x1E38);
static_assert(offsetof(UCarouselWithLabel, _selectedAndUnfocusedCWLStyle) == 0x1F40);
static_assert(offsetof(UCarouselWithLabel, _unselectedCWLStyle) == 0x2048);
static_assert(offsetof(UCarouselWithLabel, _highlightedCWLStyle) == 0x2150);
static_assert(offsetof(UCarouselWithLabel, _disabledCWLStyle) == 0x2258);
static_assert(offsetof(UCCGameUpgradeConditionDisplayWidget, _border) == 0x0268);
static_assert(offsetof(UCCGameUpgradeConditionDisplayWidget, _text) == 0x0270);
static_assert(offsetof(UCCGameUpgradeConditionDisplayWidget, _requirementTextPerGameUpgrade) == 0x0278);
static_assert(offsetof(UCentralBuildingPanel, _placedPlaceableWidget) == 0x0268);
static_assert(offsetof(FCharacterAndItemAnimation, CharacterMontage) == 0x0000);
static_assert(offsetof(FCharacterAndItemAnimation, ItemMontage) == 0x0008);
static_assert(offsetof(AChainsaw, SkeletalMesh) == 0x09B0);
static_assert(offsetof(AChainsaw, AnimationsStartEngine) == 0x09B8);
static_assert(offsetof(AChainsaw, AnimationsCheckFuelStatus) == 0x09C8);
static_assert(offsetof(AChainsaw, ChoppingToolItemTag) == 0x09D8);
static_assert(offsetof(AChainsaw, TurnOnAudioEvent) == 0x09E0);
static_assert(offsetof(AChainsaw, TurnOffAudioEvent) == 0x09E8);
static_assert(offsetof(AChainsaw, _fuelType) == 0x09F0);
static_assert(offsetof(AChainsaw, _inFuelingSocketTypes) == 0x09F8);
static_assert(offsetof(AChainsaw, _fuelFillingMontage) == 0x0A30);
static_assert(offsetof(AChainsaw, _meleeSkillAnimationsPresetWhenTurnedOff) == 0x0A38);
static_assert(offsetof(AChainsaw, _meleeSkillAnimationsPresetWhenTurnedOn) == 0x0A40);
static_assert(offsetof(AChainsaw, _fuelStartFillingAudioEvent) == 0x0A48);
static_assert(offsetof(AChainsaw, _fuelStopFillingAudioEvent) == 0x0A50);
static_assert(offsetof(FBodyWeaponAnimation, Body) == 0x0000);
static_assert(offsetof(FBodyWeaponAnimation, Weapon) == 0x0008);
static_assert(offsetof(FWeaponAttachmentAnimations, Add) == 0x0000);
static_assert(offsetof(FWeaponAttachmentAnimations, Remove) == 0x0010);
static_assert(offsetof(FWeaponSpreadData, ByStance) == 0x0000);
static_assert(offsetof(FFireAnimationData, BodyWeaponAnimation) == 0x0000);
static_assert(offsetof(FFireAnimationData, BodyWeaponAnimationChamber) == 0x0018);
static_assert(offsetof(FFireAnimationData, Conditions) == 0x0030);
static_assert(offsetof(FFireAnimationData, ProbabilityWeightCurve) == 0x0038);
static_assert(offsetof(FWeaponMalfunctionChances, Value) == 0x0000);
static_assert(offsetof(FWeaponMalfunctionData, ProbabilityCurve) == 0x0008);
static_assert(offsetof(FWeaponMalfunctionData, ClearMalfunctionSequence) == 0x0090);
static_assert(offsetof(FWeaponMalfunctionData, ClearMalfunctionSequences) == 0x0098);
static_assert(offsetof(FAmmunitionData, AmmunitionItemClass) == 0x0000);
static_assert(offsetof(FAmmunitionData, State) == 0x0014);
static_assert(offsetof(FWeaponStateSyncData, LoadedAmmoData) == 0x0008);
static_assert(offsetof(FWeaponStateSyncData, InternalMagazineAmmoData) == 0x0018);
static_assert(offsetof(FWeaponStateSyncData, LoadedAmmunitionItemClass) == 0x0028);
static_assert(offsetof(FWeaponStateSyncData, LoadedProjectileClass) == 0x0030);
static_assert(offsetof(FWeaponStateSyncData, FiringMode) == 0x0038);
static_assert(offsetof(AWeapon, SkeletalMesh) == 0x0A10);
static_assert(offsetof(AWeapon, WeaponFiringStateType) == 0x0A18);
static_assert(offsetof(AWeapon, TempWeaponStateFiringAutomatic) == 0x0A20);
static_assert(offsetof(AWeapon, TempWeaponStateFiringSemiAutomatic) == 0x0A28);
static_assert(offsetof(AWeapon, TempWeaponStateFiringManual) == 0x0A30);
static_assert(offsetof(AWeapon, TempWeaponStateFiringBurst) == 0x0A38);
static_assert(offsetof(AWeapon, TempWeaponStateActiveManualFiring) == 0x0A40);
static_assert(offsetof(AWeapon, FiringState) == 0x0A48);
static_assert(offsetof(AWeapon, SupportedFiringModes) == 0x0A50);
static_assert(offsetof(AWeapon, CartridgeMeshComponents) == 0x0A60);
static_assert(offsetof(AWeapon, ReloadActionSequenceClasses) == 0x0A70);
static_assert(offsetof(AWeapon, UnloadAmmoActionSequenceClasses) == 0x0A80);
static_assert(offsetof(AWeapon, CheckAmmoActionSequenceClasses) == 0x0A90);
static_assert(offsetof(AWeapon, ReloadActionSequences) == 0x0AA0);
static_assert(offsetof(AWeapon, ClearMalfunctionActionSequences) == 0x0AB0);
static_assert(offsetof(AWeapon, UnloadAmmoActionSequences) == 0x0AC0);
static_assert(offsetof(AWeapon, CheckAmmoActionSequences) == 0x0AD0);
static_assert(offsetof(AWeapon, AmmunitionTags) == 0x0AE0);
static_assert(offsetof(AWeapon, DefaultAmmunitionItemClass) == 0x0B00);
static_assert(offsetof(AWeapon, FireAnimation) == 0x0B28);
static_assert(offsetof(AWeapon, FireAnimationLastRound) == 0x0B30);
static_assert(offsetof(AWeapon, FireAnimationBody) == 0x0B38);
static_assert(offsetof(AWeapon, FirstPersonFireAnimationBody) == 0x0B40);
static_assert(offsetof(AWeapon, FireAutomaticAnimationBody) == 0x0B48);
static_assert(offsetof(AWeapon, BodyWeaponAnimationChamber) == 0x0B50);
static_assert(offsetof(AWeapon, CheckFiringModeAnimationBody) == 0x0B60);
static_assert(offsetof(AWeapon, ChangeFiringModeAnimationBody) == 0x0B68);
static_assert(offsetof(AWeapon, AttachmentsAnimations) == 0x0B70);
static_assert(offsetof(AWeapon, MuzzleSocketName) == 0x0BC0);
static_assert(offsetof(AWeapon, GripCorrectionSocketName) == 0x0BC8);
static_assert(offsetof(AWeapon, AimingDownTheSightsCenterSocketName) == 0x0BD0);
static_assert(offsetof(AWeapon, EjectCasingSocketName) == 0x0BD8);
static_assert(offsetof(AWeapon, SupportingHandIKSocketName) == 0x0BE4);
static_assert(offsetof(AWeapon, SupportingHandIKLocation) == 0x0BEC);
static_assert(offsetof(AWeapon, AimingDownTheSightsLocationOffset) == 0x0BF8);
static_assert(offsetof(AWeapon, HolsteredOnPrisonerLeftOffset) == 0x0C10);
static_assert(offsetof(AWeapon, HolsteredOnPrisonerRightOffset) == 0x0C40);
static_assert(offsetof(AWeapon, WeaponCameraOffsetWhileScoping) == 0x0C78);
static_assert(offsetof(AWeapon, OffsetPerAspectRatioWhileScoping) == 0x0C88);
static_assert(offsetof(AWeapon, InstantHitImpactEffects) == 0x0D20);
static_assert(offsetof(AWeapon, FiringModeBoneRotations) == 0x0D3C);
static_assert(offsetof(AWeapon, PostProcessSettings) == 0x0D60);
static_assert(offsetof(AWeapon, RelaxedGripCorrectionAnimationPose) == 0x12C0);
static_assert(offsetof(AWeapon, AimingHipAnimationPose) == 0x12D8);
static_assert(offsetof(AWeapon, AimingDownTheSightsAnimationPose) == 0x12F0);
static_assert(offsetof(AWeapon, AimingDownTheSightsStillAnimationPose) == 0x1308);
static_assert(offsetof(AWeapon, AimingDownTheSightsWalkingAnimationPose) == 0x1320);
static_assert(offsetof(AWeapon, AimingDownTheSightsLimpingWalkingAnimationPose) == 0x1338);
static_assert(offsetof(AWeapon, WeaponAimOffsets) == 0x1350);
static_assert(offsetof(AWeapon, AimingDownTheSightsZeroRangeBlendSpace) == 0x1388);
static_assert(offsetof(AWeapon, WeaponCategory) == 0x1390);
static_assert(offsetof(AWeapon, WeaponSpreadData) == 0x1394);
static_assert(offsetof(AWeapon, WeaponViewKickData) == 0x13CC);
static_assert(offsetof(AWeapon, WornOutFiringAnimations) == 0x1410);
static_assert(offsetof(AWeapon, InspectModeAnimation) == 0x1428);
static_assert(offsetof(AWeapon, MalfunctionChances) == 0x1434);
static_assert(offsetof(AWeapon, StovePipeSocketName) == 0x146C);
static_assert(offsetof(AWeapon, StovePipeMesh) == 0x1478);
static_assert(offsetof(AWeapon, DoubleFeedSocketName) == 0x1480);
static_assert(offsetof(AWeapon, DoubleFeedMesh) == 0x1488);
static_assert(offsetof(AWeapon, ClearMalfunctionSequenceClasses) == 0x1498);
static_assert(offsetof(AWeapon, MalfunctionsData) == 0x14A8);
static_assert(offsetof(AWeapon, DownTheSightsModeLerpCurveOverride) == 0x1500);
static_assert(offsetof(AWeapon, _currentState) == 0x1508);
static_assert(offsetof(AWeapon, _activeState) == 0x1510);
static_assert(offsetof(AWeapon, _equippingState) == 0x1518);
static_assert(offsetof(AWeapon, _unequippingStateDefault) == 0x1520);
static_assert(offsetof(AWeapon, _unequippingState) == 0x1528);
static_assert(offsetof(AWeapon, _inactiveState) == 0x1530);
static_assert(offsetof(AWeapon, _chamberBulletState) == 0x1538);
static_assert(offsetof(AWeapon, _reloadState2) == 0x1540);
static_assert(offsetof(AWeapon, _clearMalfunctionState) == 0x1548);
static_assert(offsetof(AWeapon, _unloadAmmoState) == 0x1550);
static_assert(offsetof(AWeapon, _checkAmmoState) == 0x1558);
static_assert(offsetof(AWeapon, _muzzleEffectsSpawnType) == 0x1560);
static_assert(offsetof(AWeapon, _muzzlePS) == 0x1568);
static_assert(offsetof(AWeapon, _suppressorMuzzlePS) == 0x1570);
static_assert(offsetof(AWeapon, _muzzlePSC) == 0x1578);
static_assert(offsetof(AWeapon, _smokeAfterShotFiredPS) == 0x1580);
static_assert(offsetof(AWeapon, _smokeAfterShotFiredPSC) == 0x1588);
static_assert(offsetof(AWeapon, _ejectCasingPS) == 0x1590);
static_assert(offsetof(AWeapon, _ejectLiveRoundPS) == 0x1598);
static_assert(offsetof(AWeapon, _paintjobComponent) == 0x15A0);
static_assert(offsetof(AWeapon, _weaponOwner) == 0x15A8);
static_assert(offsetof(AWeapon, _loadedAmmoData) == 0x15C0);
static_assert(offsetof(AWeapon, _projectileTargetLocationOverride) == 0x15D4);
static_assert(offsetof(AWeapon, _firingMode) == 0x165C);
static_assert(offsetof(AWeapon, _weaponAttachmentsReplicated) == 0x1670);
static_assert(offsetof(AWeapon, _internalMagazineAmmoData) == 0x16A8);
static_assert(offsetof(AWeapon, _fireSingleShotAudioEvent) == 0x16D0);
static_assert(offsetof(AWeapon, _startAutoFireAudioEvent) == 0x16D8);
static_assert(offsetof(AWeapon, _stopAutoFireAudioEvent) == 0x16E0);
static_assert(offsetof(AWeapon, _suppressorFireSingleShotAudioEvent) == 0x16E8);
static_assert(offsetof(AWeapon, _suppressorStartAutoFireAudioEvent) == 0x16F0);
static_assert(offsetof(AWeapon, _suppressorStopAutoFireAudioEvent) == 0x16F8);
static_assert(offsetof(AWeapon, _improvisedSuppressorFireSingleShotAudioEvent) == 0x1700);
static_assert(offsetof(AWeapon, _improvisedSuppressorStartAutoFireAudioEvent) == 0x1708);
static_assert(offsetof(AWeapon, _improvisedSuppressorStopAutoFireAudioEvent) == 0x1710);
static_assert(offsetof(AWeapon, _noAmmoAudioEvent) == 0x1718);
static_assert(offsetof(AWeapon, _dryFireUncockedAudioEvent) == 0x1720);
static_assert(offsetof(AWeapon, _zeroRangeClickAudioEvent) == 0x1728);
static_assert(offsetof(AWeapon, _changeFiringModeAudioEvent) == 0x1730);
static_assert(offsetof(AWeapon, _onMalfunctionAudioEvent) == 0x1738);
static_assert(offsetof(AWeapon, _switchADSStateAudioEvent) == 0x1740);
static_assert(offsetof(AWeapon, _indoorSmallHearingDamageAudioEvent) == 0x1748);
static_assert(offsetof(AWeapon, _indoorMediumHearingDamageAudioEvent) == 0x1750);
static_assert(offsetof(AWeapon, _indoorLargeHearingDamageAudioEvent) == 0x1758);
static_assert(offsetof(AWeapon, _outdoorLargeHearingDamageAudioEvent) == 0x1760);
static_assert(offsetof(AWeapon, _malfunction) == 0x178C);
static_assert(offsetof(AWeapon, _behaviourMode) == 0x178D);
static_assert(offsetof(AWeapon, _loadedAmmunitionItemClass) == 0x17B0);
static_assert(offsetof(AWeapon, _loadedProjectileClass) == 0x17C0);
static_assert(offsetof(AWeapon, _defaultProjectileClass) == 0x17C8);
static_assert(offsetof(AWeapon, _ownerWeaponStateSyncData) == 0x2F68);
static_assert(offsetof(AWeapon, _armedNPCWeaponManualClass) == 0x3000);
static_assert(offsetof(FWeaponReloadData, Item) == 0x0008);
static_assert(offsetof(FWeaponReloadData, Item2) == 0x0010);
static_assert(offsetof(FWeaponReloadData, ReloadSequenceClass) == 0x0020);
static_assert(offsetof(UWeaponActionReloadSequence, AnimationStandAndCrouch) == 0x0028);
static_assert(offsetof(UWeaponActionReloadSequence, AnimationProne) == 0x0038);
static_assert(offsetof(UWeaponActionReloadSequence, _reloadData) == 0x0050);
static_assert(offsetof(UWaypointWidgetBase, IconTexture) == 0x0268);
static_assert(offsetof(UWaypointWidgetBase, AccentTexture) == 0x0290);
static_assert(offsetof(UWaypointWidgetBase, AccentColor) == 0x02B8);
static_assert(offsetof(UWaypointWidgetBase, BarColor) == 0x02CC);
static_assert(offsetof(UWaypointWidgetBase, EmphasisColor) == 0x02E4);
static_assert(offsetof(UWaypointWidgetBase, LabelText) == 0x02F8);
static_assert(offsetof(UCCNonSelectableTextWidget, _retainerBox) == 0x0268);
static_assert(offsetof(UCCNonSelectableTextWidget, _sizeBox) == 0x0270);
static_assert(offsetof(UCCNonSelectableTextWidget, _textBlock) == 0x0278);
static_assert(offsetof(UCCNonSelectableTextWidget, _text) == 0x0280);
static_assert(offsetof(UCCNonSelectableTextWidget, _textPadding) == 0x029C);
static_assert(offsetof(UCCNonSelectableTextWidget, _sizeOverride) == 0x02AC);
static_assert(offsetof(UCCNonSelectableTextWidget, _textHorizontalAlignment) == 0x02B4);
static_assert(offsetof(UCCNonSelectableTextWidget, _textColor) == 0x02B8);
static_assert(offsetof(UUserWidgetWithDescription, _description) == 0x02A0);
static_assert(offsetof(FSkillTemplate, Attribute) == 0x0000);
static_assert(offsetof(FSkillTemplate, Name) == 0x0008);
static_assert(offsetof(FSkillTemplate, ClassName) == 0x0020);
static_assert(offsetof(FSkillTemplate, Level) == 0x0030);
static_assert(offsetof(UCCSkillSliderWidget, _skillName) == 0x02E8);
static_assert(offsetof(UCCSkillSliderWidget, _nonSelectableText) == 0x02F0);
static_assert(offsetof(UCCSkillSliderWidget, _slider) == 0x02F8);
static_assert(offsetof(UCCSkillSliderWidget, _skillTemplate) == 0x0308);
static_assert(offsetof(UCCSkillSliderWidget, _enabledColor) == 0x0340);
static_assert(offsetof(UCCSkillSliderWidget, _disabledColor) == 0x0350);
static_assert(offsetof(FCCNonImplementedSkill, Attribute) == 0x0000);
static_assert(offsetof(FCCNonImplementedSkill, Caption) == 0x0008);
static_assert(offsetof(UCharacterCreationMenu, _canvasMain) == 0x0268);
static_assert(offsetof(UCharacterCreationMenu, _canvasContent) == 0x0270);
static_assert(offsetof(UCharacterCreationMenu, _overlayMenu) == 0x0278);
static_assert(offsetof(UCharacterCreationMenu, _overlayPopup) == 0x0280);
static_assert(offsetof(UCharacterCreationMenu, _widgetSwitcher) == 0x0290);
static_assert(offsetof(UCharacterCreationMenu, _editableTextNameCharacterPanel) == 0x0298);
static_assert(offsetof(UCharacterCreationMenu, _borderNameCharacterPanel) == 0x02A0);
static_assert(offsetof(UCharacterCreationMenu, _availableAttributePointsDisplay) == 0x02A8);
static_assert(offsetof(UCharacterCreationMenu, _sliderStrength) == 0x02B0);
static_assert(offsetof(UCharacterCreationMenu, _sliderConstitution) == 0x02B8);
static_assert(offsetof(UCharacterCreationMenu, _sliderDexterity) == 0x02C0);
static_assert(offsetof(UCharacterCreationMenu, _sliderIntelligence) == 0x02C8);
static_assert(offsetof(UCharacterCreationMenu, _carouselGender) == 0x02D0);
static_assert(offsetof(UCharacterCreationMenu, _sliderHead) == 0x02D8);
static_assert(offsetof(UCharacterCreationMenu, _carouselHairiness) == 0x02E0);
static_assert(offsetof(UCharacterCreationMenu, _appearanceUpgradeConditionDisplay) == 0x02E8);
static_assert(offsetof(UCharacterCreationMenu, _sliderAge) == 0x02F0);
static_assert(offsetof(UCharacterCreationMenu, _carouselTattoos) == 0x02F8);
static_assert(offsetof(UCharacterCreationMenu, _sliderTattooStyle) == 0x0300);
static_assert(offsetof(UCharacterCreationMenu, _tattooUpgradeConditionDisplay) == 0x0308);
static_assert(offsetof(UCharacterCreationMenu, _carouselConcealedMode) == 0x0310);
static_assert(offsetof(UCharacterCreationMenu, _sliderPenisBreastSize) == 0x0318);
static_assert(offsetof(UCharacterCreationMenu, _buttonRandomizeAttributes) == 0x0320);
static_assert(offsetof(UCharacterCreationMenu, _buttonCancelToMainMenu) == 0x0328);
static_assert(offsetof(UCharacterCreationMenu, _buttonNextToFace) == 0x0330);
static_assert(offsetof(UCharacterCreationMenu, _overlayAttributeConfirmation) == 0x0338);
static_assert(offsetof(UCharacterCreationMenu, _buttonCancelCharacter) == 0x0340);
static_assert(offsetof(UCharacterCreationMenu, _buttonContinueCharacter) == 0x0348);
static_assert(offsetof(UCharacterCreationMenu, _editableTextNameFacePanel) == 0x0350);
static_assert(offsetof(UCharacterCreationMenu, _borderNameFacePanel) == 0x0358);
static_assert(offsetof(UCharacterCreationMenu, _buttonRandomizeFace) == 0x0360);
static_assert(offsetof(UCharacterCreationMenu, _buttonBackToCharacter) == 0x0368);
static_assert(offsetof(UCharacterCreationMenu, _buttonNextToSkills) == 0x0370);
static_assert(offsetof(UCharacterCreationMenu, _sliderFaceType) == 0x0378);
static_assert(offsetof(UCharacterCreationMenu, _presetColorPickerSkinTone) == 0x0380);
static_assert(offsetof(UCharacterCreationMenu, _sliderHairStyle) == 0x0388);
static_assert(offsetof(UCharacterCreationMenu, _hairStyleUpgradeConditionDisplay) == 0x0390);
static_assert(offsetof(UCharacterCreationMenu, _presetColorPickerHairColor) == 0x0398);
static_assert(offsetof(UCharacterCreationMenu, _facialHairVerticalBox) == 0x03A0);
static_assert(offsetof(UCharacterCreationMenu, _sliderMoustacheStyle) == 0x03A8);
static_assert(offsetof(UCharacterCreationMenu, _moustacheStyleUpgradeConditionDisplay) == 0x03B0);
static_assert(offsetof(UCharacterCreationMenu, _sliderBeardStyle) == 0x03B8);
static_assert(offsetof(UCharacterCreationMenu, _beardStyleUpgradeConditionDisplay) == 0x03C0);
static_assert(offsetof(UCharacterCreationMenu, _presetColorPickerEyeColor) == 0x03C8);
static_assert(offsetof(UCharacterCreationMenu, _sliderIrisType) == 0x03D0);
static_assert(offsetof(UCharacterCreationMenu, _editableTextNameSkillsPanel) == 0x03D8);
static_assert(offsetof(UCharacterCreationMenu, _borderNameSkillsPanel) == 0x03E0);
static_assert(offsetof(UCharacterCreationMenu, _attributeDisplayConstitution) == 0x03E8);
static_assert(offsetof(UCharacterCreationMenu, _attributeDisplayDexterity) == 0x03F0);
static_assert(offsetof(UCharacterCreationMenu, _attributeDisplayIntelligence) == 0x03F8);
static_assert(offsetof(UCharacterCreationMenu, _attributeDisplayStrength) == 0x0400);
static_assert(offsetof(UCharacterCreationMenu, _skillPointDisplayConstitution) == 0x0408);
static_assert(offsetof(UCharacterCreationMenu, _skillPointDisplayDexterity) == 0x0410);
static_assert(offsetof(UCharacterCreationMenu, _skillPointDisplayIntelligence) == 0x0418);
static_assert(offsetof(UCharacterCreationMenu, _skillPointDisplayStrength) == 0x0420);
static_assert(offsetof(UCharacterCreationMenu, _skillBoxStrength) == 0x0428);
static_assert(offsetof(UCharacterCreationMenu, _skillBoxConstitution) == 0x0430);
static_assert(offsetof(UCharacterCreationMenu, _skillBoxDexterity) == 0x0438);
static_assert(offsetof(UCharacterCreationMenu, _skillBoxIntelligence) == 0x0440);
static_assert(offsetof(UCharacterCreationMenu, _buttonRandomizeSkills) == 0x0448);
static_assert(offsetof(UCharacterCreationMenu, _textNameAlreadyTaken) == 0x0450);
static_assert(offsetof(UCharacterCreationMenu, _buttonBackToFace) == 0x0458);
static_assert(offsetof(UCharacterCreationMenu, _buttonSwitchToCriminalRecord) == 0x0460);
static_assert(offsetof(UCharacterCreationMenu, _faceOptionsScrollbox) == 0x0468);
static_assert(offsetof(UCharacterCreationMenu, _overlaySkillConfirmation) == 0x0470);
static_assert(offsetof(UCharacterCreationMenu, _buttonCancelSkills) == 0x0478);
static_assert(offsetof(UCharacterCreationMenu, _buttonContinueSkills) == 0x0480);
static_assert(offsetof(UCharacterCreationMenu, _criminalRecord) == 0x0488);
static_assert(offsetof(UCharacterCreationMenu, _nonImplementedSkills) == 0x0490);
static_assert(offsetof(UCharacterCreationMenu, _pointDisplayAvailableColor) == 0x04A0);
static_assert(offsetof(UCharacterCreationMenu, _pointDisplayDepletedColor) == 0x04B0);
static_assert(offsetof(UCharacterCreationMenu, _skillSliderClass) == 0x04C0);
static_assert(offsetof(UCharacterCreationMenu, _overlayDescription) == 0x04C8);
static_assert(offsetof(UCharacterCreationMenu, _descriptionTextBlock) == 0x04D0);
static_assert(offsetof(UCharacterCreationMenu, _cutsceneWidget) == 0x04D8);
static_assert(offsetof(FCharacterImpactSounds, AudioEvent) == 0x0000);
static_assert(offsetof(FCharacterHeadImpactSoundData, ImpactSourceCategories) == 0x0000);
static_assert(offsetof(FCharacterHeadImpactSoundData, ImpactTargetCategories) == 0x0010);
static_assert(offsetof(FCharacterHeadImpactSoundData, Sounds) == 0x0020);
static_assert(offsetof(FCharacterHeadImpactSoundsData, SoundsData) == 0x0000);
static_assert(offsetof(FCharacterHeadImpactSoundsData, FallbackSounds) == 0x0010);
static_assert(offsetof(FCharacterTorsoImpactSoundData, ImpactSourceCategories) == 0x0000);
static_assert(offsetof(FCharacterTorsoImpactSoundData, ImpactTargetCategories) == 0x0010);
static_assert(offsetof(FCharacterTorsoImpactSoundData, Sounds) == 0x0020);
static_assert(offsetof(FCharacterTorsoImpactSoundsData, SoundsData) == 0x0000);
static_assert(offsetof(FCharacterTorsoImpactSoundsData, FallbackSounds) == 0x0010);
static_assert(offsetof(FCharacterArmsImpactSoundData, ImpactSourceCategories) == 0x0000);
static_assert(offsetof(FCharacterArmsImpactSoundData, ImpactTargetCategories) == 0x0010);
static_assert(offsetof(FCharacterArmsImpactSoundData, Sounds) == 0x0020);
static_assert(offsetof(FCharacterArmsImpactSoundsData, SoundsData) == 0x0000);
static_assert(offsetof(FCharacterArmsImpactSoundsData, FallbackSounds) == 0x0010);
static_assert(offsetof(FCharacterLegsImpactSoundData, ImpactSourceCategories) == 0x0000);
static_assert(offsetof(FCharacterLegsImpactSoundData, ImpactTargetCategories) == 0x0010);
static_assert(offsetof(FCharacterLegsImpactSoundData, Sounds) == 0x0020);
static_assert(offsetof(FCharacterLegsImpactSoundsData, SoundsData) == 0x0000);
static_assert(offsetof(FCharacterLegsImpactSoundsData, FallbackSounds) == 0x0010);
static_assert(offsetof(UCharacterImpactSoundsData, Head) == 0x0030);
static_assert(offsetof(UCharacterImpactSoundsData, Torso) == 0x0048);
static_assert(offsetof(UCharacterImpactSoundsData, Arms) == 0x0060);
static_assert(offsetof(UCharacterImpactSoundsData, Legs) == 0x0078);
static_assert(offsetof(FCharacterMeshSocketOverride, Condition) == 0x0000);
static_assert(offsetof(FCharacterMeshSocketOverride, MeshSocket) == 0x0048);
static_assert(offsetof(FCharacterMeshMorphTarget, Condition) == 0x0000);
static_assert(offsetof(FCharacterMeshMorphTargetArray, MorphTargetArray) == 0x0000);
static_assert(offsetof(FCharacterMeshMaterialOverride, Condition) == 0x0000);
static_assert(offsetof(FCharacterMeshMaterialOverride, MaterialSlot) == 0x0048);
static_assert(offsetof(FCharacterMeshMaterialOverride, OverrideMaterial) == 0x0050);
static_assert(offsetof(FCharacterMeshSlice, Condition) == 0x0000);
static_assert(offsetof(FCharacterMeshSlice, Slots) == 0x0048);
static_assert(offsetof(FCharacterMeshSlice, SkeletalMesh) == 0x0068);
static_assert(offsetof(FCharacterMeshSlice, SkeletalMeshSocket) == 0x0090);
static_assert(offsetof(FCharacterMeshSlice, SkeletalMeshSocketOverrides) == 0x0098);
static_assert(offsetof(FCharacterMeshSlice, SkeletalMeshMorphTargets) == 0x00A8);
static_assert(offsetof(FCharacterMeshSlice, StaticMesh) == 0x00F8);
static_assert(offsetof(FCharacterMeshSlice, StaticMeshSocket) == 0x0120);
static_assert(offsetof(FCharacterMeshSlice, StaticMeshSocketOverrides) == 0x0128);
static_assert(offsetof(FCharacterMeshSlice, OverrideMaterials) == 0x0138);
static_assert(offsetof(FCharacterMeshSlice, SpecificAnimationBlueprintClass) == 0x0148);
static_assert(offsetof(FCharacterMeshSlice, SpecificTransform) == 0x0170);
static_assert(offsetof(UCharacterMesh, Tags) == 0x0028);
static_assert(offsetof(UCharacterMesh, MeshSlices) == 0x0048);
static_assert(offsetof(FCharacterMeshManagerPerSlotData, CharacterMeshLayers) == 0x0000);
static_assert(offsetof(UCharacterMeshManager, _incompatibleCharacterMeshClasses) == 0x0040);
static_assert(offsetof(UCharacterMeshManager, _perCharacterMeshSlotData) == 0x0090);
static_assert(offsetof(ACharacterModificationRoom, _prisoner) == 0x0228);
static_assert(offsetof(ACharacterModificationRoom, _sceneRoot) == 0x0230);
static_assert(offsetof(ACharacterModificationRoom, _prisonerClass) == 0x0238);
static_assert(offsetof(ACharacterModificationRoom, _prisonerTransform) == 0x0260);
static_assert(offsetof(ACharacterModificationRoom, _camera) == 0x0290);
static_assert(offsetof(ACharacterModificationRoom, _positionSpline) == 0x0298);
static_assert(offsetof(ACharacterModificationRoom, _viewTargetSpline) == 0x02A0);
static_assert(offsetof(ACharacterModificationRoom, _mouseBasedCameraRotationIntensity) == 0x02B8);
static_assert(offsetof(ABarberShop, _characterMeshesToAddOntoPrisoner) == 0x02C8);
static_assert(offsetof(UCharacterNameDisplayWidget, _nameText) == 0x0268);
static_assert(offsetof(UCharacterNameDisplayWidget, _distanceText) == 0x0270);
static_assert(offsetof(UCharacterNameDisplayWidget, _squadEmblem) == 0x0278);
static_assert(offsetof(UCharacterPainSoundsData, AudioEvent) == 0x0030);
static_assert(offsetof(UCharacterSelectionWidget, _characterSlotClass) == 0x0270);
static_assert(offsetof(UCharacterSelectionWidget, _mainScrollBox) == 0x0278);
static_assert(offsetof(UCharacterSelectionWidget, _buttonCreate) == 0x0280);
static_assert(offsetof(UCharacterSelectionWidget, _buttonLoad) == 0x0288);
static_assert(offsetof(UCharacterSelectionWidget, _characterSlotsOverlay) == 0x0290);
static_assert(offsetof(UCharacterSelectionWidget, _characterSlotsVerticalBox) == 0x0298);
static_assert(offsetof(UCharacterSelectionWidget, _buttonBack) == 0x02A0);
static_assert(offsetof(UCharacterSelectionWidget, _criminalRecordOverlay) == 0x02A8);
static_assert(offsetof(UCharacterSelectionWidget, _criminalRecord) == 0x02B0);
static_assert(offsetof(UCharacterSelectionWidget, _deleteCharacterConfirmation) == 0x02B8);
static_assert(offsetof(UCharacterSlot, _profileButton) == 0x0298);
static_assert(offsetof(UCharacterSlot, _deleteButton) == 0x02A0);
static_assert(offsetof(FCharacterSpawnerMarker, Transform) == 0x0000);
static_assert(offsetof(UCharacterSpawnerComponent, SpawnerMarkers) == 0x01F8);
static_assert(offsetof(UCharacterVoiceline, Name) == 0x0030);
static_assert(offsetof(UCharacterVoiceline, CharacterTypeTag) == 0x0048);
static_assert(offsetof(UCharacterVoiceline, AudioEvent) == 0x0050);
static_assert(offsetof(UCharacterVoiceline, Subtitles) == 0x0058);
static_assert(offsetof(UChatNotificationDescription, Message) == 0x0040);
static_assert(offsetof(UChatNotificationDescription, ChatType) == 0x0050);
static_assert(offsetof(USpamProtectionState, Severity) == 0x0028);
static_assert(offsetof(USpamProtectionState, LastSeverityChange) == 0x0030);
static_assert(offsetof(USpamProtectionState, LastTimeout) == 0x0038);
static_assert(offsetof(USpamProtectionState, MaxSeverityReached) == 0x0041);
static_assert(offsetof(UChatSpamProtectionRules, _conditions) == 0x0038);
static_assert(offsetof(UChatSpamProtectionRules, _consequences) == 0x0088);
static_assert(offsetof(UChatSuggestionWidget, _border) == 0x0268);
static_assert(offsetof(UChatSuggestionWidget, _textBlock) == 0x0270);
static_assert(offsetof(UChatSuggestionWidget, _defaultColor) == 0x0278);
static_assert(offsetof(UChatSuggestionWidget, _highlightedColor) == 0x0288);
static_assert(offsetof(UChatWidget, _muteButton) == 0x0268);
static_assert(offsetof(UChatWidget, _muteText) == 0x0270);
static_assert(offsetof(UChatWidget, _backgroundImage) == 0x0278);
static_assert(offsetof(UChatWidget, _chatScrollBox) == 0x0280);
static_assert(offsetof(UChatWidget, _suggestionsScrollBox) == 0x0288);
static_assert(offsetof(UChatWidget, _suggestionsDropDown) == 0x0290);
static_assert(offsetof(UChatWidget, _inputText) == 0x0298);
static_assert(offsetof(UChatWidget, _suggestionTextBox) == 0x02A0);
static_assert(offsetof(UChatWidget, _chatTypeIndicator) == 0x02A8);
static_assert(offsetof(UChatWidget, _localChatColor) == 0x02B0);
static_assert(offsetof(UChatWidget, _globalChatColor) == 0x02C0);
static_assert(offsetof(UChatWidget, _squadChatColor) == 0x02D0);
static_assert(offsetof(UChatWidget, _serverChatColor) == 0x02E0);
static_assert(offsetof(UChatWidget, _errorChatColor) == 0x02F0);
static_assert(offsetof(UChatWidget, _defaultChatColor) == 0x0300);
static_assert(offsetof(UChatWidget, _commandsOnlyChatColor) == 0x0310);
static_assert(offsetof(UChatWidget, _suggestionsTextColor) == 0x0320);
static_assert(offsetof(UChatWidget, _adminChatColor) == 0x0330);
static_assert(offsetof(UChatWidget, _chatSuggestionWidgetClass) == 0x0340);
static_assert(offsetof(UChatWidget, _adminCommandCompletionManager) == 0x0348);
static_assert(offsetof(UWeaponActionCheckAmmoSequence, Animations) == 0x0028);
static_assert(offsetof(FActorPaintParams, _partPaintNames) == 0x0000);
static_assert(offsetof(FActorPaintParams, _cachedOriginalMaterials) == 0x0038);
static_assert(offsetof(AChestItem, _inventoryContainer2D) == 0x09E0);
static_assert(offsetof(AChestItem, _buriableChestItemComponent) == 0x09F0);
static_assert(offsetof(AChestItem, _nameableItemComponent) == 0x09F8);
static_assert(offsetof(AChestItem, _owningUserProfileId) == 0x0A18);
static_assert(offsetof(AChestItem, _unlockTransform) == 0x0A20);
static_assert(offsetof(AChestItem, _lockItemsClasses) == 0x0A58);
static_assert(offsetof(AChestItem, _lockData) == 0x0A68);
static_assert(offsetof(AChestItem, _remainingNeutralizationAttemptsPerLock) == 0x0A78);
static_assert(offsetof(AChestItem, _attachedBCULockItem) == 0x0A88);
static_assert(offsetof(AChestItem, _locks) == 0x0A90);
static_assert(offsetof(AChestItem, _protectingFlagId) == 0x0AB0);
static_assert(offsetof(AChestItem, _baseElementClass) == 0x0AD0);
static_assert(offsetof(AChestItem, _activeAccessLevel) == 0x0B18);
static_assert(offsetof(AChestItem, _actorPaintParams) == 0x0B40);
static_assert(offsetof(UEncounterBase, _lockAreaTag) == 0x0088);
static_assert(offsetof(UEncounterBase, _encounterBlockingCustomZoneEvents) == 0x0098);
static_assert(offsetof(UEncounterBase, _encounterTypeTag) == 0x00D4);
static_assert(offsetof(UEncounterBase, _noiseMultiplierPerNoiseTag) == 0x00F0);
static_assert(offsetof(UEncounterBase, _encounterServerSettingsSpawnWeightMultiplierTag) == 0x0148);
static_assert(offsetof(UEncounterBase, _possibleChildEncounters) == 0x0158);
static_assert(offsetof(UEncounterBase, _childEncounterLocationGenerationMethod) == 0x01A8);
static_assert(offsetof(UChildEncounterLocationGenerationMethod_AverageCharacterLocation, _encounterSpawnDistanceInterval) == 0x0028);
static_assert(offsetof(UChildEncounterLocationGenerationMethod_RandomCharacterLocation, _encounterSpawnDistanceInterval) == 0x0028);
static_assert(offsetof(FChoppingIngredient, Item) == 0x0000);
static_assert(offsetof(FChoppingTool2, ItemTags) == 0x0000);
static_assert(offsetof(FChoppingTool2, ItemTagClass) == 0x0010);
static_assert(offsetof(FChoppingTool2, ItemClass) == 0x0018);
static_assert(offsetof(FPossibleChoppingTools, PossibleTools) == 0x0000);
static_assert(offsetof(FChoppingParametersPerSkillLevel, ChoppingTime) == 0x0000);
static_assert(offsetof(FChoppingRecipe, InteractionCaption) == 0x0000);
static_assert(offsetof(FChoppingRecipe, ChopAudioEvent) == 0x0018);
static_assert(offsetof(FChoppingRecipe, noiseLevel) == 0x0020);
static_assert(offsetof(FChoppingRecipe, ChoppingMontage) == 0x0021);
static_assert(offsetof(FChoppingRecipe, ChoppingMontageEnd) == 0x0022);
static_assert(offsetof(FChoppingRecipe, Ingredients) == 0x0028);
static_assert(offsetof(FChoppingRecipe, ToolRequiredToBeInRightHand) == 0x0038);
static_assert(offsetof(FChoppingRecipe, AdditionalToolsRequired) == 0x0048);
static_assert(offsetof(FChoppingRecipe, Skill) == 0x0058);
static_assert(offsetof(FChoppingRecipe, NoSkillLevelData) == 0x0064);
static_assert(offsetof(FChoppingRecipe, BasicLevelData) == 0x0070);
static_assert(offsetof(FChoppingRecipe, MediumLevelData) == 0x007C);
static_assert(offsetof(FChoppingRecipe, AdvancedLevelData) == 0x0088);
static_assert(offsetof(UChoppingRecipeDataAsset, ChoppingRecipe) == 0x0030);
static_assert(offsetof(AChristmasGhost, _giftSpawnParticles) == 0x0230);
static_assert(offsetof(AChristmasGhost, _giftSpawnAudioEvent) == 0x0258);
static_assert(offsetof(AChristmasGhost, _giftSpawnParticlesRelativeTransform) == 0x0280);
static_assert(offsetof(UCircularMenuSegmentInfo, Caption) == 0x0030);
static_assert(offsetof(UCircularMenuSegmentInfo, Icons) == 0x0048);
static_assert(offsetof(UCircularMenuSegmentInfo, ToolTipText) == 0x0060);
static_assert(offsetof(UCircularMenuSegmentInfo, TooltipTextUnselectable) == 0x0078);
static_assert(offsetof(UCircularMenuSegmentInfo, RequiredDLC) == 0x0090);
static_assert(offsetof(UCircularMenuSegmentInfo, HighlightTag) == 0x0094);
static_assert(offsetof(UCircularMenuSegmentInfo, ParentCircularWidget) == 0x00A0);
static_assert(offsetof(UCircularMenuSegmentWeaponMalfunctionInfo, _weaponMalfunction) == 0x00A8);
static_assert(offsetof(UCircularMenuSegmentIcons, UnselectedIcon) == 0x0030);
static_assert(offsetof(UCircularMenuSegmentIcons, SelectedIcon) == 0x0038);
static_assert(offsetof(UCircularMenuSegmentIcons, DisabledIcon) == 0x0040);
static_assert(offsetof(UCircularMenuSegmentIcons, OverlayIcon) == 0x0048);
static_assert(offsetof(UCircularMenuSegmentSubmenuInfo, SubmenuInfo) == 0x00A8);
static_assert(offsetof(UVoicelineSegmentInfo, Voiceline) == 0x00A8);
static_assert(offsetof(UVoicelineSegmentInfo, _prisoner) == 0x00B0);
static_assert(offsetof(FInteractionStruct, interactionType) == 0x0000);
static_assert(offsetof(FInteractionStruct, InteractionCaption) == 0x0008);
static_assert(offsetof(UCircularMenuSegmentInteractionInfo, InteractionTargetType) == 0x00A8);
static_assert(offsetof(UCircularMenuSegmentInteractionInfo, InteractionInfo) == 0x00B0);
static_assert(offsetof(UCircularMenuSegmentInteractionInfo, _interactionInitiator) == 0x0148);
static_assert(offsetof(UCircularMenuSegmentInteractionInfo, _interactableObject) == 0x0150);
static_assert(offsetof(UCircularMenuMusicPlayerToggleInfo, InteractionTargetType) == 0x00A8);
static_assert(offsetof(UCircularMenuMusicPlayerToggleInfo, PrimaryInteractionInfo) == 0x00B0);
static_assert(offsetof(UCircularMenuMusicPlayerToggleInfo, SecondaryInteractionInfo) == 0x0148);
static_assert(offsetof(UCircularMenuMusicPlayerToggleInfo, PrimaryCaption) == 0x01E0);
static_assert(offsetof(UCircularMenuMusicPlayerToggleInfo, PrimaryIcons) == 0x01F8);
static_assert(offsetof(UCircularMenuMusicPlayerToggleInfo, SecondaryCaption) == 0x0200);
static_assert(offsetof(UCircularMenuMusicPlayerToggleInfo, SecondaryIcons) == 0x0218);
static_assert(offsetof(UCircularMenuMusicPlayerToggleInfo, MusicPlayerCommandType) == 0x0221);
static_assert(offsetof(UCircularMenuMusicPlayerToggleInfo, _interactionInitiator) == 0x0228);
static_assert(offsetof(UCircularMenuMusicPlayerToggleInfo, _interactableObject) == 0x0230);
static_assert(offsetof(UCircularMenuSegmentDanceInfo, DanceType) == 0x00A8);
static_assert(offsetof(UConZUserWidget, GameplayTags) == 0x0268);
static_assert(offsetof(UCircularMenuSegmentWidget, _tooltipClass) == 0x0290);
static_assert(offsetof(UCircularMenuSegmentWidget, _highlightedColour) == 0x029C);
static_assert(offsetof(UCircularMenuSegmentWidget, _unHighlightedColour) == 0x02AC);
static_assert(offsetof(UCircularMenuSegmentWidget, _info) == 0x02C0);
static_assert(offsetof(UCircularMenuSegmentWidget, _parentSegmentWidget) == 0x02C8);
static_assert(offsetof(UCircularMenuSegmentWidget, _segment) == 0x02D0);
static_assert(offsetof(UCircularMenuSegmentWidget, _iconsOverlay) == 0x02D8);
static_assert(offsetof(UCircularMenuSegmentWidget, _iconSizeBox) == 0x02E0);
static_assert(offsetof(UCircularMenuSegmentWidget, _icon) == 0x02E8);
static_assert(offsetof(UCircularMenuSegmentWidget, _overlayIconSizeBox) == 0x02F0);
static_assert(offsetof(UCircularMenuSegmentWidget, _overlayIcon) == 0x02F8);
static_assert(offsetof(UCircularMenuTooltip, _titleTextBlock) == 0x0268);
static_assert(offsetof(UCircularMenuTooltip, _descriptionTextBlock) == 0x0270);
static_assert(offsetof(UCircularMenuTooltip, _neutralDispositionColor) == 0x0278);
static_assert(offsetof(UCircularMenuTooltip, _goodDispositionColor) == 0x0288);
static_assert(offsetof(UCircularMenuTooltip, _badDispositionColor) == 0x0298);
static_assert(offsetof(FCircularSegmentContainer, SegmentWidgets) == 0x0000);
static_assert(offsetof(UCircularMenuWidget, _layerData) == 0x0268);
static_assert(offsetof(UCircularMenuWidget, _segmentsByLayer) == 0x0280);
static_assert(offsetof(UCircularMenuWidget, _rootOverlay) == 0x0290);
static_assert(offsetof(UCircularMenuWidget, _mainOverlay) == 0x0298);
static_assert(offsetof(UCircularMenuWidget, _centerOverlay) == 0x02A0);
static_assert(offsetof(UCircularMenuWidget, _backButton) == 0x02A8);
static_assert(offsetof(UCircularMenuWidget, _caption) == 0x02B0);
static_assert(offsetof(UCircularMenuWidget, _parentMenu) == 0x02C8);
static_assert(offsetof(UCircularMenuWidget, _submenu) == 0x02D0);
static_assert(offsetof(UCircularProgressBar, _alarmColor) == 0x0280);
static_assert(offsetof(UCircularProgressBar, _normalColor) == 0x0290);
static_assert(offsetof(UCircularProgressBar, _textColor) == 0x02A0);
static_assert(offsetof(UCircularProgressBar, _circularMaterial) == 0x02B0);
static_assert(offsetof(UCircularProgressBar, Image) == 0x02B8);
static_assert(offsetof(UCircularProgressBar, Fill_Value_BCG) == 0x02C0);
static_assert(offsetof(UCircularProgressBar, Icon) == 0x02C8);
static_assert(offsetof(UCircularProgressBar, ProgressTextBox) == 0x02D0);
static_assert(offsetof(UCircularProgressBar, TPercentage) == 0x02D8);
static_assert(offsetof(UCircularProgressBar, TPercentageSign) == 0x02E0);
static_assert(offsetof(UCircularProgressBar, OuterCircleAlarmAnimation) == 0x02E8);
static_assert(offsetof(FClearMalfunctionData, Animations) == 0x0008);
static_assert(offsetof(UWeaponActionClearMalfunctionSequence, MalfunctionType) == 0x002C);
static_assert(offsetof(UWeaponActionClearMalfunctionSequence, Description) == 0x0030);
static_assert(offsetof(UWeaponActionClearMalfunctionSequence, CircularMenuSegmentInfo) == 0x0048);
static_assert(offsetof(UWeaponActionClearMalfunctionSequence, Malfunctions) == 0x0050);
static_assert(offsetof(UClearBadRound, MontageEndSectionName) == 0x00B8);
static_assert(offsetof(UClearClipPartiallyEjected, MontageEndSectionName) == 0x00B8);
static_assert(offsetof(UClearDoubleFeed, MontageEndSectionName) == 0x00B8);
static_assert(offsetof(UClearDoubleFeed, _magazineToRestore) == 0x00C8);
static_assert(offsetof(UClearRoundNotLoaded, MontageEndSectionName) == 0x00B8);
static_assert(offsetof(UClearSearchButton, _hoverAnimation) == 0x0278);
static_assert(offsetof(UClearSearchButton, _clickAnimation) == 0x0280);
static_assert(offsetof(UClearStovePipe, MontageEndSectionName) == 0x00B8);
static_assert(offsetof(UClearStuckBullet, MontageEndSectionName) == 0x00B8);
static_assert(offsetof(UConZSettingsMenu, _categorySelector) == 0x02C8);
static_assert(offsetof(UConZSettingsMenu, _categorySwitcher) == 0x02D0);
static_assert(offsetof(UConZSettingsMenu, _tabButtonClass) == 0x02D8);
static_assert(offsetof(UConZSettingsMenu, _subcategoryCarouselClass) == 0x02E0);
static_assert(offsetof(UConZSettingsMenu, _tooltipClass) == 0x02E8);
static_assert(offsetof(UConZSettingsMenu, _settingsController) == 0x0460);
static_assert(offsetof(UConZSettingsMenu, _apply) == 0x0478);
static_assert(offsetof(UConZSettingsMenu, _reset) == 0x0480);
static_assert(offsetof(UConZSettingsMenu, _resetAll) == 0x0488);
static_assert(offsetof(UConZSettingsMenu, _back) == 0x0490);
static_assert(offsetof(UConZSettingsMenu, _requiresServerRestartFont) == 0x0558);
static_assert(offsetof(UClientSettingsMenu, _audioDeviceDisplay) == 0x0608);
static_assert(offsetof(UClientSettingsMenu, _telemetrySettingClass) == 0x0610);
static_assert(offsetof(UManualEntriesDropdownWidget, _background) == 0x0268);
static_assert(offsetof(UManualEntriesDropdownWidget, _categoryNameTextBlock) == 0x0270);
static_assert(offsetof(UManualEntriesDropdownWidget, _chbSwitchDropdownState) == 0x0278);
static_assert(offsetof(UManualEntriesDropdownWidget, _entriesContainer) == 0x0280);
static_assert(offsetof(UManualEntriesDropdownWidget, _unopenedBackgroundColorAndOpacity) == 0x0290);
static_assert(offsetof(UManualEntriesDropdownWidget, _openedBackgroundColorAndOpacity) == 0x02A0);
static_assert(offsetof(UCodexEntriesDropdownWidget, _codexCategory) == 0x02B0);
static_assert(offsetof(UCodexEntriesDropdownWidget, _categoryIcon) == 0x02B8);
static_assert(offsetof(UCodexEntriesPanelWidget, _searchBox) == 0x0268);
static_assert(offsetof(UCodexEntriesPanelWidget, _entryContainer) == 0x0270);
static_assert(offsetof(UCodexEntriesPanelWidget, _dropdownWidgetClass) == 0x0278);
static_assert(offsetof(UCodexEntriesPanelWidget, _entryWidgetClass) == 0x0280);
static_assert(offsetof(UCodexEntriesPanelWidget, _cachedCodexEntries) == 0x02B0);
static_assert(offsetof(UCodexEntriesPanelWidget, _collapseAllButton) == 0x0360);
static_assert(offsetof(UCodexEntriesPanelWidget, _expandAllButton) == 0x0368);
static_assert(offsetof(UCodexEntriesPanelWidget, _showSurvivalTipsButton) == 0x0370);
static_assert(offsetof(UCodexEntryDetailsPanelWidget, _elementsPadding) == 0x0268);
static_assert(offsetof(UCodexEntryDetailsPanelWidget, _entryNameTextBlock) == 0x0278);
static_assert(offsetof(UCodexEntryDetailsPanelWidget, _codexEntryItemsContainer) == 0x0280);
static_assert(offsetof(UCodexEntryDetailsPanelWidget, _scrollBox) == 0x0288);
static_assert(offsetof(UCodexEntryDetailsPanelWidget, _survivalTipEntryWidgetClass) == 0x0290);
static_assert(offsetof(UCodexEntryDetailsPanelWidget, _horizontalSeperatorWidgetClass) == 0x0298);
static_assert(offsetof(UManualEntryWidget, _backgroundImage) == 0x0278);
static_assert(offsetof(UManualEntryWidget, _entryName) == 0x0280);
static_assert(offsetof(UManualEntryWidget, _entryDescription) == 0x0288);
static_assert(offsetof(UManualEntryWidget, _pixelSizeMaterialParameterName) == 0x0290);
static_assert(offsetof(UManualEntryWidget, _dpiMaterialParameterName) == 0x0298);
static_assert(offsetof(UManualEntryWidget, _inactiveMaterialInstance) == 0x02A0);
static_assert(offsetof(UManualEntryWidget, _inactiveHoveredMaterialInstance) == 0x02A8);
static_assert(offsetof(UManualEntryWidget, _activeMaterialInstance) == 0x02B0);
static_assert(offsetof(UCodexEntryWidget, _entry) == 0x02C0);
static_assert(offsetof(UCodexSurvivalTipEntryWidget, _categoryIcon) == 0x0268);
static_assert(offsetof(UCodexSurvivalTipEntryWidget, _survivalTipText) == 0x0270);
static_assert(offsetof(UCodexSurvivalTipEntryWidget, _verticalIndicator) == 0x0278);
static_assert(offsetof(UCodexSurvivalTipEntryWidget, _readSurvivalTipColor) == 0x0280);
static_assert(offsetof(UCodexSurvivalTipEntryWidget, _unreadSurvivalTipColor) == 0x0290);
static_assert(offsetof(UCollapsableColorPicker, _selectionOverlay) == 0x0280);
static_assert(offsetof(UCollapsableColorPicker, _label) == 0x0288);
static_assert(offsetof(UCollapsableColorPicker, _colorPreviewSquare) == 0x0290);
static_assert(offsetof(UCollapsableColorPicker, _colorPicker) == 0x0298);
static_assert(offsetof(UCollapsableColorPicker, dropdownLabel) == 0x02A0);
static_assert(offsetof(UCollapsableContainer, Title) == 0x0268);
static_assert(offsetof(UCollapsableContainer, _title) == 0x0280);
static_assert(offsetof(UCollapsableContainer, _titleBackground) == 0x0288);
static_assert(offsetof(UCollapsableContainer, _displayContentButton) == 0x0290);
static_assert(offsetof(UCollapsableContainer, _contentAreaOverlay) == 0x0298);
static_assert(offsetof(UCollapsableContainer, _titleBackgroundColor) == 0x02A0);
static_assert(offsetof(UCollapsableContainer, _titleTextColor) == 0x02B0);
static_assert(offsetof(UCollapsableContainer, _buttonStyleWhenCollapsedContent) == 0x02C0);
static_assert(offsetof(UCollapsableContainer, _buttonStyleWhenExpandedContent) == 0x0538);
static_assert(offsetof(UCutObjectAssetData, ChoppingRecipeDataAsset) == 0x0030);
static_assert(offsetof(UCollectSeedsItemTag, _seedsClass) == 0x0030);
static_assert(offsetof(UColorPicker, _dynamicGradient) == 0x0268);
static_assert(offsetof(UColorPicker, _dynamicReticle) == 0x0270);
static_assert(offsetof(UColorPicker, _sliderHUE) == 0x0278);
static_assert(offsetof(UColorPicker, _saturationAndBrightnessPickerSize) == 0x0280);
static_assert(offsetof(UComboBoxWrapper, ComboBox) == 0x0268);
static_assert(offsetof(ACompanionCrow, _mesh) == 0x0220);
static_assert(offsetof(UCompassWidget, _compassTrack) == 0x0270);
static_assert(offsetof(UCompassWidget, _compassTrackNorthOnly) == 0x0278);
static_assert(offsetof(UCompassWidget, _compassTrackCardinalOnly) == 0x0280);
static_assert(offsetof(UCompassWidget, _compassTrackCardinalAndIntercardinal) == 0x0288);
static_assert(offsetof(UCompassWidget, _compassTrackEverything) == 0x0290);
static_assert(offsetof(UCompassWidget, _offset) == 0x0298);
static_assert(offsetof(FAnimalStationaryRotationRateSettings, RunRotationRate) == 0x0000);
static_assert(offsetof(FAnimalStationaryRotationRateSettings, TrotRotationRate) == 0x000C);
static_assert(offsetof(FAnimalStationaryRotationRateSettings, WalkRotationRate) == 0x0018);
static_assert(offsetof(FAnimalStationaryRotationRateSettings, SneakRotationRate) == 0x0024);
static_assert(offsetof(FAnimalStationaryRotationRateSettings, StandRotationRate) == 0x0030);
static_assert(offsetof(FChargeAttackData, Montage) == 0x0000);
static_assert(offsetof(FCloseRangeAttackData, Montage) == 0x0000);
static_assert(offsetof(FTurnMontages, TurnInPlaceLeft) == 0x0000);
static_assert(offsetof(FTurnMontages, TurnInPlaceRight) == 0x0008);
static_assert(offsetof(FAnimalActionMontageData, SleepMontage) == 0x0000);
static_assert(offsetof(FAnimalActionMontageData, EatMontage) == 0x0008);
static_assert(offsetof(FAnimalActionMontageData, IntimidateMontage) == 0x0010);
static_assert(offsetof(AComplexAnimal2, MovementPaceSettings) == 0x09E4);
static_assert(offsetof(AComplexAnimal2, RotationRateSettings) == 0x09F4);
static_assert(offsetof(AComplexAnimal2, ChargeAttacks) == 0x0A40);
static_assert(offsetof(AComplexAnimal2, CloseRangeAttacks) == 0x0A50);
static_assert(offsetof(AComplexAnimal2, TurnMonatges) == 0x0A60);
static_assert(offsetof(AComplexAnimal2, AnimalActions) == 0x0A70);
static_assert(offsetof(AComplexAnimal2, HitReactTypeResting) == 0x0A90);
static_assert(offsetof(AComplexAnimal2, HitReactTypeIntimidate) == 0x0A98);
static_assert(offsetof(AComplexAnimal2, _lookAtPoint) == 0x0AB0);
static_assert(offsetof(UComplexAnimal2AnimInstance, CurrentAction) == 0x02F0);
static_assert(offsetof(UComplexAnimal2AnimInstance, faceMorphTargetName) == 0x0300);
static_assert(offsetof(AFoodItem, SteamComponent) == 0x09C8);
static_assert(offsetof(AFoodItem, SteamParticles) == 0x09D0);
static_assert(offsetof(AFoodItem, SmokeComponent) == 0x09D8);
static_assert(offsetof(AFoodItem, SmokeParticles) == 0x09E0);
static_assert(offsetof(AFoodItem, ItemOpenedMesh) == 0x09E8);
static_assert(offsetof(AFoodItem, ItemEmptyMesh) == 0x09F0);
static_assert(offsetof(AFoodItem, StartEatingAudioEvent) == 0x09F8);
static_assert(offsetof(AFoodItem, StopEatingAudioEvent) == 0x0A00);
static_assert(offsetof(AFoodItem, StartCookingAudioEvent) == 0x0A08);
static_assert(offsetof(AFoodItem, StopCookingAudioEvent) == 0x0A10);
static_assert(offsetof(AFoodItem, _resourceTypeForConsumption) == 0x0A18);
static_assert(offsetof(UContainerDisplay, _containerImage) == 0x02C8);
static_assert(offsetof(UContainerDisplay, _containerImage2) == 0x02D0);
static_assert(offsetof(UContainerDisplay, _sizeBox) == 0x02D8);
static_assert(offsetof(UContainerDisplay, _name) == 0x02E0);
static_assert(offsetof(UContainerDisplay, _name2) == 0x02E8);
static_assert(offsetof(UContainerDisplay, _durability) == 0x02F0);
static_assert(offsetof(UContainerDisplay, _durability2) == 0x02F8);
static_assert(offsetof(UContainerDisplay, _durabilityProgressBar) == 0x0300);
static_assert(offsetof(UContainerDisplay, _durabilityProgressBar2) == 0x0308);
static_assert(offsetof(UContainerDisplay, _selectionSwitcher) == 0x0310);
static_assert(offsetof(FContainerItemDescriptorData, Icon) == 0x0038);
static_assert(offsetof(UContainerItemDescriptor, _itemClass) == 0x0060);
static_assert(offsetof(UContainerItemDescriptor, _data) == 0x0080);
static_assert(offsetof(UContinuousFuelConsumptionEntityComponentSetup, ResourceType) == 0x0050);
static_assert(offsetof(UContinuousFuelConsumptionEntityComponentSetup, AssociatedResourceComponentName) == 0x005C);
static_assert(offsetof(UContinuousFuelHeatSource, _associatedFuelConsumptionEntityComponent) == 0x022C);
static_assert(offsetof(UContinuousFuelHeatSource, _resourceType) == 0x0238);
static_assert(offsetof(UContinuousFuelHeatSource, _energyConsumptionRateVsTemperatureScaleCurve) == 0x0250);
static_assert(offsetof(FControlMappingTextStyle, Font) == 0x0000);
static_assert(offsetof(FControlMappingTextStyle, ColorAndOpacity) == 0x0058);
static_assert(offsetof(FControlMappingStyle, FocusBackgroundImage) == 0x0000);
static_assert(offsetof(FControlMappingStyle, LabelText) == 0x0088);
static_assert(offsetof(FControlMappingStyle, MappingText) == 0x00F0);
static_assert(offsetof(UControlMappingWidget, _label) == 0x02E0);
static_assert(offsetof(UControlMappingWidget, _keyCombination) == 0x02E8);
static_assert(offsetof(UControlMappingWidget, _focusBackgroundImage) == 0x02F0);
static_assert(offsetof(UControlMappingWidget, _selectedAndFocusedCMStyle) == 0x02F8);
static_assert(offsetof(UControlMappingWidget, _selectedAndUnfocusedCMStyle) == 0x0450);
static_assert(offsetof(UControlMappingWidget, _unselectedCMStyle) == 0x05A8);
static_assert(offsetof(UControlMappingWidget, _highlightedCMStyle) == 0x0700);
static_assert(offsetof(UConZAIControllerEncounterSaveState, AttackedBaseId) == 0x0028);
static_assert(offsetof(FImageAssetToLoad, Name) == 0x0000);
static_assert(offsetof(FImageAssetToLoad, FilePath) == 0x0008);
static_assert(offsetof(UConZAssetManager, _imageAssetsToLoad) == 0x0478);
static_assert(offsetof(UConZAssetManager, _lwobjectSetupByPrimaryAssetName) == 0x04D8);
static_assert(offsetof(UConZAssetManager, _prisonerResponseIdleCDOs) == 0x0618);
static_assert(offsetof(UConZAssetManager, _autoAddablePrisonerBodyEffectCDOs) == 0x0628);
static_assert(offsetof(UConZAssetManager, _itemCraftingRecipes) == 0x0638);
static_assert(offsetof(UConZAssetManager, _placeableCraftingRecipes) == 0x0648);
static_assert(offsetof(AConZBase, _baseElementActor) == 0x0280);
static_assert(offsetof(AConZBaseElement, _weatherMaskComponentClass) == 0x0250);
static_assert(offsetof(AConZBaseElement, _elementClassMap) == 0x0260);
static_assert(offsetof(AConZBaseElement, _interactRayBlockingMeshInstancedComponent) == 0x0300);
static_assert(offsetof(AConZBaseManager, _baseClass) == 0x0308);
static_assert(offsetof(AConZBaseManager, _baseElementClass) == 0x0310);
static_assert(offsetof(AConZBaseManager, _flagAreaVisualizerClass) == 0x0318);
static_assert(offsetof(AConZBaseManager, _initialBaseSize) == 0x0320);
static_assert(offsetof(AConZBaseManager, _serverSettingMaxAmountParentTag) == 0x0328);
static_assert(offsetof(AConZBaseManager, _serverSettingMaxAmountTagsToIgnoreForDecaySetting) == 0x0330);
static_assert(offsetof(AConZBaseManager, _shortRepairDuration) == 0x036C);
static_assert(offsetof(AConZBaseManager, _mediumRepairDuration) == 0x0374);
static_assert(offsetof(AConZBaseManager, _longRepairDuration) == 0x037C);
static_assert(offsetof(AConZBaseManager, _bases) == 0x03A0);
static_assert(offsetof(UConZBoatAnimInstance, _prisonerLHandTransform) == 0x02E0);
static_assert(offsetof(UConZBoatAnimInstance, _prisonerRHandTransform) == 0x0310);
static_assert(offsetof(UConZBoatAnimInstance, WindDirection) == 0x0340);
static_assert(offsetof(UConZBorderBase, _borderSize) == 0x0268);
static_assert(offsetof(UConZBorderBase, _color) == 0x026C);
static_assert(offsetof(UConZBorderBase, White1x1) == 0x0280);
static_assert(offsetof(UConZBorderBase, White2x2) == 0x0288);
static_assert(offsetof(UConZBorderBase, White4x4) == 0x0290);
static_assert(offsetof(UConZBorderBase, Image) == 0x0298);
static_assert(offsetof(UConZBorderBase, NamedSlot) == 0x02A0);
static_assert(offsetof(AConZCameraManager, _staticMeshLODDistanceScaleVSFOV) == 0x2830);
static_assert(offsetof(FTradeOutpostProsperityLevelInfo, ProsperityLevelName) == 0x0000);
static_assert(offsetof(FPendingTraderPersonalityDataHelperStruct, Personality) == 0x0010);
static_assert(offsetof(AConZEconomyManager, _traderManagingComponent) == 0x02E0);
static_assert(offsetof(AConZEconomyManager, _prosperityLevelInfoPerLevel) == 0x0310);
static_assert(offsetof(AConZEconomyManager, _expensiveTradeablesSpawnChanceMap) == 0x0408);
static_assert(offsetof(AConZEconomyManager, _playerPurchasePriceDeltaVsChanceCurve) == 0x0458);
static_assert(offsetof(AConZEconomyManager, _tradeableDescTable) == 0x0500);
static_assert(offsetof(AConZEconomyManager, _economyOverrideJSONFileName) == 0x0A28);
static_assert(offsetof(AConZEconomyManager, _vehicleSpawnGroupParentTag) == 0x0A38);
static_assert(offsetof(AConZEconomyManager, _tradeableBuyPriceMultiplierVsNumberOfPlayersCurve) == 0x0BD0);
static_assert(offsetof(AConZEconomyManager, _tradeableSellPriceMultiplierVsNumberOfPlayersCurve) == 0x0BD8);
static_assert(offsetof(AConZEconomyManager, _pendingTraderPersonalities) == 0x0C10);
static_assert(offsetof(FCommonMaps, MainMenu) == 0x0000);
static_assert(offsetof(FCommonMaps, CharacterCreationMenu) == 0x0028);
static_assert(offsetof(FCommonMaps, Singleplayer) == 0x0050);
static_assert(offsetof(FCharacterCreationMenuContext, ServerIp) == 0x0008);
static_assert(offsetof(FCharacterCreationMenuContext, ServerAuthToken) == 0x0020);
static_assert(offsetof(UConZGameInstance, CommonMaps) == 0x01A8);
static_assert(offsetof(UConZGameInstance, CharacterCreationMenuContext) == 0x0220);
static_assert(offsetof(UConZGameInstance, GameplayLogLogin) == 0x0268);
static_assert(offsetof(UConZGameInstance, GameplayLogAdmin) == 0x0270);
static_assert(offsetof(UConZGameInstance, GameplayLogEventKill) == 0x0278);
static_assert(offsetof(UConZGameInstance, GameplayLogKill) == 0x0280);
static_assert(offsetof(UConZGameInstance, GameplayLogViolations) == 0x0288);
static_assert(offsetof(UConZGameInstance, GameplayLogChat) == 0x0290);
static_assert(offsetof(UConZGameInstance, GameplayLogEconomy) == 0x0298);
static_assert(offsetof(UConZGameInstance, GameplayLogMiscellaneous) == 0x02A0);
static_assert(offsetof(UConZGameInstance, GameplayLogFamePoints) == 0x02A8);
static_assert(offsetof(UConZGameInstance, GameplayLogLoot) == 0x02B0);
static_assert(offsetof(UConZGameInstance, GameplayLogRaidProtection) == 0x02B8);
static_assert(offsetof(UConZGameInstance, GameplayLogChestOwnership) == 0x02C0);
static_assert(offsetof(UConZGameInstance, GameplayLogQuests) == 0x02C8);
static_assert(offsetof(UConZGameInstance, GameplayLogVehicleDestruction) == 0x02D0);
static_assert(offsetof(UConZGameInstance, _databaseConnections) == 0x0328);
static_assert(offsetof(UConZGameInstance, _dbAsyncWorker) == 0x03A0);
static_assert(offsetof(UConZGameInstance, _dbIdGenerator) == 0x03A8);
static_assert(offsetof(UConZGameInstance, _dedicatedServerRequest) == 0x03C8);
static_assert(offsetof(UConZGameInstance, _userManager) == 0x03D0);
static_assert(offsetof(UConZGameInstance, _twitchDropsManager) == 0x03D8);
static_assert(offsetof(UConZGameInstance, _currentUser) == 0x03E0);
static_assert(offsetof(UConZGameInstance, _currentUserProfile) == 0x03E8);
static_assert(offsetof(UConZGameInstance, _entitySystemClass) == 0x0408);
static_assert(offsetof(UConZGameInstance, _entitySystem) == 0x0410);
static_assert(offsetof(UConZGameInstance, _loadingScreenTexture) == 0x0418);
static_assert(offsetof(UConZGameInstance, _loadingScreen) == 0x0420);
static_assert(offsetof(UConZGameInstance, _specialLoadingScreen) == 0x0428);
static_assert(offsetof(UConZGameInstance, _adminCommandRegistry) == 0x04B8);
static_assert(offsetof(FLazyLoadedClassPtr, Class) == 0x0000);
static_assert(offsetof(FLazyLoadedClassPtr, _loadedClass) == 0x0028);
static_assert(offsetof(AConZGameMode, _doorLockingRegistry) == 0x0380);
static_assert(offsetof(AConZGameMode, _vehicleServiceRegistry) == 0x0388);
static_assert(offsetof(AConZGameMode, _abandonedBunkerActivationRegistry) == 0x0390);
static_assert(offsetof(AConZGameMode, _prisonerClassToSpawnLazy) == 0x0398);
static_assert(offsetof(AConZGameMode, _droneClassToSpawnLazy) == 0x03C8);
static_assert(offsetof(AConZGameMode, _itemSpawningManagerClass) == 0x0500);
static_assert(offsetof(AConZGameMode, _itemSpawningManager) == 0x0508);
static_assert(offsetof(AConZGameMode, _itemVirtualizationManagerClass) == 0x0510);
static_assert(offsetof(AConZGameMode, _itemVirtualizationManager) == 0x0518);
static_assert(offsetof(AConZGameMode, _vehicleManagerClass) == 0x0520);
static_assert(offsetof(AConZGameMode, _vehicleManager) == 0x0528);
static_assert(offsetof(AConZGameMode, _reportingManagerClass) == 0x0530);
static_assert(offsetof(AConZGameMode, _reportingManager) == 0x0538);
static_assert(offsetof(AConZGameMode, _globalAquaticLifeManagerClass) == 0x0540);
static_assert(offsetof(AConZGameMode, _globalAquaticLifeManager) == 0x0548);
static_assert(offsetof(AConZGameMode, _globalGuardedZoneManagerClass) == 0x0550);
static_assert(offsetof(AConZGameMode, _globalGuardedZoneManager) == 0x0558);
static_assert(offsetof(AConZGameMode, _achievementsManagerServerClass) == 0x0560);
static_assert(offsetof(AConZGameMode, _achievementsManagerServer) == 0x0568);
static_assert(offsetof(AConZGameMode, _survivalStatsHandlerClass) == 0x0570);
static_assert(offsetof(AConZGameMode, _survivalStatsHandler) == 0x0578);
static_assert(offsetof(AConZGameMode, _heatSourceManagerClass) == 0x0580);
static_assert(offsetof(AConZGameMode, _heatSourceManager) == 0x0588);
static_assert(offsetof(AConZGameMode, _baseManagerClass) == 0x0590);
static_assert(offsetof(AConZGameMode, _baseManager) == 0x0598);
static_assert(offsetof(AConZGameMode, _rainCollectionManager) == 0x05A0);
static_assert(offsetof(AConZGameMode, _effectOverTimeDealerClass) == 0x05A8);
static_assert(offsetof(AConZGameMode, _effectOverTimeDealer) == 0x05B0);
static_assert(offsetof(AConZGameMode, _notificationManagerClass) == 0x05B8);
static_assert(offsetof(AConZGameMode, _notificationManager) == 0x05C0);
static_assert(offsetof(AConZGameMode, _voteSystemManagerClass) == 0x05C8);
static_assert(offsetof(AConZGameMode, _voteSystemManager) == 0x05D0);
static_assert(offsetof(AConZGameMode, _aiDetectionTimerHandlerClass) == 0x05D8);
static_assert(offsetof(AConZGameMode, _bcuLockRegistryClass) == 0x05E0);
static_assert(offsetof(AConZGameMode, _bcuLockRegistry) == 0x05E8);
static_assert(offsetof(AConZGameMode, _worldDoorOwnershipManager) == 0x05F0);
static_assert(offsetof(AConZGameMode, _aiDetectionTimerHandler) == 0x05F8);
static_assert(offsetof(AConZGameMode, _serverResponse) == 0x0600);
static_assert(offsetof(AConZGameMode, _chatSpamProtectionRules) == 0x0608);
static_assert(offsetof(AConZGameMode, _spawnEquipment) == 0x0610);
static_assert(offsetof(AConZGameMode, _spawnParameterTag_AerialSpawn) == 0x0620);
static_assert(offsetof(AConZGameMode, _spawnParameterTag_ColdClimate) == 0x0628);
static_assert(offsetof(AConZGameMode, _spawnParameterTag_SupporterPack1) == 0x0630);
static_assert(offsetof(AConZGameMode, _spawnParameterTag_DigitalDeluxBasicSurvivalPack) == 0x0638);
static_assert(offsetof(AConZGameMode, _spawnParameterTag_Tournament) == 0x0640);
static_assert(offsetof(AConZGameState, RespawnSettings) == 0x02E0);
static_assert(offsetof(AConZGameState, _registeredAbandonedBunkers) == 0x03E0);
static_assert(offsetof(AConZGameState, _squads) == 0x0470);
static_assert(offsetof(AConZGameState, _ladderMarkersRegistryClass) == 0x0610);
static_assert(offsetof(AConZGameState, _ladderMarkersRegistry) == 0x0618);
static_assert(offsetof(AConZGameState, _waterSplineRegistryClass) == 0x0620);
static_assert(offsetof(AConZGameState, _waterSplineRegistry) == 0x0628);
static_assert(offsetof(AConZGameState, _remoteSensorRegistry) == 0x0638);
static_assert(offsetof(AConZGameState, _replenishableResourceManager) == 0x0690);
static_assert(offsetof(AConZGameState, _resourceLockingManager) == 0x0698);
static_assert(offsetof(AConZGameState, _itemRegistry) == 0x06A0);
static_assert(offsetof(AConZGameState, _customZoneRegistry) == 0x06A8);
static_assert(offsetof(AConZGameState, _gameResourceContainerProxyRegistry) == 0x06B0);
static_assert(offsetof(AConZGameState, _zoneRegistry) == 0x06B8);
static_assert(offsetof(AConZGameState, _staticDoorReplicator) == 0x06C0);
static_assert(offsetof(AConZGameState, _bankAccountRegistry) == 0x06C8);
static_assert(offsetof(AConZGameState, _squadRankingsCache) == 0x06D0);
static_assert(offsetof(AConZGameState, _windowMarkersRegistry) == 0x06D8);
static_assert(offsetof(AConZGameState, _fortificationManager) == 0x06E0);
static_assert(offsetof(AConZGameState, _projectilePool) == 0x06E8);
static_assert(offsetof(AConZGameState, _aiManager) == 0x06F0);
static_assert(offsetof(AConZGameState, _survivalTipManager) == 0x06F8);
static_assert(offsetof(AConZGameState, _squadPenaltyManager) == 0x0700);
static_assert(offsetof(AConZGameState, _foliageInstanceCache) == 0x0708);
static_assert(offsetof(AConZGameState, _prisonerKillRegistry) == 0x07D8);
static_assert(offsetof(AConZGameState, _customMapBorderClass) == 0x0828);
static_assert(offsetof(AConZGameState, _tournamentClass) == 0x0830);
static_assert(offsetof(AConZGameState, _customMapBorder) == 0x0838);
static_assert(offsetof(AConZGameState, _tournament) == 0x0840);
static_assert(offsetof(AConZGameState, _raidProtectionManager) == 0x0848);
static_assert(offsetof(AConZGameState, _mainMPC) == 0x0850);
static_assert(offsetof(AConZHUD, _masterWidgetClassLazy) == 0x0310);
static_assert(offsetof(AConZPlayerController, ComponentsToHide) == 0x0580);
static_assert(offsetof(AConZPlayerController, _playerRpcChannel) == 0x0678);
static_assert(offsetof(AConZPlayerController, _playerQuestComponent) == 0x0680);
static_assert(offsetof(AConZPlayerController, _userProfile) == 0x06D0);
static_assert(offsetof(AConZPlayerController, _lastNameChangeTime) == 0x06E8);
static_assert(offsetof(AConZPlayerController, _userFakeName) == 0x06F0);
static_assert(offsetof(AConZPlayerController, _spawnedPawn) == 0x0708);
static_assert(offsetof(AConZPlayerController, _possessedPawn) == 0x0738);
static_assert(offsetof(AConZPlayerController, _prisonerClassLazy) == 0x0740);
static_assert(offsetof(AConZPlayerController, _achievementsManagerClient) == 0x0898);
static_assert(offsetof(AConZPlayerController, _achievementsManagerClientClass) == 0x08A0);
static_assert(offsetof(AConZPlayerController, _replicatedServerUtcNow) == 0x08C8);
static_assert(offsetof(AConZPlayerController, _pathFollowingComponent) == 0x0930);
static_assert(offsetof(AConZPlayerController, _photoModePawnClassLazy) == 0x0948);
static_assert(offsetof(AConZPlayerController, _mainMPC) == 0x0998);
static_assert(offsetof(UConZReplicationGraph, _gridSpatializationNode) == 0x07C0);
static_assert(offsetof(UConZReplicationGraph, _alwaysRelevantNode) == 0x07C8);
static_assert(offsetof(UConZNetReplicationGraphConnection, AlwaysRelevantNode) == 0x0238);
static_assert(offsetof(UConZNetReplicationGraphConnection, ActorListNode) == 0x0240);
static_assert(offsetof(UConZReplicationGraphNode_AlwaysRelevantToConnection, RepGraphConnection) == 0x0050);
static_assert(offsetof(UConZReplicationGraphNode_RelevantToConnectionOnly, RepGraphConnection) == 0x00D0);
static_assert(offsetof(UConZReverbComponent, IndoorSmallAuxBus) == 0x0280);
static_assert(offsetof(UConZReverbComponent, IndoorMediumAuxBus) == 0x0288);
static_assert(offsetof(UConZReverbComponent, IndoorLargeAuxBus) == 0x0290);
static_assert(offsetof(UConZReverbComponent, OutdoorLargeAuxBus) == 0x0298);
static_assert(offsetof(FConZSliderStyle, Slider) == 0x0000);
static_assert(offsetof(FConZSliderStyle, Thumb) == 0x01A0);
static_assert(offsetof(UConZSlider, _progressBarOverlay) == 0x02B0);
static_assert(offsetof(UConZSlider, _sliderThumb) == 0x02B8);
static_assert(offsetof(UConZSlider, _progressBar) == 0x02C0);
static_assert(offsetof(UConZSlider, _selectedAndFocusedSliderStyle) == 0x02C8);
static_assert(offsetof(UConZSlider, _selectedAndUnfocusedSliderStyle) == 0x04F0);
static_assert(offsetof(UConZSlider, _unselectedSliderStyle) == 0x0718);
static_assert(offsetof(UConZSlider, _highlightedSliderStyle) == 0x0940);
static_assert(offsetof(UConZSlider, _disabledSliderStyle) == 0x0B68);
static_assert(offsetof(FConZSquadEmblem, Background) == 0x0000);
static_assert(offsetof(FConZSquadEmblem, Symbol) == 0x0004);
static_assert(offsetof(FConZSquadPendingMember, UserProfileId) == 0x0000);
static_assert(offsetof(FConZSquadMember, UserProfileId) == 0x0010);
static_assert(offsetof(FConZSquadMember, Rank) == 0x0018);
static_assert(offsetof(AConZSquad, squadId) == 0x0220);
static_assert(offsetof(AConZSquad, SquadName) == 0x0228);
static_assert(offsetof(AConZSquad, SquadMessage) == 0x0238);
static_assert(offsetof(AConZSquad, SquadInformation) == 0x0248);
static_assert(offsetof(AConZSquad, SquadEmblem) == 0x0258);
static_assert(offsetof(AConZSquad, _pendingMembers) == 0x02B0);
static_assert(offsetof(AConZSquad, _members) == 0x02C0);
static_assert(offsetof(AConZSquad, _oldMembers) == 0x02D0);
static_assert(offsetof(UConZStandardButton, MainButton) == 0x02B8);
static_assert(offsetof(UConZStandardButton, TextBlock) == 0x02C0);
static_assert(offsetof(UConZStandardButton, Text) == 0x02D0);
static_assert(offsetof(UConZStandardButton, Image) == 0x02F8);
static_assert(offsetof(UConZStandardButton, MainSizeBox) == 0x0300);
static_assert(offsetof(UConZStandardButton, _menuButtonClick) == 0x0308);
static_assert(offsetof(UConZStandardButton, _menuButtonHover) == 0x0310);
static_assert(offsetof(FTimestampedObject, Object) == 0x0000);
static_assert(offsetof(UConZUniqueObjectCacher, _timestampedObjectMap) == 0x0028);
static_assert(offsetof(UConZVehicleSpringArmComponent, _maxCameraOffset) == 0x0294);
static_assert(offsetof(UConZVehicleSpringArmComponent, _cameraOffsetInterpSpeed) == 0x02A0);
static_assert(offsetof(AConZWaterSpline, SceneComponent) == 0x0220);
static_assert(offsetof(AConZWaterSpline, SplineComponent) == 0x0228);
static_assert(offsetof(AConZWaterSpline, SurfaceMeshComponent) == 0x0230);
static_assert(offsetof(AConZWaterSpline, SubsurfaceMeshComponent) == 0x0238);
static_assert(offsetof(AConZWaterSpline, ControlPoints) == 0x0250);
static_assert(offsetof(AConZWaterSpline, SurfaceMesh) == 0x0268);
static_assert(offsetof(AConZWaterSpline, SubsurfaceMesh) == 0x0270);
static_assert(offsetof(AConZWaterSpline, SurfaceMeshMaterialOverride) == 0x0278);
static_assert(offsetof(AConZWaterSpline, SubsurfaceMeshMaterialOverride) == 0x0280);
static_assert(offsetof(AConZWaterSpline, UnderwaterPostProcessing) == 0x0288);
static_assert(offsetof(AConZWaterSpline, SurfaceMeshUserData) == 0x0290);
static_assert(offsetof(AConZWaterSpline, GerstnerWavesParameters) == 0x02A0);
static_assert(offsetof(AConZWaterSplineOcean, OceanOpacityMaskTexture) == 0x02C0);
static_assert(offsetof(AConZWaterSplineRiver, SplineMesh) == 0x02B8);
static_assert(offsetof(AConZWaterSplineRiver, SplineMeshMaterialOverride) == 0x02C0);
static_assert(offsetof(AConZWaterSplineRiver, _splineMeshComponents) == 0x0300);
static_assert(offsetof(FMapLimits_Wall, Bounds) == 0x0000);
static_assert(offsetof(FMapLimits_Wall, Segments) == 0x0020);
static_assert(offsetof(FMapLimits, NorthWall) == 0x0000);
static_assert(offsetof(FMapLimits, EastWall) == 0x0030);
static_assert(offsetof(FVehicleSpawnPointData, SpawnTransform) == 0x0000);
static_assert(offsetof(FVehicleSpawnPointData, VehicleSpawnPresets) == 0x0030);
static_assert(offsetof(FConZDeveloperId, IdArray) == 0x0000);
static_assert(offsetof(FConZDeveloperId, Flags) == 0x0010);
static_assert(offsetof(AConZWorldSettings, WeatherController2) == 0x03A0);
static_assert(offsetof(AConZWorldSettings, WetnessManager) == 0x03A8);
static_assert(offsetof(AConZWorldSettings, GameEventManager) == 0x03B0);
static_assert(offsetof(AConZWorldSettings, WorldEventManager) == 0x03B8);
static_assert(offsetof(AConZWorldSettings, BuildingManager) == 0x03C0);
static_assert(offsetof(AConZWorldSettings, ItemContainerManager) == 0x03C8);
static_assert(offsetof(AConZWorldSettings, EconomyManager) == 0x03D0);
static_assert(offsetof(AConZWorldSettings, FarmingGardenManager) == 0x03D8);
static_assert(offsetof(AConZWorldSettings, RadiationManager) == 0x03E0);
static_assert(offsetof(AConZWorldSettings, HuntingManager) == 0x03E8);
static_assert(offsetof(AConZWorldSettings, GlobalEncounterManager) == 0x03F0);
static_assert(offsetof(AConZWorldSettings, QuestManager) == 0x03F8);
static_assert(offsetof(AConZWorldSettings, CookingManager) == 0x0400);
static_assert(offsetof(AConZWorldSettings, MugshotRoom) == 0x0408);
static_assert(offsetof(AConZWorldSettings, RadioStations) == 0x0410);
static_assert(offsetof(AConZWorldSettings, RadioNoiseStartEvent) == 0x0420);
static_assert(offsetof(AConZWorldSettings, RadioNoiseStopEvent) == 0x0428);
static_assert(offsetof(AConZWorldSettings, RadioStopEvent) == 0x0430);
static_assert(offsetof(AConZWorldSettings, RadioStationChangeNoiseEvent) == 0x0438);
static_assert(offsetof(AConZWorldSettings, EntitySystemSettings) == 0x0440);
static_assert(offsetof(AConZWorldSettings, ItemSpawningSettings) == 0x0448);
static_assert(offsetof(AConZWorldSettings, IslandBoundsVolume) == 0x0488);
static_assert(offsetof(AConZWorldSettings, WorldBounds) == 0x0494);
static_assert(offsetof(AConZWorldSettings, HeightMapGameplayTag) == 0x04A8);
static_assert(offsetof(AConZWorldSettings, BiomeMapGameplayTag) == 0x04B0);
static_assert(offsetof(AConZWorldSettings, MapPropertiesGameplayTag) == 0x04B8);
static_assert(offsetof(AConZWorldSettings, GerstnerWaveOcclusionPropertiesGameplayTag) == 0x04C0);
static_assert(offsetof(AConZWorldSettings, OceanOpacityGameplayTag) == 0x04CC);
static_assert(offsetof(AConZWorldSettings, MapMinMaxElevation) == 0x04E0);
static_assert(offsetof(AConZWorldSettings, AvailabilityGrid) == 0x04E8);
static_assert(offsetof(AConZWorldSettings, _mapLimits) == 0x0520);
static_assert(offsetof(AConZWorldSettings, _availabilityGridClass) == 0x05D8);
static_assert(offsetof(AConZWorldSettings, _vehicleSpawnPoints) == 0x05E0);
static_assert(offsetof(AConZWorldSettings, _developerIdsHashed) == 0x05F0);
static_assert(offsetof(ACookedFoodItem, _inventoryIcon_Raw) == 0x0A50);
static_assert(offsetof(ACookedFoodItem, _inventoryIconInHands_Raw) == 0x0A78);
static_assert(offsetof(ACookedFoodItem, _outsideInventoryIcon_Raw) == 0x0AA0);
static_assert(offsetof(ACookedFoodItem, _inventoryIcon_Burnt) == 0x0AC8);
static_assert(offsetof(ACookedFoodItem, _inventoryIconInHands_Burnt) == 0x0AF0);
static_assert(offsetof(ACookedFoodItem, _outsideInventoryIcon_Burnt) == 0x0B18);
static_assert(offsetof(ACookedFoodItem, _exhaustionBonusDeltaPerCookQualityLevel) == 0x0B48);
static_assert(offsetof(ACookedFoodItem, _cachedGameResourceType) == 0x0B58);
static_assert(offsetof(UCookedFoodItemEntitySave, CookQuality) == 0x0030);
static_assert(offsetof(UCookedFoodItemEntitySave, OptionalResourceTypes) == 0x0038);
static_assert(offsetof(UCookingAddRecipeButton, _addRecipeIcon) == 0x02B8);
static_assert(offsetof(UCookingAddRecipeButton, _emptySlotText) == 0x02C0);
static_assert(offsetof(UCookingAddRecipeButton, _heatSourceWarningText) == 0x02C8);
static_assert(offsetof(UCookingAddRecipeButton, _disabledColor) == 0x02D0);
static_assert(offsetof(UCookingAddRecipeButton, _enabledColor) == 0x02E0);
static_assert(offsetof(UCookingCategoryButtonWidget, _titleTextBlock) == 0x0278);
static_assert(offsetof(UCookingCategoryButtonWidget, _buttonImageWidget) == 0x0280);
static_assert(offsetof(UCookingCategoryButtonWidget, _overallBorder) == 0x0288);
static_assert(offsetof(UCookingCategoryButtonWidget, _cookingCategory) == 0x0290);
static_assert(offsetof(UCookingCategoryButtonWidget, _navigationTag) == 0x0298);
static_assert(offsetof(UCookingCategoryButtonWidget, _titleText) == 0x02A0);
static_assert(offsetof(UCookingCategoryButtonWidget, _buttonImage) == 0x02B8);
static_assert(offsetof(UCookingCategoryButtonWidget, _unHoveredBorderColor) == 0x02E0);
static_assert(offsetof(UCookingCategoryButtonWidget, _hoveredBorderColor) == 0x02F0);
static_assert(offsetof(FCookingCategoryDropdownEntryData, CookingCategoryTag) == 0x0000);
static_assert(offsetof(FCookingCategoryDropdownEntryData, NavigationTag) == 0x0008);
static_assert(offsetof(FCookingCategoryDropdownEntryData, NavigationHistory) == 0x0010);
static_assert(offsetof(FCookingCategoryDropdownEntryData, DisplayName) == 0x0020);
static_assert(offsetof(UCookingCategoryDropdown, _textDropdownEntryClass) == 0x0288);
static_assert(offsetof(UCookingCategoryDropdown, _chosenCategory) == 0x0290);
static_assert(offsetof(UCookingCategoryDropdown, _popup) == 0x0298);
static_assert(offsetof(UCookingCategoryDropdown, _categoryDropdownContentClass) == 0x02A0);
static_assert(offsetof(UCookingCategoryDropdown, _cookingCategoryDropdownEntries) == 0x02A8);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_Fiber) == 0x0030);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_Starch) == 0x0038);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_Sugars) == 0x0040);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_OtherCarbohydrates) == 0x0048);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_SaturatedFat) == 0x0050);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_OtherFats) == 0x0058);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_Protein) == 0x0060);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_VitaminA) == 0x0068);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_VitaminC) == 0x0070);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_VitaminD) == 0x0078);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_VitaminE) == 0x0080);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_VitaminK) == 0x0088);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_VitaminB1) == 0x0090);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_VitaminB2) == 0x0098);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_VitaminB3) == 0x00A0);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_VitaminB6) == 0x00A8);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_VitaminB9) == 0x00B0);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_VitaminB12) == 0x00B8);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_VitaminB5) == 0x00C0);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_VitaminB4) == 0x00C8);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_Calcium) == 0x00D0);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_Iron) == 0x00D8);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_Magnesium) == 0x00E0);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_Phosphorus) == 0x00E8);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_Potassium) == 0x00F0);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_Sodium) == 0x00F8);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_Zinc) == 0x0100);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_Copper) == 0x0108);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_Manganese) == 0x0110);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_Selenium) == 0x0118);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_Alcohol) == 0x0120);
static_assert(offsetof(UCookingCommonData, MassReductionByPeakTemperature_Water) == 0x0128);
static_assert(offsetof(UCookingCommonData, _cookQualityVsCookAmount) == 0x0130);
static_assert(offsetof(UCookingCommonData, _cookQualityVsCookTimeRelativeError_NoSkill) == 0x0138);
static_assert(offsetof(UCookingCommonData, _cookQualityVsCookTimeRelativeError_Basic) == 0x0140);
static_assert(offsetof(UCookingCommonData, _cookQualityVsCookTimeRelativeError_Medium) == 0x0148);
static_assert(offsetof(UCookingCommonData, _cookQualityVsCookTimeRelativeError_Advanced) == 0x0150);
static_assert(offsetof(UCookingCommonData, _cookQualityVsCookTimeRelativeError_AboveAdvanced) == 0x0158);
static_assert(offsetof(FHoverClickButtonVisualInfo, BackgroundColor) == 0x0000);
static_assert(offsetof(FHoverClickButtonVisualInfo, BorderColor) == 0x0010);
static_assert(offsetof(UCookingControlButton, _buttonBackground) == 0x02B8);
static_assert(offsetof(UCookingControlButton, _timerBorder) == 0x02C0);
static_assert(offsetof(UCookingControlButton, _visualSwitcher) == 0x02C8);
static_assert(offsetof(UCookingControlButton, _buttonTimer) == 0x02D0);
static_assert(offsetof(UCookingControlButton, _cookingTextTooltipClass) == 0x02E0);
static_assert(offsetof(UCookingControlButton, _controlButtonState) == 0x02E8);
static_assert(offsetof(UCookingControlButton, _hoverAndClickVisualsMap) == 0x02F0);
static_assert(offsetof(UCookingFavouriteButton, _buttonImage) == 0x02C0);
static_assert(offsetof(UCookingFavouriteButton, _clickAnimation) == 0x02C8);
static_assert(offsetof(UCookingFavouriteButton, _hoverAnimation) == 0x02D0);
static_assert(offsetof(UCookingFavouriteButton, _nonFavouriteButtonBrush) == 0x02D8);
static_assert(offsetof(UCookingFavouriteButton, _favouriteButtonBrush) == 0x0360);
static_assert(offsetof(UCookingFinishedWidget, _productImage) == 0x0278);
static_assert(offsetof(UCookingFinishedWidget, _ratingText) == 0x0280);
static_assert(offsetof(UCookingFinishedWidget, _starsHorizontalBox) == 0x0288);
static_assert(offsetof(UCookingFinishedWidget, _qualityDescription) == 0x0290);
static_assert(offsetof(UCookingFinishedWidget, _grabButton) == 0x0298);
static_assert(offsetof(UCookingFinishedWidget, _activeStarBrush) == 0x02A0);
static_assert(offsetof(UCookingFinishedWidget, _inactiveStarBrush) == 0x0328);
static_assert(offsetof(UCookingHeatSourceButton, _mainSizeBox) == 0x0278);
static_assert(offsetof(UCookingHeatSourceButton, _heatSourceIcon) == 0x0280);
static_assert(offsetof(UCookingHeatSourceButton, _borderImage) == 0x0288);
static_assert(offsetof(UCookingHeatSourceButton, _selectedButtonSize) == 0x0294);
static_assert(offsetof(UCookingHeatSourceButton, _deselectedButtonSize) == 0x029C);
static_assert(offsetof(UCookingHeatSourceButton, _selectedBorderColor) == 0x02A4);
static_assert(offsetof(UCookingHeatSourceButton, _deselectedBorderColor) == 0x02B4);
static_assert(offsetof(UCookingInfoButton, _pulseAnimation) == 0x02B8);
static_assert(offsetof(UCookingIngredientInfoWidget, _unselectedBorderColor) == 0x0278);
static_assert(offsetof(UCookingIngredientInfoWidget, _selectedBorderColor) == 0x0288);
static_assert(offsetof(UCookingIngredientInfoWidget, _mainSwitcher) == 0x0298);
static_assert(offsetof(UCookingIngredientInfoWidget, _nonEmptyPage) == 0x02A0);
static_assert(offsetof(UCookingIngredientInfoWidget, _infoButton) == 0x02A8);
static_assert(offsetof(UCookingIngredientInfoWidget, _amountText) == 0x02B0);
static_assert(offsetof(UCookingIngredientInfoWidget, _ingredientIcon) == 0x02B8);
static_assert(offsetof(UCookingIngredientInfoWidget, _border) == 0x02C0);
static_assert(offsetof(UCookingIngredientInfoWidget, _emptyPage) == 0x02C8);
static_assert(offsetof(UCookingIngredientInfoWidget, _ingredientTextTooltipClass) == 0x02E0);
static_assert(offsetof(UCookingIngredientTooltip, _ingredientName) == 0x0268);
static_assert(offsetof(UCookingIngredientTooltip, _ingredientNecessity) == 0x0270);
static_assert(offsetof(FCookingUtilitySlotInstance, _uniqueId) == 0x0020);
static_assert(offsetof(FCookingUtilitySlotInstance, _utilityType) == 0x0028);
static_assert(offsetof(FCookingUtilitySlotInstance, _boundCookingUtility) == 0x0038);
static_assert(offsetof(FCookingUtilitySlotInstance, _boundRecipe) == 0x0048);
static_assert(offsetof(FCookingUtilitySlotInstance, _clientReservedRecipe) == 0x0050);
static_assert(offsetof(FCookingUtilitySlotInstance, _ownerCookingUtility) == 0x0078);
static_assert(offsetof(FCookingUtilitySlotInstance, _parentInstance) == 0x0108);
static_assert(offsetof(FCookingUtilitySlotArray, _slots) == 0x0108);
static_assert(offsetof(ACookingUtilitySlotContainer, _cookingManager) == 0x0220);
static_assert(offsetof(ACookingUtilitySlotContainer, _cookingUtilitySlots) == 0x0228);
static_assert(offsetof(FMainPointSnappedUtilities, _repSnappedKey) == 0x00A0);
static_assert(offsetof(FMainPointSnappedUtilities, _repSnappedValue) == 0x00B0);
static_assert(offsetof(FCookingFoodProxyMesh, Mesh) == 0x0000);
static_assert(offsetof(FCookingFoodProxyMesh, _meshComponent) == 0x0090);
static_assert(offsetof(FCookingFoodProxyMesh, _thermalSoundEffectComponent) == 0x0098);
static_assert(offsetof(FCookingFoodProxyMesh, _startCookingEvent) == 0x00A0);
static_assert(offsetof(FCookingFoodProxyMesh, _stopCookingEvent) == 0x00A8);
static_assert(offsetof(ACookingManager, _activeCookingRecipes) == 0x0318);
static_assert(offsetof(ACookingManager, _mainPointSnappedCookingUtilities) == 0x03C0);
static_assert(offsetof(ACookingManager, _cookingUtilitySlotContainerClass) == 0x0588);
static_assert(offsetof(ACookingManager, _proxyMeshMap) == 0x05E8);
static_assert(offsetof(FCraftingCategoryTabButtonSharedStyle, BackgroundColor) == 0x0000);
static_assert(offsetof(FCraftingCategoryTabButtonSharedStyle, IconColor) == 0x0010);
static_assert(offsetof(UCookingPanel, _cookingUtilitySlotsButton) == 0x0270);
static_assert(offsetof(UCookingPanel, _categoriesTabButtonsContainer) == 0x0278);
static_assert(offsetof(UCookingPanel, _mainSwitcher) == 0x0280);
static_assert(offsetof(UCookingPanel, _cookingUtilitySlotsPanel) == 0x0288);
static_assert(offsetof(UCookingPanel, _cookingRecipesPanel) == 0x0290);
static_assert(offsetof(UCookingPanel, _allRecipesTag) == 0x029C);
static_assert(offsetof(UCookingPanel, _favoritesAndRecentRecipesTag) == 0x02A4);
static_assert(offsetof(UCookingPanel, _addingRecipeToUtilitySlotButtonStyle) == 0x02AC);
static_assert(offsetof(UCookingProgressWidget, _progressImageRetainerBox) == 0x0268);
static_assert(offsetof(UCookingProgressWidget, _progressImage) == 0x0270);
static_assert(offsetof(UCookingProgressWidget, _cookingTimeText) == 0x0278);
static_assert(offsetof(UCookingProgressWidget, _cookingTemperatureText) == 0x0280);
static_assert(offsetof(FPossibleRecipeIngredient, Item) == 0x0008);
static_assert(offsetof(FPossibleRecipeIngredient, ResourceType) == 0x0038);
static_assert(offsetof(FRecipeIngredient, IngredientTitle) == 0x0000);
static_assert(offsetof(FRecipeIngredient, PossibleIngredient) == 0x0020);
static_assert(offsetof(FCookingResult, Item) == 0x0000);
static_assert(offsetof(UCookingRecipe, RecipeName) == 0x0030);
static_assert(offsetof(UCookingRecipe, Description) == 0x0048);
static_assert(offsetof(UCookingRecipe, MainIngredients) == 0x0060);
static_assert(offsetof(UCookingRecipe, OptionalIngredients) == 0x0070);
static_assert(offsetof(UCookingRecipe, ResultingFood) == 0x0080);
static_assert(offsetof(UCookingRecipe, Utility) == 0x00B0);
static_assert(offsetof(UCookingRecipe, Category) == 0x00D0);
static_assert(offsetof(UCookingRecipe, CookProgressMesh) == 0x00F0);
static_assert(offsetof(UCookingRecipe, CookProgressMeshMaterial) == 0x0118);
static_assert(offsetof(UCookingRecipe, CookProgressMeshRelativeTransform) == 0x0150);
static_assert(offsetof(UCookingRecipe, StartCookingEvent) == 0x0188);
static_assert(offsetof(UCookingRecipe, StopCookingEvent) == 0x0190);
static_assert(offsetof(UCookingRecipeButtonsContainer, _titleOverlay) == 0x02A0);
static_assert(offsetof(UCookingRecipeButtonsContainer, _titleText) == 0x02A8);
static_assert(offsetof(UCookingRecipeButtonsContainer, _expandCheckBox) == 0x02B0);
static_assert(offsetof(UCookingRecipeButtonsContainer, _wrapBox) == 0x02B8);
static_assert(offsetof(UCookingRecipeButtonsContainer, _buttonClass) == 0x02C0);
static_assert(offsetof(UCookingRecipeButtonWidget, _titleText) == 0x02D8);
static_assert(offsetof(UCookingRecipeButtonWidget, _buttonIcon) == 0x02E0);
static_assert(offsetof(UCookingRecipeButtonWidget, _favoriteStar) == 0x02E8);
static_assert(offsetof(UCookingRecipeButtonWidget, _contextMenuAnchor) == 0x02F0);
static_assert(offsetof(UCookingRecipeButtonWidget, _overallBorder) == 0x02F8);
static_assert(offsetof(UCookingRecipeButtonWidget, _deselectedBorderColor) == 0x0300);
static_assert(offsetof(UCookingRecipeButtonWidget, _selectedBorderColor) == 0x0310);
static_assert(offsetof(UCookingRecipeButtonWidget, _contextMenuVBox) == 0x0328);
static_assert(offsetof(UCookingRecipeButtonWidget, _dropdownEntryCategoryTitleClass) == 0x0330);
static_assert(offsetof(UCookingRecipeButtonWidget, _textDropdownEntryClass) == 0x0338);
static_assert(offsetof(UCookingRecipeCategoryPanel, _navigationTag) == 0x0150);
static_assert(offsetof(UCookingRecipeCollectionItemTag, _recipes) == 0x0030);
static_assert(offsetof(UCookingRecipeDetailsWidget, _ingredientInfoWidgetClass) == 0x0280);
static_assert(offsetof(UCookingRecipeDetailsWidget, _possibleIngredientWidgetClass) == 0x0288);
static_assert(offsetof(UCookingRecipeDetailsWidget, _recipeIcon) == 0x0290);
static_assert(offsetof(UCookingRecipeDetailsWidget, _favouritesButton) == 0x0298);
static_assert(offsetof(UCookingRecipeDetailsWidget, _cookingTimeText) == 0x02A0);
static_assert(offsetof(UCookingRecipeDetailsWidget, _recipeTitle) == 0x02A8);
static_assert(offsetof(UCookingRecipeDetailsWidget, _expandCheckBoxMainIngredients) == 0x02B0);
static_assert(offsetof(UCookingRecipeDetailsWidget, _mainIngredientsWrapBox) == 0x02B8);
static_assert(offsetof(UCookingRecipeDetailsWidget, _mainIngredientDetailsVerticalBox) == 0x02C0);
static_assert(offsetof(UCookingRecipeDetailsWidget, _possibleMainIngredientsWrapBox) == 0x02C8);
static_assert(offsetof(UCookingRecipeDetailsWidget, _expandCheckBoxOptionalIngredients) == 0x02D0);
static_assert(offsetof(UCookingRecipeDetailsWidget, _optionalIngredientsWrapBox) == 0x02D8);
static_assert(offsetof(UCookingRecipeDetailsWidget, _optionalIngredientDetailsVerticalBox) == 0x02E0);
static_assert(offsetof(UCookingRecipeDetailsWidget, _possibleOptionalIngredientsWrapBox) == 0x02E8);
static_assert(offsetof(UCookingRecipeDetailsWidget, _detailedDescriptionText) == 0x02F0);
static_assert(offsetof(UCookingRecipeDetailsWidget, _cookingUtilities) == 0x02F8);
static_assert(offsetof(UCookingRecipeDetailsWidget, _cookingTimeEmphasized) == 0x0300);
static_assert(offsetof(FCookingRecipeRegistryEntry, AssetId) == 0x0004);
static_assert(offsetof(UCookingRecipeRegistry, _entries) == 0x0030);
static_assert(offsetof(UCookingRecipesPanel, _searchBox) == 0x02A0);
static_assert(offsetof(UCookingRecipesPanel, _categoriesDetailsSwitcher) == 0x02A8);
static_assert(offsetof(UCookingRecipesPanel, _selectedCategoryTitle) == 0x02B0);
static_assert(offsetof(UCookingRecipesPanel, _categoriesScrollBox) == 0x02B8);
static_assert(offsetof(UCookingRecipesPanel, _cookingRecipeDetailsWidget) == 0x02C0);
static_assert(offsetof(UCookingRecipesPanel, _addRecipeToUtilitySlotOverlay) == 0x02C8);
static_assert(offsetof(UCookingRecipesPanel, _leftButton) == 0x02D0);
static_assert(offsetof(UCookingRecipesPanel, _middleButton) == 0x02D8);
static_assert(offsetof(UCookingRecipesPanel, _rightButton) == 0x02E0);
static_assert(offsetof(UCookingRecipesPanel, _collapseAllButton) == 0x02E8);
static_assert(offsetof(UCookingRecipesPanel, _expandAllButton) == 0x02F0);
static_assert(offsetof(UCookingRecipesPanel, _cookingRecipeButtonsContainerClass) == 0x02F8);
static_assert(offsetof(UCookingRecipesPanel, _tooltipClass) == 0x0300);
static_assert(offsetof(UCookingRecipesPanel, _cancelTooltipText) == 0x0358);
static_assert(offsetof(UCookingRecipesPanel, _detailsTooltipText) == 0x0370);
static_assert(offsetof(UCookingRecipesPanel, _backTooltipText) == 0x0388);
static_assert(offsetof(UCookingRecipesPanel, _addRecipeTooltipText) == 0x03A0);
static_assert(offsetof(UCookingRecipesPanel, _cookingCategoryPadding) == 0x0450);
static_assert(offsetof(UCookingSkill, _recipesKnownByDefault) == 0x00B0);
static_assert(offsetof(FCookingSortingDropdownEntryData, DisplayName) == 0x0000);
static_assert(offsetof(FCookingSortingDropdownEntryData, RecipesSort) == 0x0018);
static_assert(offsetof(FCookingSortingDropdownEntryData, Icon) == 0x0020);
static_assert(offsetof(UCookingSortingDropdown, _textDropdownEntryClass) == 0x0280);
static_assert(offsetof(UCookingSortingDropdown, _categoryDropdownContentClass) == 0x0288);
static_assert(offsetof(UCookingSortingDropdown, _icon) == 0x0290);
static_assert(offsetof(UCookingSortingDropdown, _popup) == 0x0298);
static_assert(offsetof(UCookingSortingDropdown, _cookingSortingDropdownEntries) == 0x02A0);
static_assert(offsetof(UCookingTemperatureControlLinearWidget, _effectBox) == 0x0280);
static_assert(offsetof(UCookingTemperatureControlLinearWidget, _temperatureSlider) == 0x0288);
static_assert(offsetof(UCookingTemperatureControlLinearWidget, _temperatureValuesOverlay) == 0x0290);
static_assert(offsetof(UCookingTemperatureControlRadialWidget, _dialDetailSwitcher) == 0x0278);
static_assert(offsetof(UCookingTemperatureControlRadialWidget, _exactTemperaturesOverlay) == 0x0280);
static_assert(offsetof(UCookingTemperatureControlRadialWidget, _dialArrow) == 0x0288);
static_assert(offsetof(UCookingTemperatureControlRadialWidget, _arrowNormalBrush) == 0x0298);
static_assert(offsetof(UCookingTemperatureControlRadialWidget, _arrowHoveredBrush) == 0x0320);
static_assert(offsetof(UCookingUIController, _overcookedColor) == 0x0294);
static_assert(offsetof(UCookingUIController, _cookedColor) == 0x02A4);
static_assert(offsetof(UCookingUIController, _undercookedColor) == 0x02B4);
static_assert(offsetof(UCookingUIController, _categoryTagNames) == 0x03C8);
static_assert(offsetof(UCookingUIController, _favoritesAndRecentRecipesCategoryTag) == 0x0418);
static_assert(offsetof(FCookingUtilityFilterDropdownEntryData, CookingUtilityTag) == 0x0000);
static_assert(offsetof(FCookingUtilityFilterDropdownEntryData, DisplayName) == 0x0008);
static_assert(offsetof(UCookingUtilityFilterDropdown, _utilityFilterIcon) == 0x0280);
static_assert(offsetof(UCookingUtilityFilterDropdown, _popup) == 0x0288);
static_assert(offsetof(UCookingUtilityFilterDropdown, _dropdownEntryClass) == 0x0290);
static_assert(offsetof(UCookingUtilityFilterDropdown, _dropdownContentClass) == 0x0298);
static_assert(offsetof(UCookingUtilityFilterDropdown, _cookingUtilityFilterDropdownEntries) == 0x02A0);
static_assert(offsetof(FCookingUtilityMainSnapPoint, UtilitySlotType) == 0x0000);
static_assert(offsetof(FCookingUtilityMainSnapPoint, LocationOffset) == 0x0008);
static_assert(offsetof(FCookingUtilityMainSnapPoint, UtilityTypesThatCanBePlaced) == 0x0020);
static_assert(offsetof(FCookingUtilitySlot, UtilitySlotType) == 0x0000);
static_assert(offsetof(FCookingUtilitySlot, LocationOffset) == 0x0008);
static_assert(offsetof(FCookingUtilitySlot, MovementEndpoints) == 0x0018);
static_assert(offsetof(FCookingUtilitySlot, UtilityTypesThatCanBePlaced) == 0x0038);
static_assert(offsetof(FCookingUtilitySlot, CookMeshVisualOffset) == 0x0058);
static_assert(offsetof(FCookingUtilitySlot, CookingUtilityUIDataAsset) == 0x0068);
static_assert(offsetof(UCookingUtilityItemTag, MainSnapPoint) == 0x0038);
static_assert(offsetof(UCookingUtilityItemTag, Slots) == 0x0080);
static_assert(offsetof(UCookingUtilityOverview, _ingredientWidgetClass) == 0x02D8);
static_assert(offsetof(UCookingUtilityOverview, _ingredientWidgetTooltipClass) == 0x02E0);
static_assert(offsetof(UCookingUtilityOverview, _utilityTitleText) == 0x02E8);
static_assert(offsetof(UCookingUtilityOverview, _recipeTitleTextEffectBox) == 0x02F0);
static_assert(offsetof(UCookingUtilityOverview, _recipeTitleText) == 0x02F8);
static_assert(offsetof(UCookingUtilityOverview, _heatSourceWarningIcon) == 0x0300);
static_assert(offsetof(UCookingUtilityOverview, _mainSwitcherSizeBox) == 0x0308);
static_assert(offsetof(UCookingUtilityOverview, _mainSwitcher) == 0x0310);
static_assert(offsetof(UCookingUtilityOverview, _addRecipeButton) == 0x0318);
static_assert(offsetof(UCookingUtilityOverview, _ingredientsForRecipeWidget) == 0x0320);
static_assert(offsetof(UCookingUtilityOverview, _cookingProgressWidget) == 0x0328);
static_assert(offsetof(UCookingUtilityOverview, _cookingFinishedWidget) == 0x0330);
static_assert(offsetof(UCookingUtilityOverview, _slotOrdinalNumber) == 0x0338);
static_assert(offsetof(UCookingUtilityOverview, _cookAndTimerButton) == 0x0340);
static_assert(offsetof(UCookingUtilityOverview, _cancelButton) == 0x0348);
static_assert(offsetof(UCookingUtilityOverview, _progressBarSizeBox) == 0x0350);
static_assert(offsetof(UCookingUtilityOverview, _hasCookingTimeLeftColor) == 0x0358);
static_assert(offsetof(UCookingUtilityOverview, _cookingTimeOverflowedColor) == 0x0368);
static_assert(offsetof(UCookingUtilityOverview, _heatSourceWarningIcon_MissingFuel) == 0x0378);
static_assert(offsetof(UCookingUtilityOverview, _heatSourceWarningIcon_NotTurnedOn) == 0x0400);
static_assert(offsetof(UCookingUtilitySlotButton, _titleText) == 0x0278);
static_assert(offsetof(UCookingUtilitySlotButton, _utilityIcon) == 0x0280);
static_assert(offsetof(UCookingUtilitySlotButton, _borderImage) == 0x0288);
static_assert(offsetof(UCookingUtilitySlotButton, _ordinalNumberBorderImage) == 0x0290);
static_assert(offsetof(UCookingUtilitySlotButton, _slotOrdinalNumber) == 0x0298);
static_assert(offsetof(UCookingUtilitySlotButton, _cookingInProgressIcon) == 0x02A0);
static_assert(offsetof(UCookingUtilitySlotButton, _selectedBorderColor) == 0x02AC);
static_assert(offsetof(UCookingUtilitySlotButton, _deselectedBorderColor) == 0x02BC);
static_assert(offsetof(UCookingUtilitySlotButton, _selectedTextColor) == 0x02CC);
static_assert(offsetof(UCookingUtilitySlotButton, _deselectedTextColor) == 0x02DC);
static_assert(offsetof(UCookingUtilitySlotsPanel, _utilityOverviewScrollBox) == 0x0280);
static_assert(offsetof(UCookingUtilitySlotsPanel, _cookingUtilityOverviewClass) == 0x0288);
static_assert(offsetof(UCookingUtilitySlotsPanel, _utilityOverviewPadding) == 0x0290);
static_assert(offsetof(UCookingUtilityUIDataAsset, Name) == 0x0030);
static_assert(offsetof(UCookingUtilityUIDataAsset, Icon) == 0x0050);
static_assert(offsetof(UCookingUtilityUIDataAsset, CookingTemperatureControlType) == 0x0078);
static_assert(offsetof(UCraftingAvailableItemWidget, _item) == 0x0280);
static_assert(offsetof(UCraftingAvailableItemWidget, _clickSound) == 0x0288);
static_assert(offsetof(UCraftingAvailableItemWidget, _tooltipClass) == 0x0290);
static_assert(offsetof(UCraftingAvailableItemWidget, _selectedTexture) == 0x0298);
static_assert(offsetof(UCraftingAvailableItemWidget, _unselectedTexture) == 0x02A0);
static_assert(offsetof(UCraftingAvailableItemWidget, _componentAddTexture) == 0x02A8);
static_assert(offsetof(UCraftingAvailableItemWidget, _componentRemoveTexture) == 0x02B0);
static_assert(offsetof(UCraftingAvailableItemWidget, MainRetainerBox) == 0x02B8);
static_assert(offsetof(UCraftingAvailableItemWidget, _itemImage) == 0x02C0);
static_assert(offsetof(UCraftingAvailableItemWidget, BackgroundImage) == 0x02C8);
static_assert(offsetof(UCraftingAvailableItemWidget, AdditionalComponentImage) == 0x02D0);
static_assert(offsetof(UCraftingAvailableItemWidget, CountText) == 0x02D8);
static_assert(offsetof(FCraftingPanelCategoryButtonUIData, CategoryTag) == 0x0000);
static_assert(offsetof(FCraftingPanelCategoryButtonUIData, HighlightTag) == 0x0008);
static_assert(offsetof(FCraftingPanelCategoryButtonUIData, Icon) == 0x0010);
static_assert(offsetof(FCraftingPanelCategoryButtonUIData, Name) == 0x0098);
static_assert(offsetof(FCraftingPanelCategoryButtonUIData, Shortcut) == 0x00B0);
static_assert(offsetof(UCraftingCategoriesTabButtonsContainer, _categoryButtonsContainer) == 0x0278);
static_assert(offsetof(UCraftingCategoriesTabButtonsContainer, _craftingPanelCategoryButtonsUIData) == 0x0280);
static_assert(offsetof(UCraftingCategoriesTabButtonsContainer, _craftingCategoryTabButtonClass) == 0x0290);
static_assert(offsetof(UCraftingCategoryTabButton, _tooltipClass) == 0x02F0);
static_assert(offsetof(UCraftingCategoryTabButton, _shadow) == 0x0300);
static_assert(offsetof(UCraftingCategoryTabButton, _background) == 0x0308);
static_assert(offsetof(UCraftingCategoryTabButton, _icon) == 0x0310);
static_assert(offsetof(UCraftingCategoryTabButton, _iconBrush) == 0x0318);
static_assert(offsetof(UCraftingCategoryTabButton, _backgroundBrush) == 0x03A0);
static_assert(offsetof(UCraftingCategoryTabButton, _backgroundShadowBrush) == 0x0428);
static_assert(offsetof(UCraftingCategoryTabButton, _selectedStyle) == 0x04B0);
static_assert(offsetof(UCraftingCategoryTabButton, _deselectedStyle) == 0x04D4);
static_assert(offsetof(UCraftingCategoryTabButton, _deselectedFocusedStyle) == 0x04F8);
static_assert(offsetof(UCraftingCategoryTabButton, _disabledStyle) == 0x051C);
static_assert(offsetof(UCraftingCategoryTabButton, _categoryName) == 0x0540);
static_assert(offsetof(UCraftingComponentTooltip, BackgroundImage) == 0x0268);
static_assert(offsetof(UCraftingComponentTooltip, ComponentTypeText) == 0x0270);
static_assert(offsetof(UCraftingComponentTooltip, DescriptionText) == 0x0278);
static_assert(offsetof(UCraftingComponentTooltip, Image) == 0x0280);
static_assert(offsetof(UCraftingComponentTooltip, NameText) == 0x0288);
static_assert(offsetof(UCraftingComponentTooltip, _craftingComponentWidget) == 0x0290);
static_assert(offsetof(UCraftingComponentWidget, ItemWidget) == 0x0268);
static_assert(offsetof(UCraftingComponentWidget, CountText) == 0x0278);
static_assert(offsetof(UCraftingComponentWidget, OrderNumberText) == 0x0280);
static_assert(offsetof(UCraftingComponentWidget, TypeImage) == 0x0288);
static_assert(offsetof(UCraftingComponentWidget, Component_Main) == 0x0290);
static_assert(offsetof(UCraftingComponentWidget, Component_Tool) == 0x0298);
static_assert(offsetof(UCraftingComponentWidget, _craftingComponentWidget) == 0x02A0);
static_assert(offsetof(UCraftingInfoWidget, ItemWidget) == 0x0268);
static_assert(offsetof(UCraftingInfoWidget, ComponentsGridPanel) == 0x0270);
static_assert(offsetof(UCraftingInfoWidget, CraftingGridPanel) == 0x0278);
static_assert(offsetof(UCraftingInfoWidget, ComponentsMinimizableWidget) == 0x0280);
static_assert(offsetof(UCraftingInfoWidget, CraftingMinimizableWidget) == 0x0288);
static_assert(offsetof(UCraftingInfoWidget, _switchWidgets) == 0x0308);
static_assert(offsetof(UCraftingInfoWidget, _inventoryComponent) == 0x0318);
static_assert(offsetof(UCraftingInfoWidget, TitleText) == 0x0338);
static_assert(offsetof(UCraftingInfoWidget, DescriptionText) == 0x0340);
static_assert(offsetof(UCICM_GameResource, _allowedResources) == 0x0028);
static_assert(offsetof(UCraftingPanelSwitcher, _tabRow) == 0x0268);
static_assert(offsetof(UCraftingPanelSwitcher, _switcher) == 0x0270);
static_assert(offsetof(UCraftingPanelSwitcher, _itemsCraftingPanel) == 0x0278);
static_assert(offsetof(UCraftingPanelSwitcher, _baseBuildingPanel) == 0x0280);
static_assert(offsetof(UCraftingPanelSwitcher, _cookingPanel) == 0x0288);
static_assert(offsetof(UCraftingPanelWidget, _centralBuildingPanel) == 0x0268);
static_assert(offsetof(UCraftingPanelWidget, _buildingCraftingWidgetSwitcher) == 0x0270);
static_assert(offsetof(UCPT_GameResource, _resourceClass) == 0x0028);
static_assert(offsetof(FCraftingIngredientSlot, AllowedTypes) == 0x0000);
static_assert(offsetof(FCraftingIngredientSlot, Amount) == 0x0010);
static_assert(offsetof(FCraftingIngredientSlot, AdditionalAmount) == 0x0024);
static_assert(offsetof(FCraftingIngredientSlot, Purpose) == 0x003C);
static_assert(offsetof(FCraftingIngredientSlot, MixingType) == 0x003D);
static_assert(offsetof(FCraftingIngredientSlot, DamagePercentageOnUncraft) == 0x0040);
static_assert(offsetof(FCraftingIngredientSlot, ClassRepresentativeCaption) == 0x0058);
static_assert(offsetof(UCraftingRecipe, Ingredients) == 0x0030);
static_assert(offsetof(UCraftingRecipe, TwitchDropId) == 0x0048);
static_assert(offsetof(UCraftingRecipe, DLCVersion) == 0x0059);
static_assert(offsetof(UCraftingRecipe, RelevantSkill) == 0x0060);
static_assert(offsetof(UCraftingRecipe, ExperienceReward) == 0x0068);
static_assert(offsetof(UCraftingRecipe, FamePointReward) == 0x007C);
static_assert(offsetof(UCraftingRecipe, SurvivalTipToShowOnCraft) == 0x0090);
static_assert(offsetof(UItemCraftingRecipe, Product) == 0x0098);
static_assert(offsetof(UItemCraftingRecipe, ProductSpawningMethod) == 0x00C8);
static_assert(offsetof(UItemCraftingRecipe, ProductQualityApplicationMethod) == 0x00D0);
static_assert(offsetof(UItemCraftingRecipe, PropertyTrackers) == 0x00D8);
static_assert(offsetof(UItemCraftingRecipe, InteractionName) == 0x00E8);
static_assert(offsetof(UItemCraftingRecipe, Duration) == 0x0100);
static_assert(offsetof(UItemCraftingRecipe, CustomCraftingMontage) == 0x0118);
static_assert(offsetof(UItemCraftingRecipe, StartCraftingAudioEvent) == 0x0120);
static_assert(offsetof(UItemCraftingRecipe, StopCraftingAudioEvent) == 0x0128);
static_assert(offsetof(UPlaceableCraftingRecipe, Product) == 0x0098);
static_assert(offsetof(UPlaceableCraftingRecipe, Icon) == 0x00C8);
static_assert(offsetof(UPlaceableCraftingRecipe, Caption) == 0x00F0);
static_assert(offsetof(UPlaceableCraftingRecipe, Description) == 0x0108);
static_assert(offsetof(UPlaceableCraftingRecipe, PlaceableActorClass) == 0x0120);
static_assert(offsetof(UPlaceableCraftingRecipe, PlacementLocationOffset) == 0x0164);
static_assert(offsetof(UPlaceableCraftingRecipe, CollisionMeshScale) == 0x0170);
static_assert(offsetof(UPlaceableCraftingRecipe, BoundsExtensionWhilePlacingMin) == 0x017C);
static_assert(offsetof(UPlaceableCraftingRecipe, BoundsExtensionWhilePlacingMax) == 0x0188);
static_assert(offsetof(UPlaceableCraftingRecipe, PlacementTracesBoundsExtension) == 0x0194);
static_assert(offsetof(UPlaceableCraftingRecipe, FloatingTracesBoundsExtension) == 0x01A0);
static_assert(offsetof(UPlaceableCraftingRecipe, FloatingTracesCenterOffset) == 0x01AC);
static_assert(offsetof(UPlaceableCraftingRecipe, MeshCollisionType) == 0x01C4);
static_assert(offsetof(UPlaceableCraftingRecipe, PlacementAlgorithm) == 0x01C8);
static_assert(offsetof(UPlaceableCraftingRecipe, PlacementMeshOffset) == 0x01D0);
static_assert(offsetof(UPlaceableCraftingRecipe, PlacementMeshScale) == 0x01DC);
static_assert(offsetof(UPlaceableCraftingRecipe, DirectionIndicatorOffset) == 0x01F4);
static_assert(offsetof(UCraftingRecipeButton, _sizeBox) == 0x02A0);
static_assert(offsetof(UCraftingRecipeButton, _background) == 0x02A8);
static_assert(offsetof(UCraftingRecipeButton, _lines) == 0x02B0);
static_assert(offsetof(UCraftingRecipeButton, _border) == 0x02B8);
static_assert(offsetof(UCraftingRecipeButton, _icon) == 0x02C0);
static_assert(offsetof(UCraftingRecipeButton, _favouriteStar) == 0x02C8);
static_assert(offsetof(UCraftingRecipeButton, _twitchDropOrDLC) == 0x02D0);
static_assert(offsetof(UCraftingRecipeButton, _contextMenuPopup) == 0x02D8);
static_assert(offsetof(UCraftingRecipeButton, _tooltipClass) == 0x02E8);
static_assert(offsetof(UCraftingRecipeButton, _textDropdownEntryClass) == 0x02F0);
static_assert(offsetof(UCraftingRecipeButton, _dropdownContentContainerClass) == 0x02F8);
static_assert(offsetof(UCraftingRecipeButton, _onClickAudioEvent) == 0x0300);
static_assert(offsetof(UCraftingRecipeButton, _twitchDropIcon) == 0x0308);
static_assert(offsetof(UCraftingRecipeButton, _dlcIcon) == 0x0390);
static_assert(offsetof(UCraftingRecipeButtonsContainer, _titleOverlay) == 0x0290);
static_assert(offsetof(UCraftingRecipeButtonsContainer, _titleText) == 0x0298);
static_assert(offsetof(UCraftingRecipeButtonsContainer, _expandCheckBox) == 0x02A0);
static_assert(offsetof(UCraftingRecipeButtonsContainer, _wrapBox) == 0x02A8);
static_assert(offsetof(UCraftingRecipeButtonsContainer, _buttonClass) == 0x02B0);
static_assert(offsetof(UCraftingIngredientTag, ConsumptionMethod) == 0x0030);
static_assert(offsetof(UCraftingIngredientTag, PlaceableFillSound) == 0x0038);
static_assert(offsetof(UCraftingIngredientTag, UIClassRepresentative) == 0x0040);
static_assert(offsetof(UCraftingIngredientTag, ClassRepresentativeCaption) == 0x0070);
static_assert(offsetof(FCraftingCategoryData, Tag) == 0x0000);
static_assert(offsetof(FCraftingCategoryData, Recipes) == 0x0008);
static_assert(offsetof(UCraftingUIData, ItemCategories) == 0x0030);
static_assert(offsetof(UCraftingUIData, PlaceableCategories) == 0x0040);
static_assert(offsetof(UCraftingUIData, CategoryNames) == 0x0050);
static_assert(offsetof(UCreditsWidget, _scrollingAnimation) == 0x0268);
static_assert(offsetof(UCriminalRecord, _criminalRecordSkillClass) == 0x0298);
static_assert(offsetof(UCriminalRecord, _textName) == 0x02A0);
static_assert(offsetof(UCriminalRecord, _textAliases) == 0x02A8);
static_assert(offsetof(UCriminalRecord, _textCrime) == 0x02B0);
static_assert(offsetof(UCriminalRecord, _textNumber) == 0x02B8);
static_assert(offsetof(UCriminalRecord, _textDateOfArrest) == 0x02C0);
static_assert(offsetof(UCriminalRecord, _textCountry) == 0x02C8);
static_assert(offsetof(UCriminalRecord, _textCity) == 0x02D0);
static_assert(offsetof(UCriminalRecord, _textGender) == 0x02D8);
static_assert(offsetof(UCriminalRecord, _textHeight) == 0x02E0);
static_assert(offsetof(UCriminalRecord, _textWeight) == 0x02E8);
static_assert(offsetof(UCriminalRecord, _textAge) == 0x02F0);
static_assert(offsetof(UCriminalRecord, _textBirthDate) == 0x02F8);
static_assert(offsetof(UCriminalRecord, _textEyeColor) == 0x0300);
static_assert(offsetof(UCriminalRecord, _textHairColor) == 0x0308);
static_assert(offsetof(UCriminalRecord, _textFlaws) == 0x0310);
static_assert(offsetof(UCriminalRecord, _textServerLocation) == 0x0318);
static_assert(offsetof(UCriminalRecord, _textBuildAndOccupation) == 0x0320);
static_assert(offsetof(UCriminalRecord, _textStrengthCategory) == 0x0328);
static_assert(offsetof(UCriminalRecord, _verticalBoxStrengthSkills) == 0x0330);
static_assert(offsetof(UCriminalRecord, _textConstitutionCategory) == 0x0338);
static_assert(offsetof(UCriminalRecord, _verticalBoxConstitutionSkills) == 0x0340);
static_assert(offsetof(UCriminalRecord, _textDexterityCategory) == 0x0348);
static_assert(offsetof(UCriminalRecord, _verticalBoxDexteritySkills) == 0x0350);
static_assert(offsetof(UCriminalRecord, _textIntelligenceCategory) == 0x0358);
static_assert(offsetof(UCriminalRecord, _verticalBoxIntelligenceSkills) == 0x0360);
static_assert(offsetof(UCriminalRecord, _buttonCancel) == 0x0368);
static_assert(offsetof(UCriminalRecord, _buttonOk) == 0x0370);
static_assert(offsetof(UCriminalRecordSkill, _quartalPieProgressBar) == 0x0268);
static_assert(offsetof(UCriminalRecordSkill, _textName) == 0x0270);
static_assert(offsetof(UCriminalRecordSkill, _textPercentage) == 0x0278);
static_assert(offsetof(UCriminalRecordText, _mainBorder) == 0x0268);
static_assert(offsetof(UCriminalRecordText, _textTitle) == 0x0270);
static_assert(offsetof(UCriminalRecordText, _textValue) == 0x0278);
static_assert(offsetof(UCriminalRecordText, _leftAndBottomBorder) == 0x0288);
static_assert(offsetof(UCriminalRecordText, _bottomBorder) == 0x0310);
static_assert(offsetof(UCriminalRecordText, _title) == 0x0398);
static_assert(offsetof(UCriminalRecordText, _titlePadding) == 0x03B4);
static_assert(offsetof(UCriminalRecordText, _value) == 0x03C8);
static_assert(offsetof(UCriminalRecordText, _valuePadding) == 0x03E4);
static_assert(offsetof(UCriminalRecordText, _horizontalAlignment) == 0x03F4);
static_assert(offsetof(ACTFBase, SphereComponent) == 0x0220);
static_assert(offsetof(ACTFBase, Mesh) == 0x0228);
static_assert(offsetof(ACTFBase, TeamMaterials) == 0x0230);
static_assert(offsetof(ACTFBase, _gameEvent) == 0x0240);
static_assert(offsetof(ACTFFlag, SphereComponent) == 0x0220);
static_assert(offsetof(ACTFFlag, FlagMesh) == 0x0228);
static_assert(offsetof(ACTFFlag, TeamMaterials) == 0x0230);
static_assert(offsetof(ACTFFlag, AttachSocketName) == 0x0240);
static_assert(offsetof(ACTFFlag, _gameEvent) == 0x0248);
static_assert(offsetof(ACTFFlag, _carrier) == 0x0258);
static_assert(offsetof(ACTFFlag, _baseTransform) == 0x0270);
static_assert(offsetof(ACTFFlag, _flagTransform) == 0x02A0);
static_assert(offsetof(ACTFFlagStand, Mesh) == 0x0220);
static_assert(offsetof(ACTFFlagStand, Light) == 0x0228);
static_assert(offsetof(ACTFFlagStand, _lightColor) == 0x0230);
static_assert(offsetof(FGameEventParticipantInfo, UniqueId) == 0x0000);
static_assert(offsetof(FGameEventParticipantInfo, Prisoner) == 0x0010);
static_assert(offsetof(FGameEventParticipantInfo, Name) == 0x0018);
static_assert(offsetof(FGameEventParticipantInfo, State) == 0x0028);
static_assert(offsetof(FGameEventParticipantInfo, RoundStats) == 0x0030);
static_assert(offsetof(FGameEventParticipantInfo, EventStats) == 0x0040);
static_assert(offsetof(FGameEventParticipantInfo, HurtBy) == 0x0048);
static_assert(offsetof(AGameEventBase, EventName) == 0x0220);
static_assert(offsetof(AGameEventBase, ParticipantStatsClass) == 0x0238);
static_assert(offsetof(AGameEventBase, RoundInfoWidgetClass) == 0x0240);
static_assert(offsetof(AGameEventBase, TeamHeaderWidgetClass) == 0x0248);
static_assert(offsetof(AGameEventBase, StatWidgetClass) == 0x0250);
static_assert(offsetof(AGameEventBase, MiniStatWidgetClass) == 0x0258);
static_assert(offsetof(AGameEventBase, TimesUpAnnouncement) == 0x0260);
static_assert(offsetof(AGameEventBase, BlueTeamWonRoundAnnouncement) == 0x0268);
static_assert(offsetof(AGameEventBase, RedTeamWonRoundAnnouncement) == 0x0270);
static_assert(offsetof(AGameEventBase, RoundDrawAnnouncement) == 0x0278);
static_assert(offsetof(AGameEventBase, BlueTeamWonEventAnnouncement) == 0x0280);
static_assert(offsetof(AGameEventBase, RedTeamWonEventAnnouncement) == 0x0288);
static_assert(offsetof(AGameEventBase, EventDrawAnnouncement) == 0x0290);
static_assert(offsetof(AGameEventBase, Time30sAnnouncement) == 0x0298);
static_assert(offsetof(AGameEventBase, Time15sAnnouncement) == 0x02A0);
static_assert(offsetof(AGameEventBase, Time10sCountdownAnnouncement) == 0x02A8);
static_assert(offsetof(AGameEventBase, TensionMusicStart) == 0x02B0);
static_assert(offsetof(AGameEventBase, TensionMusicStop) == 0x02B8);
static_assert(offsetof(AGameEventBase, _state) == 0x02F0);
static_assert(offsetof(AGameEventBase, _teamMemberCount) == 0x0300);
static_assert(offsetof(AGameEventBase, _teamScores) == 0x0310);
static_assert(offsetof(AGameEventBase, _roundWinningTeam) == 0x0320);
static_assert(offsetof(AGameEventBase, _marker) == 0x0358);
static_assert(offsetof(AGameEventBase, _border) == 0x0360);
static_assert(offsetof(AGameEventBase, _manager) == 0x0368);
static_assert(offsetof(AGameEventBase, _participantInfo) == 0x0370);
static_assert(offsetof(AGameEventBase, _cardWidget) == 0x0510);
static_assert(offsetof(AGameEventBase, _scoreboardWidget) == 0x0518);
static_assert(offsetof(AGameEventBase, _miniScoreboardWidget) == 0x0520);
static_assert(offsetof(AGameEventBase, _rankings) == 0x0528);
static_assert(offsetof(AGameEventBase, _lastAnnouncement) == 0x0558);
static_assert(offsetof(AGameEventBase, _lastCountdownAnnouncement) == 0x0560);
static_assert(offsetof(FCTFParameters, PointsPerPickup) == 0x000C);
static_assert(offsetof(FCTFParameters, PointsPerCapture) == 0x0018);
static_assert(offsetof(FCTFParameters, PointsPerReturn) == 0x0024);
static_assert(offsetof(ACTFGameEvent, FlagClass) == 0x0588);
static_assert(offsetof(ACTFGameEvent, CaptureBaseClass) == 0x0590);
static_assert(offsetof(ACTFGameEvent, FlagStandClass) == 0x0598);
static_assert(offsetof(ACTFGameEvent, FlagIconTexture) == 0x05A0);
static_assert(offsetof(ACTFGameEvent, FlagAccentTexture) == 0x05A8);
static_assert(offsetof(ACTFGameEvent, BaseIconTexture) == 0x05B0);
static_assert(offsetof(ACTFGameEvent, BaseAccentTexture) == 0x05B8);
static_assert(offsetof(ACTFGameEvent, EmptyBaseIconTexture) == 0x05C0);
static_assert(offsetof(ACTFGameEvent, EmptyBaseAccentTexture) == 0x05C8);
static_assert(offsetof(ACTFGameEvent, TeamColorA) == 0x05D0);
static_assert(offsetof(ACTFGameEvent, TeamColorB) == 0x05E0);
static_assert(offsetof(ACTFGameEvent, BlueTeamPickedUpFlagAnnouncement) == 0x05F0);
static_assert(offsetof(ACTFGameEvent, BlueTeamCapturedFlagAnnouncement) == 0x05F8);
static_assert(offsetof(ACTFGameEvent, BlueTeamFlagDroppedAnnouncement) == 0x0600);
static_assert(offsetof(ACTFGameEvent, BlueTeamFlagReturnedAnnouncement) == 0x0608);
static_assert(offsetof(ACTFGameEvent, RedTeamPickedUpFlagAnnouncement) == 0x0610);
static_assert(offsetof(ACTFGameEvent, RedTeamCapturedFlagAnnouncement) == 0x0618);
static_assert(offsetof(ACTFGameEvent, RedTeamFlagDroppedAnnouncement) == 0x0620);
static_assert(offsetof(ACTFGameEvent, RedTeamFlagReturnedAnnouncement) == 0x0628);
static_assert(offsetof(ACTFGameEvent, _CTFParameters) == 0x0630);
static_assert(offsetof(ACTFGameEvent, _flagA) == 0x0660);
static_assert(offsetof(ACTFGameEvent, _flagB) == 0x0668);
static_assert(offsetof(ACTFGameEvent, _baseA) == 0x0670);
static_assert(offsetof(ACTFGameEvent, _baseB) == 0x0678);
static_assert(offsetof(FGameEventParameters, TeamLimit) == 0x0028);
static_assert(offsetof(FGameEventParameters, PointsPerEnemyKill) == 0x003C);
static_assert(offsetof(FGameEventParameters, PointsPerTeamKill) == 0x0048);
static_assert(offsetof(FGameEventParameters, PointsPerDeath) == 0x0054);
static_assert(offsetof(FGameEventParameters, PointsPerSuicide) == 0x0060);
static_assert(offsetof(FGameEventParameters, PointsPerAssist) == 0x006C);
static_assert(offsetof(FGameEventParameters, PointsPerHeadshot) == 0x0078);
static_assert(offsetof(FGameEventParameters, PointsPerRoundWin) == 0x0084);
static_assert(offsetof(FGameEventParameters, PointsPerRank) == 0x0090);
static_assert(offsetof(FGameEventParameters, PointsForParticipation) == 0x00A0);
static_assert(offsetof(FGameEventParameters, EventName) == 0x0110);
static_assert(offsetof(FGameEventParameters, EventDescription) == 0x0128);
static_assert(offsetof(FGameEventParameters, PrerequisitesText) == 0x0140);
static_assert(offsetof(FGameEventParameters, WeaponText) == 0x0158);
static_assert(offsetof(FGameEventParameters, RewardsText) == 0x0170);
static_assert(offsetof(FSpawnArea, Center) == 0x0000);
static_assert(offsetof(AGameEventLocationMarker, LocationName) == 0x0220);
static_assert(offsetof(AGameEventLocationMarker, LocationImage) == 0x0238);
static_assert(offsetof(AGameEventLocationMarker, LocationImageGrayscale) == 0x0240);
static_assert(offsetof(AGameEventLocationMarker, GameEventClass) == 0x0250);
static_assert(offsetof(AGameEventLocationMarker, GameEventParameters) == 0x0258);
static_assert(offsetof(AGameEventLocationMarker, BorderClass) == 0x03E0);
static_assert(offsetof(AGameEventLocationMarker, AreaCenterOffset) == 0x03E8);
static_assert(offsetof(AGameEventLocationMarker, SpawnAreas) == 0x03F8);
static_assert(offsetof(AGameEventLocationMarker, Sphere) == 0x0408);
static_assert(offsetof(AGameEventLocationMarker, Sprite) == 0x0410);
static_assert(offsetof(ACTFLocationMarker, CTFParameters) == 0x0418);
static_assert(offsetof(ACTFLocationMarker, CaptureOffsetA) == 0x0448);
static_assert(offsetof(ACTFLocationMarker, CaptureOffsetB) == 0x0454);
static_assert(offsetof(ACTFLocationMarker, FlagOffsetA) == 0x0470);
static_assert(offsetof(ACTFLocationMarker, FlagOffsetB) == 0x04A0);
static_assert(offsetof(ACTFLocationMarker, FlagAPreviewMesh) == 0x04D0);
static_assert(offsetof(ACTFLocationMarker, FlagBPreviewMesh) == 0x04D8);
static_assert(offsetof(UCustomBorder, Left) == 0x0268);
static_assert(offsetof(UCustomBorder, Right) == 0x0270);
static_assert(offsetof(UCustomBorder, Top) == 0x0278);
static_assert(offsetof(UCustomBorder, Bottom) == 0x0280);
static_assert(offsetof(UCustomBorder, BorderColor) == 0x028C);
static_assert(offsetof(ACustomMapBorder, Mesh) == 0x0220);
static_assert(offsetof(ACustomMapBorder, TournamentMesh) == 0x0228);
static_assert(offsetof(ACustomMapBorder, Material) == 0x0230);
static_assert(offsetof(ACustomMapBorder, _minCustomMapSize) == 0x0238);
static_assert(offsetof(ACustomMapBorder, _minTournamentMapSize) == 0x0254);
static_assert(offsetof(ACustomMapBorder, _tournamentFinalBorderDimensions) == 0x025C);
static_assert(offsetof(ACustomMapBorder, _customMapDimensions) == 0x0274);
static_assert(offsetof(FCustomZoneDisplayData, Value) == 0x0000);
static_assert(offsetof(FCustomZoneDisplayData, Name) == 0x0010);
static_assert(offsetof(FCustomZoneDisplayData, Description) == 0x0028);
static_assert(offsetof(UCustomZoneDataAsset, CustomZoneEventDisplayData) == 0x0030);
static_assert(offsetof(UCustomZoneDataAsset, CustomZoneHandlingMethodDisplayData) == 0x0040);
static_assert(offsetof(FCustomZoneConfiguration, Name) == 0x0000);
static_assert(offsetof(FCustomZoneConfiguration, EventHandlingMethod) == 0x0010);
static_assert(offsetof(FCustomZoneConfiguration, Color) == 0x002C);
static_assert(offsetof(FCustomZoneConfiguration, UniqueDefaultZoneName) == 0x003C);
static_assert(offsetof(FCustomZoneConfiguration, DefaultZoneState) == 0x0044);
static_assert(offsetof(FCustomZoneRegion, Name) == 0x0000);
static_assert(offsetof(FCustomZoneRegion, Location) == 0x0010);
static_assert(offsetof(FCustomZoneRegion, Size) == 0x0018);
static_assert(offsetof(FCustomZoneRegion, Shape) == 0x0020);
static_assert(offsetof(FCustomZoneRegion, UniqueDefaultZoneName) == 0x0028);
static_assert(offsetof(FCustomZoneRegion, DefaultZoneState) == 0x0030);
static_assert(offsetof(UCustomZoneRegistry, _mapMaterial) == 0x00C0);
static_assert(offsetof(UCustomZoneRegistry, _defaultGlobalConfiguration) == 0x00C8);
static_assert(offsetof(UCustomZoneRegistry, _defaultConfiguration) == 0x0110);
static_assert(offsetof(UCustomZoneRegistry, _defaultRegions) == 0x0158);
static_assert(offsetof(UCustomZoneRegistry, _mapTexture) == 0x01A8);
static_assert(offsetof(UCustomZoneRegistry, _shaderData) == 0x01B0);
static_assert(offsetof(UCustomZoneSettingsApplyNotification, _text) == 0x0268);
static_assert(offsetof(UCustomZoneSettingsColorPicker, _button0) == 0x0280);
static_assert(offsetof(UCustomZoneSettingsColorPicker, _button1) == 0x0288);
static_assert(offsetof(UCustomZoneSettingsColorPicker, _button2) == 0x0290);
static_assert(offsetof(UCustomZoneSettingsColorPicker, _button3) == 0x0298);
static_assert(offsetof(UCustomZoneSettingsColorPicker, _button4) == 0x02A0);
static_assert(offsetof(UCustomZoneSettingsColorPicker, _button5) == 0x02A8);
static_assert(offsetof(UCustomZoneSettingsColorPicker, _button6) == 0x02B0);
static_assert(offsetof(UCustomZoneSettingsColorPicker, _button7) == 0x02B8);
static_assert(offsetof(UCustomZoneSettingsColorPicker, _border0) == 0x02C0);
static_assert(offsetof(UCustomZoneSettingsColorPicker, _border1) == 0x02C8);
static_assert(offsetof(UCustomZoneSettingsColorPicker, _border2) == 0x02D0);
static_assert(offsetof(UCustomZoneSettingsColorPicker, _border3) == 0x02D8);
static_assert(offsetof(UCustomZoneSettingsColorPicker, _border4) == 0x02E0);
static_assert(offsetof(UCustomZoneSettingsColorPicker, _border5) == 0x02E8);
static_assert(offsetof(UCustomZoneSettingsColorPicker, _border6) == 0x02F0);
static_assert(offsetof(UCustomZoneSettingsColorPicker, _border7) == 0x02F8);
static_assert(offsetof(UCustomZoneSettingsConfiguration, _border) == 0x0298);
static_assert(offsetof(UCustomZoneSettingsConfiguration, _configurationName) == 0x02A0);
static_assert(offsetof(UCustomZoneSettingsConfiguration, _buttonRemove) == 0x02A8);
static_assert(offsetof(UCustomZoneSettingsConfiguration, _unhighlightedColor) == 0x02B0);
static_assert(offsetof(UCustomZoneSettingsConfiguration, _highlightedColor) == 0x02C0);
static_assert(offsetof(UCustomZoneSettingsConfigurationDetails, _name) == 0x0280);
static_assert(offsetof(UCustomZoneSettingsConfigurationDetails, _color) == 0x0288);
static_assert(offsetof(UCustomZoneSettingsConfigurationDetails, _handlingMethodSelectorContainer) == 0x0290);
static_assert(offsetof(UCustomZoneSettingsConfigurationDetails, _colors) == 0x0298);
static_assert(offsetof(UCustomZoneSettingsConfigurationDetails, _handlingMethodSelectorClass) == 0x02A8);
static_assert(offsetof(UCustomZoneSettingsConfigurationsList, _configurationCountDisplay) == 0x0298);
static_assert(offsetof(UCustomZoneSettingsConfigurationsList, _buttonAddConfiguration) == 0x02A0);
static_assert(offsetof(UCustomZoneSettingsConfigurationsList, _scrollBox) == 0x02A8);
static_assert(offsetof(UCustomZoneSettingsConfigurationsList, _configurationWidgetClass) == 0x02B0);
static_assert(offsetof(UCustomZoneSettingsDetailsDisplay, _displayBox) == 0x02C8);
static_assert(offsetof(UCustomZoneSettingsDetailsDisplay, _globalConfigurationDetailsWidgetClass) == 0x02D0);
static_assert(offsetof(UCustomZoneSettingsDetailsDisplay, _configurationDetailsWidgetClass) == 0x02D8);
static_assert(offsetof(UCustomZoneSettingsDetailsDisplay, _regionDetailsWidgetClass) == 0x02E0);
static_assert(offsetof(UCustomZoneSettingsDetailsDisplay, _globalConfigurationDetails) == 0x02E8);
static_assert(offsetof(UCustomZoneSettingsDetailsDisplay, _configurationDetails) == 0x02F0);
static_assert(offsetof(UCustomZoneSettingsDetailsDisplay, _regionDetails) == 0x02F8);
static_assert(offsetof(UCustomZoneSettingsEventDisplay, _eventNameText) == 0x0268);
static_assert(offsetof(UCustomZoneSettingsEventDisplay, _handlingMethodText) == 0x0270);
static_assert(offsetof(UCustomZoneSettingsEventDisplay, _customZoneData) == 0x0278);
static_assert(offsetof(UCustomZoneSettingsHandlingMethodSelector, _nameText) == 0x0280);
static_assert(offsetof(UCustomZoneSettingsHandlingMethodSelector, _buttonSkip) == 0x0288);
static_assert(offsetof(UCustomZoneSettingsHandlingMethodSelector, _buttonAllow) == 0x0290);
static_assert(offsetof(UCustomZoneSettingsHandlingMethodSelector, _buttonBlock) == 0x0298);
static_assert(offsetof(UCustomZoneSettingsHandlingMethodSelector, _customZoneData) == 0x02A0);
static_assert(offsetof(UCustomZoneSettingsHandlingMethodSelector, _tooltipClass) == 0x02A8);
static_assert(offsetof(UCustomZoneSettingsMap, _map) == 0x0280);
static_assert(offsetof(UCustomZoneSettingsMap, _infoLeft) == 0x0288);
static_assert(offsetof(UCustomZoneSettingsMap, _infoRight) == 0x0290);
static_assert(offsetof(UCustomZoneSettingsMap, _buttonAddCircleRegion) == 0x0298);
static_assert(offsetof(UCustomZoneSettingsMap, _buttonAddRectangleRegion) == 0x02A0);
static_assert(offsetof(UCustomZoneSettingsMap, _buttonRemoveRegion) == 0x02A8);
static_assert(offsetof(UCustomZoneSettingsMap, _buttonHighlightColor) == 0x02B0);
static_assert(offsetof(UCustomZoneSettingsMap, _shaderData) == 0x02C0);
static_assert(offsetof(UCustomZoneSettingsMap, _mapMaterial) == 0x02C8);
static_assert(offsetof(UCustomZoneSettingsMenu, _map) == 0x0280);
static_assert(offsetof(UCustomZoneSettingsMenu, _configurationsList) == 0x0288);
static_assert(offsetof(UCustomZoneSettingsMenu, _regionsList) == 0x0290);
static_assert(offsetof(UCustomZoneSettingsMenu, _detailsDisplay) == 0x0298);
static_assert(offsetof(UCustomZoneSettingsMenu, _applyNotification) == 0x02A0);
static_assert(offsetof(UCustomZoneSettingsMenu, _buttonBack) == 0x02A8);
static_assert(offsetof(UCustomZoneSettingsMenu, _buttonApply) == 0x02B0);
static_assert(offsetof(UCustomZoneSettingsMenu, _buttonReset) == 0x02B8);
static_assert(offsetof(UCustomZoneSettingsRegion, _mainBox) == 0x02C8);
static_assert(offsetof(UCustomZoneSettingsRegion, _border) == 0x02D0);
static_assert(offsetof(UCustomZoneSettingsRegion, _regionName) == 0x02D8);
static_assert(offsetof(UCustomZoneSettingsRegion, _regionData) == 0x02E0);
static_assert(offsetof(UCustomZoneSettingsRegion, _buttonIncreasePriority) == 0x02E8);
static_assert(offsetof(UCustomZoneSettingsRegion, _buttonDecreasePriority) == 0x02F0);
static_assert(offsetof(UCustomZoneSettingsRegion, _buttonRemove) == 0x02F8);
static_assert(offsetof(UCustomZoneSettingsRegion, _unhighlightedColor) == 0x0300);
static_assert(offsetof(UCustomZoneSettingsRegion, _highlightedColor) == 0x0310);
static_assert(offsetof(UCustomZoneSettingsRegion, _defaultZoneUnmodifiedUnhighlightedColor) == 0x0320);
static_assert(offsetof(UCustomZoneSettingsRegion, _defaultZoneUnmodifiedHighlightedColor) == 0x0330);
static_assert(offsetof(UCustomZoneSettingsRegion, _defaultZoneModifiedUnhighlightedColor) == 0x0340);
static_assert(offsetof(UCustomZoneSettingsRegion, _defaultZoneModifiedHighlightedColor) == 0x0350);
static_assert(offsetof(UCustomZoneSettingsRegion, _defaultZoneDeletedUnhighlightedColor) == 0x0360);
static_assert(offsetof(UCustomZoneSettingsRegion, _defaultZoneDeletedHighlightedColor) == 0x0370);
static_assert(offsetof(UCustomZoneSettingsRegion, _tooltipClass) == 0x0380);
static_assert(offsetof(UCustomZoneSettingsRegion, _unmodifiedToolTipText) == 0x0388);
static_assert(offsetof(UCustomZoneSettingsRegion, _modifiedToolTipText) == 0x03A0);
static_assert(offsetof(UCustomZoneSettingsRegion, _deletedToolTipText) == 0x03B8);
static_assert(offsetof(UCustomZoneSettingsRegionDetails, _name) == 0x02B8);
static_assert(offsetof(UCustomZoneSettingsRegionDetails, _buttonRestore) == 0x02C0);
static_assert(offsetof(UCustomZoneSettingsRegionDetails, _shape) == 0x02C8);
static_assert(offsetof(UCustomZoneSettingsRegionDetails, _locationX) == 0x02D0);
static_assert(offsetof(UCustomZoneSettingsRegionDetails, _locationY) == 0x02D8);
static_assert(offsetof(UCustomZoneSettingsRegionDetails, _textSize) == 0x02E0);
static_assert(offsetof(UCustomZoneSettingsRegionDetails, _sizeX) == 0x02E8);
static_assert(offsetof(UCustomZoneSettingsRegionDetails, _sizeY) == 0x02F0);
static_assert(offsetof(UCustomZoneSettingsRegionDetails, _textConfiguration) == 0x02F8);
static_assert(offsetof(UCustomZoneSettingsRegionDetails, _buttonOpenConfiguration) == 0x0300);
static_assert(offsetof(UCustomZoneSettingsRegionDetails, _buttonNextConfiguration) == 0x0308);
static_assert(offsetof(UCustomZoneSettingsRegionDetails, _buttonPreviousConfiguration) == 0x0310);
static_assert(offsetof(UCustomZoneSettingsRegionDetails, _eventDisplayContainer) == 0x0318);
static_assert(offsetof(UCustomZoneSettingsRegionDetails, _eventDisplayClass) == 0x0320);
static_assert(offsetof(UCustomZoneSettingsRegionsList, _regionCountDisplay) == 0x02C8);
static_assert(offsetof(UCustomZoneSettingsRegionsList, _buttonAddRegion) == 0x02D0);
static_assert(offsetof(UCustomZoneSettingsRegionsList, _scrollBox) == 0x02D8);
static_assert(offsetof(UCustomZoneSettingsRegionsList, _regionWidgetClass) == 0x02E0);
static_assert(offsetof(UCustomZoneSettingsToolTip, _toolTip) == 0x0268);
static_assert(offsetof(FVideoInfo, VideoUrl) == 0x0000);
static_assert(offsetof(UCutsceneWidget, _subtitlesDataTable) == 0x0298);
static_assert(offsetof(UCutsceneWidget, _overlaySkip) == 0x02A0);
static_assert(offsetof(UCutsceneWidget, _skipText) == 0x02A8);
static_assert(offsetof(UCutsceneWidget, _subtitleWidget) == 0x02B0);
static_assert(offsetof(UCutsceneWidget, _sizeBoxVideo) == 0x02B8);
static_assert(offsetof(UCutsceneWidget, _textureVideo) == 0x02C0);
static_assert(offsetof(UCutsceneWidget, _overlayVideoText) == 0x02C8);
static_assert(offsetof(UCutsceneWidget, _binkMediaPlayer) == 0x02D0);
static_assert(offsetof(UCutsceneWidget, _videos) == 0x02D8);
static_assert(offsetof(UCutsceneWidget, _showSkipTextAnimation) == 0x02F8);
static_assert(offsetof(UCutsceneWidget, _fadeOutSkipTextAnimation) == 0x0300);
static_assert(offsetof(FDamageTargetTypeMapping, Type) == 0x0000);
static_assert(offsetof(FDamageTargetTypeMapping, Classes) == 0x0008);
static_assert(offsetof(UDamageData, DamageResponseTag) == 0x0030);
static_assert(offsetof(UDamageData, GameEventTag) == 0x0038);
static_assert(offsetof(UDamageData, IgnoreForStatsTag) == 0x0040);
static_assert(offsetof(UDamageData, CauseHeadExplosionTag) == 0x0048);
static_assert(offsetof(UDamageData, ApplyBleedingOnlyTag) == 0x0050);
static_assert(offsetof(UDamageData, AIProjectileTag) == 0x0058);
static_assert(offsetof(UDamageData, WeaponDescTable) == 0x0060);
static_assert(offsetof(UDamageData, DamageTargetTypeMap) == 0x0068);
static_assert(offsetof(UDamageData, BurnDamagePerSecondVsTemperature) == 0x0080);
static_assert(offsetof(UDamageDirectionIndicator, Texture) == 0x0030);
static_assert(offsetof(ATrapItem, _buriableTrapItemComponent) == 0x09D8);
static_assert(offsetof(ATrapItem, _trapType) == 0x09E0);
static_assert(offsetof(ATrapItem, _refuelItemTag) == 0x09F8);
static_assert(offsetof(ATrapItem, _triggerForwardVector) == 0x0A00);
static_assert(offsetof(ATrapItem, _physicalDamageBoundsBox) == 0x0A14);
static_assert(offsetof(ATrapItem, _triggerVisualTransform) == 0x0A50);
static_assert(offsetof(ATrapItem, _minigameClass) == 0x0A80);
static_assert(offsetof(ATrapItem, _minigameToolTag) == 0x0A88);
static_assert(offsetof(ATrapItem, _currentTrigger) == 0x0AB4);
static_assert(offsetof(ATrapItem, _lastTriggerOwner) == 0x0AB8);
static_assert(offsetof(ADamagingTrapItem, _triggerSound) == 0x0AD8);
static_assert(offsetof(FProjectileImpulseMultiplier, ActorClass) == 0x0000);
static_assert(offsetof(FWeaponMalfunctionProbabilityCurves, ProbabilityCurve) == 0x0000);
static_assert(offsetof(FGameResourceMixingRule, Source) == 0x0000);
static_assert(offsetof(FGameResourceMixingRule, Destination) == 0x0008);
static_assert(offsetof(FGameResourceMixingRule, Result) == 0x0010);
static_assert(offsetof(FAbandonedBunkerAnnouncementSoundAndTime, Sound) == 0x0000);
static_assert(offsetof(UDataSingleton, ImpulseMultipliers) == 0x0028);
static_assert(offsetof(UDataSingleton, CrosshairIconUp) == 0x0038);
static_assert(offsetof(UDataSingleton, CrosshairIconDown) == 0x0050);
static_assert(offsetof(UDataSingleton, CrosshairIconLeft) == 0x0068);
static_assert(offsetof(UDataSingleton, CrosshairIconRight) == 0x0080);
static_assert(offsetof(UDataSingleton, CrosshairIconCenter) == 0x0098);
static_assert(offsetof(UDataSingleton, CrosshairIconCenterThrowing) == 0x00B0);
static_assert(offsetof(UDataSingleton, CrosshairBlockedIcon) == 0x00C8);
static_assert(offsetof(UDataSingleton, BowSpreadCircle) == 0x00E0);
static_assert(offsetof(UDataSingleton, SingleFireIcon) == 0x00F8);
static_assert(offsetof(UDataSingleton, AutoFireIcon) == 0x0100);
static_assert(offsetof(UDataSingleton, BurstFireIcon) == 0x0108);
static_assert(offsetof(UDataSingleton, WeaponSpreadData) == 0x0114);
static_assert(offsetof(UDataSingleton, WeaponViewKickData) == 0x02EC);
static_assert(offsetof(UDataSingleton, WeaponMalfunctionProbabilityCurves) == 0x03C8);
static_assert(offsetof(UDataSingleton, FOVFirstPersonMultiplierRange) == 0x078C);
static_assert(offsetof(UDataSingleton, FOVThirdPersonMultiplierRange) == 0x0794);
static_assert(offsetof(UDataSingleton, FOVFirstPersonDrivingMultiplierRange) == 0x079C);
static_assert(offsetof(UDataSingleton, FOVThirdPersonDrivingMultiplierRange) == 0x07A4);
static_assert(offsetof(UDataSingleton, DownTheSightsModeLerpCurve) == 0x07B0);
static_assert(offsetof(UDataSingleton, WeaponFOVParameterCollection) == 0x07B8);
static_assert(offsetof(UDataSingleton, LoadMagazineSpeedModifierSkillFactor) == 0x07C0);
static_assert(offsetof(UDataSingleton, LoadMagazineSpeedModifierDexterityFactor) == 0x07C8);
static_assert(offsetof(UDataSingleton, InteractIcon) == 0x07D0);
static_assert(offsetof(UDataSingleton, BondageIcon) == 0x07E8);
static_assert(offsetof(UDataSingleton, Widgets) == 0x0800);
static_assert(offsetof(UDataSingleton, PlaceablePrimaryMatValid) == 0x0808);
static_assert(offsetof(UDataSingleton, PlaceablePrimaryMatInvalid) == 0x0810);
static_assert(offsetof(UDataSingleton, PlaceablePrimaryMatFriendlyFlag) == 0x0818);
static_assert(offsetof(UDataSingleton, PlaceableOutlineMat) == 0x0820);
static_assert(offsetof(UDataSingleton, PlaceableDepthMat) == 0x0828);
static_assert(offsetof(UDataSingleton, PlaceableMaterialRadiusSphere) == 0x0830);
static_assert(offsetof(UDataSingleton, ItemPlacementMatValid) == 0x0838);
static_assert(offsetof(UDataSingleton, ItemPlacementMatInvalid) == 0x0840);
static_assert(offsetof(UDataSingleton, WidgetMaterial) == 0x0848);
static_assert(offsetof(UDataSingleton, ToolBoxItemTag) == 0x0850);
static_assert(offsetof(UDataSingleton, MushroomItemTag) == 0x0858);
static_assert(offsetof(UDataSingleton, AlcoholItemTag) == 0x0860);
static_assert(offsetof(UDataSingleton, SoapItemTag) == 0x0868);
static_assert(offsetof(UDataSingleton, AnimalSkinItemClass) == 0x0870);
static_assert(offsetof(UDataSingleton, TrapData) == 0x0898);
static_assert(offsetof(UDataSingleton, DogTagItemClass) == 0x08A0);
static_assert(offsetof(UDataSingleton, ItemGeneralParametersDataTable) == 0x08C8);
static_assert(offsetof(UDataSingleton, ItemSpawningParametersTable) == 0x08D0);
static_assert(offsetof(UDataSingleton, ItemObstructionCollisionChannel) == 0x08F8);
static_assert(offsetof(UDataSingleton, VoiceSoundClass) == 0x0950);
static_assert(offsetof(UDataSingleton, NetworkDataIdAsset) == 0x0958);
static_assert(offsetof(UDataSingleton, DecontaminateData) == 0x0960);
static_assert(offsetof(UDataSingleton, BuryData) == 0x0968);
static_assert(offsetof(UDataSingleton, SquadEmblemData) == 0x0970);
static_assert(offsetof(UDataSingleton, ItemTetrisMaterial) == 0x0978);
static_assert(offsetof(UDataSingleton, PhysicalSurfaceEffectsData) == 0x0980);
static_assert(offsetof(UDataSingleton, ChestLockedIcon) == 0x0988);
static_assert(offsetof(UDataSingleton, ChestUnlockedIcon) == 0x0990);
static_assert(offsetof(UDataSingleton, ChestLockingSound) == 0x0998);
static_assert(offsetof(UDataSingleton, UIData) == 0x09A0);
static_assert(offsetof(UDataSingleton, WaterSplashParticleSystem) == 0x09A8);
static_assert(offsetof(UDataSingleton, WaterSplashAudioEvent) == 0x09B0);
static_assert(offsetof(UDataSingleton, DialogueData) == 0x09B8);
static_assert(offsetof(UDataSingleton, SurfaceHardnessData) == 0x09C0);
static_assert(offsetof(UDataSingleton, DamageData) == 0x09C8);
static_assert(offsetof(UDataSingleton, DefaultDamageCustomizationClass) == 0x09D0);
static_assert(offsetof(UDataSingleton, LandingDamageCustomizationClass) == 0x09D8);
static_assert(offsetof(UDataSingleton, BackpackCharacterMeshClass) == 0x09E0);
static_assert(offsetof(UDataSingleton, RainWaterResourceClass) == 0x0A08);
static_assert(offsetof(UDataSingleton, GameResourceMixingRules) == 0x0A10);
static_assert(offsetof(UDataSingleton, WaterSurfaceType) == 0x0A20);
static_assert(offsetof(UDataSingleton, TransactionCompleteSound) == 0x0A28);
static_assert(offsetof(UDataSingleton, GenderEnumVsGenderTagMapping) == 0x0B18);
static_assert(offsetof(UDataSingleton, SurgeryRoomClass) == 0x0B30);
static_assert(offsetof(UDataSingleton, BarberShopClass) == 0x0B58);
static_assert(offsetof(UDataSingleton, DefaultPrisonerCommonDataLazy) == 0x0B80);
static_assert(offsetof(UDataSingleton, PrisonerAppearanceSet) == 0x0BB0);
static_assert(offsetof(UDataSingleton, CookingCommonData) == 0x0BB8);
static_assert(offsetof(UDataSingleton, CookingRecipeRegistry) == 0x0BC0);
static_assert(offsetof(UDataSingleton, SprayCanAudio) == 0x0BC8);
static_assert(offsetof(UDataSingleton, PaintJobColorsData) == 0x0BD0);
static_assert(offsetof(UDataSingleton, VehiclePaintjobCommonData) == 0x0BD8);
static_assert(offsetof(UDataSingleton, WeaponPaintjobCommonData) == 0x0BE0);
static_assert(offsetof(UDataSingleton, TurretPaintjobCommonData) == 0x0BE8);
static_assert(offsetof(UDataSingleton, QuestCommonData) == 0x0BF0);
static_assert(offsetof(UDataSingleton, ArmedNPCAimCorrectionsData) == 0x0BF8);
static_assert(offsetof(UDataSingleton, CookingUtilityUIDataTable) == 0x0C00);
static_assert(offsetof(UDataSingleton, FamePointSettings) == 0x0C28);
static_assert(offsetof(UDataSingleton, AlwaysFunctioningVehicles) == 0x0C30);
static_assert(offsetof(UDataSingleton, VehicleSpawnGroupsIgnoredByServerSettings) == 0x0C40);
static_assert(offsetof(UDataSingleton, DefaultEntitySystemSettings) == 0x0C60);
static_assert(offsetof(UDataSingleton, LightFireTag) == 0x0C68);
static_assert(offsetof(UDataSingleton, AbandonedBunkerAnnouncementSoundsBeforeClosing) == 0x0C70);
static_assert(offsetof(UDataSingleton, FoliageDestructionParticleSystem) == 0x0C80);
static_assert(offsetof(UDataSingleton, ResourceSpotLightAnimatorClass) == 0x0C90);
static_assert(offsetof(UDataSingleton, ResourcePointLightAnimatorClass) == 0x0C98);
static_assert(offsetof(UDataSingleton, _cookingUtilityTagToUIDataTable) == 0x0CF8);
static_assert(offsetof(UDataSingleton, _teamAttitudes) == 0x0D18);
static_assert(offsetof(UDataSingleton, _economyTradeablesDataTable) == 0x0ED8);
static_assert(offsetof(UDataSingleton, _economySpecificData) == 0x0EE0);
static_assert(offsetof(UDataSingleton, _survivalTipsDataTable) == 0x0EE8);
static_assert(offsetof(ADcxBike, _centerOfMassOffset) == 0x2018);
static_assert(offsetof(ADcxBike, _centerOfMassOffsetNotMounted) == 0x2024);
static_assert(offsetof(ADcxBicycle, _strengthChangeRateFactorVsVehicleSpeedKmh) == 0x2070);
static_assert(offsetof(ADcxBicycle, _strengthChangeRateFactorVsGroundSlope) == 0x2078);
static_assert(offsetof(ADcxBicycle, _constitutionChangeRateFactorVsVehicleSpeedKmh) == 0x2088);
static_assert(offsetof(ADcxBicycle, _constitutionChangeRateFactorVsGroundSlope) == 0x2090);
static_assert(offsetof(ADcxBicycle, _runningSkillExperienceGainRateFactorVsVehicleSpeedKmh) == 0x2098);
static_assert(offsetof(ADcxBicycle, _runningSkillExperienceGainRateFactorVsGroundSlope) == 0x20A0);
static_assert(offsetof(ADcxBicycle, _enduranceSkillExperienceGainRateFactorVsVehicleSpeedKmh) == 0x20B0);
static_assert(offsetof(ADcxBicycle, _enduranceSkillExperienceGainRateFactorVsGroundSlope) == 0x20B8);
static_assert(offsetof(ADcxBicycle, _actionDifficultyFactorVsVehicleSpeedKmh) == 0x20C8);
static_assert(offsetof(ADcxBicycle, _actionDifficultyFactorVsGroundSlope) == 0x20D0);
static_assert(offsetof(ADcxBicycle, _desiredPaceToAppliedThrottleMapping) == 0x20E0);
static_assert(offsetof(UDcxBikeAnimInstance, FrontWheelRotator) == 0x0A68);
static_assert(offsetof(UDcxBikeAnimInstance, RearWheelRotator) == 0x0A74);
static_assert(offsetof(UDcxBikeAnimInstance, TransmissionRotator) == 0x0A80);
static_assert(offsetof(UDcxBikeAnimInstance, MeshLocation) == 0x0A94);
static_assert(offsetof(UDcxBikeDriverMountSlot, DriverLHandleSocketName) == 0x018C);
static_assert(offsetof(UDcxBikeDriverMountSlot, DriverRHandleSocketName) == 0x0194);
static_assert(offsetof(UDcxBikeDriverMountSlot, DriverReverseSeatHandSocketName) == 0x019C);
static_assert(offsetof(UDcxBikeDriverMountSlot, _forwardIdleAnimation) == 0x01A8);
static_assert(offsetof(UDcxBikeDriverMountSlot, _forwardIdleAnimationFP) == 0x01B0);
static_assert(offsetof(UDcxBikeDriverMountSlot, _forwardSteeringAnimation) == 0x01B8);
static_assert(offsetof(UDcxBikeDriverMountSlot, _forwardSteeringAnimationFP) == 0x01C0);
static_assert(offsetof(UDcxBikeDriverMountSlot, _reverseIdleAnimation) == 0x01C8);
static_assert(offsetof(UDcxBikeDriverMountSlot, _reverseSteeringAnimation) == 0x01D0);
static_assert(offsetof(UDcxBikeDriverMountSlot, _reverseSteeringAnimationFP) == 0x01D8);
static_assert(offsetof(UDcxBikeDriverMountSlot, _standUpStartAnimation) == 0x01E0);
static_assert(offsetof(UDcxBikeDriverMountSlot, _standUpLoopAnimation) == 0x01E8);
static_assert(offsetof(UDcxBikeDriverMountSlot, _standUpEndAnimation) == 0x01F0);
static_assert(offsetof(UDcxBikeDriverMountSlot, _startEngineStartAnimation) == 0x01F8);
static_assert(offsetof(UDcxBikeDriverMountSlot, _startEngineLoopAnimation) == 0x0200);
static_assert(offsetof(UDcxBikeDriverMountSlot, _startEngineLongLoopAnimation) == 0x0208);
static_assert(offsetof(UDcxBikeDriverMountSlot, _startEngineEndAnimation) == 0x0210);
static_assert(offsetof(UDcxBikeDriverMountSlot, _turnAimOffset) == 0x0218);
static_assert(offsetof(FDcxWheeledVehicleFlatTireWheelConfiguration, FlatTireWheelData) == 0x0000);
static_assert(offsetof(FDcxWheeledVehicleFlatTireWheelConfiguration, FlatTire) == 0x0040);
static_assert(offsetof(FDcxWheeledVehicleFlatTireWheelConfiguration, OriginalTire) == 0x0048);
static_assert(offsetof(UDcxWheeledVehicleDriveComponent4W, _maxArtificialBrakingForceVsSpeedKph) == 0x0450);
static_assert(offsetof(UDcxWheeledVehicleDriveComponent4W, _flatTireWheelConfigurations) == 0x04D8);
static_assert(offsetof(FDcxWheeledVehicleTireEffectProperties, TireLocalOffset) == 0x0000);
static_assert(offsetof(UDcxWheeledVehicleEffectsComponent, _chassisStartedMovingAudioEvent) == 0x00B8);
static_assert(offsetof(UDcxWheeledVehicleEffectsComponent, _chassisStoppedMovingAudioEvent) == 0x00C0);
static_assert(offsetof(UDcxWheeledVehicleEffectsComponent, _tireToSurfaceAudioData) == 0x00D0);
static_assert(offsetof(UDcxWheeledVehicleEffectsComponent, _tireEffectProperties) == 0x0108);
static_assert(offsetof(UDcxWheeledVehicleTire, ParticleTrail) == 0x00E0);
static_assert(offsetof(UDcxWheeledVehicleTire, ParticleWave) == 0x00F4);
static_assert(offsetof(ADeathmatchGameEvent, _deathmatchParameters) == 0x0588);
static_assert(offsetof(ADeathmatchLocationMarker, DeathmatchParameters) == 0x0418);
static_assert(offsetof(ADeathmatchLocationMarker, FocusOffset) == 0x042C);
static_assert(offsetof(UDecontaminateData, SkillToIncrease) == 0x0030);
static_assert(offsetof(UDedicatedServerResponse, _dbConnection) == 0x0058);
static_assert(offsetof(ADeer2, _maleSkeletalMesh) == 0x0B60);
static_assert(offsetof(ADeer2, _antlerMeshes) == 0x0B68);
static_assert(offsetof(ADeer2, _antlers) == 0x0B78);
static_assert(offsetof(ADeer2, _maleChoppingRecipeDataAsset) == 0x0B88);
static_assert(offsetof(FPrisonerInjuryTypeLikelihoods, Name) == 0x0000);
static_assert(offsetof(UDefaultDamageCustomization, PrisonerInjuryTypeLikelihoodsPerBodyPart) == 0x0028);
static_assert(offsetof(UDefaultDamageCustomization, PrisonerBleedingSeverityEnergyThreshold) == 0x0038);
static_assert(offsetof(UDefusingCuttingToolItemTag, SkeletalMesh) == 0x0030);
static_assert(offsetof(UDefusingCuttingToolItemTag, Montage) == 0x0038);
static_assert(offsetof(FDemolitionSkillParametersPerSkillLevel, ParametersPerTrapType) == 0x0018);
static_assert(offsetof(UDemolitionSkill, NoSkillExperienceAwards) == 0x00B0);
static_assert(offsetof(UDemolitionSkill, BasicSkillExperienceAwards) == 0x00D0);
static_assert(offsetof(UDemolitionSkill, MediumSkillExperienceAwards) == 0x00F0);
static_assert(offsetof(UDemolitionSkill, AdvancedSkillExperienceAwards) == 0x0110);
static_assert(offsetof(UDemolitionSkill, AboveAdvancedSkillExperienceAwards) == 0x0130);
static_assert(offsetof(UDemolitionSkill, NoSkillParameters) == 0x0150);
static_assert(offsetof(UDemolitionSkill, BasicSkillParameters) == 0x01B8);
static_assert(offsetof(UDemolitionSkill, MediumSkillParameters) == 0x0220);
static_assert(offsetof(UDemolitionSkill, AdvancedSkillParameters) == 0x0288);
static_assert(offsetof(UDemolitionSkill, AboveAdvancedSkillParameters) == 0x02F0);
static_assert(offsetof(UDepotItemUserData, OwnerUserProfileId) == 0x0028);
static_assert(offsetof(UDepotItemUserData, TraderPersistentId) == 0x0030);
static_assert(offsetof(ADepotItem, _assignedTradePost) == 0x0BB0);
static_assert(offsetof(FTooltipPanelData, ItemClass) == 0x0000);
static_assert(offsetof(FTooltipPanelData, WidgetClass) == 0x0008);
static_assert(offsetof(FTooltipPanelData, PanelType) == 0x0010);
static_assert(offsetof(UDerivedWidgetsData, AvailableItem) == 0x0030);
static_assert(offsetof(UDerivedWidgetsData, WorldCraftingMarker) == 0x0038);
static_assert(offsetof(UDerivedWidgetsData, WorldQuestMarker) == 0x0040);
static_assert(offsetof(UDerivedWidgetsData, LoadingScreen) == 0x0048);
static_assert(offsetof(UDerivedWidgetsData, ItemWidgetClass) == 0x0050);
static_assert(offsetof(UDerivedWidgetsData, InventorySlotWidgetClass) == 0x0058);
static_assert(offsetof(UDerivedWidgetsData, WarningWidgetClass) == 0x0060);
static_assert(offsetof(UDerivedWidgetsData, HudWidgetClass) == 0x0068);
static_assert(offsetof(UDerivedWidgetsData, QuestTrackingWidgetClass) == 0x0070);
static_assert(offsetof(UDerivedWidgetsData, LoadingWidgetClass) == 0x0078);
static_assert(offsetof(UDerivedWidgetsData, LoadingIconWidgetClass) == 0x0080);
static_assert(offsetof(UDerivedWidgetsData, SpawnScreenWidgetClass) == 0x0088);
static_assert(offsetof(UDerivedWidgetsData, WaypointScreenWidgetClass) == 0x0090);
static_assert(offsetof(UDerivedWidgetsData, ActionProgressWidgetClass) == 0x0098);
static_assert(offsetof(UDerivedWidgetsData, TeamInvitationWidgetClass) == 0x00A0);
static_assert(offsetof(UDerivedWidgetsData, CraftingComponentWidgetClass) == 0x00A8);
static_assert(offsetof(UDerivedWidgetsData, EmptySlotWidgetClass) == 0x00B0);
static_assert(offsetof(UDerivedWidgetsData, PreviousNextSwitchWidgetClass) == 0x00B8);
static_assert(offsetof(UDerivedWidgetsData, QuickAccessItemWidget) == 0x00C0);
static_assert(offsetof(UDerivedWidgetsData, ChangeTextWidgetClass) == 0x00C8);
static_assert(offsetof(UDerivedWidgetsData, ItemStatusWidgetClass) == 0x00D0);
static_assert(offsetof(UDerivedWidgetsData, HealthWidgetClass) == 0x00D8);
static_assert(offsetof(UDerivedWidgetsData, RaidProtectionSelectionWidgetClass) == 0x00E0);
static_assert(offsetof(UDerivedWidgetsData, GameEventCardWidgetClass) == 0x00E8);
static_assert(offsetof(UDerivedWidgetsData, GameEventScoreboardWidgetClass) == 0x00F0);
static_assert(offsetof(UDerivedWidgetsData, GameEventMiniScoreboardWidgetClass) == 0x00F8);
static_assert(offsetof(UDerivedWidgetsData, TournamentScoreboardWidgetClass) == 0x0100);
static_assert(offsetof(UDerivedWidgetsData, CircularMenuWidgetClass) == 0x0108);
static_assert(offsetof(UDerivedWidgetsData, CircularMenuSegmentWidgetClass) == 0x0110);
static_assert(offsetof(UDerivedWidgetsData, LockpickingWidgetClass) == 0x0118);
static_assert(offsetof(UDerivedWidgetsData, DoorUpgradeWidgetClass) == 0x0120);
static_assert(offsetof(UDerivedWidgetsData, InventoryContainerWidget2Test) == 0x0128);
static_assert(offsetof(UDerivedWidgetsData, InventoryItemWidget2Test) == 0x0130);
static_assert(offsetof(UDerivedWidgetsData, ItemInventoryWidget2) == 0x0138);
static_assert(offsetof(UDerivedWidgetsData, InventoryPanelSideLayerWidget) == 0x0140);
static_assert(offsetof(UDerivedWidgetsData, ItemSplittingWidgetClass) == 0x0148);
static_assert(offsetof(UDerivedWidgetsData, Widgets) == 0x0150);
static_assert(offsetof(UDerivedWidgetsData, StatisticsListRow) == 0x01A0);
static_assert(offsetof(UDerivedWidgetsData, ItemTooltipPanels) == 0x01A8);
static_assert(offsetof(UDerivedWidgetsData, MalfunctionsContainerClass) == 0x01B8);
static_assert(offsetof(UDerivedWidgetsData, WeaponAmmoCountContainerClass) == 0x01C0);
static_assert(offsetof(UDerivedWidgetsData, PlaceableElementWidgetClass) == 0x01C8);
static_assert(offsetof(FWheelData, WheelMesh) == 0x0008);
static_assert(offsetof(ADialLockMinigameBase, _lockBody) == 0x0340);
static_assert(offsetof(ADialLockMinigameBase, _lockClamp) == 0x0348);
static_assert(offsetof(ADialLockMinigameBase, _wheels) == 0x0358);
static_assert(offsetof(ADialLockMinigameBase, _wheelTurnedAudioEvent) == 0x0398);
static_assert(offsetof(ADialLockMinigame, _incorrectCombinationAudioEvent) == 0x03A0);
static_assert(offsetof(ADialLockMinigame, _unlockedAudioEvent) == 0x03A8);
static_assert(offsetof(ADialLockMinigame, _protectionParticlesTransform) == 0x03B0);
static_assert(offsetof(ULockpickingMinigameConfiguration, LockData) == 0x0058);
static_assert(offsetof(UDialLockWidget, _onSuccess) == 0x0280);
static_assert(offsetof(UDialLockWidget, _onFailure) == 0x0288);
static_assert(offsetof(UDialLockWidget, _showThrobber) == 0x0290);
static_assert(offsetof(UDialLockWidget, _hideThrobber) == 0x0298);
static_assert(offsetof(FTabButtonStyle, Size) == 0x0000);
static_assert(offsetof(FTabButtonStyle, HorizontalAlignment) == 0x0008);
static_assert(offsetof(FTabButtonStyle, VerticalAlignment) == 0x0009);
static_assert(offsetof(FTabButtonStyle, ButtonStyle) == 0x0010);
static_assert(offsetof(FTabTextStyle, Padding) == 0x0000);
static_assert(offsetof(FTabTextStyle, HorizontalAlignment) == 0x0010);
static_assert(offsetof(FTabTextStyle, VerticalAlignment) == 0x0011);
static_assert(offsetof(FTabTextStyle, Font) == 0x0018);
static_assert(offsetof(FTabTextStyle, Color) == 0x0070);
static_assert(offsetof(FTabTextStyle, ShadowOffset) == 0x0080);
static_assert(offsetof(FTabTextStyle, ShadowColorAndOpacity) == 0x0088);
static_assert(offsetof(UDialogButton, _button) == 0x02C0);
static_assert(offsetof(UDialogButton, _text) == 0x02C8);
static_assert(offsetof(UDialogButton, _sizeBox) == 0x02D0);
static_assert(offsetof(UDialogButton, _initialTitle) == 0x02D8);
static_assert(offsetof(UDialogButton, _selectedButtonStyle) == 0x02F0);
static_assert(offsetof(UDialogButton, _deselectedButtonStyle) == 0x0578);
static_assert(offsetof(UDialogButton, _selectedTextStyle) == 0x0800);
static_assert(offsetof(UDialogButton, _deselectedTextStyle) == 0x0898);
static_assert(offsetof(FDialogueSurvivalTipData, SurvivalTipName) == 0x0000);
static_assert(offsetof(FDialogueInfo, DialogueType) == 0x0000);
static_assert(offsetof(FDialogueInfo, VoiceOver) == 0x0008);
static_assert(offsetof(FDialogueInfo, Text) == 0x0010);
static_assert(offsetof(FDialogueInfo, SurvivalTips) == 0x0028);
static_assert(offsetof(FDialogueInfoContainer, DialogueInfos) == 0x0000);
static_assert(offsetof(FDialogueInfoContainer, NextDialogueName) == 0x0010);
static_assert(offsetof(UDialogueData, GenericDialogues) == 0x0030);
static_assert(offsetof(UDialogueData, TaskDialogues) == 0x0080);
static_assert(offsetof(UDialogueSystemContainerWidget, _showAvatarAnimation) == 0x0268);
static_assert(offsetof(UDialogueSystemContainerWidget, _hideAvatarAnimation) == 0x0270);
static_assert(offsetof(UDialogueSystemContainerWidget, _subtitleWidget) == 0x0278);
static_assert(offsetof(UDialogueSystemContainerWidget, _avatarImageOverlay) == 0x0280);
static_assert(offsetof(UDialPadButtonAssetData, ButtonTag) == 0x0028);
static_assert(offsetof(UDialPadButtonAssetData, ButtonType) == 0x0030);
static_assert(offsetof(UDialPadButtonAssetData, ButtonInput) == 0x0038);
static_assert(offsetof(UDialPadButtonAssetData, ReleasedRelativeTransform) == 0x0050);
static_assert(offsetof(UDialPadButtonAssetData, PressedRelativeTransform) == 0x0080);
static_assert(offsetof(UDialPadButtonAssetData, ToggleAudio) == 0x00B8);
static_assert(offsetof(UDialPadButtonAssetData, PressedEmissiveColor) == 0x00C0);
static_assert(offsetof(UDialPadButtonAssetData, ReleasedEmissiveColor) == 0x00D0);
static_assert(offsetof(UDialPadButtonAssetData, DefaultButtonMaterial) == 0x00E0);
static_assert(offsetof(UDialPadButtonAssetData, WornButtonMaterial) == 0x00E8);
static_assert(offsetof(ADialPadMinigame, _zoomStartLocation) == 0x0340);
static_assert(offsetof(ADialPadMinigame, _zoomEndLocation) == 0x034C);
static_assert(offsetof(ADialPadMinigame, _zoomCurve) == 0x0358);
static_assert(offsetof(ADialPadMinigame, _fadeCurve) == 0x0360);
static_assert(offsetof(ADialPadMinigame, _deactivatedColor) == 0x0368);
static_assert(offsetof(ADialPadMinigame, _activatedColor) == 0x0378);
static_assert(offsetof(ADialPadMinigame, _neutralColor) == 0x0388);
static_assert(offsetof(ADialPadMinigame, _buttonPressedAudioEvent) == 0x03A0);
static_assert(offsetof(ADialPadMinigame, _correctCodeAudioEvent) == 0x03A8);
static_assert(offsetof(ADialPadMinigame, _incorrectCodeAudioEvent) == 0x03B0);
static_assert(offsetof(UDialPadWidget, _screenText) == 0x0280);
static_assert(offsetof(UDialPadWidget, _timerText) == 0x0288);
static_assert(offsetof(UDiegeticLockState, LockedColor) == 0x0268);
static_assert(offsetof(UDiegeticLockState, UnlockedColor) == 0x0290);
static_assert(offsetof(UDiegeticLockState, _lockState) == 0x02B8);
static_assert(offsetof(ADistantLevel, _previewMeshComponent) == 0x0220);
static_assert(offsetof(ADistantLevel, _streamingLevelName) == 0x0228);
static_assert(offsetof(ADistantLevel, _meshStreamingBehavior) == 0x0238);
static_assert(offsetof(ADistantLevel, _meshBounds) == 0x0244);
static_assert(offsetof(ADistantLevel, _collisionMesh) == 0x0260);
static_assert(offsetof(FDistantLevelDescription, Name) == 0x0000);
static_assert(offsetof(FDistantLevelDescription, Transform) == 0x0010);
static_assert(offsetof(FDistantLevelDescription, MeshStreamingBehavior) == 0x0040);
static_assert(offsetof(FDistantLevelDescription, MeshBounds) == 0x004C);
static_assert(offsetof(FDistantLevelDescription, CollisionMesh) == 0x0068);
static_assert(offsetof(FRecentlyUsedDistantLevelStaticMesh, StaticMesh) == 0x0000);
static_assert(offsetof(FRecentlyUsedDistantLevelStaticMeshLODs, MeshLODs) == 0x0010);
static_assert(offsetof(ADistantLevelManager, _rootComponent) == 0x0220);
static_assert(offsetof(ADistantLevelManager, _distantLevelDescriptions) == 0x0240);
static_assert(offsetof(ADistantLevelManager, _recentlyUsedMesh) == 0x0258);
static_assert(offsetof(ATrader, _traderPersonalityDataAsset) == 0x09B8);
static_assert(offsetof(ADogTagItem, _userProfileId) == 0x09A0);
static_assert(offsetof(ADogTagItem, _userProfileName) == 0x09A8);
static_assert(offsetof(ADogTagItem, _expirableItemComponent) == 0x09C0);
static_assert(offsetof(FDoorEntityUpgradeLock, Class) == 0x0008);
static_assert(offsetof(FDoorEntityUpgradeLock, LockData) == 0x0030);
static_assert(offsetof(FDoorEntityUpgradeAttachment, Class) == 0x0008);
static_assert(offsetof(FDoorEntityUpgradeAttachment, AttachedEntityId) == 0x0030);
static_assert(offsetof(FDoorEntityRepData, OwningUserProfileId) == 0x0000);
static_assert(offsetof(FDoorEntityRepData, BaseElementDoorId) == 0x0008);
static_assert(offsetof(FDoorEntityRepData, AccessLevel) == 0x0010);
static_assert(offsetof(FDoorEntityRepData, Locks) == 0x0018);
static_assert(offsetof(FDoorEntityRepData, Attachments) == 0x0028);
static_assert(offsetof(FDoorRepData, StateFlags) == 0x0001);
static_assert(offsetof(FDoorRepData, EntityId) == 0x0008);
static_assert(offsetof(FDoorRepData, EntityRepData) == 0x0010);
static_assert(offsetof(ADoor, ControlName) == 0x0240);
static_assert(offsetof(ADoor, Mesh) == 0x0248);
static_assert(offsetof(ADoor, _doorType) == 0x02D0);
static_assert(offsetof(ADoor, _rootComponent) == 0x02D8);
static_assert(offsetof(ADoor, _openStateNavigationControl) == 0x0304);
static_assert(offsetof(ADoor, _openingSoundCue) == 0x0308);
static_assert(offsetof(ADoor, _violentOpeningSoundCue) == 0x0310);
static_assert(offsetof(ADoor, _openedSoundCue) == 0x0318);
static_assert(offsetof(ADoor, _closingSoundCue) == 0x0320);
static_assert(offsetof(ADoor, _closedSoundCue) == 0x0328);
static_assert(offsetof(ADoor, _doorUnlockData) == 0x0338);
static_assert(offsetof(ADoor, _priceCategory) == 0x0378);
static_assert(offsetof(ADoor, _unlockTransformInside) == 0x0380);
static_assert(offsetof(ADoor, _unlockTransformOutside) == 0x03B0);
static_assert(offsetof(ADoor, _originalUpgradeItemsClasses) == 0x03E8);
static_assert(offsetof(ADoor, _upgradeWidget) == 0x0418);
static_assert(offsetof(ADoor, _doorRepData) == 0x0420);
static_assert(offsetof(ADoor, _relevantLockabilityServerSettings) == 0x0478);
static_assert(offsetof(ADoor, _attachedItems) == 0x04C8);
static_assert(offsetof(ADoor, _leftNavLinkPoint) == 0x04F4);
static_assert(offsetof(ADoor, _rightNavLinkPoint) == 0x0500);
static_assert(offsetof(ADoor, _navLinkDirection) == 0x050C);
static_assert(offsetof(ADoor, _navSupportedAgents) == 0x051C);
static_assert(offsetof(ADoor, _doorNavArea) == 0x0528);
static_assert(offsetof(ADoor, _actorPaintParams) == 0x0548);
static_assert(offsetof(UDoorEntitySave, BaseElementDoorId) == 0x0028);
static_assert(offsetof(UDoorEntitySave, OwningUserProfileId) == 0x0030);
static_assert(offsetof(UDoorEntitySave, AccessLevel) == 0x0038);
static_assert(offsetof(UDoorEntitySave, Locks) == 0x0040);
static_assert(offsetof(UDoorEntitySave, Attachments) == 0x0050);
static_assert(offsetof(FDoorUnlockDataDescription, DoorUnlockData) == 0x0000);
static_assert(offsetof(FDoorUnlockDataCollection, Data) == 0x0000);
static_assert(offsetof(UDoorLockingRegistry, _doorUnlockDataByType) == 0x00B0);
static_assert(offsetof(UDoorUnlockData, Type) == 0x0028);
static_assert(offsetof(UDoorUnlockData, DescriptionText) == 0x0030);
static_assert(offsetof(UDoorUnlockData, Description) == 0x0048);
static_assert(offsetof(UDoorUnlockItemComponent, _unlockDataType) == 0x00E0);
static_assert(offsetof(UDoorUnlockItemComponent, _doorUnlockData) == 0x00E8);
static_assert(offsetof(UUpgradeSlotWidget, _itemIcon) == 0x0268);
static_assert(offsetof(UUpgradeSlotWidget, _gridSymbol) == 0x0270);
static_assert(offsetof(UUpgradeSlotWidget, _backgroundImage) == 0x0278);
static_assert(offsetof(UUpgradeSlotWidget, _defaultImage) == 0x0280);
static_assert(offsetof(UUpgradeSlotWidget, _regularColour) == 0x0288);
static_assert(offsetof(UUpgradeSlotWidget, _dropUnavailableColour) == 0x0298);
static_assert(offsetof(UUpgradeSlotWidget, _dropAvailableColour) == 0x02A8);
static_assert(offsetof(UUpgradeSlotWidget, _slotType) == 0x02B8);
static_assert(offsetof(UUpgradeSlotWidget, _buyableUpgrades) == 0x02C8);
static_assert(offsetof(UBCUUpgradeSlotWidget, _connectedBackgroundColor) == 0x02E8);
static_assert(offsetof(UBCUUpgradeSlotWidget, _connectedIconTexture) == 0x02F8);
static_assert(offsetof(UBCUUpgradeSlotWidget, _disconnectedIconTexture) == 0x0380);
static_assert(offsetof(UDoorUpgradeWidget, _lockSlotsBox) == 0x0340);
static_assert(offsetof(UDoorUpgradeWidget, _protectionSlotsBox) == 0x0348);
static_assert(offsetof(UDoorUpgradeWidget, _sensorSlotsBox) == 0x0350);
static_assert(offsetof(UDoorUpgradeWidget, _bcuLockSlotBox) == 0x0358);
static_assert(offsetof(UDoorUpgradeWidget, _door) == 0x0360);
static_assert(offsetof(ADoubleDoor, Mesh1) == 0x0590);
static_assert(offsetof(ADoubleRegularDoorStatic, _openRotation0) == 0x0598);
static_assert(offsetof(ADoubleRegularDoorStatic, _openRotation1) == 0x05A4);
static_assert(offsetof(ADoubleRegularDoorStatic, _closedRotation0) == 0x05B0);
static_assert(offsetof(ADoubleRegularDoorStatic, _closedRotation1) == 0x05BC);
static_assert(offsetof(ADoubleSlidingDoorStatic, ClosedPositionComponent0) == 0x0598);
static_assert(offsetof(ADoubleSlidingDoorStatic, ClosedPositionComponent1) == 0x05A0);
static_assert(offsetof(ADoubleSlidingDoorStatic, OpenPositionComponent0) == 0x05A8);
static_assert(offsetof(ADoubleSlidingDoorStatic, OpenPositionComponent1) == 0x05B0);
static_assert(offsetof(ADrinkItem, _gameResourceContainer) == 0x0A48);
static_assert(offsetof(UDrinkWaterAssetData, ResourceType) == 0x0030);
static_assert(offsetof(UDrinkWaterAssetData, StartDrinkingAudioEvent) == 0x0040);
static_assert(offsetof(UDrinkWaterAssetData, StopDrinkingAudioEvent) == 0x0048);
static_assert(offsetof(FDrivingSkillParametersPerSkillLevel, EngineHandlingParameters) == 0x002C);
static_assert(offsetof(FDrivingSkillParametersPerSkillLevel, GearboxHandlingParameters) == 0x0034);
static_assert(offsetof(FDrivingSkillParametersPerSkillLevel, EngineStallingByAccelerationParameters) == 0x0040);
static_assert(offsetof(FDrivingSkillParametersPerSkillLevel, EngineStallingByUpShiftParameters) == 0x0080);
static_assert(offsetof(FDrivingSkillParametersPerSkillLevel, EngineStallingWhenStartingViaMotion) == 0x00C0);
static_assert(offsetof(UDrivingSkill, NoSkillExperienceAwards) == 0x00B0);
static_assert(offsetof(UDrivingSkill, BasicSkillExperienceAwards) == 0x00B8);
static_assert(offsetof(UDrivingSkill, MediumSkillExperienceAwards) == 0x00C0);
static_assert(offsetof(UDrivingSkill, AdvancedSkillExperienceAwards) == 0x00C8);
static_assert(offsetof(UDrivingSkill, AboveAdvancedSkillExperienceAwards) == 0x00D0);
static_assert(offsetof(UDrivingSkill, NoSkillParameters) == 0x00D8);
static_assert(offsetof(UDrivingSkill, BasicSkillParameters) == 0x01D8);
static_assert(offsetof(UDrivingSkill, MediumSkillParameters) == 0x02D8);
static_assert(offsetof(UDrivingSkill, AdvancedSkillParameters) == 0x03D8);
static_assert(offsetof(UDrivingSkill, AboveAdvancedSkillParameters) == 0x04D8);
static_assert(offsetof(ADrone, _engineAudioEvent) == 0x0828);
static_assert(offsetof(ADrone, _engineStopAudioEvent) == 0x0830);
static_assert(offsetof(ADrone, _speedSteps) == 0x0838);
static_assert(offsetof(ADrone, _engineVolumeFromSpeed) == 0x0858);
static_assert(offsetof(ADrone, _selfDestructParticles) == 0x0868);
static_assert(offsetof(ADrone, _smokeParticles) == 0x0870);
static_assert(offsetof(ADrone, _smokeParticleSystemComponent) == 0x0878);
static_assert(offsetof(ADrone, _selfDestructAudioEvent) == 0x0880);
static_assert(offsetof(ADrone, _cameraMesh) == 0x08B0);
static_assert(offsetof(ADrone, _engineParticlesM) == 0x08B8);
static_assert(offsetof(ADrone, _engineParticlesML) == 0x08C0);
static_assert(offsetof(ADrone, _engineParticlesMR) == 0x08C8);
static_assert(offsetof(ADrone, _engineParticlesLL) == 0x08D0);
static_assert(offsetof(ADrone, _engineParticlesLR) == 0x08D8);
static_assert(offsetof(ADrone, _lightComponent) == 0x08E0);
static_assert(offsetof(UDroneSoundComponent, IdleSound) == 0x0128);
static_assert(offsetof(UDroneSoundComponent, IdleAudioEvent) == 0x0130);
static_assert(offsetof(UDroneSoundComponent, AngrySound) == 0x0138);
static_assert(offsetof(UDroneSoundComponent, AngryAudioEvent) == 0x0140);
static_assert(offsetof(UDroneSoundComponent, AttackSound) == 0x0148);
static_assert(offsetof(UDroneSoundComponent, AttackAudioEvent) == 0x0150);
static_assert(offsetof(UDroneSoundComponent, KillSound) == 0x0158);
static_assert(offsetof(UDroneSoundComponent, KillAudioEvent) == 0x0160);
static_assert(offsetof(UDropdownContainerWithDialogue, _selectionOverlay) == 0x0268);
static_assert(offsetof(UDropdownContainerWithDialogue, _label) == 0x0270);
static_assert(offsetof(UDropdownContainerWithDialogue, _dropdownContainer) == 0x0278);
static_assert(offsetof(UDropdownContainerWithDialogue, _cancelButton) == 0x0280);
static_assert(offsetof(UDropdownContainerWithDialogue, _applyButton) == 0x0288);
static_assert(offsetof(UDropdownContainerWithDialogue, dropdownLabel) == 0x0290);
static_assert(offsetof(UDropdownColorPicker, _colorPreviewSquare) == 0x02D8);
static_assert(offsetof(UDropdownColorPicker, _colorPicker) == 0x02E0);
static_assert(offsetof(UDropdownMenuSelectionWidget, SelectionImage) == 0x0298);
static_assert(offsetof(UDropdownMenuSelectionWidget, SelectionBorder) == 0x02A0);
static_assert(offsetof(UDropdownMenuSelectionWidget, _dropdownMenu) == 0x02A8);
static_assert(offsetof(UDropdownMenuColorSelectionWidget, Color) == 0x02B0);
static_assert(offsetof(UDropdownMenuTextureSelectionWidget, Texture) == 0x02B0);
static_assert(offsetof(UDropdownMenuWidget, ScrollPanel) == 0x0278);
static_assert(offsetof(UDropdownMenuWidget, _panelSlot) == 0x0288);
static_assert(offsetof(UDropshipEncounterSaveState, SpawnerLocationZero) == 0x0040);
static_assert(offsetof(UDropshipEncounterSaveState, SpawnerRotator) == 0x004C);
static_assert(offsetof(UDropshipEncounterSaveState, PatrolPointsRelativeLocations) == 0x0058);
static_assert(offsetof(FDropshipDataPerStance, RotationChangeRate) == 0x000C);
static_assert(offsetof(FDropshipDamageEffectData, ParticleSystem) == 0x0000);
static_assert(offsetof(ADropship, _dropshipStance) == 0x08C0);
static_assert(offsetof(ADropship, _dataPerStance) == 0x08C4);
static_assert(offsetof(ADropship, _projectileClass) == 0x09D8);
static_assert(offsetof(ADropship, _projectileClassClient) == 0x09E0);
static_assert(offsetof(ADropship, _leftMinigunSocketName) == 0x09F8);
static_assert(offsetof(ADropship, _rightMinigunSocketName) == 0x0A00);
static_assert(offsetof(ADropship, _leftMinigunAimSocketName) == 0x0A08);
static_assert(offsetof(ADropship, _rightMinigunAimSocketName) == 0x0A10);
static_assert(offsetof(ADropship, _projectileMuzzlePS) == 0x0A18);
static_assert(offsetof(ADropship, _projectileFiredSound) == 0x0A20);
static_assert(offsetof(ADropship, _baseAimLocationLeft) == 0x0A28);
static_assert(offsetof(ADropship, _baseAimLocationRight) == 0x0A34);
static_assert(offsetof(ADropship, _aimFoe) == 0x0AC0);
static_assert(offsetof(ADropship, _aimLocation) == 0x0AD8);
static_assert(offsetof(ADropship, _railgunProjectileClass) == 0x0B00);
static_assert(offsetof(ADropship, _railgunProjectileClassClient) == 0x0B08);
static_assert(offsetof(ADropship, _railgunFirePointOffset) == 0x0B1C);
static_assert(offsetof(ADropship, _railgunChargingPS) == 0x0B28);
static_assert(offsetof(ADropship, _railgunChargingPSC) == 0x0B30);
static_assert(offsetof(ADropship, _railgunChargingSocket) == 0x0B38);
static_assert(offsetof(ADropship, _railgunMuzzleEffect) == 0x0B40);
static_assert(offsetof(ADropship, _railgunMuzzleSocket) == 0x0B48);
static_assert(offsetof(ADropship, _railgunFiredSound) == 0x0B50);
static_assert(offsetof(ADropship, _railgunCameraShake) == 0x0B68);
static_assert(offsetof(ADropship, _tearGasGrenadeItemClass) == 0x0B70);
static_assert(offsetof(ADropship, _tearGasGrenadeSpawnSocketName) == 0x0B78);
static_assert(offsetof(ADropship, _simulatedShooterFiringStrategyLongRange) == 0x0B88);
static_assert(offsetof(ADropship, _simulatedShooterFiringStrategyRailgun) == 0x0B90);
static_assert(offsetof(ADropship, _simulatedShooterFiringStrategyLongRangeSP) == 0x0B98);
static_assert(offsetof(ADropship, _simulatedShooterFiringStrategyRailgunSP) == 0x0BA0);
static_assert(offsetof(ADropship, _explosionParticles) == 0x0BB0);
static_assert(offsetof(ADropship, _explosionAudioEvent) == 0x0BB8);
static_assert(offsetof(ADropship, _damageParticleEffectsPSData) == 0x0BC0);
static_assert(offsetof(ADropship, _damageParticleSockets) == 0x0C20);
static_assert(offsetof(ADropship, _onZeroHealthLeaveAudio) == 0x0C38);
static_assert(offsetof(ADropship, _cameraBone) == 0x0C40);
static_assert(offsetof(ADropship, _scannerLight) == 0x0C48);
static_assert(offsetof(ADropship, _sensorTransform) == 0x0C50);
static_assert(offsetof(ADropship, _droppableSentryInitialTransform) == 0x0C90);
static_assert(offsetof(ADropship, _droppableSentryDropLocation) == 0x0CC0);
static_assert(offsetof(ADropship, _droppableSentryBone) == 0x0CCC);
static_assert(offsetof(ADropship, _sentrySkeletalMesh) == 0x0CE0);
static_assert(offsetof(ADropship, _droppableSentryMeshComponent) == 0x0CE8);
static_assert(offsetof(ADropship, _droppableSentryAnimationBlueprint) == 0x0CF0);
static_assert(offsetof(ADropship, _droppableSentryRelativeLocationCurve) == 0x0CF8);
static_assert(offsetof(ADropship, _sentrySpawnFlag) == 0x0D00);
static_assert(offsetof(ADropship, _spawnableSentryClass) == 0x0D08);
static_assert(offsetof(ADropship, _engineParticles) == 0x0D98);
static_assert(offsetof(ADropship, _engineParticleRAttachPoint) == 0x0DA0);
static_assert(offsetof(ADropship, _engineParticleComponentR) == 0x0DA8);
static_assert(offsetof(ADropship, _engineParticleLAttachPoint) == 0x0DB0);
static_assert(offsetof(ADropship, _engineParticleComponentL) == 0x0DB8);
static_assert(offsetof(ADropship, _sideEnginesParticles) == 0x0DC0);
static_assert(offsetof(ADropship, _sideEngineParticleURAttachPoint) == 0x0DC8);
static_assert(offsetof(ADropship, _sideEngineParticleComponentUR) == 0x0DD0);
static_assert(offsetof(ADropship, _sideEngineParticleULAttachPoint) == 0x0DD8);
static_assert(offsetof(ADropship, _sideEngineParticleComponentUL) == 0x0DE0);
static_assert(offsetof(ADropship, _sideEngineParticleDRAttachPoint) == 0x0DE8);
static_assert(offsetof(ADropship, _sideEngineParticleComponentDR) == 0x0DF0);
static_assert(offsetof(ADropship, _sideEngineParticleDLAttachPoint) == 0x0DF8);
static_assert(offsetof(ADropship, _sideEngineParticleComponentDL) == 0x0E00);
static_assert(offsetof(ADropship, _sideRadiatorParticles) == 0x0E08);
static_assert(offsetof(ADropship, _sideRadiatorParticleRAttachPoint) == 0x0E10);
static_assert(offsetof(ADropship, _sideRadiatorParticleComponentR) == 0x0E18);
static_assert(offsetof(ADropship, _sideRadiatorParticleLAttachPoint) == 0x0E20);
static_assert(offsetof(ADropship, _sideRadiatorParticleComponentL) == 0x0E28);
static_assert(offsetof(ADropship, _engineParticleStrengthParameterName) == 0x0E40);
static_assert(offsetof(ADropship, _engineAudioEventStart) == 0x0E58);
static_assert(offsetof(ADropship, _engineAudioEventEnd) == 0x0E60);
static_assert(offsetof(ADropship, _dropshipMontages) == 0x0E70);
static_assert(offsetof(UDropshipAIControllerEncounterSaveState, DropshipState) == 0x0080);
static_assert(offsetof(ADropshipAIController, _currentSightSenseConfig) == 0x04C0);
static_assert(offsetof(ADropshipAIController, _currentHearingSenseConfig) == 0x04C8);
static_assert(offsetof(ADropshipAIController, _sightSenseConfigDefault) == 0x04D0);
static_assert(offsetof(ADropshipAIController, _hearingSenseConfigDefault) == 0x04D8);
static_assert(offsetof(ADropshipAIController, _sightSearchingGuardCargoSenseConfigDefault) == 0x04E0);
static_assert(offsetof(ADropshipAIController, _hearingSearchingGuardCargoSenseConfigDefault) == 0x04E8);
static_assert(offsetof(ADropshipAIController, _attackingFollowDistance2DInterval) == 0x0574);
static_assert(offsetof(ADropshipAIController, _attackingFollowMoveToDistance2DInterval) == 0x057C);
static_assert(offsetof(ADropshipAIController, _foeLocationPredictionStrengthVsDistanceToFoe) == 0x0590);
static_assert(offsetof(ADropshipAIController, _relocateMoveToDistance) == 0x059C);
static_assert(offsetof(ADropshipAIController, _combatRelocationCheckInterval) == 0x05A4);
static_assert(offsetof(ADropshipAIController, _attackFrequencyMultiplier) == 0x05B4);
static_assert(offsetof(ADropshipAIController, _attackModeChanceCheckTime) == 0x05CC);
static_assert(offsetof(ADropshipAIController, _railgunAimTime) == 0x05D8);
static_assert(offsetof(ADropshipAIController, _attackedBaseElementDistanceInterval) == 0x0638);
static_assert(offsetof(ADropshipAIController, _attackedBaseElementMoveToDistance2DInterval) == 0x0640);
static_assert(offsetof(ADropshipAIController, _chanceToHitBBElementVsElementBoundsSizeSquared) == 0x0650);
static_assert(offsetof(ADropshipAIController, _timeUntilNextSearchLocationInterval) == 0x069C);
static_assert(offsetof(ADropshipAIController, _searchLocationDistanceFromReferenceLocationInterval) == 0x06A4);
static_assert(offsetof(ADropshipAIController, _timeUntilNextControlRotationChangeInterval) == 0x06AC);
static_assert(offsetof(ADropshipAIController, _timeInSearchingStateBeforeLeaving) == 0x06B4);
static_assert(offsetof(ADropshipAIController, _leaveInitialForwardOffset) == 0x06C4);
static_assert(offsetof(ADropshipAIController, _leaveForwardOffset) == 0x06CC);
static_assert(offsetof(ADropshipAIController, _leaveInitialUpwardOffset) == 0x06D4);
static_assert(offsetof(ADropshipAIController, _leaveUpwardOffset) == 0x06DC);
static_assert(offsetof(ADropshipAIController, _delayedLeaveTimeAfterDeploymentInterval) == 0x0728);
static_assert(offsetof(ADropshipAIController, _flybyDistance) == 0x0748);
static_assert(offsetof(UDropshipAnimInstance, _minigunRotationAngles) == 0x02E0);
static_assert(offsetof(UDropshipAnimInstance, _aimRotationLeft) == 0x02F0);
static_assert(offsetof(UDropshipAnimInstance, _aimRotationRight) == 0x02FC);
static_assert(offsetof(UDropshipAnimInstance, _dropshipStance) == 0x030C);
static_assert(offsetof(ADropZoneDroppable, Mesh) == 0x0220);
static_assert(offsetof(ADropZoneDroppable, LandSound) == 0x0228);
static_assert(offsetof(ADropZoneDroppable, _gameEvent) == 0x0230);
static_assert(offsetof(ADropZoneDroppable, _flareParticles0) == 0x0240);
static_assert(offsetof(ADropZoneDroppable, _flareParticles1) == 0x0248);
static_assert(offsetof(ADropZoneDroppable, _flareParticles2) == 0x0250);
static_assert(offsetof(ADropZoneDroppable, _endLocation) == 0x0260);
static_assert(offsetof(ADropZoneCargo, Slot) == 0x0288);
static_assert(offsetof(ADropZoneCrate, KeyClass) == 0x0280);
static_assert(offsetof(ADropZoneEquipmentTable, _trackedItems) == 0x0220);
static_assert(offsetof(FDropZoneParameters, PointsPerActivation) == 0x0020);
static_assert(offsetof(ADropZoneGameEvent, TableAClass) == 0x0588);
static_assert(offsetof(ADropZoneGameEvent, TableBClass) == 0x0590);
static_assert(offsetof(ADropZoneGameEvent, CrateClass) == 0x0598);
static_assert(offsetof(ADropZoneGameEvent, CargoClass) == 0x05A0);
static_assert(offsetof(ADropZoneGameEvent, IntroAnnouncement) == 0x05A8);
static_assert(offsetof(ADropZoneGameEvent, LocateTheKeyAnnouncement) == 0x05B0);
static_assert(offsetof(ADropZoneGameEvent, BlueTeamFoundKeyAnnouncement) == 0x05B8);
static_assert(offsetof(ADropZoneGameEvent, BlueTeamUnlockedAnnouncement) == 0x05C0);
static_assert(offsetof(ADropZoneGameEvent, BlueTeamStolenAnnouncement) == 0x05C8);
static_assert(offsetof(ADropZoneGameEvent, RedTeamFoundKeyAnnouncement) == 0x05D0);
static_assert(offsetof(ADropZoneGameEvent, RedTeamUnlockedAnnouncement) == 0x05D8);
static_assert(offsetof(ADropZoneGameEvent, RedTeamStolenAnnouncement) == 0x05E0);
static_assert(offsetof(ADropZoneGameEvent, CargoDropAnnouncement) == 0x05E8);
static_assert(offsetof(ADropZoneGameEvent, CargoLandedAnnouncement) == 0x05F0);
static_assert(offsetof(ADropZoneGameEvent, KeyIcon) == 0x05F8);
static_assert(offsetof(ADropZoneGameEvent, CargoIcon) == 0x0600);
static_assert(offsetof(ADropZoneGameEvent, FriendlyColor) == 0x0608);
static_assert(offsetof(ADropZoneGameEvent, EnemyColor) == 0x0618);
static_assert(offsetof(ADropZoneGameEvent, _dropZoneParameters) == 0x0628);
static_assert(offsetof(ADropZoneGameEvent, _phase) == 0x0660);
static_assert(offsetof(ADropZoneGameEvent, _barrierA) == 0x0678);
static_assert(offsetof(ADropZoneGameEvent, _barrierB) == 0x0680);
static_assert(offsetof(ADropZoneGameEvent, _tableA) == 0x0688);
static_assert(offsetof(ADropZoneGameEvent, _tableB) == 0x0690);
static_assert(offsetof(ADropZoneGameEvent, _crateA) == 0x0698);
static_assert(offsetof(ADropZoneGameEvent, _crateB) == 0x06A0);
static_assert(offsetof(ADropZoneGameEvent, _key) == 0x06A8);
static_assert(offsetof(ADropZoneGameEvent, _keyCarrier) == 0x06B0);
static_assert(offsetof(ADropZoneGameEvent, _topmostKeyOwner) == 0x06B8);
static_assert(offsetof(ADropZoneGameEvent, _cargo) == 0x06C0);
static_assert(offsetof(ADropZoneGameEvent, _slot) == 0x06C8);
static_assert(offsetof(ADropZoneKey, SphereComponent) == 0x09A0);
static_assert(offsetof(ADropZoneKey, _gameEvent) == 0x09A8);
static_assert(offsetof(ADropZoneLocationMarker, DropZoneParameters) == 0x0418);
static_assert(offsetof(ADropZoneLocationMarker, SpawnOffsetA) == 0x0444);
static_assert(offsetof(ADropZoneLocationMarker, SpawnOffsetB) == 0x0450);
static_assert(offsetof(ADropZoneLocationMarker, CargoDropOffset) == 0x0470);
static_assert(offsetof(ADropZoneLocationMarker, CrateDropOffsetA) == 0x04A0);
static_assert(offsetof(ADropZoneLocationMarker, CrateDropOffsetB) == 0x04D0);
static_assert(offsetof(ADropZoneLocationMarker, CrateAPreviewMesh) == 0x0500);
static_assert(offsetof(ADropZoneLocationMarker, CrateBPreviewMesh) == 0x0508);
static_assert(offsetof(ADropZoneLocationMarker, CargoPreviewMesh) == 0x0510);
static_assert(offsetof(ADropZoneSlot, Mesh) == 0x0228);
static_assert(offsetof(ADropZoneSlot, UnlockedMesh) == 0x0238);
static_assert(offsetof(ADropZoneSlot, ActivateSound) == 0x0240);
static_assert(offsetof(ADropZoneSlot, _gameEvent) == 0x0248);
static_assert(offsetof(UDualArcedProgressBar, _frontFillImage) == 0x0268);
static_assert(offsetof(UDualArcedProgressBar, _backFillImage) == 0x0270);
static_assert(offsetof(UDualArcedProgressBar, _frontFillMaterial) == 0x0278);
static_assert(offsetof(UDualArcedProgressBar, _backFillMaterial) == 0x0280);
static_assert(offsetof(UDualArcedProgressBar, _frontFillColor) == 0x0288);
static_assert(offsetof(UDualArcedProgressBar, _backFillColor) == 0x0298);
static_assert(offsetof(UDummyCollisionCapsule, _attachment) == 0x0478);
static_assert(offsetof(ADynamicNavModifierVolumeActor, _volumeBoxComponent) == 0x0220);
static_assert(offsetof(UEconomyManagerResponse, _payload) == 0x0028);
static_assert(offsetof(FCurrencyDescription, CurrencySymbol) == 0x0000);
static_assert(offsetof(FCurrencyDescription, CurrencyName) == 0x0010);
static_assert(offsetof(FCurrencyDescription, ConfigFileSymbol) == 0x0028);
static_assert(offsetof(FCurrencyDescription, UITextColor) == 0x0038);
static_assert(offsetof(FCurrencyDescription, RequiredBankCardTypeToPerformTransactions) == 0x0060);
static_assert(offsetof(FBankCardTypeData, ItemClass) == 0x0000);
static_assert(offsetof(FBankCardTypeData, PurchasePriceCurrency) == 0x002C);
static_assert(offsetof(UEconomySpecificData, CashItemClass) == 0x0030);
static_assert(offsetof(UEconomySpecificData, DepotItemClass) == 0x0060);
static_assert(offsetof(UEconomySpecificData, VehicleLockItemClass) == 0x0088);
static_assert(offsetof(UEconomySpecificData, CurrencyDescriptions) == 0x0190);
static_assert(offsetof(UEconomySpecificData, CardDataPerBankCardType) == 0x02C8);
static_assert(offsetof(UEconomySpecificData, RotationRarityVsAvailabilityChance) == 0x0320);
static_assert(offsetof(AElectricityGeneratorItem, _resourceContainerComponent) == 0x09B0);
static_assert(offsetof(AElectricityGeneratorItem, _rangedResourceProviderComponent) == 0x09B8);
static_assert(offsetof(AElectricityGeneratorItem, _turnOnAudioEvent) == 0x09C0);
static_assert(offsetof(AElectricityGeneratorItem, _turnOffAudioEvent) == 0x09C8);
static_assert(offsetof(UEmblemData, BackgroundTextures) == 0x0030);
static_assert(offsetof(UEmblemData, SymbolTextures) == 0x0040);
static_assert(offsetof(UEmblemData, ColorPalette) == 0x0050);
static_assert(offsetof(AGrenadeItem, _explosionTargetTypeMultiplier) == 0x09B8);
static_assert(offsetof(AGrenadeItem, _explosionParticle) == 0x09D8);
static_assert(offsetof(AGrenadeItem, _explosionCameraShakeClass) == 0x09E0);
static_assert(offsetof(AGrenadeItem, ExplosionAudioEvent) == 0x09F0);
static_assert(offsetof(AGrenadeItem, _explosionAudioEvent) == 0x09F8);
static_assert(offsetof(AGrenadeItem, _pullPinAudioEvent) == 0x0A00);
static_assert(offsetof(AGrenadeItem, _skeletalMesh) == 0x0A08);
static_assert(offsetof(AGrenadeItem, _grenadeLongThrowMontage) == 0x0A10);
static_assert(offsetof(AGrenadeItem, _grenadeLongThrowLoopMontage) == 0x0A18);
static_assert(offsetof(AGrenadeItem, _grenadeShortThrowMontage) == 0x0A20);
static_assert(offsetof(AGrenadeItem, _grenadeThrowbackMontage) == 0x0A28);
static_assert(offsetof(AGrenadeItem, _leverReleasedSocketName) == 0x0A30);
static_assert(offsetof(AGrenadeItem, _leverReleasedPS) == 0x0A38);
static_assert(offsetof(AGrenadeItem, _takeInHandsWhenPinIsPulledAssetData) == 0x0A50);
static_assert(offsetof(AEMPGrenadeItem, _empEffect) == 0x0A70);
static_assert(offsetof(AEMPGrenadeItem, _electricArcsEffect) == 0x0A78);
static_assert(offsetof(AEMPGrenadeItem, _onPinPulledMaterialParamName) == 0x0A80);
static_assert(offsetof(AEMPGrenadeItem, _onPinPulledMaterialParamValue) == 0x0A88);
static_assert(offsetof(AEMPGrenadeItem, _electricArcAudioEvent) == 0x0A90);
static_assert(offsetof(UEmptySlot, MainImage) == 0x0268);
static_assert(offsetof(UVirtualizedEncounterData, EncounterBaseClass) == 0x0028);
static_assert(offsetof(UVirtualizedEncounterData, EncounterLocation) == 0x0050);
static_assert(offsetof(UVirtualizedEncounterData, ParentID) == 0x0080);
static_assert(offsetof(UVirtualizedEncounterData, ChildId) == 0x0088);
static_assert(offsetof(UVirtualizedEncounterData_BB, BaseId) == 0x0090);
static_assert(offsetof(UEncounterBBBase, _blockingVolumeClass) == 0x0270);
static_assert(offsetof(UEncounterBBBase, _navigationInvokerClass) == 0x0278);
static_assert(offsetof(FVirtualizedEncounterBBForeignCharacterData, CharacterClass) == 0x0000);
static_assert(offsetof(FVirtualizedEncounterBBForeignCharacterData, PresetType) == 0x0028);
static_assert(offsetof(FVirtualizedEncounterBBForeignCharacterData, CharacterTransform) == 0x0030);
static_assert(offsetof(FVirtualizedEncounterBBForeignCharacterData, CharacterData) == 0x0060);
static_assert(offsetof(UVirtualizedEncounterData_BBFlyingAttacker, CharacterClass) == 0x00E8);
static_assert(offsetof(UVirtualizedEncounterData_BBFlyingAttacker, CharacterTransform) == 0x0110);
static_assert(offsetof(UVirtualizedEncounterData_BBFlyingAttacker, MoveToLocationAfterSpawn) == 0x0140);
static_assert(offsetof(UVirtualizedEncounterData_BBFlyingAttacker, LoadData) == 0x0150);
static_assert(offsetof(UVirtualizedEncounterData_BBFlyingAttacker, ForeignCharacterData) == 0x0160);
static_assert(offsetof(UEncounterBBSpawnFlyingAttacker, _presetType) == 0x02E0);
static_assert(offsetof(UEncounterBBSpawnFlyingAttacker, _postExternalMoveToActionsMap) == 0x0308);
static_assert(offsetof(FEncounterSpawnTypeData, HiddenSpawnType) == 0x0000);
static_assert(offsetof(FEncounterSpawnPointTypeArrayData, SpawnType) == 0x0001);
static_assert(offsetof(FEncounterSpawnPointTypeArrayData, HiddenSpawnTypeDataArray) == 0x0008);
static_assert(offsetof(UEncounterSpawnCharacters, _characterSpawnRangeOverride) == 0x0218);
static_assert(offsetof(UEncounterSpawnCharacters, _characterFallbackSpawnRangeOverride) == 0x0220);
static_assert(offsetof(UEncounterSpawnCharacters, _spawnPointTypesAdditionalData) == 0x0280);
static_assert(offsetof(UEncounterSpawnCharacters, _possibleCharacters) == 0x0290);
static_assert(offsetof(UEncounterSpawnCharacters, _characterBaseAmountCurve) == 0x02E0);
static_assert(offsetof(UEncounterSpawnCharacters, _characterBaseAmountRange) == 0x02E8);
static_assert(offsetof(UEncounterSpawnCharacters, _characterRespawnTimeRange) == 0x0304);
static_assert(offsetof(UEncounterSpawnCharacters, _characterRespawnBatchSize) == 0x030C);
static_assert(offsetof(UEncounterSpawnCharacters, _postExternalMoveToActionsMap) == 0x0330);
static_assert(offsetof(UEncounterCargoDropEvent, _cargoDropEventCharacterSpawnDistanceInterval) == 0x0460);
static_assert(offsetof(UEncounterCargoDropEvent, _serverSettingsCargoEventTag) == 0x0470);
static_assert(offsetof(UEncounterCargoDropEventFlyingGuardian, _spawnHeightInterval) == 0x0478);
static_assert(offsetof(UEncounterCargoDropEventFlyingGuardian, _approachHeightInterval) == 0x0480);
static_assert(offsetof(UEncounterCharacterSpawnPreset, PresetType) == 0x0030);
static_assert(offsetof(FVirtualizedEncounterCharacterData, CharacterClass) == 0x0000);
static_assert(offsetof(FVirtualizedEncounterCharacterData, CharacterTransform) == 0x0030);
static_assert(offsetof(FVirtualizedEncounterCharacterData, PresetType) == 0x0068);
static_assert(offsetof(FVirtualizedEncounterCharacterData, CharacterData) == 0x0078);
static_assert(offsetof(UVirtualizedEncounterData_SpawnCharacters, CharacterDataArray) == 0x0090);
static_assert(offsetof(UVirtualizedEncounterData_Horde, HordeCharacterDataArray) == 0x00B0);
static_assert(offsetof(FHordeParametersPresetPair, Preset) == 0x0000);
static_assert(offsetof(UEncounterHorde, _hordeParameterPresets) == 0x0460);
static_assert(offsetof(UEncounterHorde, _hordeActivationChancePerNoiseTag) == 0x0470);
static_assert(offsetof(UEncounterHorde, _cooldownIntervalBetweenNoiseTriggerChecks) == 0x04C0);
static_assert(offsetof(FPossibleEncounterData, EncounterClass) == 0x0000);
static_assert(offsetof(UEncounterManagerCommonData, MaxCharactersPerType) == 0x0038);
static_assert(offsetof(UEncounterManagerCommonData, SuicidePuppetClass) == 0x0088);
static_assert(offsetof(UEncounterManagerCommonData, LowThreatZoneData) == 0x00C0);
static_assert(offsetof(UEncounterManagerCommonData, NoiseAccumulationMultiplierPerNoiseTag) == 0x00E0);
static_assert(offsetof(UEncounterManagerCommonData, LimitedEncounterTypes) == 0x0138);
static_assert(offsetof(UEncounterManagerCommonData, CooldownsPerEncounterType) == 0x0188);
static_assert(offsetof(UEncounterManagerCommonData, EveryPlayerExperiencedCooldownDecayMultiplierPerType) == 0x01E0);
static_assert(offsetof(UEncounterManagerCommonData, PossibleBBEncounters) == 0x0258);
static_assert(offsetof(UEncounterManagerCommonData, BBEncounterCheckCooldownInterval) == 0x0268);
static_assert(offsetof(UEncounterManagerCommonData, BBEncounterCooldownInterval) == 0x0270);
static_assert(offsetof(UEncounterManagerCommonData, LPCModeZoneCooldownOverride) == 0x0280);
static_assert(offsetof(UEncounterManagerCommonData, LowPlayerCountModeEncounterSpecialCooldownTag) == 0x028C);
static_assert(offsetof(UEncounterManagerCommonData, EnabledPuppetWorldEncounterTag) == 0x02A8);
static_assert(offsetof(UEncounterManagerCommonData, EnabledAnimalWorldEncounterTag) == 0x02B0);
static_assert(offsetof(UEncounterManagerCommonData, EnabledNPCWorldEncounterTag) == 0x02B8);
static_assert(offsetof(UEncounterManagerCommonData, EnabledDropshipWorldEncounterTag) == 0x02C0);
static_assert(offsetof(UEncounterManagerCommonData, EnabledDropshipAbandonedBunkerEncounterTag) == 0x02C8);
static_assert(offsetof(UEncounterManagerCommonData, EnabledDropshipBaseBuildingEncounterTag) == 0x02D0);
static_assert(offsetof(UEncounterManagerCommonData, PuppetPresetTypeServerSettingsTag) == 0x02D8);
static_assert(offsetof(UEncounterManagerCommonData, AnimalPresetTypeServerSettingsTag) == 0x02E0);
static_assert(offsetof(UEncounterManagerCommonData, NPCPresetTypeServerSettingsTag) == 0x02E8);
static_assert(offsetof(UEncounterManagerHordePreset, PossibleHordeCharacters) == 0x0030);
static_assert(offsetof(UEncounterManagerHordePreset, HordeGroupSizeInterval) == 0x0080);
static_assert(offsetof(UEncounterManagerHordePreset, HordeSizeAdditionInterval) == 0x0088);
static_assert(offsetof(UEncounterManagerHordePreset, HordeSpawnDistanceInterval) == 0x009C);
static_assert(offsetof(UEncounterManagerHordePreset, HordeGroupRefillTimeInterval) == 0x00A8);
static_assert(offsetof(UEncounterManagerHordePreset, HordeRespawnCooldownInterval) == 0x00B0);
static_assert(offsetof(UEncounterManagerHordePreset, HordeActivationSoundDelay) == 0x00B8);
static_assert(offsetof(UEncounterManagerHordePreset, HordeActivationAudioEvent) == 0x00C0);
static_assert(offsetof(UVirtualizedEncounterData_SpawnAirborneCharacters, AirborneCharacterDataArray) == 0x00A8);
static_assert(offsetof(UEncounterSpawnAirborneCharacters, _possibleAirborneCharacters) == 0x0460);
static_assert(offsetof(UEncounterSpawnAirborneCharacters, _spawnHeightInterval) == 0x04B0);
static_assert(offsetof(UEncounterSpawnAirborneCharacters, _approachHeightInterval) == 0x04B8);
static_assert(offsetof(UEncounterSpawnAirborneCharacters, _allowedAirborneCharactersInterval) == 0x04C0);
static_assert(offsetof(FEncounterZoneSubZoneBoxComponentEditorData, BoxComponent) == 0x0000);
static_assert(offsetof(FEncounterSubZoneBoxData, AreaBox) == 0x0000);
static_assert(offsetof(FEncounterSubZoneBoxData, BoxRotation) == 0x001C);
static_assert(offsetof(FEncounterSubZoneData, BoxDataArray) == 0x0000);
static_assert(offsetof(FEncounterSubZoneData, SubZoneBox) == 0x0010);
static_assert(offsetof(FEncounterSubZoneData, EncounterZoneData) == 0x0030);
static_assert(offsetof(FEncounterSubZoneEditorData, VisualizationBoxes) == 0x0000);
static_assert(offsetof(FEncounterSubZoneEditorData, ZoneData) == 0x0010);
static_assert(offsetof(FEncounterSubZoneEditorData, VisualizationBoxColor) == 0x0050);
static_assert(offsetof(AEncounterStaticZone, _root) == 0x0220);
static_assert(offsetof(AEncounterStaticZone, _visualizationSphere) == 0x0228);
static_assert(offsetof(AEncounterStaticZone, _zoneActivationVisualizationSphere) == 0x0230);
static_assert(offsetof(AEncounterStaticZone, _LPCZoneActivationVisualizationSphere) == 0x0238);
static_assert(offsetof(AEncounterStaticZone, _zoneNameTextRenderComponent) == 0x0240);
static_assert(offsetof(AEncounterStaticZone, _flyingSpawnedCharacterApproachLocations) == 0x0258);
static_assert(offsetof(AEncounterStaticZone, _zoneData) == 0x0268);
static_assert(offsetof(AEncounterStaticZone, _lpcZoneData) == 0x0270);
static_assert(offsetof(AEncounterStaticZone, _subZones) == 0x0278);
static_assert(offsetof(AEncounterStaticZone, _mainVisualizationMaterial) == 0x0288);
static_assert(offsetof(AEncounterStaticZone, _zoneActivationVisualizationMaterial) == 0x0290);
static_assert(offsetof(AEncounterStaticZone, _LPCZoneActivationVisualizationMaterial) == 0x0298);
static_assert(offsetof(UEncounterZoneData, EncounterData) == 0x0038);
static_assert(offsetof(UEncounterZoneData, InitialEncounterSpawnDelay) == 0x0048);
static_assert(offsetof(UEncounterZoneData, EncounterSpawnCheckInterval) == 0x0050);
static_assert(offsetof(UEncounterZoneData, EncounterCooldownInterval) == 0x0058);
static_assert(offsetof(UEncounterZoneData, EncounterCooldownGlobalInterval) == 0x0060);
static_assert(offsetof(UEncounterZoneData, CharacterSpawnDistanceRange) == 0x0070);
static_assert(offsetof(UEncounterZoneData, CharacterFallbackSpawnDistanceRange) == 0x0078);
static_assert(offsetof(UEncounterZoneData, CharacterFallbackSpawnMoveToLocationRange) == 0x0080);
static_assert(offsetof(FEnduranceSkillParametersPerSkillLevel, EnergyConsumptionMultiplier) == 0x0000);
static_assert(offsetof(FEnduranceSkillParametersPerSkillLevel, WaterConsumptionMultiplier) == 0x0008);
static_assert(offsetof(FEnduranceSkillParametersPerSkillLevel, StaminaRecoveryMultiplier) == 0x0010);
static_assert(offsetof(UEnduranceSkill, NoSkillExperienceAwards) == 0x00C8);
static_assert(offsetof(UEnduranceSkill, BasicSkillExperienceAwards) == 0x00D4);
static_assert(offsetof(UEnduranceSkill, MediumSkillExperienceAwards) == 0x00E0);
static_assert(offsetof(UEnduranceSkill, AdvancedSkillExperienceAwards) == 0x00EC);
static_assert(offsetof(UEnduranceSkill, AboveAdvancedSkillExperienceAwards) == 0x00F8);
static_assert(offsetof(UEnduranceSkill, NoSkillParameters) == 0x0104);
static_assert(offsetof(UEnduranceSkill, BasicSkillParameters) == 0x011C);
static_assert(offsetof(UEnduranceSkill, MediumSkillParameters) == 0x0134);
static_assert(offsetof(UEnduranceSkill, AdvancedSkillParameters) == 0x014C);
static_assert(offsetof(FCharacterTemplate, Gender) == 0x0014);
static_assert(offsetof(FCharacterTemplate, Name) == 0x0018);
static_assert(offsetof(FCharacterTemplate, BirthDate) == 0x0050);
static_assert(offsetof(FCharacterTemplate, ArrestDate) == 0x0060);
static_assert(offsetof(FCharacterTemplate, Skills) == 0x0070);
static_assert(offsetof(FCharacterTemplate, Item0) == 0x0080);
static_assert(offsetof(FCharacterTemplate, Item1) == 0x0088);
static_assert(offsetof(FCharacterTemplate, Item2) == 0x0090);
static_assert(offsetof(FCharacterTemplate, EyeshadowColor) == 0x00B0);
static_assert(offsetof(FCharacterTemplate, EyelinerColor) == 0x00C0);
static_assert(offsetof(FCharacterTemplate, LipstickColor) == 0x00D0);
static_assert(offsetof(FPrisonerMountReplication, MountedSlot) == 0x0000);
static_assert(offsetof(FPrisonerMountReplication, _mountFlags) == 0x0008);
static_assert(offsetof(APrisoner, SkillComponent) == 0x0880);
static_assert(offsetof(APrisoner, InventoryComponent) == 0x0888);
static_assert(offsetof(APrisoner, AppearanceComponent) == 0x0890);
static_assert(offsetof(APrisoner, MeleeCombatComponent) == 0x0898);
static_assert(offsetof(APrisoner, HitReactComponent) == 0x08A0);
static_assert(offsetof(APrisoner, PhysicalAnimationComponent) == 0x08A8);
static_assert(offsetof(APrisoner, InteractionComponent) == 0x08B0);
static_assert(offsetof(APrisoner, SensingComponent) == 0x08B8);
static_assert(offsetof(APrisoner, BaseInteractionComponent) == 0x08C0);
static_assert(offsetof(APrisoner, AimOffsetOverride) == 0x08CC);
static_assert(offsetof(APrisoner, EyesLookAtTargetOverride) == 0x08D8);
static_assert(offsetof(APrisoner, CharacterTemplateOverride) == 0x08E8);
static_assert(offsetof(APrisoner, LeftHandAttachmentSocket) == 0x09D0);
static_assert(offsetof(APrisoner, RightHandAttachmentSocket) == 0x09E0);
static_assert(offsetof(APrisoner, LeftShoulderHolsterSocket) == 0x09F0);
static_assert(offsetof(APrisoner, RightShoulderHolsterSocket) == 0x0A00);
static_assert(offsetof(APrisoner, BorderCrossingPenalty) == 0x0C4C);
static_assert(offsetof(APrisoner, _bodySimulationComponent) == 0x0E68);
static_assert(offsetof(APrisoner, _skinThermalSensingComponent) == 0x0E70);
static_assert(offsetof(APrisoner, _prisonerMeshManager) == 0x0E78);
static_assert(offsetof(APrisoner, _userProfile) == 0x0E80);
static_assert(offsetof(APrisoner, _userId) == 0x0E88);
static_assert(offsetof(APrisoner, _serverUserProfileId) == 0x0E98);
static_assert(offsetof(APrisoner, _userProfileName) == 0x0EA0);
static_assert(offsetof(APrisoner, _userFakeName) == 0x0EB0);
static_assert(offsetof(APrisoner, _waterParticlesComponentWhenIdle) == 0x0F28);
static_assert(offsetof(APrisoner, _waterParticlesComponentWhenMoving) == 0x0F30);
static_assert(offsetof(APrisoner, _waterParticlesComponentWhenDiving) == 0x0F38);
static_assert(offsetof(APrisoner, _groundStance) == 0x0F59);
static_assert(offsetof(APrisoner, _aquaticMode) == 0x0F5A);
static_assert(offsetof(APrisoner, _aerialPose) == 0x0F5B);
static_assert(offsetof(APrisoner, _desiredMovementPace) == 0x0F5C);
static_assert(offsetof(APrisoner, _currentMontage) == 0x0F70);
static_assert(offsetof(APrisoner, _repAimOffset) == 0x0FAC);
static_assert(offsetof(APrisoner, _lastCorpse) == 0x0FF8);
static_assert(offsetof(APrisoner, _lastEventCorpse) == 0x1000);
static_assert(offsetof(APrisoner, _meleeTarget) == 0x1808);
static_assert(offsetof(APrisoner, _activeMeleeSkill) == 0x1818);
static_assert(offsetof(APrisoner, _rotationTarget) == 0x1830);
static_assert(offsetof(APrisoner, _unarmedCombatInputRedirector) == 0x1838);
static_assert(offsetof(APrisoner, _skillEventHandler) == 0x1840);
static_assert(offsetof(APrisoner, _itemInHands) == 0x1858);
static_assert(offsetof(APrisoner, _scopingWithItemInHandsState) == 0x18D5);
static_assert(offsetof(APrisoner, _combatMode) == 0x1A30);
static_assert(offsetof(APrisoner, _leftShoulderHolsteredItemReplicated) == 0x1A88);
static_assert(offsetof(APrisoner, _rightShoulderHolsteredItemReplicated) == 0x1A98);
static_assert(offsetof(APrisoner, _interactDefaultContextMenuTimerHandle) == 0x1AD0);
static_assert(offsetof(APrisoner, _examinedBy) == 0x1AE0);
static_assert(offsetof(APrisoner, _tacticsBlobMaterial) == 0x1AF0);
static_assert(offsetof(APrisoner, _bodyPartEffects) == 0x1AF8);
static_assert(offsetof(APrisoner, _handsBondage) == 0x1B08);
static_assert(offsetof(APrisoner, _prisonWalletComponent) == 0x1B10);
static_assert(offsetof(APrisoner, _fishingComponent) == 0x1B18);
static_assert(offsetof(APrisoner, _musicPlayerComponent) == 0x1B20);
static_assert(offsetof(APrisoner, _tradingComponent) == 0x1B28);
static_assert(offsetof(APrisoner, _throwingComponent) == 0x1B30);
static_assert(offsetof(APrisoner, _itemDragComponent) == 0x1B38);
static_assert(offsetof(APrisoner, _gameEvent) == 0x1B88);
static_assert(offsetof(APrisoner, _gameEventLoadout) == 0x1B90);
static_assert(offsetof(APrisoner, _instancedFoliageActors) == 0x1C38);
static_assert(offsetof(APrisoner, _landscapeProxyActors) == 0x1C50);
static_assert(offsetof(APrisoner, _nameWidgetComponent) == 0x1C80);
static_assert(offsetof(APrisoner, SaveSpawnLocationTag) == 0x1C88);
static_assert(offsetof(APrisoner, _deluxeVersion) == 0x1CB8);
static_assert(offsetof(APrisoner, _examinedPrisoner) == 0x1CC8);
static_assert(offsetof(APrisoner, _playingInstrumentState) == 0x1CF0);
static_assert(offsetof(APrisoner, _carryingItemState) == 0x1CF2);
static_assert(offsetof(APrisoner, _repMount) == 0x1D60);
static_assert(offsetof(APrisoner, _midiDeviceController) == 0x1D78);
static_assert(offsetof(APrisoner, _navigationInvokerComponent) == 0x1E60);
static_assert(offsetof(APrisoner, LegsInjuryTag) == 0x1F0C);
static_assert(offsetof(APrisoner, _vehicleWeaponAimingStance) == 0x1FA0);
static_assert(offsetof(APrisoner, _activeParachute) == 0x20BC);
static_assert(offsetof(APrisoner, _survivalTipEventListener) == 0x21E0);
static_assert(offsetof(APrisoner, _commonData) == 0x21E8);
static_assert(offsetof(UPrisonerUIData, _attributeDescriptions) == 0x0028);
static_assert(offsetof(UPrisonerSkillUIData, _description) == 0x0028);
static_assert(offsetof(UPrisonerSkillUIData, _skillClass) == 0x0040);
static_assert(offsetof(UEngineeringSkill, NoSkillExperienceAwards) == 0x00B0);
static_assert(offsetof(UEngineeringSkill, BasicSkillExperienceAwards) == 0x00C0);
static_assert(offsetof(UEngineeringSkill, MediumSkillExperienceAwards) == 0x00D0);
static_assert(offsetof(UEngineeringSkill, AdvancedSkillExperienceAwards) == 0x00E0);
static_assert(offsetof(UEngineeringSkill, AboveAdvancedSkillExperienceAwards) == 0x00F0);
static_assert(offsetof(UEngineeringSkill, NoSkillParameters) == 0x0100);
static_assert(offsetof(UEngineeringSkill, BasicSkillParameters) == 0x011C);
static_assert(offsetof(UEngineeringSkill, MediumSkillParameters) == 0x0138);
static_assert(offsetof(UEngineeringSkill, AdvancedSkillParameters) == 0x0154);
static_assert(offsetof(UEngineeringSkill, AboveAdvancedSkillParameters) == 0x0170);
static_assert(offsetof(UEntityOverlapDetectionComponent, _observedEntitySetupClasses) == 0x00E0);
static_assert(offsetof(UEntitySystem, _settings) == 0x0038);
static_assert(offsetof(UEntitySystem, _uobjectReferences) == 0x0700);
static_assert(offsetof(FEntityToCreateOnStartupParams, Entity) == 0x0000);
static_assert(offsetof(UEntitySystemSettings, EntitiesToCreateOnStartup) == 0x0028);
static_assert(offsetof(UEntitySystemSettings, EntitiesToDestroyOnDisabledSetting) == 0x0038);
static_assert(offsetof(UEnvironmentDescriptionComponent, EnvironmentClass) == 0x04F8);
static_assert(offsetof(UEventInsertCartridge, MontageEndSectionName) == 0x0090);
static_assert(offsetof(FItemSpawnerDataBasedOnPreset, Preset) == 0x0000);
static_assert(offsetof(FItemSpawnerDataBasedOnPreset, ItemSpawnTypes) == 0x0030);
static_assert(offsetof(FItemSpawnerDataBasedOnPreset, PostItemsSpawnedActions) == 0x0088);
static_assert(offsetof(FExamineItemSpawnerConstraint_MaxOccurrencesPerSpawnTypes, ItemSpawnTypes) == 0x0000);
static_assert(offsetof(FExamineItemSpawnerData, Spawner) == 0x0010);
static_assert(offsetof(FExamineItemSpawnerData, MaxOccurrencesPerSpawnTypes) == 0x00A0);
static_assert(offsetof(UExamineAssetData, ExamineData) == 0x0030);
static_assert(offsetof(UExamineAssetData, SpawnerPreset) == 0x00E0);
static_assert(offsetof(UExamineAssetData, StartExamineAudioEvent) == 0x0198);
static_assert(offsetof(UExamineAssetData, StopExamineAudioEvent) == 0x01A0);
static_assert(offsetof(UExamineAssetData, noiseLevel) == 0x01A8);
static_assert(offsetof(UExamineAssetData, ExamineMeshNotifies) == 0x01B0);
static_assert(offsetof(UExpandableContainer, _titleText) == 0x0278);
static_assert(offsetof(UExpandableContainer, _contentNamedSlot) == 0x0280);
static_assert(offsetof(UExplosionFailurePenalty, _targetTypeMultiplier) == 0x0038);
static_assert(offsetof(UExplosionFailurePenalty, _explosionPS) == 0x0058);
static_assert(offsetof(UExplosionFailurePenalty, _explosionAudioEvent) == 0x0060);
static_assert(offsetof(UExplosiveProtectionItemComponent, _minigameClass) == 0x00D0);
static_assert(offsetof(UExplosiveProtectionItemComponent, _minigameToolTag) == 0x00D8);
static_assert(offsetof(UExplosiveProtectionItemComponent, _lockItem) == 0x00E0);
static_assert(offsetof(UExplosiveProtectionItemComponent, _lockData) == 0x00E8);
static_assert(offsetof(UExplosiveProtectionItemComponent, _explosionParticles) == 0x00F0);
static_assert(offsetof(UExplosiveProtectionItemComponent, _explosionParticlesLocation) == 0x00F8);
static_assert(offsetof(UExplosiveProtectionItemComponent, _explosionAudioEvent) == 0x0108);
static_assert(offsetof(UExplosiveProtectionItemComponent, _targetTypeMultiplier) == 0x0128);
static_assert(offsetof(UExplosiveProtectionItemComponent, _explosionCameraShakeClass) == 0x0140);
static_assert(offsetof(AExplosiveTrapItem, _trapForwardVector) == 0x0AD4);
static_assert(offsetof(AExplosiveTrapItem, _triggerSound) == 0x0AE8);
static_assert(offsetof(AExplosiveTrapItem, _detonationSound) == 0x0AF0);
static_assert(offsetof(AExplosiveTrapItem, _detonationParticles) == 0x0AF8);
static_assert(offsetof(AExplosiveTrapItem, _detonationParticlesTransform) == 0x0B00);
static_assert(offsetof(AExplosiveTrapItem, _primaryTargetTypeMultiplier) == 0x0B60);
static_assert(offsetof(AExplosiveTrapItem, _secondaryTargetTypeMultiplier) == 0x0B88);
static_assert(offsetof(AFakeItem, _staticMesh) == 0x0228);
static_assert(offsetof(AFakeItem, _niagaraComponent) == 0x0230);
static_assert(offsetof(AFakeItem, _spawnLocationOffset) == 0x0238);
static_assert(offsetof(AFakeItem, _spawnRotationOffset) == 0x0244);
static_assert(offsetof(AFakeItem, _interactionAudioEvent) == 0x0260);
static_assert(offsetof(AFakeItem, _niagaraParticleMaterial) == 0x0268);
static_assert(offsetof(AFakeItem, _meshMaterials) == 0x0278);
static_assert(offsetof(AFakeItem, _particleMaterial) == 0x0288);
static_assert(offsetof(UFamePointDebugComponent, _widgetClass) == 0x00B0);
static_assert(offsetof(UFamePointDebugComponent, _widget) == 0x00B8);
static_assert(offsetof(UFamePointDebugWidget, _famePointsText) == 0x0268);
static_assert(offsetof(FFamePointAwards, MaxTimeFromLastLogin) == 0x0030);
static_assert(offsetof(UFamePointSettings, Awards) == 0x0030);
static_assert(offsetof(UFamePointSettings, Penalties) == 0x0168);
static_assert(offsetof(UFamePointSettings, FamePointTagSettings) == 0x0188);
static_assert(offsetof(UFamePointSettings, FameGainCurve) == 0x0190);
static_assert(offsetof(UFamePointTagSettings, _famePointAmountWhenLootedForTag) == 0x0030);
static_assert(offsetof(UFamePointTagSettings, _famePointAmountWhenSellingForTag) == 0x0080);
static_assert(offsetof(UFamePointTagSettings, _famePointAmountWhenBuyingForTag) == 0x00D0);
static_assert(offsetof(FFarmingSkillParametersPerSkillLevel, SuccessfulHarvestNumItemsToSpawn) == 0x0040);
static_assert(offsetof(UFarmingSkill, NoSkillParameters) == 0x00B0);
static_assert(offsetof(UFarmingSkill, BasicSkillParameters) == 0x0120);
static_assert(offsetof(UFarmingSkill, MediumSkillParameters) == 0x0190);
static_assert(offsetof(UFarmingSkill, AdvancedSkillParameters) == 0x0200);
static_assert(offsetof(UFarmingSkill, AboveAdvancedSkillParameters) == 0x0270);
static_assert(offsetof(UFertilizerItemComponent, _type) == 0x00C8);
static_assert(offsetof(UFertilizerItemComponent, _addFertilizerMontage) == 0x00D0);
static_assert(offsetof(FFillItemWithReplenishableResourceInteractionData, InteractionCaptionOverride) == 0x0000);
static_assert(offsetof(FFillItemWithReplenishableResourceInteractionData, PrisonerFillingMontage) == 0x0028);
static_assert(offsetof(FFillItemWithReplenishableResourceInteractionData, StartItemNoiseAudioEvent) == 0x0030);
static_assert(offsetof(FFillItemWithReplenishableResourceInteractionData, StopItemNoiseAudioEvent) == 0x0038);
static_assert(offsetof(UFillItemWithReplenishableResourceAssetData, InteractionData) == 0x0030);
static_assert(offsetof(AFireItem, _heatSourceItemComponent) == 0x09C0);
static_assert(offsetof(AFireplaceItem, _collisionMesh) == 0x09C8);
static_assert(offsetof(AFireworksTrapItem, _triggerSound) == 0x0AD0);
static_assert(offsetof(AFishingAttachment, _staticMeshWhenAttached) == 0x09A0);
static_assert(offsetof(AFishingAttachmentBait, _baitCatchingChanceMultiplier) == 0x09C0);
static_assert(offsetof(FBuoyancyConstraint, Location) == 0x0000);
static_assert(offsetof(FBuoyancyConstraint, Bone) == 0x000C);
static_assert(offsetof(FBuoyancy, _testPoints) == 0x0000);
static_assert(offsetof(FBuoyancy, _velocityDamper) == 0x0010);
static_assert(offsetof(AFishingAttachmentFloater, _buoyancy) == 0x09C0);
static_assert(offsetof(AFishingAttachmentFloater, _floaterWaterCheckOffset) == 0x0A54);
static_assert(offsetof(AFishingAttachmentFloater, _hitWaterParticles) == 0x0AE0);
static_assert(offsetof(AFishingAttachmentFloater, _rippleParticleSystemComponent) == 0x0AE8);
static_assert(offsetof(AFishingAttachmentFloater, _movingRippleParticleSystemComponent) == 0x0AF0);
static_assert(offsetof(AFishingAttachmentFloater, _sinkParticleSystemComponent) == 0x0AF8);
static_assert(offsetof(AFishingAttachmentFloater, _scaledMaterial) == 0x0B00);
static_assert(offsetof(AFishingAttachmentFloater, _storedMaterial) == 0x0B08);
static_assert(offsetof(AFishingAttachmentHook, _hookedFishTransform) == 0x09D0);
static_assert(offsetof(AFishingAttachmentHook, _hookedFishMesh) == 0x0A00);
static_assert(offsetof(AFishingAttachmentHook, _hookedFishHookPositionName) == 0x0A08);
static_assert(offsetof(AFishingAttachmentHook, _movingRippleParticleSystemComponent) == 0x0A18);
static_assert(offsetof(AFishingAttachmentHook, _splashParticleSystemComponent) == 0x0A20);
static_assert(offsetof(AFishingAttachmentReel, SkeletalMesh) == 0x09C0);
static_assert(offsetof(AFishingAttachmentReel, ReelHandIK) == 0x09C8);
static_assert(offsetof(AFishingAttachmentReel, _leftHandOffset) == 0x09F0);
static_assert(offsetof(AFishingAttachmentReel, _lockAfterLongCastAnimMontage) == 0x0A20);
static_assert(offsetof(AFishingAttachmentReel, _lockAfterShortCastAnimMontage) == 0x0A28);
static_assert(offsetof(AFishingAttachmentReel, _reelCastAnimMontage) == 0x0A30);
static_assert(offsetof(AFishingAttachmentReel, _reelingAnimSequence) == 0x0A38);
static_assert(offsetof(AFishingAttachmentReel, _reelingStartAudioEvent) == 0x0A40);
static_assert(offsetof(AFishingAttachmentReel, _reelingEndAudioEvent) == 0x0A48);
static_assert(offsetof(AFishingAttachmentReel, _leftHandIKLocationCache) == 0x0A5C);
static_assert(offsetof(AFishingAttachmentWire, ReelSocketName) == 0x09C0);
static_assert(offsetof(AFishingAttachmentWire, _wireComponent) == 0x09C8);
static_assert(offsetof(AFishingAttachmentWire, _wireComponentClass) == 0x09D0);
static_assert(offsetof(AFishingAttachmentWire, _rippleParticleSystemComponent) == 0x09D8);
static_assert(offsetof(UFishingBarWidget, TopSegmentGradientColorBottom) == 0x0268);
static_assert(offsetof(UFishingBarWidget, TopSegmentGradientColorTop) == 0x0278);
static_assert(offsetof(UFishingBarWidget, ProgressBarBackgroundBoxBrush) == 0x0298);
static_assert(offsetof(UFishingBarWidget, ProgressBarBackgroundBoxColorAndOpacity) == 0x0320);
static_assert(offsetof(UFishingBarWidget, ProgressBarSegmentBrush) == 0x0338);
static_assert(offsetof(UFishingBarWidget, ProgressBarSegmentColorAndOpacity) == 0x03C0);
static_assert(offsetof(UFishingBarWidget, _progressBarSegmentBackgroundBoxesContainer) == 0x03D8);
static_assert(offsetof(UFishingBarWidget, _progressBarSegmentsContainer) == 0x03E0);
static_assert(offsetof(UFishingBarWidget, _simulatedProgressBar) == 0x03E8);
static_assert(offsetof(UFishingContainerWidget, _castingBarWidget) == 0x0268);
static_assert(offsetof(UFishingContainerWidget, _fishingBarWidget) == 0x0270);
static_assert(offsetof(UFishingReelAnimInstance, _owningPrisonerStance) == 0x02BC);
static_assert(offsetof(AFishingRod, SkeletalMesh) == 0x09C0);
static_assert(offsetof(AFishingRod, _fishingRodOwner) == 0x09D0);
static_assert(offsetof(AFishingRod, _fishingAttachmentsReplicated) == 0x09F0);
static_assert(offsetof(AFishingRod, _fishSpeciesData) == 0x0A50);
static_assert(offsetof(AFishingRod, _minigameCaughtItem) == 0x0AD0);
static_assert(offsetof(AFishingRod, _minigameTrophyActor) == 0x0AD8);
static_assert(offsetof(AFishingRod, _caughtFishOffsetTransform) == 0x0B20);
static_assert(offsetof(AFishingRod, _trophyActorClass) == 0x0B50);
static_assert(offsetof(AFishingRod, _castingObjectDropToWaterAudioEvent) == 0x0C28);
static_assert(offsetof(AFishingRod, _fishHookedAudioEvent) == 0x0C30);
static_assert(offsetof(AFishingRod, _wireBreakAudioEvent) == 0x0C38);
static_assert(offsetof(AFishingRod, _wireTensionStartAudioEvent) == 0x0C40);
static_assert(offsetof(AFishingRod, _wireTensionEndAudioEvent) == 0x0C48);
static_assert(offsetof(AFishingRod, _menuButtonClickAudioEvent) == 0x0C50);
static_assert(offsetof(UFishingRodAnimInstance, RodTipLocation) == 0x02BC);
static_assert(offsetof(UFishingRodAnimInstance, BentRodTipLocation) == 0x02C8);
static_assert(offsetof(UFishingRodAnimInstance, BendDirection) == 0x02D4);
static_assert(offsetof(AFishingTrophyActor, _skeletalMeshComponent) == 0x0220);
static_assert(offsetof(AFishingTrophyActor, _staticMeshComponent) == 0x0228);
static_assert(offsetof(UFishingTrophyWidget, _fishNameText) == 0x0298);
static_assert(offsetof(UFishingTrophyWidget, _fishWeightText) == 0x02A0);
static_assert(offsetof(UFishingTrophyWidget, _fishSizeText) == 0x02A8);
static_assert(offsetof(UFishingTrophyWidget, _keepFishHotkeyText) == 0x02B0);
static_assert(offsetof(UFishingTrophyWidget, _releaseFishHotkeyText) == 0x02B8);
static_assert(offsetof(UFishingTrophyWidget, _keepButton) == 0x02C0);
static_assert(offsetof(UFishingTrophyWidget, _releaseButton) == 0x02C8);
static_assert(offsetof(AFishingZoneIndicator, _sceneComponent) == 0x0220);
static_assert(offsetof(AFishingZoneIndicator, _fishIconParticles) == 0x0228);
static_assert(offsetof(AFishingZoneIndicator, _rippleParticles) == 0x0230);
static_assert(offsetof(AFishSchoolActor, _currentState) == 0x0220);
static_assert(offsetof(AFishSchoolActor, _capsuleComponent) == 0x0250);
static_assert(offsetof(AFishSchoolActor, _schoolInstancedStaticMeshComponent) == 0x0258);
static_assert(offsetof(AFishSchoolActor, _waterParticles) == 0x02D0);
static_assert(offsetof(AFishSchoolActor, _waterParticlesComponent) == 0x02E0);
static_assert(offsetof(AFishSchoolActor, _moveToLocationRep) == 0x0398);
static_assert(offsetof(AFishSchoolActor, _behaviorMap) == 0x03B0);
static_assert(offsetof(AFishSchoolActor, _randomMovementExtent) == 0x0400);
static_assert(offsetof(UFishSpeciesData, fishSpecies) == 0x0030);
static_assert(offsetof(UFishSpeciesData, SingleFishStaticMesh) == 0x0038);
static_assert(offsetof(UFishSpeciesData, SingleFishSkeletalMesh) == 0x0040);
static_assert(offsetof(UFishSpeciesData, MaterialOverride) == 0x0048);
static_assert(offsetof(UFishSpeciesData, CaughtFishAnimSequence) == 0x0050);
static_assert(offsetof(UFishSpeciesData, SchoolClass) == 0x0058);
static_assert(offsetof(UFishSpeciesData, CaughtFishClass) == 0x0060);
static_assert(offsetof(UFishSpeciesData, TimeOfDayPercentageCurve) == 0x0080);
static_assert(offsetof(FFishSpawnData, FishSpeciesData) == 0x0000);
static_assert(offsetof(UFishSpeciesPreset, FishSpawnData) == 0x0030);
static_assert(offsetof(AFlagAreaVisualizer, _staticMeshComponent) == 0x0220);
static_assert(offsetof(FRaidProtection, FlagId) == 0x0010);
static_assert(offsetof(FRaidProtectionArray, _activeRaidProtections) == 0x0108);
static_assert(offsetof(ARaidProtectionManager, _activeRaidProtections) == 0x0220);
static_assert(offsetof(UFlamethrowerComponent, _flamethrowerParticleSystem) == 0x00B0);
static_assert(offsetof(UFlamethrowerComponent, _particleSpeed) == 0x00BC);
static_assert(offsetof(UFlamethrowerComponent, _flamethrowerNiagaraComponent) == 0x00C8);
static_assert(offsetof(UFlamethrowerComponent, _lightSourceMesh) == 0x00D0);
static_assert(offsetof(UFlamethrowerComponent, _lightSourceMaterial) == 0x00D8);
static_assert(offsetof(UFlamethrowerComponent, _lightSourceMeshComponent) == 0x00E0);
static_assert(offsetof(UFlamethrowerComponent, _lightSourceScale) == 0x00E8);
static_assert(offsetof(UFlamethrowerComponent, _lightSourceColor) == 0x0100);
static_assert(offsetof(UFlamethrowerComponent, _socketName) == 0x0138);
static_assert(offsetof(UFlamethrowerComponent, _effectScale) == 0x0140);
static_assert(offsetof(UFlamethrowerComponent, _targetTypeMultiplier) == 0x0150);
static_assert(offsetof(UFlamethrowerComponent, _temperature) == 0x01B0);
static_assert(offsetof(UFlamethrowerComponent, _weaponItemOverlapBoxExtent) == 0x01C0);
static_assert(offsetof(UFlamethrowerComponent, _weaponItemOverlapBoxCenter) == 0x01CC);
static_assert(offsetof(UFlamethrowerComponent, _activeAudioEvent) == 0x0238);
static_assert(offsetof(UFlamethrowerComponent, _stopAudioEvent) == 0x0240);
static_assert(offsetof(UFlamethrowerComponent, _firePointsEffect) == 0x0250);
static_assert(offsetof(UFlamethrowerComponent, _firePointsLifetime) == 0x0258);
static_assert(offsetof(UFlamethrowerComponent, _firePointsBaseSize) == 0x0260);
static_assert(offsetof(UFlamethrowerComponent, _firePointsSizeScale) == 0x0268);
static_assert(offsetof(FIgnitableItemIgnitionRequirements, PossibleItemTags) == 0x0000);
static_assert(offsetof(UIgnitableItemComponent, _effectsSocket) == 0x00D4);
static_assert(offsetof(UIgnitableItemComponent, _prisonerIgniteMontage) == 0x00E0);
static_assert(offsetof(UIgnitableItemComponent, _ignitionAudioEvent) == 0x00E8);
static_assert(offsetof(UIgnitableItemComponent, _extinguishAudioEvent) == 0x00F0);
static_assert(offsetof(UIgnitableItemComponent, _ignitionParticle) == 0x00F8);
static_assert(offsetof(UIgnitableItemComponent, _burningParticle) == 0x0100);
static_assert(offsetof(UIgnitableItemComponent, _extinguishParticle) == 0x0108);
static_assert(offsetof(UIgnitableItemComponent, _ignitionNiagaraParticle) == 0x0110);
static_assert(offsetof(UIgnitableItemComponent, _burningNiagaraParticle) == 0x0118);
static_assert(offsetof(UIgnitableItemComponent, _extinguishNiagaraParticle) == 0x0120);
static_assert(offsetof(UIgnitableItemComponent, _repState) == 0x0135);
static_assert(offsetof(UIgnitableItemComponent, _ignitionRequirements) == 0x0150);
static_assert(offsetof(UFlareItemComponent, _pointLightColor) == 0x01A0);
static_assert(offsetof(UFlareItemComponent, _pointLightMaterial) == 0x01B0);
static_assert(offsetof(AFlareTrapItem, _triggerSound) == 0x0AD0);
static_assert(offsetof(AFlareTrapItem, _projectileClass) == 0x0AE0);
static_assert(offsetof(AFlareTrapItem, _projectileLocation) == 0x0AE8);
static_assert(offsetof(AFlareTrapItem, _projectileRotation) == 0x0AF4);
static_assert(offsetof(AFlashbangItem, _flashbangEffectsClass) == 0x0A68);
static_assert(offsetof(AFlashbangItemEffects, _explosionParticles) == 0x0220);
static_assert(offsetof(AFlashbangItemEffects, _explosionCameraShakeClass) == 0x0228);
static_assert(offsetof(AFlashbangItemEffects, _explosionAudioEvent) == 0x0230);
static_assert(offsetof(AFlashbangItemEffects, _startStunnedSoundEffectsAudioEvent) == 0x0238);
static_assert(offsetof(AFlashbangItemEffects, _stopStunnedSoundEffectsAudioEvent) == 0x0240);
static_assert(offsetof(AFogSphere, _densityVersusTimeOfDay) == 0x0228);
static_assert(offsetof(FFoliageGeneralData, CollisionBoundsOffset) == 0x0004);
static_assert(offsetof(FFoliageEffectsData, StartMovingThroughFoliageAudioEvent) == 0x0000);
static_assert(offsetof(FFoliageEffectsData, StopMovingThroughFoliageAudioEvent) == 0x0008);
static_assert(offsetof(FFoliageEffectsData, OneShotMovingThroughFoliageAudioEvent) == 0x0010);
static_assert(offsetof(FFoliageAIPerceptionData, MaxUndetectedPrisonerStance) == 0x0003);
static_assert(offsetof(FTreeCanopySphere, Center) == 0x0000);
static_assert(offsetof(FTreeCanopyCapsule, Center) == 0x0000);
static_assert(offsetof(FTreeCanopyCapsule, Rotation) == 0x000C);
static_assert(offsetof(FFoliageCanopyData, Sphere) == 0x0004);
static_assert(offsetof(FFoliageCanopyData, Capsule) == 0x001C);
static_assert(offsetof(UFoliageAssetData, Type) == 0x0028);
static_assert(offsetof(UFoliageAssetData, GeneralData) == 0x002C);
static_assert(offsetof(UFoliageAssetData, EffectsData) == 0x0040);
static_assert(offsetof(UFoliageAssetData, AIPerceptionData) == 0x0058);
static_assert(offsetof(UFoliageAssetData, CanopyData) == 0x005C);
static_assert(offsetof(FSubstancesData, ForeignSubstances) == 0x0080);
static_assert(offsetof(FMetabolismConfiguration, NutrientsAbsorptionRateModifier) == 0x0040);
static_assert(offsetof(FMetabolismConfiguration, AbsorbedNonEnergyProvidingNutrientsExcessDiscardRateMultiplier) == 0x0118);
static_assert(offsetof(FMetabolismConfiguration, AdditionalRequiredWaterPerNutrientAbsorbed) == 0x01E8);
static_assert(offsetof(FMetabolismConfiguration, NutrientAbsorptionWasteFecesRatios) == 0x02C0);
static_assert(offsetof(FMetabolismConfiguration, NutrientAbsorptionWasteUrineRatios) == 0x0390);
static_assert(offsetof(UMetabolism, _configuration) == 0x0CA8);
static_assert(offsetof(UForeignSubstance, _name) == 0x0028);
static_assert(offsetof(UForeignSubstance, _disposition) == 0x0040);
static_assert(offsetof(UForeignSubstance, _discardRateMultiplierPerOtherSubstance) == 0x0050);
static_assert(offsetof(UFortificationComponent, _destructionParticles) == 0x0528);
static_assert(offsetof(UFortificationComponent, _destructionAudio) == 0x0530);
static_assert(offsetof(UFortificationComponent, _repairableParams) == 0x0540);
static_assert(offsetof(FFortificationData, LocationZeroOrigin) == 0x0000);
static_assert(offsetof(FFortificationData, FortificationClass) == 0x0010);
static_assert(offsetof(FFortificationData, OwnerUserProfileId) == 0x0018);
static_assert(offsetof(UFortificationEntityComponentSave, FortificationData) == 0x0028);
static_assert(offsetof(UFuelItemTag, CombustionParams) == 0x0030);
static_assert(offsetof(UFireFanningItemTag, BlowAirIntoFireMontage) == 0x0030);
static_assert(offsetof(UFireFanningItemTag, BlowAirIntoLowFireMontage) == 0x0038);
static_assert(offsetof(UFireFanningItemTag, ItemSwingAnimOpen) == 0x0040);
static_assert(offsetof(UFireFanningItemTag, ItemSwingAnimOpenSection) == 0x0048);
static_assert(offsetof(UFireFanningItemTag, ItemSwingAnimClose) == 0x0050);
static_assert(offsetof(UFireFanningItemTag, ItemSwingAnimCloseSection) == 0x0058);
static_assert(offsetof(AGameEventBorder, Mesh) == 0x0220);
static_assert(offsetof(AGameEventBorder, Material) == 0x0228);
static_assert(offsetof(AGameEventBorder, SoundSpline) == 0x0230);
static_assert(offsetof(AGameEventBorder, AudioEvent) == 0x0238);
static_assert(offsetof(AGameEventBorder, _state) == 0x0240);
static_assert(offsetof(AGameEventBorder, _desiredOffset) == 0x024C);
static_assert(offsetof(UGameEventCardWidget, _gameEvent) == 0x0268);
static_assert(offsetof(UGameEventCardWidget, _joinButton) == 0x0270);
static_assert(offsetof(UGameEventCardWidget, _joinEventTooltipText) == 0x0278);
static_assert(offsetof(UGameEventCardWidget, _registerForEventTooltipText) == 0x0290);
static_assert(offsetof(UGameEventCardWidget, _cancelTooltipText) == 0x02A8);
static_assert(offsetof(UGameEventCardWidget, _joinBlueButton) == 0x02C0);
static_assert(offsetof(UGameEventCardWidget, _joinBlueTeamTooltipText) == 0x02C8);
static_assert(offsetof(UGameEventCardWidget, _joinRedButton) == 0x02E0);
static_assert(offsetof(UGameEventCardWidget, _joinRedTeamTooltipText) == 0x02E8);
static_assert(offsetof(UGameEventCardWidget, _switchTeamButton) == 0x0300);
static_assert(offsetof(UGameEventCardWidget, _switchTeamTooltipText) == 0x0308);
static_assert(offsetof(UGameEventCardWidget, _gameEventInfoWidget) == 0x0320);
static_assert(offsetof(UGameEventCardWidget, _scoreboardSlot) == 0x0328);
static_assert(offsetof(UGameEventCardWidget, _eventName) == 0x0330);
static_assert(offsetof(UGameEventCardWidget, _numberOfPlayersText) == 0x0338);
static_assert(offsetof(UGameEventCardWidget, _roundsText) == 0x0340);
static_assert(offsetof(UGameEventCardWidget, _statusText) == 0x0348);
static_assert(offsetof(UGameEventCardWidget, _timeText) == 0x0350);
static_assert(offsetof(UGameEventCardWidget, _screenshot) == 0x0358);
static_assert(offsetof(UGameEventCardWidget, _entryFeeTag) == 0x0360);
static_assert(offsetof(UGameEventCardWidget, _buttons) == 0x0368);
static_assert(offsetof(UGameEventCardWidget, _leaveButton) == 0x0370);
static_assert(offsetof(UGameEventCardWidget, _leaveEventTooltipText) == 0x0378);
static_assert(offsetof(UGameEventCardWidget, _joinDisabledMsgBorder) == 0x0390);
static_assert(offsetof(UGameEventCardWidget, _cooldownThrobber) == 0x0398);
static_assert(offsetof(UGameEventCardWidget, _defaultScreenshotBrush) == 0x03A0);
static_assert(offsetof(UGameEventCardWidget, _menuButtonClick) == 0x0428);
static_assert(offsetof(UGameEventCardWidget, _tooltipClass) == 0x0430);
static_assert(offsetof(UGameEventInfoWidget, RespawnText) == 0x0268);
static_assert(offsetof(UGameEventInfoWidget, MinPlayersText) == 0x0270);
static_assert(offsetof(UGameEventInfoWidget, NumTeamsText) == 0x0278);
static_assert(offsetof(UGameEventInfoWidget, DescriptionText) == 0x0280);
static_assert(offsetof(UGameEventInfoWidget, PrerequisitesText) == 0x0288);
static_assert(offsetof(UGameEventInfoWidget, WeaponsText) == 0x0290);
static_assert(offsetof(UGameEventInfoWidget, RewardsText) == 0x0298);
static_assert(offsetof(UGameEventLeaderboardRow, Background) == 0x0270);
static_assert(offsetof(UGameEventLeaderboardRow, Player) == 0x0278);
static_assert(offsetof(UGameEventLeaderboardRow, Fame) == 0x0280);
static_assert(offsetof(UGameEventLeaderboardRow, Score) == 0x0288);
static_assert(offsetof(UGameEventLeaderboardRow, KDA) == 0x0290);
static_assert(offsetof(UGameEventLeaderboardRow, RankText) == 0x0298);
static_assert(offsetof(UGameEventLeaderboardRow, BackgroundColor) == 0x02A0);
static_assert(offsetof(UGameEventLeaderboardWidget, _leaderboardRowClass) == 0x0298);
static_assert(offsetof(UGameEventLeaderboardWidget, TopPlayers) == 0x02A8);
static_assert(offsetof(UGameEventLeaderboardWidget, PlayerRanking) == 0x02B0);
static_assert(offsetof(UGameEventLeaderboardWidget, CircularThrobber_Ranking) == 0x02B8);
static_assert(offsetof(UGameEventLeaderboardWidget, CircularThrobber_TopPlayers) == 0x02C0);
static_assert(offsetof(UGameEventLeftPanel, AllEventsComboBox) == 0x0268);
static_assert(offsetof(UGameEventLeftPanel, EventArea) == 0x0270);
static_assert(offsetof(UGameEventLeftPanel, VerticalBox) == 0x0278);
static_assert(offsetof(UGameEventLeftPanel, _eventSizeBox) == 0x0280);
static_assert(offsetof(UGameEventLeftPanel, _allEvents) == 0x0288);
static_assert(offsetof(UGameEventLeftPanel, _currentEvents) == 0x0298);
static_assert(offsetof(UGameEventLeftPanel, _nextEvents) == 0x02A8);
static_assert(offsetof(UGameEventLoadoutMenuWidget, _mandatoryGear) == 0x0270);
static_assert(offsetof(UGameEventLoadoutMenuWidget, _primarySelection) == 0x0280);
static_assert(offsetof(UGameEventLoadoutMenuWidget, _secondarySelection) == 0x0288);
static_assert(offsetof(UGameEventLoadoutMenuWidget, _tertiarySelection) == 0x0290);
static_assert(offsetof(UGameEventLoadoutMenuWidget, _outfitSelection) == 0x0298);
static_assert(offsetof(AGameEventManager, _announcedGameEvents) == 0x0228);
static_assert(offsetof(AGameEventManager, _currentGameEvents) == 0x0238);
static_assert(offsetof(AGameEventManager, _endedGameEvents) == 0x0248);
static_assert(offsetof(UGameEventNotificationPanel, _nextEventBox) == 0x0270);
static_assert(offsetof(UGameEventNotificationPanel, _nextEventText) == 0x0278);
static_assert(offsetof(UGameEventNotificationPanel, _nextEventCountdown) == 0x0280);
static_assert(offsetof(UGameEventNotificationPanel, _eventCancelBox) == 0x0288);
static_assert(offsetof(UGameEventNotificationPanel, _eventCancelTime) == 0x0290);
static_assert(offsetof(UGameEventNotificationPanel, _eventTimeBox) == 0x0298);
static_assert(offsetof(UGameEventNotificationPanel, _eventTimeText) == 0x02A0);
static_assert(offsetof(UGameEventNotificationPanel, _nonAlertedColor) == 0x02A8);
static_assert(offsetof(UGameEventNotificationPanel, _alertedColor) == 0x02B8);
static_assert(offsetof(UGameEventParticipantInfoCardWidget, Name) == 0x0268);
static_assert(offsetof(UGameEventParticipantInfoCardWidget, SteamID) == 0x0270);
static_assert(offsetof(UGameEventParticipantInfoCardWidget, Ping) == 0x0278);
static_assert(offsetof(UGameEventParticipantInfoCardWidget, FameLevel) == 0x0280);
static_assert(offsetof(UGameEventParticipantInfoCardWidget, Kills) == 0x0288);
static_assert(offsetof(UGameEventParticipantInfoCardWidget, Deaths) == 0x0290);
static_assert(offsetof(UGameEventParticipantInfoCardWidget, Assists) == 0x0298);
static_assert(offsetof(UGameEventParticipantInfoCardWidget, Revenges) == 0x02A0);
static_assert(offsetof(UGameEventParticipantInfoCardWidget, Headshots) == 0x02A8);
static_assert(offsetof(UGameEventParticipantStatsWidget, _gameEvent) == 0x0268);
static_assert(offsetof(UGameEventParticipantStatsWidget, _scoreboard) == 0x0278);
static_assert(offsetof(UGameEventParticipantStatsWidgetCTF, Assists) == 0x0310);
static_assert(offsetof(UGameEventParticipantStatsWidgetCTF, Captures) == 0x0318);
static_assert(offsetof(UGameEventParticipantStatsWidgetCTF, Deaths) == 0x0320);
static_assert(offsetof(UGameEventParticipantStatsWidgetCTF, Headshots) == 0x0328);
static_assert(offsetof(UGameEventParticipantStatsWidgetCTF, Kills) == 0x0330);
static_assert(offsetof(UGameEventParticipantStatsWidgetCTF, Number) == 0x0338);
static_assert(offsetof(UGameEventParticipantStatsWidgetCTF, PlayerName) == 0x0340);
static_assert(offsetof(UGameEventParticipantStatsWidgetCTF, Score) == 0x0348);
static_assert(offsetof(UGameEventParticipantStatsWidgetCTF, NumberBorder) == 0x0350);
static_assert(offsetof(UGameEventParticipantStatsWidgetCTF, SelectedOverlay) == 0x0358);
static_assert(offsetof(UGameEventParticipantStatsWidgetCTF, InactiveOverlay) == 0x0360);
static_assert(offsetof(UGameEventParticipantStatsWidgetCTF, Border) == 0x0368);
static_assert(offsetof(UGameEventParticipantStatsWidgetCTF, Border0) == 0x0370);
static_assert(offsetof(UGameEventParticipantStatsWidgetCTF, Border1) == 0x0378);
static_assert(offsetof(UGameEventParticipantStatsWidgetCTF, Border2) == 0x0380);
static_assert(offsetof(UGameEventParticipantStatsWidgetCTF, Border3) == 0x0388);
static_assert(offsetof(UGameEventParticipantStatsWidgetCTF, Border4) == 0x0390);
static_assert(offsetof(UGameEventParticipantStatsWidgetCTF, Border5) == 0x0398);
static_assert(offsetof(UGameEventParticipantStatsWidgetCTFMini, Captures) == 0x0310);
static_assert(offsetof(UGameEventParticipantStatsWidgetCTFMini, Kills) == 0x0318);
static_assert(offsetof(UGameEventParticipantStatsWidgetCTFMini, Number) == 0x0320);
static_assert(offsetof(UGameEventParticipantStatsWidgetCTFMini, PlayerName) == 0x0328);
static_assert(offsetof(UGameEventParticipantStatsWidgetCTFMini, Score) == 0x0330);
static_assert(offsetof(UGameEventParticipantStatsWidgetCTFMini, Deaths) == 0x0338);
static_assert(offsetof(UGameEventParticipantStatsWidgetCTFMini, Border) == 0x0340);
static_assert(offsetof(UGameEventParticipantStatsWidgetDeathmatch, Assists) == 0x0310);
static_assert(offsetof(UGameEventParticipantStatsWidgetDeathmatch, Deaths) == 0x0318);
static_assert(offsetof(UGameEventParticipantStatsWidgetDeathmatch, Headshots) == 0x0320);
static_assert(offsetof(UGameEventParticipantStatsWidgetDeathmatch, Kills) == 0x0328);
static_assert(offsetof(UGameEventParticipantStatsWidgetDeathmatch, Number) == 0x0330);
static_assert(offsetof(UGameEventParticipantStatsWidgetDeathmatch, PlayerName) == 0x0338);
static_assert(offsetof(UGameEventParticipantStatsWidgetDeathmatch, Score) == 0x0340);
static_assert(offsetof(UGameEventParticipantStatsWidgetDeathmatch, Suicides) == 0x0348);
static_assert(offsetof(UGameEventParticipantStatsWidgetDeathmatch, NumberBorder) == 0x0350);
static_assert(offsetof(UGameEventParticipantStatsWidgetDeathmatch, SelectedOverlay) == 0x0358);
static_assert(offsetof(UGameEventParticipantStatsWidgetDeathmatch, InactiveOverlay) == 0x0360);
static_assert(offsetof(UGameEventParticipantStatsWidgetDeathmatch, Border) == 0x0368);
static_assert(offsetof(UGameEventParticipantStatsWidgetDeathmatch, Border0) == 0x0370);
static_assert(offsetof(UGameEventParticipantStatsWidgetDeathmatch, Border1) == 0x0378);
static_assert(offsetof(UGameEventParticipantStatsWidgetDeathmatch, Border2) == 0x0380);
static_assert(offsetof(UGameEventParticipantStatsWidgetDeathmatch, Border3) == 0x0388);
static_assert(offsetof(UGameEventParticipantStatsWidgetDeathmatch, Border4) == 0x0390);
static_assert(offsetof(UGameEventParticipantStatsWidgetDeathmatch, Border5) == 0x0398);
static_assert(offsetof(UGameEventParticipantStatsWidgetDeathmatchMini, Deaths) == 0x0310);
static_assert(offsetof(UGameEventParticipantStatsWidgetDeathmatchMini, Kills) == 0x0318);
static_assert(offsetof(UGameEventParticipantStatsWidgetDeathmatchMini, Number) == 0x0320);
static_assert(offsetof(UGameEventParticipantStatsWidgetDeathmatchMini, PlayerName) == 0x0328);
static_assert(offsetof(UGameEventParticipantStatsWidgetDeathmatchMini, Score) == 0x0330);
static_assert(offsetof(UGameEventParticipantStatsWidgetDeathmatchMini, Border) == 0x0338);
static_assert(offsetof(UGameEventParticipantStatsWidgetDropZone, Assists) == 0x0310);
static_assert(offsetof(UGameEventParticipantStatsWidgetDropZone, Captures) == 0x0318);
static_assert(offsetof(UGameEventParticipantStatsWidgetDropZone, Deaths) == 0x0320);
static_assert(offsetof(UGameEventParticipantStatsWidgetDropZone, Headshots) == 0x0328);
static_assert(offsetof(UGameEventParticipantStatsWidgetDropZone, Kills) == 0x0330);
static_assert(offsetof(UGameEventParticipantStatsWidgetDropZone, Number) == 0x0338);
static_assert(offsetof(UGameEventParticipantStatsWidgetDropZone, PlayerName) == 0x0340);
static_assert(offsetof(UGameEventParticipantStatsWidgetDropZone, Suicides) == 0x0348);
static_assert(offsetof(UGameEventParticipantStatsWidgetDropZone, Score) == 0x0350);
static_assert(offsetof(UGameEventParticipantStatsWidgetDropZone, NumberBorder) == 0x0358);
static_assert(offsetof(UGameEventParticipantStatsWidgetDropZone, SelectedOverlay) == 0x0360);
static_assert(offsetof(UGameEventParticipantStatsWidgetDropZone, InactiveOverlay) == 0x0368);
static_assert(offsetof(UGameEventParticipantStatsWidgetDropZone, Border) == 0x0370);
static_assert(offsetof(UGameEventParticipantStatsWidgetDropZone, Border0) == 0x0378);
static_assert(offsetof(UGameEventParticipantStatsWidgetDropZone, Border1) == 0x0380);
static_assert(offsetof(UGameEventParticipantStatsWidgetDropZone, Border2) == 0x0388);
static_assert(offsetof(UGameEventParticipantStatsWidgetDropZone, Border3) == 0x0390);
static_assert(offsetof(UGameEventParticipantStatsWidgetDropZone, Border4) == 0x0398);
static_assert(offsetof(UGameEventParticipantStatsWidgetDropZone, Border5) == 0x03A0);
static_assert(offsetof(UGameEventParticipantStatsWidgetDropZone, Border6) == 0x03A8);
static_assert(offsetof(UGameEventParticipantStatsWidgetDropZoneMini, Captures) == 0x0310);
static_assert(offsetof(UGameEventParticipantStatsWidgetDropZoneMini, Deaths) == 0x0318);
static_assert(offsetof(UGameEventParticipantStatsWidgetDropZoneMini, Kills) == 0x0320);
static_assert(offsetof(UGameEventParticipantStatsWidgetDropZoneMini, Number) == 0x0328);
static_assert(offsetof(UGameEventParticipantStatsWidgetDropZoneMini, PlayerName) == 0x0330);
static_assert(offsetof(UGameEventParticipantStatsWidgetDropZoneMini, Score) == 0x0338);
static_assert(offsetof(UGameEventParticipantStatsWidgetDropZoneMini, Border) == 0x0340);
static_assert(offsetof(UGameEventParticipantStatsWidgetTeamDeathmatch, Assists) == 0x0310);
static_assert(offsetof(UGameEventParticipantStatsWidgetTeamDeathmatch, Deaths) == 0x0318);
static_assert(offsetof(UGameEventParticipantStatsWidgetTeamDeathmatch, Headshots) == 0x0320);
static_assert(offsetof(UGameEventParticipantStatsWidgetTeamDeathmatch, Kills) == 0x0328);
static_assert(offsetof(UGameEventParticipantStatsWidgetTeamDeathmatch, Number) == 0x0330);
static_assert(offsetof(UGameEventParticipantStatsWidgetTeamDeathmatch, PlayerName) == 0x0338);
static_assert(offsetof(UGameEventParticipantStatsWidgetTeamDeathmatch, Score) == 0x0340);
static_assert(offsetof(UGameEventParticipantStatsWidgetTeamDeathmatch, Suicides) == 0x0348);
static_assert(offsetof(UGameEventParticipantStatsWidgetTeamDeathmatch, NumberBorder) == 0x0350);
static_assert(offsetof(UGameEventParticipantStatsWidgetTeamDeathmatch, SelectedOverlay) == 0x0358);
static_assert(offsetof(UGameEventParticipantStatsWidgetTeamDeathmatch, InactiveOverlay) == 0x0360);
static_assert(offsetof(UGameEventParticipantStatsWidgetTeamDeathmatch, Border) == 0x0368);
static_assert(offsetof(UGameEventParticipantStatsWidgetTeamDeathmatch, Border0) == 0x0370);
static_assert(offsetof(UGameEventParticipantStatsWidgetTeamDeathmatch, Border1) == 0x0378);
static_assert(offsetof(UGameEventParticipantStatsWidgetTeamDeathmatch, Border2) == 0x0380);
static_assert(offsetof(UGameEventParticipantStatsWidgetTeamDeathmatch, Border3) == 0x0388);
static_assert(offsetof(UGameEventParticipantStatsWidgetTeamDeathmatch, Border4) == 0x0390);
static_assert(offsetof(UGameEventParticipantStatsWidgetTeamDeathmatch, Border5) == 0x0398);
static_assert(offsetof(UGameEventParticipantStatsWidgetTeamDeathmatchMini, Deaths) == 0x0310);
static_assert(offsetof(UGameEventParticipantStatsWidgetTeamDeathmatchMini, Kills) == 0x0318);
static_assert(offsetof(UGameEventParticipantStatsWidgetTeamDeathmatchMini, Number) == 0x0320);
static_assert(offsetof(UGameEventParticipantStatsWidgetTeamDeathmatchMini, PlayerName) == 0x0328);
static_assert(offsetof(UGameEventParticipantStatsWidgetTeamDeathmatchMini, Score) == 0x0330);
static_assert(offsetof(UGameEventParticipantStatsWidgetTeamDeathmatchMini, Border) == 0x0338);
static_assert(offsetof(UGameEventRoundInfoWidget, _gameEvent) == 0x0268);
static_assert(offsetof(UGameEventRoundInfoWidget, TimeLeft) == 0x0270);
static_assert(offsetof(UGameEventRoundInfoWidget, TimeLeftLabel) == 0x0278);
static_assert(offsetof(UGameEventRoundInfoWidget, RoundStatus) == 0x0280);
static_assert(offsetof(UGameEventRoundInfoWidget, TimeLeftBox) == 0x0288);
static_assert(offsetof(UGameEventRoundInfoWidgetDeathmatch, KillLimit) == 0x0290);
static_assert(offsetof(UGameEventRoundInfoWidgetDropZone, TextBlock) == 0x0290);
static_assert(offsetof(UGameEventRoundInfoWidgetDropZone, Objective) == 0x0298);
static_assert(offsetof(UGameEventRoundInfoWidgetTeamDeathmatch, KillLimit) == 0x0290);
static_assert(offsetof(FGameEventTeamColours, TeamName) == 0x0000);
static_assert(offsetof(FGameEventTeamColours, ParticipantStatsDarker) == 0x0010);
static_assert(offsetof(FGameEventTeamColours, ParticipantStatsLighter) == 0x0020);
static_assert(offsetof(FGameEventTeamColours, ParticipantStatsHighlighted) == 0x0030);
static_assert(offsetof(FGameEventTeamColours, ParticipantStatsDisabled) == 0x0040);
static_assert(offsetof(FGameEventTeamColours, ParticipantStatsMini) == 0x0050);
static_assert(offsetof(UGameEventScoreboardWidget, TeamInfoWidgetClass) == 0x0268);
static_assert(offsetof(UGameEventScoreboardWidget, StatWidgets) == 0x0288);
static_assert(offsetof(UGameEventScoreboardWidget, TeamColours) == 0x0298);
static_assert(offsetof(UGameEventScoreboardWidget, _gameEvent) == 0x02A8);
static_assert(offsetof(UGameEventScoreboardWidget, RoundInfo) == 0x02B8);
static_assert(offsetof(UGameEventScoreboardWidget, TextBlock) == 0x02C0);
static_assert(offsetof(UGameEventScoreboardWidget, UI_GameEventParticipantInfoCardWidget) == 0x02C8);
static_assert(offsetof(UGameEventScoreboardWidget, TeamGrid) == 0x02D0);
static_assert(offsetof(UGameEventScoreboardWidget, TeamWidgets) == 0x02D8);
static_assert(offsetof(UGameEventScoreboardWidget, TeamNames) == 0x02E8);
static_assert(offsetof(UGameEventScoreboardWidgetMini, Header) == 0x02F8);
static_assert(offsetof(UGameEventScoreboardWidgetMini, Rows) == 0x0300);
static_assert(offsetof(UGameEventScoreboardWidgetMini, Info) == 0x0308);
static_assert(offsetof(UGameEventScoreboardWidgetMini, EmptyMsg) == 0x0310);
static_assert(offsetof(UGameEventTeamHeaderWidgetCTF, WinCounterWidgetClass) == 0x0270);
static_assert(offsetof(UGameEventTeamHeaderWidgetCTF, TeamNameLeft) == 0x0278);
static_assert(offsetof(UGameEventTeamHeaderWidgetCTF, TeamNameRight) == 0x0280);
static_assert(offsetof(UGameEventTeamHeaderWidgetCTF, BackgroundImage) == 0x0288);
static_assert(offsetof(UGameEventTeamHeaderWidgetCTF, LeftSideLayoutBox) == 0x0290);
static_assert(offsetof(UGameEventTeamHeaderWidgetCTF, RightSideLayoutBox) == 0x0298);
static_assert(offsetof(UGameEventTeamHeaderWidgetCTF, LeftStarBox) == 0x02A0);
static_assert(offsetof(UGameEventTeamHeaderWidgetCTF, RightStarBox) == 0x02A8);
static_assert(offsetof(UGameEventTeamHeaderWidgetCTF, LeftTeamScore) == 0x02B0);
static_assert(offsetof(UGameEventTeamHeaderWidgetCTF, RightTeamScore) == 0x02B8);
static_assert(offsetof(UGameEventTeamHeaderWidgetCTF, PlayerTextLeft) == 0x02C0);
static_assert(offsetof(UGameEventTeamHeaderWidgetCTF, PlayerTextRight) == 0x02C8);
static_assert(offsetof(UGameEventTeamHeaderWidgetCTF, _gameEvent) == 0x02D0);
static_assert(offsetof(UGameEventTeamHeaderWidgetDropZone, WinCounterWidgetClass) == 0x0270);
static_assert(offsetof(UGameEventTeamHeaderWidgetDropZone, TeamNameLeft) == 0x0278);
static_assert(offsetof(UGameEventTeamHeaderWidgetDropZone, TeamNameRight) == 0x0280);
static_assert(offsetof(UGameEventTeamHeaderWidgetDropZone, BackgroundImage) == 0x0288);
static_assert(offsetof(UGameEventTeamHeaderWidgetDropZone, LeftSideLayoutBox) == 0x0290);
static_assert(offsetof(UGameEventTeamHeaderWidgetDropZone, RightSideLayoutBox) == 0x0298);
static_assert(offsetof(UGameEventTeamHeaderWidgetDropZone, LeftStarBox) == 0x02A0);
static_assert(offsetof(UGameEventTeamHeaderWidgetDropZone, RightStarBox) == 0x02A8);
static_assert(offsetof(UGameEventTeamHeaderWidgetDropZone, LeftTeamScore) == 0x02B0);
static_assert(offsetof(UGameEventTeamHeaderWidgetDropZone, RightTeamScore) == 0x02B8);
static_assert(offsetof(UGameEventTeamHeaderWidgetDropZone, PlayerTextLeft) == 0x02C0);
static_assert(offsetof(UGameEventTeamHeaderWidgetDropZone, PlayerTextRight) == 0x02C8);
static_assert(offsetof(UGameEventTeamHeaderWidgetDropZone, _gameEvent) == 0x02D0);
static_assert(offsetof(UGameEventTeamHeaderWidgetTeamDeathmatch, WinCounterWidgetClass) == 0x0270);
static_assert(offsetof(UGameEventTeamHeaderWidgetTeamDeathmatch, TeamNameLeft) == 0x0278);
static_assert(offsetof(UGameEventTeamHeaderWidgetTeamDeathmatch, TeamNameRight) == 0x0280);
static_assert(offsetof(UGameEventTeamHeaderWidgetTeamDeathmatch, BackgroundImage) == 0x0288);
static_assert(offsetof(UGameEventTeamHeaderWidgetTeamDeathmatch, LeftSideLayoutBox) == 0x0290);
static_assert(offsetof(UGameEventTeamHeaderWidgetTeamDeathmatch, RightSideLayoutBox) == 0x0298);
static_assert(offsetof(UGameEventTeamHeaderWidgetTeamDeathmatch, LeftStarBox) == 0x02A0);
static_assert(offsetof(UGameEventTeamHeaderWidgetTeamDeathmatch, RightStarBox) == 0x02A8);
static_assert(offsetof(UGameEventTeamHeaderWidgetTeamDeathmatch, LeftTeamScore) == 0x02B0);
static_assert(offsetof(UGameEventTeamHeaderWidgetTeamDeathmatch, RightTeamScore) == 0x02B8);
static_assert(offsetof(UGameEventTeamHeaderWidgetTeamDeathmatch, PlayerTextLeft) == 0x02C0);
static_assert(offsetof(UGameEventTeamHeaderWidgetTeamDeathmatch, PlayerTextRight) == 0x02C8);
static_assert(offsetof(UGameEventTeamHeaderWidgetTeamDeathmatch, _gameEvent) == 0x02D0);
static_assert(offsetof(UGameEventTeamInfoWidget, StatTextContainer) == 0x0268);
static_assert(offsetof(UGameEventTeamInfoWidget, TeamHeader) == 0x0270);
static_assert(offsetof(UGameEventTeamInfoWidget, TeamRows) == 0x0278);
static_assert(offsetof(UGameEventTeamInfoWidget, HeaderWidget) == 0x0288);
static_assert(offsetof(AGameEventTransport, Sphere) == 0x0220);
static_assert(offsetof(AGameEventTransport, PodMesh) == 0x0228);
static_assert(offsetof(AGameEventTransport, TargetMesh) == 0x0230);
static_assert(offsetof(AGameEventTransport, _state) == 0x024C);
static_assert(offsetof(AGameEventTransport, _lastPosition) == 0x0250);
static_assert(offsetof(AGameEventTransport, _targetPosition) == 0x025C);
static_assert(offsetof(FGameResourceConsumptionDataForeignSubstance, Class) == 0x0000);
static_assert(offsetof(UGameResourceConsumptionData, ConsumptionMethod) == 0x0028);
static_assert(offsetof(UGameResourceConsumptionData, ConsumptionDuration) == 0x002C);
static_assert(offsetof(UGameResourceConsumptionData, DigestionDuration) == 0x0034);
static_assert(offsetof(UGameResourceConsumptionData, ForeignSubstances) == 0x00C0);
static_assert(offsetof(UGameResourceConsumptionData, DigestionHandlers) == 0x00D8);
static_assert(offsetof(UGameResourceContainerProxyForInfiniteResource, _resourceType) == 0x0030);
static_assert(offsetof(UGameResourceContainerProxyForInfiniteResource, _requiredItemTagsForFilling) == 0x0078);
static_assert(offsetof(UGameResourceItemTag, ResourceType) == 0x0030);
static_assert(offsetof(UGameResourceItemTag, SocketTypes) == 0x0038);
static_assert(offsetof(UGameResourceItemTag, RequiredItemTagsForFueling) == 0x0060);
static_assert(offsetof(FEntityComponentId, EntityId) == 0x0000);
static_assert(offsetof(FEntityComponentId, ComponentName) == 0x0008);
static_assert(offsetof(UGameResourceSlotEntityComponentSave, ResourceComponentId) == 0x0028);
static_assert(offsetof(UGameResourceSlotEntityComponentSetup, ResourceType) == 0x0048);
static_assert(offsetof(UGameResourceSlotEntityComponentSetup, ResourceSocketTypes) == 0x0050);
static_assert(offsetof(UGameResourceSlotEntityComponentSetup, ResourceToSpawn) == 0x0078);
static_assert(offsetof(UGameResourceSlotEntityComponentSetup, ComponentNameToAttach) == 0x0080);
static_assert(offsetof(UGameResourceType, ResourceName) == 0x0028);
static_assert(offsetof(UGameResourceType, ConfigSectionName) == 0x0040);
static_assert(offsetof(UGameResourceType, WashData) == 0x0050);
static_assert(offsetof(UGameResourceType, CookingIngredientTag) == 0x005C);
static_assert(offsetof(UGameResourceType, ResourceImage) == 0x0068);
static_assert(offsetof(UGameResourceType, Color) == 0x0090);
static_assert(offsetof(UGameResourceType, ConsumptionData) == 0x00A0);
static_assert(offsetof(UGameResourceType, ItemTags) == 0x00A8);
static_assert(offsetof(UWashEyesHandler_Clean, _bodyEffectsToClean) == 0x0030);
static_assert(offsetof(UWashEyesHandler_Irritate, _bodyEffectsToAdd) == 0x0030);
static_assert(offsetof(UGameResourceWashData, WashEyesHandler) == 0x0038);
static_assert(offsetof(FGardenSlot, _slotPosition) == 0x000C);
static_assert(offsetof(FGardenSlot, _species) == 0x0018);
static_assert(offsetof(FGardenSlot, _stage) == 0x0020);
static_assert(offsetof(FGardenSlot, _pests) == 0x0038);
static_assert(offsetof(FGardenSlot, _diseases) == 0x0060);
static_assert(offsetof(FGardenSlotArray, _gardenSlots) == 0x0108);
static_assert(offsetof(AGarden, _gardenSlots) == 0x0228);
static_assert(offsetof(AGarden, _numSlots) == 0x0358);
static_assert(offsetof(FPlantGrowthStageData, OptimalAvgTemperature) == 0x0008);
static_assert(offsetof(FStaticMeshMaterialPair, Mesh) == 0x0000);
static_assert(offsetof(FStaticMeshMaterialPair, Materials) == 0x0008);
static_assert(offsetof(AGardenManager, GardenClass) == 0x0248);
static_assert(offsetof(AGardenManager, _seedingStageData) == 0x0254);
static_assert(offsetof(AGardenManager, _vegetatingStageData) == 0x02B4);
static_assert(offsetof(AGardenManager, _floweringStageData) == 0x0314);
static_assert(offsetof(AGardenManager, _ripeningStageData) == 0x0374);
static_assert(offsetof(AGardenManager, _gardenMinMaxSize) == 0x03D4);
static_assert(offsetof(AGardenManager, _gardens) == 0x0440);
static_assert(offsetof(AGardenManager, _pestsDiseasesCheckTimeHours) == 0x0490);
static_assert(offsetof(AGardenManager, _weedCheckTimeHours) == 0x0498);
static_assert(offsetof(AGardenManager, _pestsDiseasesSpreadScaleThreshold) == 0x04B0);
static_assert(offsetof(AGardenManager, _weedSpreadScaleThreshold) == 0x04B8);
static_assert(offsetof(AGardenManager, _mainMPC) == 0x04C8);
static_assert(offsetof(AGardenManager, _gardenMPC) == 0x04D0);
static_assert(offsetof(AGardenManager, _gardenEdgeMesh) == 0x04D8);
static_assert(offsetof(AGardenManager, _gardenSoilMesh) == 0x04F0);
static_assert(offsetof(AGardenManager, _cubeCollisionMesh) == 0x0508);
static_assert(offsetof(AGardenManager, _weedMesh) == 0x0528);
static_assert(offsetof(AGardenManager, _plantSpecies) == 0x0540);
static_assert(offsetof(AGardenManager, _farmingSkillDataAsset) == 0x0550);
static_assert(offsetof(AGardenManager, _hismcMap) == 0x0558);
static_assert(offsetof(AGardenManager, _activeIHISMCMeshes) == 0x05A8);
static_assert(offsetof(AGardenManager, _destroyChoppingRecipeAsset) == 0x05C0);
static_assert(offsetof(AGardenManager, repairableParameters) == 0x05E8);
static_assert(offsetof(AGasTankItem, _resourceContainerComponent) == 0x09A0);
static_assert(offsetof(AGasTankItem, _rangedResourceProviderComponent) == 0x09A8);
static_assert(offsetof(AGasTankItem, _explosionTargetTypeMultiplier) == 0x09C8);
static_assert(offsetof(AGasTankItem, _explosionParticle) == 0x09D8);
static_assert(offsetof(AGasTankItem, _explosionAudioEvent) == 0x09E0);
static_assert(offsetof(AGasTankItem, _explosionCameraShakeClass) == 0x09F0);
static_assert(offsetof(UGaugeAssetData, GaugeTag) == 0x0028);
static_assert(offsetof(UGaugeAssetData, MinimumRelativeTransform) == 0x0040);
static_assert(offsetof(UGaugeAssetData, MaximumRelativeTransform) == 0x0070);
static_assert(offsetof(UGaugeLightAssetData, GaugeTag) == 0x0028);
static_assert(offsetof(UGaugeLightAssetData, UnderTheLimitLightColor) == 0x0030);
static_assert(offsetof(UGaugeLightAssetData, OverTheLimitLightColor) == 0x003C);
static_assert(offsetof(AItemWithSkeletalMesh, SkeletalMesh) == 0x09A0);
static_assert(offsetof(AGeigerCounter, _resourceSlotComponent) == 0x09B0);
static_assert(offsetof(AGeigerCounter, _startEvent) == 0x09C8);
static_assert(offsetof(AGeigerCounter, _stopEvent) == 0x09D0);
static_assert(offsetof(UGenericTooltip, TextStyle) == 0x0268);
static_assert(offsetof(UGenericTooltip, DescriptionText) == 0x04D8);
static_assert(offsetof(AGib, MeshComponent) == 0x0220);
static_assert(offsetof(FAquaticLifeSpawningVolumeDescription, FishSpeciesPreset) == 0x0020);
static_assert(offsetof(FAquaticLifeSpawningVolumeDescription, FishSpawningPreset) == 0x0028);
static_assert(offsetof(AGlobalAquaticLifeManager, _fishSpawningVolumes) == 0x1618);
static_assert(offsetof(AGlobalAquaticLifeManager, _indicatorClass) == 0x16D0);
static_assert(offsetof(AGlobalAquaticLifeManager, _weatherPercentageCurve) == 0x16E0);
static_assert(offsetof(AGlobalAquaticLifeManager, _possibleLargeAquaticAnimals) == 0x1718);
static_assert(offsetof(AGlobalBirdSpawner2, CoastalBirds) == 0x0230);
static_assert(offsetof(AGlobalBirdSpawner2, ContinentalBirds) == 0x0240);
static_assert(offsetof(AGlobalBirdSpawner2, BirdSpawnerMask) == 0x0264);
static_assert(offsetof(AGlobalBirdSpawner2, Sprite) == 0x0280);
static_assert(offsetof(AGlobalBirdSpawner2, _birds) == 0x0290);
static_assert(offsetof(FEncounterStaticZoneDescription, _transform) == 0x0010);
static_assert(offsetof(FEncounterStaticZoneDescription, _boundingBox) == 0x0050);
static_assert(offsetof(FEncounterStaticZoneDescription, _zoneActivationBoundingBox) == 0x006C);
static_assert(offsetof(FEncounterStaticZoneDescription, _LPCZoneActivationBoundingBox) == 0x0088);
static_assert(offsetof(FEncounterStaticZoneDescription, _flyingSpawnedCharacterApproachLocations) == 0x00A8);
static_assert(offsetof(FEncounterStaticZoneDescription, _zoneData) == 0x00B8);
static_assert(offsetof(FEncounterStaticZoneDescription, _lpcZoneData) == 0x00C0);
static_assert(offsetof(FEncounterStaticZoneDescription, _subZoneData) == 0x00C8);
static_assert(offsetof(FEncounterGroupedCharacterSpawnPoint, GroupBounds) == 0x0000);
static_assert(offsetof(FEncounterGroupedCharacterSpawnPoint, SpawnTransforms) == 0x0020);
static_assert(offsetof(FEncounterGroupedCharacterSpawnPoint, Type) == 0x0030);
static_assert(offsetof(FEncounterLegacyCharacterSpawnPoint, Type) == 0x0000);
static_assert(offsetof(FEncounterLegacyCharacterSpawnPoint, Transform) == 0x0010);
static_assert(offsetof(AGlobalEncounterManager, _staticZoneDescriptions) == 0x0220);
static_assert(offsetof(AGlobalEncounterManager, _encounterGroupedCharacterSpawnPoints) == 0x0238);
static_assert(offsetof(AGlobalEncounterManager, _encounterLegacyCharacterSpawnPoints) == 0x0250);
static_assert(offsetof(AGlobalEncounterManager, _commonData) == 0x0430);
static_assert(offsetof(AGlobalGuardedZoneManager, _dropshipSentryRespawnClass) == 0x0290);
static_assert(offsetof(AGlobalGuardedZoneManager, _abandonedBunkerZoneCommonData) == 0x02C8);
static_assert(offsetof(AGlobalGuardedZoneManager, _debugRazorClass) == 0x02E0);
static_assert(offsetof(AGlobalGuardedZoneManager, _debugBrennerClass) == 0x0308);
static_assert(offsetof(AGlobalGuardedZoneManager, _dropshipClass) == 0x0330);
static_assert(offsetof(AGlobalGuardedZoneManager, _defenderHordeEncounterClass) == 0x0358);
static_assert(offsetof(FButtonIcons, EnabledIcon) == 0x0000);
static_assert(offsetof(FButtonIcons, DisabledIcon) == 0x0088);
static_assert(offsetof(UGlobalUIData, DefaultModularTooltipClass) == 0x0028);
static_assert(offsetof(UGlobalUIData, ModularTooltipElementClassMapping) == 0x0030);
static_assert(offsetof(UGlobalUIData, ModularCodexEntryElementClassMapping) == 0x0080);
static_assert(offsetof(UGlobalUIData, CodexCategoryIconTypeMap) == 0x00D0);
static_assert(offsetof(UGlobalUIData, SurvivalTipCodexCategoryIconTypeMap) == 0x0120);
static_assert(offsetof(UGlobalUIData, ManualEnhancedImageWidgetClass) == 0x0170);
static_assert(offsetof(UGlobalUIData, ManualEnhancedImageTextWidgetClass) == 0x0178);
static_assert(offsetof(UGlobalUIData, MessageBox) == 0x0180);
static_assert(offsetof(UGlobalUIData, MessageBoxWithNote) == 0x0188);
static_assert(offsetof(UGlobalUIData, LogoutMessageBox) == 0x0190);
static_assert(offsetof(UGlobalUIData, MessageBoxWithList) == 0x0198);
static_assert(offsetof(UGlobalUIData, MessageBoxWithEditableText) == 0x01A0);
static_assert(offsetof(UGlobalUIData, MessageBoxWithCheckBox) == 0x01A8);
static_assert(offsetof(UGlobalUIData, PartialPriceSellConfirmation) == 0x01B0);
static_assert(offsetof(UGlobalUIData, MessageBoxButton) == 0x01B8);
static_assert(offsetof(UGlobalUIData, LabeledSliderWithNumber) == 0x01C0);
static_assert(offsetof(UGlobalUIData, LabeledCarousel) == 0x01C8);
static_assert(offsetof(UGlobalUIData, LabeledDropdown) == 0x01D0);
static_assert(offsetof(UGlobalUIData, LabeledTextBlock) == 0x01D8);
static_assert(offsetof(UGlobalUIData, LabeledControlMapping) == 0x01E0);
static_assert(offsetof(UGlobalUIData, UIRepresentableObjectWidgetSubtype) == 0x01E8);
static_assert(offsetof(UGlobalUIData, ButtonIconTypeMap) == 0x01F0);
static_assert(offsetof(UGlobalUIData, UISoundsData) == 0x0240);
static_assert(offsetof(UGlobalUIData, QuestUIData) == 0x0248);
static_assert(offsetof(UGradedArcedProgressBar, _fillImage) == 0x0268);
static_assert(offsetof(UGradedArcedProgressBar, _fillMaterial) == 0x0270);
static_assert(offsetof(UGradedArcedProgressBar, _fillColorStart) == 0x0278);
static_assert(offsetof(UGradedArcedProgressBar, _fillColorMiddle) == 0x0288);
static_assert(offsetof(UGradedArcedProgressBar, _fillColorEnd) == 0x0298);
static_assert(offsetof(UGraph2DWidget, Brush) == 0x0110);
static_assert(offsetof(UGraph2DWidget, ColorAndOpacity) == 0x01A8);
static_assert(offsetof(UGraph2DWidget, GraphSize) == 0x01D0);
static_assert(offsetof(UGrappleActionComponent, _grappler) == 0x00B0);
static_assert(offsetof(UGrappleActionComponent, _prisonerVictim) == 0x00B8);
static_assert(offsetof(UGrappleActionComponent, _grappleActionParameters) == 0x00C0);
static_assert(offsetof(FGrappleActionMontagePair, GrapplerMontage) == 0x0000);
static_assert(offsetof(FGrappleActionMontagePair, GrapplerMontageFP) == 0x0008);
static_assert(offsetof(FGrappleActionMontagePair, VictimMontage) == 0x0010);
static_assert(offsetof(FGrappleActionMontagePair, VictimMontageFP) == 0x0018);
static_assert(offsetof(UGrappleActionParameters, MeshDetachmentRule) == 0x0032);
static_assert(offsetof(UGrappleActionParameters, MeshDetachmentOffsetTransform) == 0x0040);
static_assert(offsetof(UGrappleActionParameters, MeshReatttachmentRelativeTransform) == 0x0070);
static_assert(offsetof(UGrappleActionParameters, PerspectiveSwitchType) == 0x00A0);
static_assert(offsetof(UGrappleActionParameters, GrapplerIdleAnimation) == 0x00B8);
static_assert(offsetof(UGrappleActionParameters, GrapplerIdleFPAnimation) == 0x00C0);
static_assert(offsetof(UGrappleActionParameters, GrapplerInitialGrabMontage) == 0x00C8);
static_assert(offsetof(UGrappleActionParameters, VictimInitialGrabMontage) == 0x00D8);
static_assert(offsetof(UGrappleActionParameters, GrappleActionMontagePairs) == 0x00E0);
static_assert(offsetof(UGrappleActionParameters, GrappleActionReleaseMontagePairs) == 0x00F0);
static_assert(offsetof(UGrappleActionParameters, GrappleActionVictimGetUpMontageAfterGrapplerDeath) == 0x0100);
static_assert(offsetof(UGrappleActionParameters, StartGrappleAudioEvent) == 0x0108);
static_assert(offsetof(UGrappleActionParameters, StopGrappleAudioEvent) == 0x0110);
static_assert(offsetof(UGrappleActionParameters, AttackerAttachSocketName) == 0x0118);
static_assert(offsetof(UGrappleActionParameters, AttackerLocationToVictimLocationOffset) == 0x0124);
static_assert(offsetof(UGrappleActionParameters, DefenderIdleAnimation) == 0x0138);
static_assert(offsetof(UGrappleActionParameters, DefenderIdleFPAnimation) == 0x0140);
static_assert(offsetof(UGrappleActionParameters, DefenderAttachBoneName) == 0x0148);
static_assert(offsetof(UGrappleActionParameters, CameraSpringArmOffset) == 0x0170);
static_assert(offsetof(UGrapplingWidget, _grapplingValue) == 0x0268);
static_assert(offsetof(UGrapplingWidget, _instructionText) == 0x0270);
static_assert(offsetof(UGrenadeAnimInstance, _owningPrisonerStance) == 0x02C0);
static_assert(offsetof(UGroupedCharacterSpawnerComponent, _spawnType) == 0x0208);
static_assert(offsetof(AGuardedZoneManager, _sprite) == 0x0220);
static_assert(offsetof(AGuardedZoneManager, _sentrySpawners) == 0x0228);
static_assert(offsetof(AHalloweenSacrificePit, _sacrificePitCenter) == 0x0230);
static_assert(offsetof(AHalloweenSacrificePit, _requiredItemsInSacrificePit) == 0x0240);
static_assert(offsetof(AHalloweenSacrificePit, _giftItem) == 0x0258);
static_assert(offsetof(AHalloweenSacrificePit, _giftItemSpawnTransform) == 0x0280);
static_assert(offsetof(AHalloweenSacrificePit, _giftSpawningPreludeAudioEvent) == 0x02B8);
static_assert(offsetof(AHalloweenSacrificePit, _giftSpawningPreludeParticleSystem) == 0x02E0);
static_assert(offsetof(AHalloweenSacrificePit, _giftSpawningPreludeParticlesTransform) == 0x0310);
static_assert(offsetof(AHalloweenSacrificePit, _giftSpawningFinishedAudioEvent) == 0x0340);
static_assert(offsetof(AHalloweenSacrificePit, _giftSpawningFinishedParticleSystem) == 0x0368);
static_assert(offsetof(AHalloweenSacrificePit, _giftSpawningFinishedParticlesTransform) == 0x0390);
static_assert(offsetof(AHalloweenSacrificePit, _demonicSigilDecal) == 0x03C0);
static_assert(offsetof(AHalloweenSacrificePit, _demonicSigilDecalEmissiveColorParameterName) == 0x03C8);
static_assert(offsetof(AHalloweenSacrificePit, _demonicSigilDecalEmissiveColorMultiplierVsTime) == 0x03D0);
static_assert(offsetof(AHalloweenSacrificePit, _zombieSpawnTransforms) == 0x0470);
static_assert(offsetof(AHandheldLightItem, _possibleLightAngles) == 0x09B0);
static_assert(offsetof(AHandheldLightItem, _resourceSlotComponent) == 0x09C0);
static_assert(offsetof(AHandheldLightItem, _batteryPoweredLightItemComponent) == 0x09C8);
static_assert(offsetof(AHandheldLightItem, _resourceContainerComponent) == 0x09D0);
static_assert(offsetof(AHandheldSkeletalMeshLightItem, SkeletalMesh) == 0x09D8);
static_assert(offsetof(UHandPanel3, _handInventory) == 0x0268);
static_assert(offsetof(UHandPanel3, _holsterInventory0) == 0x0270);
static_assert(offsetof(UHandPanel3, _holsterInventory1) == 0x0278);
static_assert(offsetof(UHandPanel3, _quickAccessItemSwitcher0) == 0x0280);
static_assert(offsetof(UHandPanel3, _quickAccessItemSwitcher3) == 0x0288);
static_assert(offsetof(UHandPanel3, _quickAccessItemSwitcher4) == 0x0290);
static_assert(offsetof(UHandPanel3, _quickAccessItemSwitcher5) == 0x0298);
static_assert(offsetof(UHandPanel3, _quickAccessItemSwitcher6) == 0x02A0);
static_assert(offsetof(UHandPanel3, _quickAccessItemSwitcher7) == 0x02A8);
static_assert(offsetof(UHandPanel3, _quickAccessItemSwitcher8) == 0x02B0);
static_assert(offsetof(UHandPanel3, _quickAccessItemSwitcher9) == 0x02B8);
static_assert(offsetof(UHandPanel3, _mainSizeBox) == 0x02C0);
static_assert(offsetof(UHandPanel3, _famePointsText) == 0x02C8);
static_assert(offsetof(UHandPanel3, _accountBalanceText) == 0x02D0);
static_assert(offsetof(UHandPanel3, _goldBalanceText) == 0x02D8);
static_assert(offsetof(UHandsHolstersWidget2, _slotTypeText) == 0x0268);
static_assert(offsetof(UHandsHolstersWidget2, _container) == 0x0270);
static_assert(offsetof(UHandsHolstersWidget2, _handsHolstersContainer) == 0x0278);
static_assert(offsetof(UHandsHolstersWidget2, _nameText) == 0x0280);
static_assert(offsetof(UHandsHolstersWidget2, _itemSlotWidget) == 0x0288);
static_assert(offsetof(UHandsHolstersWidget2, _itemWidget) == 0x0290);
static_assert(offsetof(UHandsHolstersWidget2, _price) == 0x0298);
static_assert(offsetof(UHandsHolstersWidget2, _priceOverlay) == 0x02A0);
static_assert(offsetof(UHandsHolstersWidget2, _expandableContainer) == 0x02A8);
static_assert(offsetof(UHandsHolstersWidget2, _inventoryGrid) == 0x02B0);
static_assert(offsetof(UHandsHolstersWidget2, _attachmentSlotWidget) == 0x02B8);
static_assert(offsetof(UHandsHolstersWidget2, _slotsWidgets) == 0x02C0);
static_assert(offsetof(UHandsHolstersWidget2, _attachmentWidgets) == 0x02D0);
static_assert(offsetof(UHandsHolstersWidget2, _type) == 0x02E0);
static_assert(offsetof(UHandsHolstersWidget2, _conzMappingName) == 0x02F8);
static_assert(offsetof(UHandsHolstersWidget2, _slotName) == 0x0300);
static_assert(offsetof(AHeadLamp, _spotLightComponent) == 0x0A48);
static_assert(offsetof(AHeadLamp, _resourceSlotComponent) == 0x0A50);
static_assert(offsetof(AHeadLamp, _batteryPoweredLightItemComponent) == 0x0A58);
static_assert(offsetof(UHeatSourceEntityComponentState, ResourceType) == 0x0028);
static_assert(offsetof(UHeatSourceEntityComponentSetup, ResourceType) == 0x0048);
static_assert(offsetof(UHeatSourceEntityComponentSetup, ResourceSupplierName) == 0x0060);
static_assert(offsetof(UHeatSourceEntityComponentSetup, ResourceSupplierUsageRateVsHeatIntensity) == 0x0068);
static_assert(offsetof(UHeatSourceEntityComponentSetup, MaxHeatIntensityVsSupplierResourceAmountRatio) == 0x00F0);
static_assert(offsetof(UHeatSourceItemComponent, HeatSources) == 0x00C8);
static_assert(offsetof(FHeatSource, Location) == 0x0000);
static_assert(offsetof(FHeatSource, Parameters) == 0x000C);
static_assert(offsetof(UHeatSourceItemTag, HeatSource) == 0x0030);
static_assert(offsetof(AHeatSourceMarker, _sceneComponent) == 0x0228);
static_assert(offsetof(AHeatSourceMarker, _heatSourceParameters) == 0x0230);
static_assert(offsetof(UHeatSourceMarkersComponent, _heatSources) == 0x01F8);
static_assert(offsetof(FPhysicalHitReactData, ProfileName) == 0x0000);
static_assert(offsetof(FPhysicalHitReactData, PelvisBoneName) == 0x0008);
static_assert(offsetof(UHitReactComponent, HitReactMappings) == 0x00C8);
static_assert(offsetof(UHitReactComponent, PhysicalHitReactData) == 0x00D8);
static_assert(offsetof(UHitReactComponent, RagdollConstraintProfileName) == 0x00F0);
static_assert(offsetof(UHitReactComponent, _pelvisBoneName) == 0x0128);
static_assert(offsetof(UHitReactComponent, _rootBoneName) == 0x0130);
static_assert(offsetof(UHitReactComponent, _getUpFromFaceMontage) == 0x0138);
static_assert(offsetof(UHitReactComponent, _getUpFromBackMontage) == 0x0140);
static_assert(offsetof(UHitReactComponent, _ragdollTransitionState) == 0x01BE);
static_assert(offsetof(UHitReactComponent, _serverRagdollLocation) == 0x01C0);
static_assert(offsetof(UHitReactComponent, _serverBuoyancy) == 0x0200);
static_assert(offsetof(UHitReactComponent, _buoyancy) == 0x0270);
static_assert(offsetof(UHitReactLandingParams, MontageToPlay) == 0x0030);
static_assert(offsetof(UHitReactLandingParams, RagdollImpactSpeedRange) == 0x003C);
static_assert(offsetof(UHitReactLandingParams, RagdollDuration) == 0x0044);
static_assert(offsetof(UHitReactLandingParams, LandingDamageCurve) == 0x0050);
static_assert(offsetof(UHitReactLandingParams, WaterImpactDamageCurve) == 0x0058);
static_assert(offsetof(FHitReactBodyPartDataItem, MontageToPlay) == 0x0000);
static_assert(offsetof(FHitReactBodyPartDataItem, FollowupMontage) == 0x0008);
static_assert(offsetof(FHitReactDirectionData, FrontHit) == 0x0000);
static_assert(offsetof(FHitReactDirectionData, LeftHit) == 0x0010);
static_assert(offsetof(FHitReactDirectionData, BackHit) == 0x0020);
static_assert(offsetof(FHitReactDirectionData, RightHit) == 0x0030);
static_assert(offsetof(FHitReactMagnitudeData, SmallHit) == 0x0000);
static_assert(offsetof(FHitReactMagnitudeData, MediumHit) == 0x0048);
static_assert(offsetof(FHitReactMagnitudeData, LargeHit) == 0x0090);
static_assert(offsetof(FHitReactMagnitudeData, KnockoutHit) == 0x00D8);
static_assert(offsetof(FHitReactLandingData, MontageToPlay) == 0x0008);
static_assert(offsetof(UHitReactMapping, HitReactTypes) == 0x0030);
static_assert(offsetof(UHitReactMapping, HeadHit) == 0x0058);
static_assert(offsetof(UHitReactMapping, BodyHit) == 0x0178);
static_assert(offsetof(UHitReactMapping, LegsHit) == 0x0298);
static_assert(offsetof(UHitReactMapping, LandingHit) == 0x03B8);
static_assert(offsetof(AHUD_John, NormalFont) == 0x0318);
static_assert(offsetof(UHUDHighlightingWidget, _fadeCurve) == 0x0270);
static_assert(offsetof(UHUDHighlightingWidget, _image) == 0x02F8);
static_assert(offsetof(UHUDNotificationDescription, Message) == 0x0040);
static_assert(offsetof(UHUDNotificationDescription, AudioEvent) == 0x0058);
static_assert(offsetof(UHudWidget, _mainCanvasPanel) == 0x0268);
static_assert(offsetof(UHudWidget, _quickAccessBarSizeBox) == 0x0270);
static_assert(offsetof(UHudWidget, _quickAccessBar) == 0x0278);
static_assert(offsetof(UHudWidget, _throwingAccess) == 0x0280);
static_assert(offsetof(UHudWidget, _handQuickAccessItemWidget) == 0x0288);
static_assert(offsetof(UHudWidget, _chatWidget) == 0x0290);
static_assert(offsetof(UHudWidget, _dialogueSystemContainerWidget) == 0x0298);
static_assert(offsetof(UHudWidget, _questTrackingWidget) == 0x02A0);
static_assert(offsetof(UHudWidget, _messages) == 0x02B0);
static_assert(offsetof(UHudWidget, _warningMessage) == 0x02B8);
static_assert(offsetof(UHudWidget, _micInputIndicator) == 0x02C0);
static_assert(offsetof(UHudWidget, _warningsVerticalBox) == 0x02C8);
static_assert(offsetof(UHudWidget, _killNotificationVerticalBox) == 0x02D0);
static_assert(offsetof(UHudWidget, _warningSignWidgetClass) == 0x02D8);
static_assert(offsetof(UHudWidget, _killNotificationWidgetClass) == 0x02E0);
static_assert(offsetof(UHudWidget, _tabMenuReborn) == 0x02F8);
static_assert(offsetof(UHudWidget, _prisonerLifeIndicatorsSprite) == 0x0300);
static_assert(offsetof(UHudWidget, _compassWidget) == 0x0308);
static_assert(offsetof(UHudWidget, _screenSpaceHealthWidget) == 0x0310);
static_assert(offsetof(UHudWidget, _nightVisionGogglesBatteryWidget) == 0x0318);
static_assert(offsetof(UHudWidget, _shotsFiredTrackerWidget) == 0x0320);
static_assert(offsetof(UHudWidget, _fishingContainerWidget) == 0x0328);
static_assert(offsetof(UHudWidget, _grapplingWidget) == 0x0330);
static_assert(offsetof(UHudWidget, _musicPlayerDisplayWidget) == 0x0338);
static_assert(offsetof(UHudWidget, _fishingTrophyWidget) == 0x0340);
static_assert(offsetof(UHudWidget, _vehicleHUD) == 0x0348);
static_assert(offsetof(UHudWidget, _plasticSurgeryPanel) == 0x0350);
static_assert(offsetof(UHudWidget, _barberShopPanel) == 0x0358);
static_assert(offsetof(UHudWidget, _chatCanvas) == 0x0360);
static_assert(offsetof(UHudWidget, _floatingWidgetCanvas) == 0x0368);
static_assert(offsetof(UHudWidget, _gameEventNotificationPanel) == 0x0370);
static_assert(offsetof(UHudWidget, _notificationPanelWidget) == 0x0378);
static_assert(offsetof(UHudWidget, _levelUpNotification) == 0x0380);
static_assert(offsetof(UHudWidget, _notificationWidgetClass) == 0x0388);
static_assert(offsetof(UHudWidget, _updateableNotification) == 0x0390);
static_assert(offsetof(UHudWidget, _hudHighlightingWidget) == 0x0398);
static_assert(offsetof(UHudWidget, _adjustmentPaddingForVicinityWhenTrading) == 0x03A0);
static_assert(offsetof(UHudWidget, _debugInfo) == 0x0410);
static_assert(offsetof(UHudWidget, _contextMenuBase) == 0x0420);
static_assert(offsetof(UHudWidget, _contextMenuSide) == 0x0428);
static_assert(offsetof(FHuntingClueVisuals, ClueStaticMesh) == 0x0008);
static_assert(offsetof(FHuntingClueVisuals, ClueStaticMeshMaterial) == 0x0010);
static_assert(offsetof(FHuntingClueVisuals, StaticMeshOverrideRelativeTransform) == 0x0020);
static_assert(offsetof(FHuntingClueVisuals, ClueDecalMaterials) == 0x0050);
static_assert(offsetof(FHuntingClueVisuals, ClueDecalOverrideRelativeTransform) == 0x0060);
static_assert(offsetof(FHuntingClueVisuals, ClueDecalOverrideBoxDimensions) == 0x0094);
static_assert(offsetof(AHuntingClue, _rootComponent) == 0x0228);
static_assert(offsetof(AHuntingClue, _focusModeParticles) == 0x0230);
static_assert(offsetof(AHuntingClue, _clueDecalComponent) == 0x0238);
static_assert(offsetof(AHuntingClue, _clueStaticMeshComponent) == 0x0240);
static_assert(offsetof(AHuntingClue, _debugArrowComponent) == 0x0248);
static_assert(offsetof(AHuntingClue, _firstClueVisuals) == 0x0250);
static_assert(offsetof(AHuntingClue, _visuals) == 0x0260);
static_assert(offsetof(FHuntingBiomeDescription, Transform) == 0x0000);
static_assert(offsetof(FHuntingBiomeDescription, Parameters) == 0x0038);
static_assert(offsetof(AHuntingManager, _overrideableBiomes) == 0x02E0);
static_assert(offsetof(AHuntingManager, _huntingBiomes) == 0x0300);
static_assert(offsetof(UIgnitableExplosiveItemComponent, _targetTypeMultiplier) == 0x01B0);
static_assert(offsetof(UIgnitableExplosiveItemComponent, _explosionParticle) == 0x01C8);
static_assert(offsetof(UIgnitableExplosiveItemComponent, _explosionAudioEvent) == 0x01D0);
static_assert(offsetof(UIgnitableExplosiveItemComponent, _explosionCameraShakeClass) == 0x01D8);
static_assert(offsetof(UImageSlotWidget, _availabilityGrid) == 0x02B0);
static_assert(offsetof(UImageSlotWidget, _backgroundImage) == 0x02B8);
static_assert(offsetof(UImageSlotWidget, _displayedImage) == 0x02C0);
static_assert(offsetof(UImageSlotWidget, _defaultImageBrush) == 0x02C8);
static_assert(offsetof(UImageSlotWidget, _regularColor) == 0x0358);
static_assert(offsetof(UImageSlotWidget, _dropUnavailableColor) == 0x0368);
static_assert(offsetof(UImageSlotWidget, _dropAvailableColor) == 0x0378);
static_assert(offsetof(UImageSlotWidget, _defaultIconTint) == 0x0390);
static_assert(offsetof(UImageSlotWidget, _slottedIconTint) == 0x03B8);
static_assert(offsetof(UInfiniteResourceAssetData, ResourceType) == 0x0030);
static_assert(offsetof(UInfiniteResourceAssetData, InSocketTypes) == 0x0038);
static_assert(offsetof(UInfiniteResourceAssetData, OutSocketTypes) == 0x0058);
static_assert(offsetof(UInfiniteResourceAssetData, RequiredItemTagsForFilling) == 0x0078);
static_assert(offsetof(UInfiniteResourceAssetData, FillMontage) == 0x0098);
static_assert(offsetof(UInfiniteResourceAssetData, FillStartAudioEvent) == 0x00A0);
static_assert(offsetof(UInfiniteResourceAssetData, FillStopAudioEvent) == 0x00A8);
static_assert(offsetof(AInfluenceAreaVisualizer, _staticMeshComponent) == 0x0220);
static_assert(offsetof(UIngredientsForRecipeWidget, _ingredientsWrapBox) == 0x0270);
static_assert(offsetof(UIngredientsForRecipeWidget, _interactiveIngredientWidgetClass) == 0x0278);
static_assert(offsetof(UInsertCartridge, MontageEndSectionName) == 0x0090);
static_assert(offsetof(UInsertCartridgeIntoMagazine, MontageEndSectionName) == 0x0090);
static_assert(offsetof(UInsertMagazineInsertCartridge, MontageEndSectionName) == 0x0090);
static_assert(offsetof(UInspectedItemWidget, ItemWidget) == 0x0268);
static_assert(offsetof(UInspectedItemWidget, SkillText) == 0x0270);
static_assert(offsetof(UInspectedItemWidget, SkillLevelText) == 0x0278);
static_assert(offsetof(AInstrumentItem, _playInstrumentStartMontageFP) == 0x09B0);
static_assert(offsetof(AInstrumentItem, _playInstrumentStartMontageTP) == 0x09B8);
static_assert(offsetof(AInstrumentItem, _playInstrumentStopMontageFP) == 0x09C0);
static_assert(offsetof(AInstrumentItem, _playInstrumentStopMontageTP) == 0x09C8);
static_assert(offsetof(AInstrumentItem, _playInstrumentIdleAnimationFP) == 0x09D0);
static_assert(offsetof(AInstrumentItem, _playInstrumentPlayingAnimationFP) == 0x09D8);
static_assert(offsetof(AInstrumentItem, _playInstrumentIdleAnimationTP) == 0x09E0);
static_assert(offsetof(AInstrumentItem, _playInstrumentPlayingAnimationTP) == 0x09E8);
static_assert(offsetof(AInstrumentItem, _noteCStart) == 0x09F8);
static_assert(offsetof(AInstrumentItem, _noteCStop) == 0x0A08);
static_assert(offsetof(AInstrumentItem, _noteDStart) == 0x0A18);
static_assert(offsetof(AInstrumentItem, _noteDStop) == 0x0A28);
static_assert(offsetof(AInstrumentItem, _noteDbStart) == 0x0A38);
static_assert(offsetof(AInstrumentItem, _noteDbStop) == 0x0A48);
static_assert(offsetof(AInstrumentItem, _noteEStart) == 0x0A58);
static_assert(offsetof(AInstrumentItem, _noteEStop) == 0x0A68);
static_assert(offsetof(AInstrumentItem, _noteEbStart) == 0x0A78);
static_assert(offsetof(AInstrumentItem, _noteEbStop) == 0x0A88);
static_assert(offsetof(AInstrumentItem, _noteFStart) == 0x0A98);
static_assert(offsetof(AInstrumentItem, _noteFStop) == 0x0AA8);
static_assert(offsetof(AInstrumentItem, _noteGStart) == 0x0AB8);
static_assert(offsetof(AInstrumentItem, _noteGStop) == 0x0AC8);
static_assert(offsetof(AInstrumentItem, _noteGbStart) == 0x0AD8);
static_assert(offsetof(AInstrumentItem, _noteGbStop) == 0x0AE8);
static_assert(offsetof(AInstrumentItem, _noteAStart) == 0x0AF8);
static_assert(offsetof(AInstrumentItem, _noteAStop) == 0x0B08);
static_assert(offsetof(AInstrumentItem, _noteAbStart) == 0x0B18);
static_assert(offsetof(AInstrumentItem, _noteAbStop) == 0x0B28);
static_assert(offsetof(AInstrumentItem, _noteBStart) == 0x0B38);
static_assert(offsetof(AInstrumentItem, _noteBStop) == 0x0B48);
static_assert(offsetof(AInstrumentItem, _noteBbStart) == 0x0B58);
static_assert(offsetof(AInstrumentItem, _noteBbStop) == 0x0B68);
static_assert(offsetof(AInstrumentItem, _noteC2Start) == 0x0B78);
static_assert(offsetof(AInstrumentItem, _noteC2Stop) == 0x0B88);
static_assert(offsetof(FSpawnedItems, Operation) == 0x0004);
static_assert(offsetof(FSpawnedItems, Items) == 0x0008);
static_assert(offsetof(UInteractionComponent, GhostActorToSpawnAfterExamine) == 0x00D8);
static_assert(offsetof(UInteractionComponent, _actions) == 0x0108);
static_assert(offsetof(UInteractionComponent, _replicatedExamineSpawnedItems) == 0x0208);
static_assert(offsetof(UInteractionComponent, _replicatedPickupSpawnedItem) == 0x0220);
static_assert(offsetof(UInteractionContextMenuBase, _interactionListPanel) == 0x0268);
static_assert(offsetof(UInteractionContextMenuBase, _leafSubclass) == 0x0278);
static_assert(offsetof(UInteractionContextMenuBase, _categoryHeaderSubclass) == 0x0280);
static_assert(offsetof(UInteractionContextMenuBase, _leafGroupSubclass) == 0x0288);
static_assert(offsetof(UInteractionContextMenuGroupHeader, _name) == 0x0268);
static_assert(offsetof(UInteractionContextMenuLeaf, _nameBlock) == 0x0268);
static_assert(offsetof(UInteractionContextMenuLeaf, _visualButton) == 0x0270);
static_assert(offsetof(UInteractionContextMenuLeafGroup, _nameBlock) == 0x0288);
static_assert(offsetof(UInteractionContextMenuLeafGroup, _visualButton) == 0x0290);
static_assert(offsetof(UInteractionContextMenuSide, _interactionListPanel) == 0x0298);
static_assert(offsetof(UInteractionContextMenuSide, _leafSubclass) == 0x02A0);
static_assert(offsetof(UInteractiveIngredientWidget, _mainSwitcher) == 0x02A0);
static_assert(offsetof(UInteractiveIngredientWidget, _ingredientIcon) == 0x02A8);
static_assert(offsetof(UInteractiveIngredientWidget, _overlayHighlight) == 0x02B0);
static_assert(offsetof(UInteractiveIngredientWidget, _quantitySwitcher) == 0x02B8);
static_assert(offsetof(UInteractiveIngredientWidget, _useAmountText) == 0x02C0);
static_assert(offsetof(UInteractiveIngredientWidget, _currentVolumeTextBlock) == 0x02C8);
static_assert(offsetof(UInteractiveIngredientWidget, _requiredVolumeTextBlock) == 0x02D0);
static_assert(offsetof(UInteractiveIngredientWidget, _mainIngredientIndication) == 0x02D8);
static_assert(offsetof(UInteractiveIngredientWidget, _unacceptableItemDraggedColor) == 0x02E4);
static_assert(offsetof(UInteractiveIngredientWidget, _acceptableItemDraggedColor) == 0x02F4);
static_assert(offsetof(UInteractiveIngredientWidget, _defaultBorderColor) == 0x0304);
static_assert(offsetof(UInteractiveIngredientWidget, _mainIngredientTriangleColor) == 0x031C);
static_assert(offsetof(UInteractiveIngredientWidget, _optionalIngredientTriangleColor) == 0x032C);
static_assert(offsetof(AInteriorReflEnvCubeSceneCapture, MipGenSettings) == 0x0254);
static_assert(offsetof(AInteriorReflEnvCubeSceneCapture, OutputTexturePrefix) == 0x0258);
static_assert(offsetof(AInteriorReflEnvCubeSceneCapture, OutputTexturePostfix) == 0x0268);
static_assert(offsetof(AInteriorReflEnvCubeSceneCapture, OutsideEnvironmentMesh) == 0x0280);
static_assert(offsetof(AInteriorReflEnvCubeSceneCapture, OutsideEnvironmentBrightnessParamName) == 0x0290);
static_assert(offsetof(AInteriorReflEnvCubeSceneCapture, EnvironmentReflectionCapture) == 0x0298);
static_assert(offsetof(AInteriorReflEnvCubeSceneCapture, _createdTxCubes) == 0x02A0);
static_assert(offsetof(AInteriorReflEnvCubeSceneCapture, _usedTxCube) == 0x02B0);
static_assert(offsetof(UIntroVideoMenu, _cutsceneWidget) == 0x0268);
static_assert(offsetof(UInventoryCentralPanel, _vicinityPanel) == 0x0268);
static_assert(offsetof(UInventoryCentralPanel, _vicinityContainer) == 0x0270);
static_assert(offsetof(UInventorySizeData2D, Bitmask) == 0x0030);
static_assert(offsetof(FInventoryPositionDataRepHelper, _dataClass) == 0x0000);
static_assert(offsetof(FInventoryPositionDataRepHelper, _positionData) == 0x0008);
static_assert(offsetof(FInventoryPositionDataRepHelper, _owner) == 0x0010);
static_assert(offsetof(FInventoryItemPositionPair, position) == 0x0000);
static_assert(offsetof(FInventoryItemPositionPair, Item) == 0x0020);
static_assert(offsetof(FInventoryContainer2DRepData, ItemsData) == 0x0000);
static_assert(offsetof(FInventoryContainer2DRepData, Parent) == 0x0010);
static_assert(offsetof(UInventoryContainer2D, _data) == 0x00B8);
static_assert(offsetof(UInventoryContainer2D, _oldData) == 0x00D8);
static_assert(offsetof(UInventoryContainer2D, _widgets) == 0x0108);
static_assert(offsetof(UInventoryContainer2D, _grid) == 0x0118);
static_assert(offsetof(UInventoryContainer2D, _gridDamaged) == 0x0128);
static_assert(offsetof(FInventoryContainerClothesData, ItemsData) == 0x0000);
static_assert(offsetof(FInventoryContainerClothesData, Parent) == 0x0010);
static_assert(offsetof(UInventoryContainerClothes, _widget) == 0x0030);
static_assert(offsetof(UInventoryContainerClothes, _data) == 0x0048);
static_assert(offsetof(UInventoryContainerClothes, _oldData) == 0x0068);
static_assert(offsetof(UInventoryContainerGrid, _uiroWidgetClass) == 0x0270);
static_assert(offsetof(UInventoryContainerGrid, _mainSizeBox) == 0x0278);
static_assert(offsetof(UInventoryContainerGrid, _backgroundGrid) == 0x0280);
static_assert(offsetof(UInventoryContainerGrid, _mainCanvas) == 0x0288);
static_assert(offsetof(UInventoryContainerGrid, _retainerBoxDeadCells) == 0x0290);
static_assert(offsetof(FInventoryContainerHandsHolstersData, ItemsData) == 0x0000);
static_assert(offsetof(FInventoryContainerHandsHolstersData, Parent) == 0x0010);
static_assert(offsetof(UInventoryContainerHandsHolsters, _handWidget) == 0x0030);
static_assert(offsetof(UInventoryContainerHandsHolsters, _shoulderLeftWidget) == 0x0038);
static_assert(offsetof(UInventoryContainerHandsHolsters, _shoulderRightWidget) == 0x0040);
static_assert(offsetof(UInventoryContainerHandsHolsters, _tradingHandWidget) == 0x0048);
static_assert(offsetof(UInventoryContainerHandsHolsters, _tradingShoulderLeftWidget) == 0x0050);
static_assert(offsetof(UInventoryContainerHandsHolsters, _tradingShoulderRightWidget) == 0x0058);
static_assert(offsetof(UInventoryContainerHandsHolsters, _data) == 0x0070);
static_assert(offsetof(UInventoryContainerHandsHolsters, _oldData) == 0x0090);
static_assert(offsetof(UInventoryItemWidget2Test, _itemIcon) == 0x0268);
static_assert(offsetof(UInventoryItemWidget2Test, _itemCaption) == 0x0270);
static_assert(offsetof(UInventoryContainerWidget2Test, _itemIcon) == 0x0268);
static_assert(offsetof(UInventoryContainerWidget2Test, _itemCaption) == 0x0270);
static_assert(offsetof(UInventoryContainerWidget2Test, _itemContainer) == 0x0278);
static_assert(offsetof(UInventoryPanelWidget2Test, _itemContainer) == 0x0268);
static_assert(offsetof(UInventoryContainerWidgetReborn, _genericWidgetOverlay) == 0x0270);
static_assert(offsetof(UInventoryContainerWidgetReborn, _uiroWidget) == 0x0278);
static_assert(offsetof(UInventoryContainerWidgetReborn, _nameTextBlock) == 0x0280);
static_assert(offsetof(UInventoryContainerWidgetReborn, _temperatureTextBlock) == 0x0288);
static_assert(offsetof(UInventoryContainerWidgetReborn, _wetnessWeightTextBlock) == 0x0290);
static_assert(offsetof(UInventoryContainerWidgetReborn, _weightRatio) == 0x0298);
static_assert(offsetof(UInventoryContainerWidgetReborn, _expandToggle) == 0x02A0);
static_assert(offsetof(UInventoryContainerWidgetReborn, _contentBox) == 0x02A8);
static_assert(offsetof(UInventoryContainerWidgetReborn, _inventoryContainerGrid) == 0x02B0);
static_assert(offsetof(UInventoryGridWidget, _image) == 0x0268);
static_assert(offsetof(UInventoryPanel, _inventoryContainerWidgetClass) == 0x0270);
static_assert(offsetof(UInventoryPanel, _availabilityOverlayImage) == 0x0278);
static_assert(offsetof(UInventoryPanel, _titleTabsSwitcher) == 0x0280);
static_assert(offsetof(UInventoryPanel, _playerName) == 0x0288);
static_assert(offsetof(UInventoryPanel, _tabRow) == 0x0290);
static_assert(offsetof(UInventoryPanel, _inventoryAndHolstersSwitcher) == 0x0298);
static_assert(offsetof(UInventoryPanel, _inventoryPage) == 0x02A0);
static_assert(offsetof(UInventoryPanel, _inventoryScrollBox) == 0x02A8);
static_assert(offsetof(UInventoryPanel, _handsHolstersPage) == 0x02B0);
static_assert(offsetof(UInventoryPanel, _leftHolster) == 0x02B8);
static_assert(offsetof(UInventoryPanel, _rightHolster) == 0x02C0);
static_assert(offsetof(UInventoryPanel, _hands) == 0x02C8);
static_assert(offsetof(UInventoryPanel, _equipmentVerticalBox) == 0x02D0);
static_assert(offsetof(UInventoryPanelSideLayerWidget, _itemWidget) == 0x0268);
static_assert(offsetof(UInventoryPanelThirdIteration, Hands) == 0x0268);
static_assert(offsetof(UInventoryPanelThirdIteration, LeftHolster) == 0x0270);
static_assert(offsetof(UInventoryPanelThirdIteration, RightHolster) == 0x0278);
static_assert(offsetof(UInventoryPanelThirdIteration, _displayedCharacter) == 0x0280);
static_assert(offsetof(UInventoryPanelThirdIteration, _tabRow) == 0x0288);
static_assert(offsetof(UInventoryPanelThirdIteration, _inventoriesScrollBox) == 0x0290);
static_assert(offsetof(UInventoryPanelThirdIteration, _nonContainerBox) == 0x0298);
static_assert(offsetof(UInventoryPanelThirdIteration, _nonTradingBits) == 0x02A0);
static_assert(offsetof(UInventoryPanelThirdIteration, _tradingBits) == 0x02A8);
static_assert(offsetof(UInventoryPanelThirdIteration, _inventoryAndHolstersSwitcher) == 0x02B0);
static_assert(offsetof(UInventoryPanelThirdIteration, _inventoryTradingSwitcher) == 0x02B8);
static_assert(offsetof(UInventoryPanelThirdIteration, _playerName) == 0x02C0);
static_assert(offsetof(UInventoryPanelThirdIteration, _availabilityOverlayImage) == 0x02C8);
static_assert(offsetof(UInventoryPanelThirdIteration, _nonContainerItemsPadding) == 0x03C0);
static_assert(offsetof(UInventorySlotUserWidget, ImageWidget) == 0x0270);
static_assert(offsetof(UInventorySlotUserWidget, SizeBoxWrapper) == 0x0278);
static_assert(offsetof(UInventorySlotUserWidget, ParentContainerWidget) == 0x0280);
static_assert(offsetof(UInventorySlotUserWidget, BaseColor) == 0x0288);
static_assert(offsetof(UInventorySlotUserWidget, RedColor) == 0x0298);
static_assert(offsetof(UInventorySlotUserWidget, GreenColor) == 0x02A8);
static_assert(offsetof(UItemAction, _description) == 0x0040);
static_assert(offsetof(UItemActionSequence, _animations) == 0x0058);
static_assert(offsetof(UItemActionDescriptionLoadMagazine, ammoItem) == 0x0038);
static_assert(offsetof(UItemClassWidget, BackgroundImage) == 0x0268);
static_assert(offsetof(UItemClassWidget, MainImage) == 0x0270);
static_assert(offsetof(FItemContainersArray, _itemContainers) == 0x0000);
static_assert(offsetof(FItemContainerRepData, Locks) == 0x0000);
static_assert(offsetof(FItemContainerRepData, RemainingNeutralizationAttemptsPerLock) == 0x0010);
static_assert(offsetof(FItemContainersReplicationHelper, ItemContainerData) == 0x0000);
static_assert(offsetof(AItemContainerManager, _itemContainers) == 0x0268);
static_assert(offsetof(AItemContainerManager, _itemContainersOwned) == 0x02B8);
static_assert(offsetof(AItemContainerManager, _itemContainersDataRepHelper) == 0x0310);
static_assert(offsetof(AItemDropPlaceholder, _rootComponent) == 0x0220);
static_assert(offsetof(AItemDropPlaceholder, _boxCollisionComponent) == 0x0228);
static_assert(offsetof(AItemDropPlaceholder, _staticMeshComponent) == 0x0230);
static_assert(offsetof(AItemDropPlaceholder, _skeletalMeshComponent) == 0x0238);
static_assert(offsetof(UItemGroup, Items) == 0x0030);
static_assert(offsetof(UItemInventoryDepotWidget2, _container) == 0x0268);
static_assert(offsetof(UItemInventoryDepotWidget2, _inventoryCanvas) == 0x0270);
static_assert(offsetof(UItemInventoryDepotWidget2, _inventoryGrid) == 0x0290);
static_assert(offsetof(UItemInventoryDepotWidget2, _loadingWidget) == 0x0298);
static_assert(offsetof(UItemInventoryDepotWidget2, _inventoryGridWidget) == 0x02A0);
static_assert(offsetof(UItemInventoryDepotWidget2, _contentBox) == 0x02A8);
static_assert(offsetof(UItemInventoryDepotWidget2, _slotsWidgets) == 0x02B0);
static_assert(offsetof(UItemInventoryDepotWidget2, BlinkAnim) == 0x02C0);
static_assert(offsetof(UItemInventoryDepotWidget2, RetainerBoxDeadCells) == 0x02C8);
static_assert(offsetof(UItemInventoryWidget2, _container) == 0x0268);
static_assert(offsetof(UItemInventoryWidget2, _inventoryCanvas) == 0x0270);
static_assert(offsetof(UItemInventoryWidget2, _nameText) == 0x0290);
static_assert(offsetof(UItemInventoryWidget2, _itemWidget) == 0x0298);
static_assert(offsetof(UItemInventoryWidget2, _inventoryGrid) == 0x02A0);
static_assert(offsetof(UItemInventoryWidget2, _loadingWidget) == 0x02A8);
static_assert(offsetof(UItemInventoryWidget2, _inventoryGridWidget) == 0x02B0);
static_assert(offsetof(UItemInventoryWidget2, _contentBox) == 0x02B8);
static_assert(offsetof(UItemInventoryWidget2, _expandToggle) == 0x02C0);
static_assert(offsetof(UItemInventoryWidget2, _slotsWidgets) == 0x02C8);
static_assert(offsetof(UItemInventoryWidget2, BlinkAnim) == 0x02D8);
static_assert(offsetof(UItemInventoryWidget2, RetainerBoxDeadCells) == 0x02E0);
static_assert(offsetof(UItemLightDisplay, _itemImage) == 0x0280);
static_assert(offsetof(UItemLightDisplay, _emptySlotBackground) == 0x0288);
static_assert(offsetof(UItemLightDisplay, _sizeBox) == 0x0290);
static_assert(offsetof(UItemLightDisplay, _durability) == 0x0298);
static_assert(offsetof(UItemLightDisplay, _uses) == 0x02A0);
static_assert(offsetof(UItemLightDisplay, _selectionBorder) == 0x02A8);
static_assert(offsetof(UItemLightDisplay, _itemDataOverlay) == 0x02B0);
static_assert(offsetof(UItemLightDisplay, _durabilityProgressBar) == 0x02B8);
static_assert(offsetof(UItemLightDisplay, _usesProgressBar) == 0x02C0);
static_assert(offsetof(UItemPostSpawnAction, _appliesToItemAssetIds) == 0x0030);
static_assert(offsetof(UItemPostSpawnAction_SetAmmoAmount, _absoluteAmount) == 0x0044);
static_assert(offsetof(UItemPostSpawnAction_SetAmmoAmount, _amountRatio) == 0x0050);
static_assert(offsetof(UItemPostSpawnAction_SetCashAmount, _absoluteAmount) == 0x0044);
static_assert(offsetof(UItemPostSpawnAction_SetCashAmount, _amountRatio) == 0x0050);
static_assert(offsetof(UItemPostSpawnAction_SetClothesDirtiness, _dirtiness) == 0x0040);
static_assert(offsetof(UItemPostSpawnAction_SetResourceAmount, _absoluteAmount) == 0x0044);
static_assert(offsetof(UItemPostSpawnAction_SetResourceAmount, _amountRatio) == 0x0050);
static_assert(offsetof(UItemPostSpawnAction_SetUsage, _absoluteUsage) == 0x0044);
static_assert(offsetof(UItemPostSpawnAction_SetUsage, _usageRatio) == 0x0050);
static_assert(offsetof(UItemPostSpawnAction_KillboxKeycard, SpawnReason) == 0x0040);
static_assert(offsetof(UItemRackSlotComponent, _placedItem) == 0x0200);
static_assert(offsetof(UItemRackSlotComponent, _acceptableTags) == 0x0210);
static_assert(offsetof(UItemRackSlotComponent, _placeItemAudioEvent) == 0x0220);
static_assert(offsetof(UItemRequirementMountPathBlocker, _requiredItemTagClass) == 0x0030);
static_assert(offsetof(UItemRequirementMountPathBlocker, _mountTypeToBlock) == 0x0038);
static_assert(offsetof(UItemsCraftingDetailsPanel, _bigItemCraftingButton) == 0x0270);
static_assert(offsetof(UItemsCraftingDetailsPanel, _descriptionTextBlock) == 0x0278);
static_assert(offsetof(UItemsCraftingDetailsPanel, _ingredientsExpandCheckBox) == 0x0280);
static_assert(offsetof(UItemsCraftingDetailsPanel, _recipeIngredientButtonsWrapBox) == 0x0288);
static_assert(offsetof(UItemsCraftingDetailsPanel, _possibleIngredientsOverlay) == 0x0290);
static_assert(offsetof(UItemsCraftingDetailsPanel, _possibleRecipeIngredientButtonsWrapBox) == 0x0298);
static_assert(offsetof(UItemsCraftingDetailsPanel, _linksVerticalBox) == 0x02A0);
static_assert(offsetof(UItemsCraftingDetailsPanel, _dlcStoreLinkButton) == 0x02A8);
static_assert(offsetof(UItemsCraftingDetailsPanel, _dlcText) == 0x02B0);
static_assert(offsetof(UItemsCraftingDetailsPanel, _twitchDropLinkButton) == 0x02B8);
static_assert(offsetof(UItemsCraftingDetailsPanel, _twitchDropText) == 0x02C0);
static_assert(offsetof(UItemsCraftingDetailsPanel, _recipeIngredientButtonClass) == 0x02C8);
static_assert(offsetof(UItemsCraftingDetailsPanel, _possibleRecipeIngredientButtonClass) == 0x02D0);
static_assert(offsetof(UItemsCraftingPanel, _craftingCategoriesTabButtonsContainer) == 0x0270);
static_assert(offsetof(UItemsCraftingPanel, _searchBox) == 0x0278);
static_assert(offsetof(UItemsCraftingPanel, _categoriesDetailsSwitcher) == 0x0280);
static_assert(offsetof(UItemsCraftingPanel, _selectedCategoryTitle) == 0x0288);
static_assert(offsetof(UItemsCraftingPanel, _categoriesScrollBox) == 0x0290);
static_assert(offsetof(UItemsCraftingPanel, _craftingDetailsPanel) == 0x0298);
static_assert(offsetof(UItemsCraftingPanel, _detailsAndBackButton) == 0x02A0);
static_assert(offsetof(UItemsCraftingPanel, _detailsTooltipText) == 0x02A8);
static_assert(offsetof(UItemsCraftingPanel, _backTooltipText) == 0x02C0);
static_assert(offsetof(UItemsCraftingPanel, _autoCraftButton) == 0x02D8);
static_assert(offsetof(UItemsCraftingPanel, _autoCraftTooltipText) == 0x02E0);
static_assert(offsetof(UItemsCraftingPanel, _craftButton) == 0x02F8);
static_assert(offsetof(UItemsCraftingPanel, _craftTooltipText) == 0x0300);
static_assert(offsetof(UItemsCraftingPanel, _examinedItemContainer) == 0x0318);
static_assert(offsetof(UItemsCraftingPanel, _examinedItemName) == 0x0320);
static_assert(offsetof(UItemsCraftingPanel, _examinedItemIcon) == 0x0328);
static_assert(offsetof(UItemsCraftingPanel, _collapseAllButton) == 0x0330);
static_assert(offsetof(UItemsCraftingPanel, _expandAllButton) == 0x0338);
static_assert(offsetof(UItemsCraftingPanel, _examinedItemDescription) == 0x0340);
static_assert(offsetof(UItemsCraftingPanel, _craftingRecipeButtonsContainerClass) == 0x0348);
static_assert(offsetof(UItemsCraftingPanel, _tooltipClass) == 0x0350);
static_assert(offsetof(UItemsCraftingPanel, _categoriesPadding) == 0x03A8);
static_assert(offsetof(UItemsCraftingPanel, _examinedItem) == 0x03D0);
static_assert(offsetof(UItemSelection, MainItem) == 0x0030);
static_assert(offsetof(UItemSelection, SupportItems) == 0x0038);
static_assert(offsetof(UItemSelection, Attachments) == 0x0048);
static_assert(offsetof(UItemSelection, UnselectedIcon) == 0x0058);
static_assert(offsetof(UItemSelection, SelectedIcon) == 0x0060);
static_assert(offsetof(UItemSelection, DisabledIcon) == 0x0068);
static_assert(offsetof(UItemSelection, SelectionName) == 0x0070);
static_assert(offsetof(UItemSelectionSlotWidget, _selectionScrollBox) == 0x0268);
static_assert(offsetof(UItemSelectionSlotWidget, TextBlock) == 0x0270);
static_assert(offsetof(UItemSelectionSlotWidget, VerticalBox) == 0x0278);
static_assert(offsetof(UItemSelectionSlotWidget, Name) == 0x0280);
static_assert(offsetof(UItemSelectionSlotWidget, _selectionWidgetClass) == 0x0298);
static_assert(offsetof(UItemSelectionWidget, _selection) == 0x0268);
static_assert(offsetof(UItemSelectionWidget, _itemName) == 0x0270);
static_assert(offsetof(UItemSelectionWidget, _itemData) == 0x0280);
static_assert(offsetof(UItemSelectionWidget, _cancelTexture) == 0x0288);
static_assert(offsetof(UItemSelectionWidget, _selectionAudioEvent) == 0x0290);
static_assert(offsetof(UItemSelectionWidget, _selectedColor) == 0x0298);
static_assert(offsetof(UItemSelectionWidget, _notSelectedColor) == 0x02C0);
static_assert(offsetof(FItemSpawnerMarker, Transform) == 0x0000);
static_assert(offsetof(FItemSpawnerMarker, Spawner) == 0x0030);
static_assert(offsetof(FItemSpawnerMarker, SpawnerPreset) == 0x00C0);
static_assert(offsetof(UItemSpawnerComponent, SpawnerMarkers) == 0x0200);
static_assert(offsetof(UItemSpawnerComponent, SpawnerGroupName) == 0x0210);
static_assert(offsetof(AItemSpawnerGroup, SpawnerComponent) == 0x0220);
static_assert(offsetof(AItemSpawnerVolume, zone) == 0x0258);
static_assert(offsetof(AItemSpawningManager, _dataRegistry) == 0x0238);
static_assert(offsetof(FItemSpawnerData, ItemSpawnTypes) == 0x0010);
static_assert(offsetof(FItemSpawnerData, PostItemsSpawnedActions) == 0x0068);
static_assert(offsetof(UItemSpawnerPreset, SpawnerData) == 0x0028);
static_assert(offsetof(UItemSpawnerPreset2, Nodes) == 0x0028);
static_assert(offsetof(UItemSpawnerPreset2, Items) == 0x0038);
static_assert(offsetof(UItemSpawnerPreset2, Subpresets) == 0x0048);
static_assert(offsetof(UItemSpawnerPreset2, Quantity) == 0x0070);
static_assert(offsetof(UItemSplitWidget, _currentItemStackAmount) == 0x0268);
static_assert(offsetof(UItemSplitWidget, _newItemStackAmount) == 0x0270);
static_assert(offsetof(UItemSplitWidget, _valueSlider) == 0x0278);
static_assert(offsetof(UItemSplitWidget, _splitButton) == 0x0280);
static_assert(offsetof(UItemTooltipTab, _panels) == 0x0140);
static_assert(offsetof(UItemTooltip, _mainPanel) == 0x0268);
static_assert(offsetof(UItemTooltip, _overviewPanels) == 0x0270);
static_assert(offsetof(UItemTooltip, _additionalPanels) == 0x0278);
static_assert(offsetof(UItemTooltip, _pageIndicatorBar) == 0x0280);
static_assert(offsetof(UItemTooltip, _expandHintText) == 0x0288);
static_assert(offsetof(UItemTooltip, UI_Border) == 0x0290);
static_assert(offsetof(UItemTooltip, _pageIndicatorGrid) == 0x0298);
static_assert(offsetof(UItemTooltipPanelElement, _elementName) == 0x0268);
static_assert(offsetof(UItemTooltipPanelElement_Overview, IconImage) == 0x0270);
static_assert(offsetof(UItemTooltipPanelElement_Overview, ExtendedRichTextBlock) == 0x0278);
static_assert(offsetof(UItemTooltipPanelElement_Overview, Icon_) == 0x0280);
static_assert(offsetof(UItemTooltipPanelElement_Overview, TextFormat_) == 0x0298);
static_assert(offsetof(UItemTooltipPanelElement_Overview, TextStyle_) == 0x02B0);
static_assert(offsetof(UItemTooltipPanelElement_Overview, Color_) == 0x0520);
static_assert(offsetof(UItemTooltipPanelElement_OverviewText, ExtendedRichTextBlock) == 0x0270);
static_assert(offsetof(UItemTooltipPanelElement_OverviewText, TextFormat_) == 0x0288);
static_assert(offsetof(UItemTooltipPanelElement_OverviewText, TextStyle_) == 0x02A0);
static_assert(offsetof(UItemTooltipPanelElement_OverviewText, Color_) == 0x0510);
static_assert(offsetof(UItemTooltipPanelElement_OverviewTextParameter, TextBlock) == 0x0270);
static_assert(offsetof(UItemTooltipPanelElement_OverviewTextParameter, TextBlock0) == 0x0278);
static_assert(offsetof(UItemTooltipPanelElement_OverviewTextParameter, Font_) == 0x0280);
static_assert(offsetof(UItemTooltipPanelElement_OverviewTextParameter, TextFormat_) == 0x02D8);
static_assert(offsetof(UItemTooltipPanelElement_OverviewTextParameter, ParameterText_) == 0x02F0);
static_assert(offsetof(UItemMainTooltipPanel, DebugOverlay) == 0x02B8);
static_assert(offsetof(UItemUserWidget, _uiBorder) == 0x0298);
static_assert(offsetof(UItemWidget2, LowerLeftTextFirst) == 0x02A0);
static_assert(offsetof(UItemWidget2, LowerLeftTextSecond) == 0x02A8);
static_assert(offsetof(UItemWidget2, ProgressBarDurability) == 0x0300);
static_assert(offsetof(UItemWidget2, ProgressBarUses) == 0x0308);
static_assert(offsetof(UItemWidget2, BackgroundHighlight) == 0x0310);
static_assert(offsetof(UItemWidget2, _icon) == 0x0340);
static_assert(offsetof(UItemWidget2, _iconSizeBox) == 0x0348);
static_assert(offsetof(UItemWidget2, _background) == 0x0350);
static_assert(offsetof(UItemWidget2, _mainInvalidationBox) == 0x0358);
static_assert(offsetof(UItemWidget2, _priceOverlay) == 0x0360);
static_assert(offsetof(UItemWidget2, _priceText) == 0x0368);
static_assert(offsetof(UItemWidget2, _backgroundGrid) == 0x0370);
static_assert(offsetof(UItemWidget2, _foregroundGrid) == 0x0378);
static_assert(offsetof(UItemWidget2, _selectionOverlay) == 0x0380);
static_assert(offsetof(UItemWidget2, _healthPercentageProgressBarVBox) == 0x0390);
static_assert(offsetof(UItemWidget2, _irreparableIcon) == 0x0398);
static_assert(offsetof(UItemWidget2, _disabledOverlay) == 0x03A0);
static_assert(offsetof(UItemWidget2, _radiationIcon) == 0x03A8);
static_assert(offsetof(UItemWidget2, _defaultBackgroundColour) == 0x03B0);
static_assert(offsetof(UItemWidget2, _hoveredBackgroundColour) == 0x03C0);
static_assert(offsetof(UItemWidget2, _selectedBackgroundColour) == 0x03D0);
static_assert(offsetof(UItemWidget2, _selectedHoveredBackgroundColour) == 0x03E0);
static_assert(offsetof(UItemWidget2, _lowerLeftBox) == 0x0410);
static_assert(offsetof(UItemWidget2, _additionalIcon) == 0x0418);
static_assert(offsetof(UItemWidget2, _additionalIconSizeBox) == 0x0420);
static_assert(offsetof(UItemWidget2, _temperatureLevelImages) == 0x0460);
static_assert(offsetof(UItemWidget2, _wetnessLevelImages) == 0x0470);
static_assert(offsetof(UItemWidget2, MainSizeBox) == 0x0480);
static_assert(offsetof(UItemWidget2, Temperature) == 0x0488);
static_assert(offsetof(UItemWidget2, Wetness) == 0x0490);
static_assert(offsetof(UItemWidget2, UsageSeparator) == 0x0498);
static_assert(offsetof(UItemWidget2, UsesBackground) == 0x04A0);
static_assert(offsetof(UItemWidget2, HealthBackground) == 0x04A8);
static_assert(offsetof(UItemWidget2, LowerRightText) == 0x04B0);
static_assert(offsetof(UItemWidget2, UpperRightBackground) == 0x04B8);
static_assert(offsetof(UItemWidget2, UpperRightText) == 0x04C0);
static_assert(offsetof(UItemWidget2, UpperLeftBackground) == 0x04C8);
static_assert(offsetof(UItemWidget2, UpperLeftText) == 0x04D0);
static_assert(offsetof(UItemWidget2, MiddleBackground) == 0x04D8);
static_assert(offsetof(UItemWidget2, MiddleText) == 0x04E0);
static_assert(offsetof(UItemWidget2, UpperBackground) == 0x04E8);
static_assert(offsetof(UItemWidget2, LowerBackground) == 0x04F0);
static_assert(offsetof(UItemWidget2, LowerLeftBoxFadeIn) == 0x04F8);
static_assert(offsetof(UItemWidget2, LowerLeftBoxFadeOut) == 0x0500);
static_assert(offsetof(UItemWidget2, AdditionalIconFadeIn) == 0x0508);
static_assert(offsetof(UItemWidget2, AdditionalIconFadeOut) == 0x0510);
static_assert(offsetof(UItemWidget2, LowerLeftBoxShow) == 0x0518);
static_assert(offsetof(AItemWithText, _textWidgetComponent) == 0x09B0);
static_assert(offsetof(AItemWithText, _text) == 0x09B8);
static_assert(offsetof(AItemWithText, _owningUserProfileId) == 0x09C8);
static_assert(offsetof(UJournalPanelWidget, _tabContainer) == 0x0268);
static_assert(offsetof(UJournalPanelWidget, _leftPanelSwitcher) == 0x0270);
static_assert(offsetof(UJournalPanelWidget, _rightPanelSwitcher) == 0x0278);
static_assert(offsetof(UJournalPanelWidget, _questEntriesLeftPanel) == 0x0280);
static_assert(offsetof(UJournalPanelWidget, _questEntryDetailsRightPanel) == 0x0288);
static_assert(offsetof(UJournalPanelWidget, _outpostTraderEntryDetailsRightPanel) == 0x0290);
static_assert(offsetof(UJournalPanelWidget, _rightPanelSizeBox) == 0x0298);
static_assert(offsetof(UJournalPanelWidget, _outpostEntriesLeftPanel) == 0x02A0);
static_assert(offsetof(UKeyBinding, ActionNameText) == 0x0298);
static_assert(offsetof(UKeyBinding, ActionKeyText) == 0x02A0);
static_assert(offsetof(UKeyBinding, UserFriendlyName) == 0x02A8);
static_assert(offsetof(UKeyBinding, Name) == 0x02C0);
static_assert(offsetof(UKeyBinding, GroupName) == 0x02D0);
static_assert(offsetof(UKeyBinding, SameKeyBlockerGroupName) == 0x02DC);
static_assert(offsetof(UKeyCardItemEntitySetup, SpawnReason) == 0x0090);
static_assert(offsetof(UKeyCardItemEntitySetup, ExpirationTimeOverrideHours) == 0x0098);
static_assert(offsetof(AKillBoxC4SpawnPoint, SpawnerPreset) == 0x0220);
static_assert(offsetof(FSpawnerConfiguration, Spawner) == 0x0000);
static_assert(offsetof(FSpawnerConfiguration, SpawnerPreset) == 0x0008);
static_assert(offsetof(FRoomDifficultyConfiguration, Locks) == 0x0000);
static_assert(offsetof(FRoomDifficultyConfiguration, Zappers) == 0x0010);
static_assert(offsetof(FRoomDifficultyConfiguration, PossibleSpawners) == 0x0028);
static_assert(offsetof(FRoomDefinition, RoomDoor) == 0x0000);
static_assert(offsetof(FRoomDefinition, Locker) == 0x0008);
static_assert(offsetof(FRoomDefinition, C4) == 0x0010);
static_assert(offsetof(UKillboxComponent, _gasPoisoningCondition) == 0x00D0);
static_assert(offsetof(UKillboxComponent, _availableDifficultyConfigurations) == 0x00F8);
static_assert(offsetof(UKillboxComponent, _killBoxOpeningQuotes) == 0x0138);
static_assert(offsetof(UKillboxComponent, _killBoxLaserAnnouncementQuotes) == 0x0148);
static_assert(offsetof(UKillboxComponent, _killBoxDescriptionQuotes) == 0x0158);
static_assert(offsetof(UKillboxComponent, _killBoxRandomnQuotes) == 0x0168);
static_assert(offsetof(UKillboxComponent, _killBoxFailureQuotes) == 0x0178);
static_assert(offsetof(UKillboxComponent, _killBoxGasAnnouncementQuotes) == 0x0188);
static_assert(offsetof(UKillboxComponent, _killBoxZombieSpawnQuotes) == 0x0198);
static_assert(offsetof(UKillboxComponent, _killBoxTimePauseQuotes) == 0x01A8);
static_assert(offsetof(UKillboxComponent, _difficultyCalibrationQuote) == 0x01B8);
static_assert(offsetof(UKillboxComponent, KillBoxMusicStart) == 0x01C8);
static_assert(offsetof(UKillboxComponent, _killBoxMusicStop) == 0x01D0);
static_assert(offsetof(UKillboxComponent, _killBoxGasSound) == 0x01D8);
static_assert(offsetof(UKillboxComponent, KillBox30SecondsMark) == 0x01E0);
static_assert(offsetof(UKillboxComponent, KillBox10SecondsMark) == 0x01E8);
static_assert(offsetof(UKillboxComponent, KillBox5SecondsMark) == 0x01F0);
static_assert(offsetof(UKillboxComponent, KillBox4SecondsMark) == 0x01F8);
static_assert(offsetof(UKillboxComponent, KillBox3SecondsMark) == 0x0200);
static_assert(offsetof(UKillboxComponent, KillBox2SecondsMark) == 0x0208);
static_assert(offsetof(UKillboxComponent, KillBox1SecondsMark) == 0x0210);
static_assert(offsetof(UKillboxComponent, KillBoxBuzzerSound) == 0x0218);
static_assert(offsetof(UKillboxComponent, _killBoxEntrance) == 0x0220);
static_assert(offsetof(UKillboxComponent, _detectionField) == 0x0228);
static_assert(offsetof(UKillboxComponent, _laserComponent) == 0x0230);
static_assert(offsetof(UKillboxComponent, _spawnPoints) == 0x0238);
static_assert(offsetof(UKillboxComponent, _hardSpawnPoints) == 0x0248);
static_assert(offsetof(UKillboxComponent, _spawnedZombies) == 0x0258);
static_assert(offsetof(UKillboxComponent, _currentAudioComponent) == 0x0268);
static_assert(offsetof(UKillboxComponent, _musicComponent) == 0x0270);
static_assert(offsetof(UKillboxComponent, _queuedQuotes) == 0x02E0);
static_assert(offsetof(UKillboxComponent, _electricalDoors) == 0x02F0);
static_assert(offsetof(UKillboxComponent, _roomDefinitions) == 0x0300);
static_assert(offsetof(UKillboxComponent, _timerWidgets) == 0x0310);
static_assert(offsetof(UKillboxComponent, _gasEmitters) == 0x0320);
static_assert(offsetof(UKillboxComponent, _gasMist) == 0x0330);
static_assert(offsetof(UKillboxComponent, _panicButton) == 0x0338);
static_assert(offsetof(AKillBoxSpawnPoint, _zombieList) == 0x0228);
static_assert(offsetof(AKillBoxSpawnPoint, _door) == 0x0238);
static_assert(offsetof(UKillBoxTimerWidget, _remainingTimeMinutes1) == 0x0268);
static_assert(offsetof(UKillBoxTimerWidget, _remainingTimeMinutes2) == 0x0270);
static_assert(offsetof(UKillBoxTimerWidget, _remainingTimeSeconds1) == 0x0278);
static_assert(offsetof(UKillBoxTimerWidget, _remainingTimeSeconds2) == 0x0280);
static_assert(offsetof(UKillFeedNotificationDescription, Prefix) == 0x0040);
static_assert(offsetof(UKillFeedNotificationDescription, characterName) == 0x0050);
static_assert(offsetof(UKillFeedNotificationDescription, suffix) == 0x0060);
static_assert(offsetof(UKillNotificationWidget, _prefix) == 0x0268);
static_assert(offsetof(UKillNotificationWidget, _name) == 0x0270);
static_assert(offsetof(UKillNotificationWidget, _suffix) == 0x0278);
static_assert(offsetof(UKillNotificationWidget, HorizontalBox) == 0x0280);
static_assert(offsetof(ULadderMarkersComponent, _ladderMarkers) == 0x01F8);
static_assert(offsetof(FLandingEffectDataPerSeverity, ParticleSystem) == 0x0000);
static_assert(offsetof(FLandingEffectDataPerPhysicalSurface, Light) == 0x0000);
static_assert(offsetof(FLandingEffectDataPerPhysicalSurface, Medium) == 0x0010);
static_assert(offsetof(FLandingEffectDataPerPhysicalSurface, Heavy) == 0x0020);
static_assert(offsetof(ULandingEffects, ImpactAudioEvent) == 0x0040);
static_assert(offsetof(ULandingEffects, Default) == 0x0048);
static_assert(offsetof(ULandingEffects, grass) == 0x0078);
static_assert(offsetof(ULandingEffects, ForrestGroundCoastal) == 0x00A8);
static_assert(offsetof(ULandingEffects, ForrestGroundContinental) == 0x00D8);
static_assert(offsetof(ULandingEffects, Rock) == 0x0108);
static_assert(offsetof(ULandingEffects, Stone) == 0x0138);
static_assert(offsetof(ULandingEffects, Gravel) == 0x0168);
static_assert(offsetof(ULandingEffects, GravelBeach) == 0x0198);
static_assert(offsetof(ULandingEffects, Pebbles) == 0x01C8);
static_assert(offsetof(ULandingEffects, Snow) == 0x01F8);
static_assert(offsetof(ULandingEffects, Ice) == 0x0228);
static_assert(offsetof(ULandingEffects, Sand) == 0x0258);
static_assert(offsetof(ULandingEffects, Asphalt) == 0x0288);
static_assert(offsetof(ULandingEffects, Dirt) == 0x02B8);
static_assert(offsetof(ULandingEffects, Water) == 0x02E8);
static_assert(offsetof(ULandingEffects, WaterOcean) == 0x0318);
static_assert(offsetof(ULandingEffects, Cloth) == 0x0348);
static_assert(offsetof(ULandingEffects, Metal) == 0x0378);
static_assert(offsetof(ULandingEffects, Aluminium) == 0x03A8);
static_assert(offsetof(ULandingEffects, Concrete) == 0x03D8);
static_assert(offsetof(ULandingEffects, Brick) == 0x0408);
static_assert(offsetof(ULandingEffects, Wood) == 0x0438);
static_assert(offsetof(ULandingEffects, Plastic) == 0x0468);
static_assert(offsetof(ULandingEffects, Rubber) == 0x0498);
static_assert(offsetof(ULandingEffects, Glass) == 0x04C8);
static_assert(offsetof(ULandingEffects, Folliage) == 0x04F8);
static_assert(offsetof(ULandingEffects, Bark) == 0x0528);
static_assert(offsetof(ULandingEffects, Flesh) == 0x0558);
static_assert(offsetof(ULandingEffects, RoofTile) == 0x0588);
static_assert(offsetof(ULandingEffects, CeramicsTiles) == 0x05B8);
static_assert(offsetof(ULandingEffects, Scrap) == 0x05E8);
static_assert(offsetof(ULandingEffects, Trunk) == 0x0618);
static_assert(offsetof(ULandingEffects, Leaves) == 0x0648);
static_assert(offsetof(ULandingEffects, Plaster) == 0x0678);
static_assert(offsetof(ULandingEffects, Kevlar) == 0x06A8);
static_assert(offsetof(ULandingEffects, ForceField) == 0x06D8);
static_assert(offsetof(ULandingEffects, NoEffect) == 0x0708);
static_assert(offsetof(ULandingEffects, WhiteGravel) == 0x0738);
static_assert(offsetof(ULandingEffects, Mud) == 0x0768);
static_assert(offsetof(ULandingEffects, RiverSand) == 0x0798);
static_assert(offsetof(ULandingEffects, GrassContinental) == 0x07C8);
static_assert(offsetof(ALargeAquaticAnimal, _behavior) == 0x0860);
static_assert(offsetof(ALargeAquaticAnimal, _deathAnimation) == 0x0868);
static_assert(offsetof(ULargeAquaticAnimalSpeciesData, AnimalClass) == 0x0030);
static_assert(offsetof(ULargeAquaticAnimalSpeciesData, SpawningWaterType) == 0x003C);
static_assert(offsetof(ULaserTriggerComponent, BoxCollisionComponent) == 0x04E0);
static_assert(offsetof(ULaserTriggerComponent, VisualizationMeshComponent) == 0x04E8);
static_assert(offsetof(ULaserTriggerComponent, _laserDirection) == 0x04F0);
static_assert(offsetof(ULaserTriggerComponent, _visualizationMesh) == 0x0508);
static_assert(offsetof(ULaserTriggerComponent, _laserMeshTransform) == 0x0510);
static_assert(offsetof(ALevelMarkers, LadderMarkers) == 0x0220);
static_assert(offsetof(ALevelMarkers, WindowMarkers) == 0x0230);
static_assert(offsetof(ALevelRadiationSource, _root) == 0x0220);
static_assert(offsetof(ALevelRadiationSource, _epicenter) == 0x0228);
static_assert(offsetof(ALevelRadiationSource, _extents) == 0x0230);
static_assert(offsetof(ALevelRadiationSource, _falloff) == 0x0238);
static_assert(offsetof(ALevelRadiationSource, _epicenterLocation) == 0x0240);
static_assert(offsetof(ALevelRadiationSource, _radiationFalloffVisualizationMaterial) == 0x0268);
static_assert(offsetof(ALevelRadiationSource, _radiationLookupRenderTarget) == 0x0278);
static_assert(offsetof(ALevelRadiationSource, _radiationLookupRenderMaterial) == 0x0280);
static_assert(offsetof(ALevelRadiationSource, _radiationMaterialParamCollection) == 0x0288);
static_assert(offsetof(ULevelUpNotificationDescription, Skill) == 0x0040);
static_assert(offsetof(ULevelUpNotificationDescription, skillLevel) == 0x0048);
static_assert(offsetof(ULevelUpNotificationWidget, _overlay) == 0x0268);
static_assert(offsetof(ULevelUpNotificationWidget, _backgroundImage) == 0x0270);
static_assert(offsetof(ULevelUpNotificationWidget, _arrowImage) == 0x0278);
static_assert(offsetof(ULevelUpNotificationWidget, _skillLevelText) == 0x0280);
static_assert(offsetof(ULevelUpNotificationWidget, _skillNameText) == 0x0288);
static_assert(offsetof(ULevelUpNotificationWidget, _levelUpNotificationAudioEvent) == 0x0290);
static_assert(offsetof(FAerodynamicSurface, Name) == 0x0000);
static_assert(offsetof(FAerodynamicSurface, Tag) == 0x0008);
static_assert(offsetof(FAerodynamicSurface, Transform) == 0x0010);
static_assert(offsetof(ULiftComponent, PropellerLocation) == 0x01F8);
static_assert(offsetof(ULiftComponent, _aerodynamicSurfaces) == 0x0210);
static_assert(offsetof(ULockableItemComponent, _staticLocks) == 0x00D0);
static_assert(offsetof(ULockableItemComponent, _lockItems) == 0x00E0);
static_assert(offsetof(ULockableItemComponent, _activeAccessLevel) == 0x00F0);
static_assert(offsetof(ALockBombDefusalMinigame, _bombClass) == 0x0540);
static_assert(offsetof(ULockpickableLocksVisualComponent, _lockStaticMeshComponentNames) == 0x0208);
static_assert(offsetof(ULockpickableLocksVisualComponent, _lockMeshPerLockDifficulty) == 0x0218);
static_assert(offsetof(ALockpickingMinigame, _outerRing) == 0x0340);
static_assert(offsetof(ALockpickingMinigame, _movableRing) == 0x0348);
static_assert(offsetof(ALockpickingMinigame, _lockpickingSetAnchor) == 0x0350);
static_assert(offsetof(ALockpickingMinigame, _lockpickManipulator) == 0x0358);
static_assert(offsetof(ALockpickingMinigame, _lockpickAnchor) == 0x0360);
static_assert(offsetof(ALockpickingMinigame, _lockpick) == 0x0368);
static_assert(offsetof(ALockpickingMinigame, _tensionToolManipulator) == 0x0370);
static_assert(offsetof(ALockpickingMinigame, _tensionToolAnchor) == 0x0378);
static_assert(offsetof(ALockpickingMinigame, _tensionTool) == 0x0380);
static_assert(offsetof(ALockpickingMinigame, _zoomStartLocation) == 0x0388);
static_assert(offsetof(ALockpickingMinigame, _zoomEndLocation) == 0x0394);
static_assert(offsetof(ALockpickingMinigame, _protectionParticlesTransform) == 0x03A0);
static_assert(offsetof(ALockpickingMinigame, _zoomCurve) == 0x03D0);
static_assert(offsetof(ALockpickingMinigame, _fadeCurve) == 0x03D8);
static_assert(offsetof(ALockpickingMinigame, _lockpickingLockpickMovementStartAudioEvent) == 0x0410);
static_assert(offsetof(ALockpickingMinigame, _lockpickingLockpickMovementStopAudioEvent) == 0x0418);
static_assert(offsetof(ALockpickingMinigame, _lockpickingLockTensionStartAudioEvent) == 0x0420);
static_assert(offsetof(ALockpickingMinigame, _lockpickingLockTensionStopAudioEvent) == 0x0428);
static_assert(offsetof(ALockpickingMinigame, _lockpickingLockTurningStartAudioEvent) == 0x0430);
static_assert(offsetof(ALockpickingMinigame, _lockpickingLockTurningStopAudioEvent) == 0x0438);
static_assert(offsetof(ALockpickingMinigame, _lockpickingSuccessAudioEvent) == 0x0440);
static_assert(offsetof(ALockpickingMinigame, _lockpickingFailedAudioEvent) == 0x0448);
static_assert(offsetof(ALockpickingMinigame, _lockpickingResetAudioEvent) == 0x0450);
static_assert(offsetof(ULockData, LockMinigameClass) == 0x0028);
static_assert(offsetof(ULockData, LockMinigameConfigurationClass) == 0x0030);
static_assert(offsetof(ULockData, FailurePenaltyClass) == 0x0038);
static_assert(offsetof(ULockData, LockDifficulty) == 0x004C);
static_assert(offsetof(ULockData, LockedMessage) == 0x0050);
static_assert(offsetof(ULockData, LockpickMessage) == 0x0068);
static_assert(offsetof(ULockData, NoSkillExperienceAwards) == 0x008C);
static_assert(offsetof(ULockData, BasicSkillExperienceAwards) == 0x0094);
static_assert(offsetof(ULockData, MediumSkillExperienceAwards) == 0x009C);
static_assert(offsetof(ULockData, AdvancedSkillExperienceAwards) == 0x00A4);
static_assert(offsetof(ULockData, AboveAdvancedSkillExperienceAwards) == 0x00AC);
static_assert(offsetof(UStandardLockData, LockMeshOuter) == 0x00B8);
static_assert(offsetof(UStandardLockData, LockMeshInner) == 0x00C0);
static_assert(offsetof(UCombinationLockData, SetCombinationMinigameClass) == 0x00C0);
static_assert(offsetof(UCombinationLockData, SetCombinationMinigameConfigurationClass) == 0x00C8);
static_assert(offsetof(UDialLockData, LockBodyMesh) == 0x00D8);
static_assert(offsetof(UDialLockData, LockClampMesh) == 0x00E0);
static_assert(offsetof(UDialLockData, LockDialMeshes) == 0x00E8);
static_assert(offsetof(UDialLockData, WheelUpVector) == 0x00F8);
static_assert(offsetof(ULockItemTag, LockData) == 0x0038);
static_assert(offsetof(ULockProtectionTag, FailureParticles) == 0x0038);
static_assert(offsetof(ULockProtectionTag, FailureAudio) == 0x0040);
static_assert(offsetof(ULockProtectionTag, FailureParticlesInWorld) == 0x0048);
static_assert(offsetof(ULockProtectionTag, FailureAudioInWorld) == 0x0050);
static_assert(offsetof(ULockProtectionTag, FailureParticlesScaleInWorld) == 0x0058);
static_assert(offsetof(ULockpickingTensionToolItemTag, Mesh) == 0x0030);
static_assert(offsetof(ULockpickingTensionToolItemTag, TensionToolTransform) == 0x0040);
static_assert(offsetof(ULockpickItemTag, Mesh) == 0x0030);
static_assert(offsetof(ALockProtectionItem, _resourceSlot) == 0x09C0);
static_assert(offsetof(UMessageBox, _message) == 0x0278);
static_assert(offsetof(UMessageBox, _buttonRow) == 0x0280);
static_assert(offsetof(UMessageBox, _buttonsMargin) == 0x0288);
static_assert(offsetof(ULogoutMessageBox, _countdown) == 0x02D0);
static_assert(offsetof(UMainMenu, _continueButton) == 0x0268);
static_assert(offsetof(UMainMenu, _multiplayerButton) == 0x0270);
static_assert(offsetof(UMainMenu, _singleplayerButton) == 0x0278);
static_assert(offsetof(UMainMenu, _optionsButton) == 0x0280);
static_assert(offsetof(UMainMenu, _creditsButton) == 0x0288);
static_assert(offsetof(UMainMenu, _quitButton) == 0x0290);
static_assert(offsetof(UMainMenu, _selectedCharacter) == 0x0298);
static_assert(offsetof(UMainMenu, _gameVersionText) == 0x02A0);
static_assert(offsetof(UMainMenu, _twitchDropsButton) == 0x02A8);
static_assert(offsetof(UMainMenu, _createOrSelectCharacterText) == 0x02B0);
static_assert(offsetof(UMainMenu, _quitMessageBoxText) == 0x02C8);
static_assert(offsetof(UMainMenu, _survivalTipLevelWelcomingMessage) == 0x02E8);
static_assert(offsetof(UMainMenu, _survivalTipLevelWelcomingMessageNote) == 0x0300);
static_assert(offsetof(UMainMenu, _telemetryMenuWidgetClass) == 0x0318);
static_assert(offsetof(AMainMenuHUD, BaseGameModeMenu) == 0x0348);
static_assert(offsetof(AMainMenuHUD, _prisonerCreationUIController) == 0x0350);
static_assert(offsetof(AMainMenuHUD, _prisonerCreationUIControllerClass) == 0x0358);
static_assert(offsetof(AMainMenuPlayerController, _droneVisionMaterialInstance) == 0x0570);
static_assert(offsetof(UMalfunctionsContainerWidget, HotkeyTextColorUnhovered) == 0x0268);
static_assert(offsetof(UMalfunctionsContainerWidget, HotkeyTextColorHovered) == 0x0290);
static_assert(offsetof(UMalfunctionsContainerWidget, _malfunctionsCircularMenu) == 0x02B8);
static_assert(offsetof(UMalfunctionsContainerWidget, _hotkeyDisplaySwitcher) == 0x02C0);
static_assert(offsetof(UMalfunctionsContainerWidget, _twoOp) == 0x02C8);
static_assert(offsetof(UMalfunctionsContainerWidget, _twoOp0) == 0x02D0);
static_assert(offsetof(UMalfunctionsContainerWidget, _threeOp) == 0x02D8);
static_assert(offsetof(UMalfunctionsContainerWidget, _threeOp1) == 0x02E0);
static_assert(offsetof(UMalfunctionsContainerWidget, _threeOp2) == 0x02E8);
static_assert(offsetof(UMalfunctionsContainerWidget, _fourOp) == 0x02F0);
static_assert(offsetof(UMalfunctionsContainerWidget, _fourOp3) == 0x02F8);
static_assert(offsetof(UMalfunctionsContainerWidget, _fourOp4) == 0x0300);
static_assert(offsetof(UMalfunctionsContainerWidget, _fourOp5) == 0x0308);
static_assert(offsetof(UMalfunctionWidget, _descriptionWidget) == 0x0270);
static_assert(offsetof(UManualEnhancedImageTextWidget, _sizeBox) == 0x0268);
static_assert(offsetof(UManualEnhancedImageTextWidget, _richTextBlock) == 0x0270);
static_assert(offsetof(UManualEnhancedImageWidget, _imageContainer) == 0x0268);
static_assert(offsetof(UManualEnhancedImageWidget, _image) == 0x0270);
static_assert(offsetof(UManualEntry, Title) == 0x0030);
static_assert(offsetof(UManualEntry, Description) == 0x0048);
static_assert(offsetof(UCodexEntry, Category) == 0x0060);
static_assert(offsetof(UCodexEntry, Elements) == 0x0068);
static_assert(offsetof(UManualPanelWidget, _tabContainer) == 0x0268);
static_assert(offsetof(UManualPanelWidget, _leftPanelSwitcher) == 0x0270);
static_assert(offsetof(UManualPanelWidget, _rightPanelSwitcher) == 0x0278);
static_assert(offsetof(UManualPanelWidget, _codexEntriesLeftPanel) == 0x0280);
static_assert(offsetof(UManualPanelWidget, _codexEntryDetailsRightPanel) == 0x0288);
static_assert(offsetof(UManualPanelWidget, _taskEntriesLeftPanel) == 0x0290);
static_assert(offsetof(UManualPanelWidget, _taskEntryDetailsRightPanel) == 0x0298);
static_assert(offsetof(UManualPanelWidget, _rightPanelSizeBox) == 0x02A0);
static_assert(offsetof(UManualUIController, _codexEntries) == 0x0070);
static_assert(offsetof(UVehicleMarkersResponse, _payload) == 0x0028);
static_assert(offsetof(UMasterMenu, _menuSwitcher) == 0x0298);
static_assert(offsetof(UMasterMenu, _menuClasses) == 0x02A0);
static_assert(offsetof(UMasterMenu, _menuToPreview) == 0x02F0);
static_assert(offsetof(UMasterWidget, _hudMenuSwitcher) == 0x0268);
static_assert(offsetof(UMasterWidget, _hud) == 0x0270);
static_assert(offsetof(UMasterWidget, _masterMenu) == 0x0278);
static_assert(offsetof(UMasterWidget, _messageBoxSwitcher) == 0x0280);
static_assert(offsetof(UMasterWidget, _messageBoxOverlay) == 0x0288);
static_assert(offsetof(UMasterWidgetMainMenu, _droneModeIndicator) == 0x02A0);
static_assert(offsetof(AMechanic, _commonData) == 0x09C8);
static_assert(offsetof(FVehicleAttachmentAssociatedTradeables, RepairServiceClass) == 0x0000);
static_assert(offsetof(FVehicleAttachmentAssociatedTradeables, InstallationServiceClass) == 0x0028);
static_assert(offsetof(UMechanicCommonData, VehicleAttachmentToTradeableInStockClassPathRedirectors) == 0x0080);
static_assert(offsetof(AMechanoidsManager, _droneSpawnClass) == 0x0240);
static_assert(offsetof(AMechanoidsManager, _droneInitialVisitTime) == 0x0254);
static_assert(offsetof(AMechanoidsManager, _droneVisitTimeDataPerSightingMode) == 0x026C);
static_assert(offsetof(UMedicalSkill, _noSkillParameters) == 0x00B0);
static_assert(offsetof(UMedicalSkill, _basicParameters) == 0x00B8);
static_assert(offsetof(UMedicalSkill, _mediumParameters) == 0x00C0);
static_assert(offsetof(UMedicalSkill, _advancedParameters) == 0x00C8);
static_assert(offsetof(UMedicalSkill, _aboveAdvancedParameters) == 0x00D0);
static_assert(offsetof(AMedicationItem, Usage) == 0x09A0);
static_assert(offsetof(AMedicationItem, Type) == 0x09A1);
static_assert(offsetof(AMedicationItem, RepeatedAbuseReaction) == 0x09B8);
static_assert(offsetof(UMeleeAttackCollisionCapsule, _attachment) == 0x0478);
static_assert(offsetof(UMeleeAttackCollisionCapsule, _weaponDescRef) == 0x0480);
static_assert(offsetof(UMeleeDetectHitCollisionCapsule, detectHitCollisionType) == 0x0478);
static_assert(offsetof(FMeleeSkillAttack, AttackTypes) == 0x0000);
static_assert(offsetof(FMeleeSkillAttack, IgnoreReason) == 0x0020);
static_assert(offsetof(FMeleeSkillAttack, Montage) == 0x0040);
static_assert(offsetof(FMeleeSkillAttack, MontageFP) == 0x0048);
static_assert(offsetof(FMeleeSkillAttack, PitchRange) == 0x0050);
static_assert(offsetof(FMeleeSkillDodge, DodgeDirectionType) == 0x0000);
static_assert(offsetof(FMeleeSkillDodge, Montage) == 0x0008);
static_assert(offsetof(FMeleeSkillAnimations, PrimaryIdleAnimationTP) == 0x0000);
static_assert(offsetof(FMeleeSkillAnimations, PrimaryIdleAnimationFP) == 0x0008);
static_assert(offsetof(FMeleeSkillAnimations, TiredIdleAnimationTP) == 0x0010);
static_assert(offsetof(FMeleeSkillAnimations, TiredIdleAnimationFP) == 0x0018);
static_assert(offsetof(FMeleeSkillAnimations, WalkingIdleAnimationTP) == 0x0020);
static_assert(offsetof(FMeleeSkillAnimations, WalkingIdleAnimationFP) == 0x0028);
static_assert(offsetof(FMeleeSkillAnimations, BlockIdleAnimationTP) == 0x0030);
static_assert(offsetof(FMeleeSkillAnimations, BlockIdleAnimationFP) == 0x0038);
static_assert(offsetof(FMeleeSkillAnimations, AimOffsetBlendSpaceTP) == 0x0040);
static_assert(offsetof(FMeleeSkillAnimations, AimOffsetBlendSpaceFP) == 0x0048);
static_assert(offsetof(FMeleeSkillAnimations, EnterCombatModeMontage) == 0x0050);
static_assert(offsetof(FMeleeSkillAnimations, LeaveCombatModeMontage) == 0x0058);
static_assert(offsetof(FMeleeSkillAnimations, InactivityIdleAnimations) == 0x0060);
static_assert(offsetof(FMeleeSkillAnimations, Attacks) == 0x0078);
static_assert(offsetof(FMeleeSkillAnimations, Dodges) == 0x0088);
static_assert(offsetof(FMeleeSkillParametersPerSkillLevel, StartDelay) == 0x0000);
static_assert(offsetof(FMeleeSkillParametersPerSkillLevel, StartDelayPenaltyPerStrengthShortage) == 0x0008);
static_assert(offsetof(FMeleeSkillParametersPerSkillLevel, AnimationPlayRateModifier) == 0x0010);
static_assert(offsetof(FMeleeSkillParametersPerSkillLevel, AnimationPlayRatePenaltyPerStrengthShortage) == 0x0018);
static_assert(offsetof(FMeleeSkillParametersPerSkillLevel, RegainControlDurationModifier) == 0x0020);
static_assert(offsetof(FMeleeSkillParametersPerSkillLevel, StaminaDrain) == 0x0028);
static_assert(offsetof(FMeleeSkillParametersPerSkillLevel, StaminaDrainPenaltyPerStrengthShortage) == 0x0030);
static_assert(offsetof(FMeleeSkillParametersPerSkillLevel, StaminaRecoveryDelay) == 0x0038);
static_assert(offsetof(FMeleeSkillParametersPerSkillLevel, StaminaRecoveryDuration) == 0x0040);
static_assert(offsetof(FMeleeSkillParametersPerSkillLevel, StaminaInfluenceWindowMin) == 0x0048);
static_assert(offsetof(FMeleeSkillParametersPerSkillLevel, StaminaInfluenceWindowMax) == 0x0050);
static_assert(offsetof(FMeleeSkillParametersPerSkillLevel, StaminaInfluenceWindowLinearity) == 0x0058);
static_assert(offsetof(FMeleeSkillParametersPerSkillLevel, StartDelayWhenExhausted) == 0x0060);
static_assert(offsetof(FMeleeSkillParametersPerSkillLevel, AnimationPlayRateModifierWhenExhausted) == 0x0068);
static_assert(offsetof(FMeleeSkillParametersPerSkillLevel, RegainControlDurationModifierWhenExhausted) == 0x0070);
static_assert(offsetof(FMeleeSkillParametersPerSkillLevel, StaminaMultiplierPerExcessGearWeight) == 0x0078);
static_assert(offsetof(FMeleeSkillParametersPerSkillLevel, ComboCooldownDuration) == 0x0080);
static_assert(offsetof(UMeleeSkillAnimationsPreset, NoSkillAnimations) == 0x0030);
static_assert(offsetof(UMeleeSkillAnimationsPreset, BasicSkillAnimations) == 0x00C8);
static_assert(offsetof(UMeleeSkillAnimationsPreset, MediumSkillAnimations) == 0x0160);
static_assert(offsetof(UMeleeSkillAnimationsPreset, AdvancedSkillAnimations) == 0x01F8);
static_assert(offsetof(UMeleeSkillAnimationsPreset, NoSkillParameters) == 0x0290);
static_assert(offsetof(UMeleeSkillAnimationsPreset, BasicSkillParameters) == 0x0318);
static_assert(offsetof(UMeleeSkillAnimationsPreset, MediumSkillParameters) == 0x03A0);
static_assert(offsetof(UMeleeSkillAnimationsPreset, AdvancedSkillParameters) == 0x0428);
static_assert(offsetof(UMenuButton, _backgroundFocusImage) == 0x02C0);
static_assert(offsetof(UMenuButton, _text) == 0x02C8);
static_assert(offsetof(UMenuButton, _sizeBox) == 0x02D0);
static_assert(offsetof(UMenuButton, _initialTitle) == 0x02D8);
static_assert(offsetof(UMenuButton, _selectedTextStyle) == 0x02F0);
static_assert(offsetof(UMenuButton, _deselectedTextStyle) == 0x0388);
static_assert(offsetof(AMenuCameraController, _camera) == 0x0220);
static_assert(offsetof(AMenuCameraController, _positionSpline) == 0x0228);
static_assert(offsetof(AMenuCameraController, _viewTargetSpline) == 0x0230);
static_assert(offsetof(AMenuCameraController, _mouseBasedRotationIntensity) == 0x0238);
static_assert(offsetof(AMenuCameraController, _positionWeightCurve) == 0x0240);
static_assert(offsetof(AMenuCameraController, _viewTargetWeightCurve) == 0x02C8);
static_assert(offsetof(UMenuHelpers, MainMenuClass) == 0x0030);
static_assert(offsetof(UMenuHelpers, ServerBrowserClass) == 0x0038);
static_assert(offsetof(UMenuHelpers, OptionsClass) == 0x0040);
static_assert(offsetof(UMenuHelpers, AdvancedOptionsClass) == 0x0048);
static_assert(offsetof(UMenuHelpers, CharacterCreationClass) == 0x0050);
static_assert(offsetof(UMenuHelpers, CharacterSelectionClass) == 0x0058);
static_assert(offsetof(UMenuHelpers, CharacterCreationSecondIterationClass) == 0x0060);
static_assert(offsetof(UMeshHitZones, _deactivationMaterial) == 0x00C0);
static_assert(offsetof(ASceneComponentEffectsActor, _registeredComponents) == 0x0220);
static_assert(offsetof(UMessage, _text) == 0x0268);
static_assert(offsetof(UMessageBoxWithCheckBox, _checkBox) == 0x02D0);
static_assert(offsetof(UMessageBoxWithCheckBox, _checkBoxMessage) == 0x02D8);
static_assert(offsetof(UMessageBoxWithEditableText, _noteMessage) == 0x02D0);
static_assert(offsetof(UMessageBoxWithEditableText, _editableText) == 0x02D8);
static_assert(offsetof(UMessageBoxWithEditableText, _warningMessage) == 0x02E0);
static_assert(offsetof(UMessageBoxWithListEntry, _entry) == 0x0268);
static_assert(offsetof(UMessageBoxWithList, _listScrollBox) == 0x02C0);
static_assert(offsetof(UMessageBoxWithList, _listEntryClass) == 0x02C8);
static_assert(offsetof(UMessageBoxWithNote, _noteText) == 0x02C0);
static_assert(offsetof(UMessageContainer, _messages) == 0x0268);
static_assert(offsetof(UMessageContainer, _messageClass) == 0x0270);
static_assert(offsetof(UMetabolism_ICU_GraphWidget, BaseCurve) == 0x01F8);
static_assert(offsetof(UMetabolism_ICU_GraphWidget_EKG, TimeStretchCurveCurve) == 0x0220);
static_assert(offsetof(UMetabolism_ICU_GraphWidget_EKG, HeartbeatIrregularitiesCurve) == 0x0228);
static_assert(offsetof(UMetabolism_ICU_GraphWidget_SPO2, TimeStretchCurveCurve) == 0x0220);
static_assert(offsetof(UMetabolism_ICU_GraphWidget_ST, TimeStretchCurveCurve) == 0x0220);
static_assert(offsetof(UMetabolism_BCU_ICU_StatsPanel, Stats_EKG) == 0x0268);
static_assert(offsetof(UMetabolism_BCU_ICU_StatsPanel, Stats_ST) == 0x0270);
static_assert(offsetof(UMetabolism_BCU_ICU_StatsPanel, Stats_SPO2) == 0x0278);
static_assert(offsetof(UMetabolism_BCU_ICU_StatsPanel, Stats_RR) == 0x0280);
static_assert(offsetof(UMetabolism_BCU_ICU_StatsPanel, Stats_TEMP) == 0x0288);
static_assert(offsetof(UMetabolism_BCU_ICU_Monitor, TimeStretchCurveCurve) == 0x0268);
static_assert(offsetof(UMetabolism_BCU_ICU_Monitor, _chbSwitchICUState) == 0x0270);
static_assert(offsetof(UMetabolism_BCU_ICU_Monitor, _icu_Switcher) == 0x0278);
static_assert(offsetof(UMetabolism_BCU_ICU_Monitor, _icu_Collapsed) == 0x0280);
static_assert(offsetof(UMetabolism_BCU_ICU_Monitor, _icu_Expanded) == 0x0288);
static_assert(offsetof(UMetabolism_ICU_Expandable_Stats, _graph2D) == 0x0270);
static_assert(offsetof(UMetabolism_ICU_Expandable_Stats, _graph2D_Background) == 0x0278);
static_assert(offsetof(UMetabolism_ICU_Expandable_Stats, _tooltipClass) == 0x0280);
static_assert(offsetof(UMetabolism_ICU_EKG_Stats, _heartPulseBPM) == 0x0288);
static_assert(offsetof(UMetabolism_ICU_EKG_Stats, _ekg) == 0x0290);
static_assert(offsetof(UMetabolism_ICU_EKG_Stats, _stPlus) == 0x0298);
static_assert(offsetof(UMetabolism_ICU_EKG_Stats, _bpm) == 0x02A0);
static_assert(offsetof(UMetabolism_ICU_EKG_Stats, _miliVolts) == 0x02A8);
static_assert(offsetof(UMetabolism_ICU_EKG_Stats, _ekgDescription) == 0x02B0);
static_assert(offsetof(UMetabolism_ICU_EKG_Stats, _stPlusDescription) == 0x02C8);
static_assert(offsetof(UMetabolism_ICU_EKG_Stats, _bpmDescription) == 0x02E0);
static_assert(offsetof(UMetabolism_ICU_EKG_Stats, _miliVoltsDescription) == 0x02F8);
static_assert(offsetof(UMetabolism_ICU_ST_Stats, _bloodPressure_mmHg) == 0x0288);
static_assert(offsetof(UMetabolism_ICU_ST_Stats, _bloodPressure_kPa) == 0x0290);
static_assert(offsetof(UMetabolism_ICU_ST_Stats, _st) == 0x0298);
static_assert(offsetof(UMetabolism_ICU_ST_Stats, _nibp) == 0x02A0);
static_assert(offsetof(UMetabolism_ICU_ST_Stats, _mmHg) == 0x02A8);
static_assert(offsetof(UMetabolism_ICU_ST_Stats, _kPa) == 0x02B0);
static_assert(offsetof(UMetabolism_ICU_ST_Stats, _stDescription) == 0x02B8);
static_assert(offsetof(UMetabolism_ICU_ST_Stats, _nibpDescription) == 0x02D0);
static_assert(offsetof(UMetabolism_ICU_ST_Stats, _mmHgDescription) == 0x02E8);
static_assert(offsetof(UMetabolism_ICU_ST_Stats, _kPaDescription) == 0x0300);
static_assert(offsetof(UMetabolism_ICU_SPO2_Stats, _spo2MinMax) == 0x0288);
static_assert(offsetof(UMetabolism_ICU_SPO2_Stats, _spo2TextValue) == 0x0290);
static_assert(offsetof(UMetabolism_ICU_SPO2_Stats, _spo2ProgBar) == 0x0298);
static_assert(offsetof(UMetabolism_ICU_SPO2_Stats, _spo2) == 0x02A0);
static_assert(offsetof(UMetabolism_ICU_SPO2_Stats, _spo2Description) == 0x02A8);
static_assert(offsetof(UMetabolism_ICU_RR_Stats, _rrMinMax) == 0x0288);
static_assert(offsetof(UMetabolism_ICU_RR_Stats, _rrTextValue) == 0x0290);
static_assert(offsetof(UMetabolism_ICU_RR_Stats, _rr) == 0x0298);
static_assert(offsetof(UMetabolism_ICU_RR_Stats, _co2) == 0x02A0);
static_assert(offsetof(UMetabolism_ICU_RR_Stats, _rrDescription) == 0x02A8);
static_assert(offsetof(UMetabolism_ICU_RR_Stats, _co2Description) == 0x02C0);
static_assert(offsetof(UMetabolism_ICU_TEMP_Stats, _tempMinMax) == 0x0288);
static_assert(offsetof(UMetabolism_ICU_TEMP_Stats, _tempDeviation) == 0x0290);
static_assert(offsetof(UMetabolism_ICU_TEMP_Stats, _temp) == 0x0298);
static_assert(offsetof(UMetabolism_ICU_TEMP_Stats, _td) == 0x02A0);
static_assert(offsetof(UMetabolism_ICU_TEMP_Stats, _tempHalf) == 0x02A8);
static_assert(offsetof(UMetabolism_ICU_TEMP_Stats, _degreesCelsius) == 0x02B0);
static_assert(offsetof(UMetabolism_ICU_TEMP_Stats, _tempDescription) == 0x02B8);
static_assert(offsetof(UMetabolism_ICU_TEMP_Stats, _tempDeviationDescription) == 0x02D0);
static_assert(offsetof(UMetabolism_ICU_TEMP_Stats, _tempHalfDescription) == 0x02E8);
static_assert(offsetof(UMetabolism_ICU_TEMP_Stats, _degreesCelsiusDescription) == 0x0300);
static_assert(offsetof(FMetabolismAPBFontStyle, Font) == 0x0000);
static_assert(offsetof(FMetabolismAPBFontStyle, TitlePadding) == 0x000C);
static_assert(offsetof(FMetabolismAPBFontStyle, ValuePadding) == 0x001C);
static_assert(offsetof(FMetabolismAPBFontStyle, TitleVerticalAlignment) == 0x002C);
static_assert(offsetof(FMetabolismAPBFontStyle, TitleHorizontalAlignment) == 0x002D);
static_assert(offsetof(FMetabolismAPBFontStyle, TitleSize) == 0x0030);
static_assert(offsetof(FMetabolismAPBFontStyle, ValueVerticalAlignment) == 0x0038);
static_assert(offsetof(FMetabolismAPBFontStyle, ValueHorizontalAlignment) == 0x0039);
static_assert(offsetof(FMetabolismAPBFontStyle, ValueSize) == 0x003C);
static_assert(offsetof(UMetabolismAdvancedProgressBar, Title) == 0x0268);
static_assert(offsetof(UMetabolismAdvancedProgressBar, _progressBarEffect) == 0x0280);
static_assert(offsetof(UMetabolismAdvancedProgressBar, _titleScrollingBox) == 0x0288);
static_assert(offsetof(UMetabolismAdvancedProgressBar, _titleText) == 0x0290);
static_assert(offsetof(UMetabolismAdvancedProgressBar, _valueText) == 0x0298);
static_assert(offsetof(UMetabolismAdvancedProgressBar, _apbSize) == 0x02A0);
static_assert(offsetof(UMetabolismAdvancedProgressBar, _progressBarBackground) == 0x02A8);
static_assert(offsetof(UMetabolismAdvancedProgressBar, _defaultValue) == 0x02B0);
static_assert(offsetof(UMetabolismAdvancedProgressBar, _fontStyle) == 0x02C8);
static_assert(offsetof(UMetabolismAdvancedProgressBar, _progressBarPadding) == 0x0310);
static_assert(offsetof(UMetabolismAdvancedProgressBar, _size) == 0x0320);
static_assert(offsetof(UMetabolismAdvancedProgressBar, _backgroundImageBrush) == 0x0328);
static_assert(offsetof(UMetabolismAdvancedProgressBar, _normalBackgroundColor) == 0x03B0);
static_assert(offsetof(UMetabolismAdvancedProgressBar, _normalForegroundColor) == 0x03C0);
static_assert(offsetof(UMetabolismAdvancedProgressBar, _normalTextColorEmpty) == 0x03D0);
static_assert(offsetof(UMetabolismAdvancedProgressBar, _normalTextColorFilled) == 0x03E0);
static_assert(offsetof(UMetabolismAdvancedProgressBar, _alertedBackgroundColor) == 0x03F0);
static_assert(offsetof(UMetabolismAdvancedProgressBar, _alertedForegroundColor) == 0x0400);
static_assert(offsetof(UMetabolismAdvancedProgressBar, _alertedTextColorEmpty) == 0x0410);
static_assert(offsetof(UMetabolismAdvancedProgressBar, _alertedTextColorFilled) == 0x0420);
static_assert(offsetof(UMetabolismAdvancedProgressBar, _badBackgroundColor) == 0x0430);
static_assert(offsetof(UMetabolismAdvancedProgressBar, _badForegroundColor) == 0x0440);
static_assert(offsetof(UMetabolismAdvancedProgressBar, _badTextColorEmpty) == 0x0450);
static_assert(offsetof(UMetabolismAdvancedProgressBar, _badTextColorFilled) == 0x0460);
static_assert(offsetof(UMetabolismAdvancedProgressBar, _goodBackgroundColor) == 0x0470);
static_assert(offsetof(UMetabolismAdvancedProgressBar, _goodForegroundColor) == 0x0480);
static_assert(offsetof(UMetabolismAdvancedProgressBar, _goodTextColorEmpty) == 0x0490);
static_assert(offsetof(UMetabolismAdvancedProgressBar, _goodTextColorFilled) == 0x04A0);
static_assert(offsetof(UMetabolismBasicInfoPanel, _stat_Age) == 0x0268);
static_assert(offsetof(UMetabolismBasicInfoPanel, _stat_Teeth) == 0x0270);
static_assert(offsetof(UMetabolismBasicInfoPanel, _stat_Lifetime) == 0x0278);
static_assert(offsetof(UMetabolismBasicInfoPanel, _stat_BloodType) == 0x0280);
static_assert(offsetof(UMetabolismBasicInfoPanel, _stat_Weight) == 0x0288);
static_assert(offsetof(UMetabolismBasicInfoPanel, _stat_BloodVolume) == 0x0290);
static_assert(offsetof(UMetabolismBasicInfoPanel, _stat_Health) == 0x0298);
static_assert(offsetof(UMetabolismBasicInfoPanel, _stat_Temperature) == 0x02A0);
static_assert(offsetof(UMetabolismBodyEffectProgressBar, _apb) == 0x02C0);
static_assert(offsetof(UMetabolismBodyEffectProgressBar, _lifeThreateningSymbol) == 0x02C8);
static_assert(offsetof(UMetabolismBodyEffectProgressBar, _infectedSymbol) == 0x02D0);
static_assert(offsetof(UMetabolismBodyEffectProgressBar, _circularProgressBar) == 0x02D8);
static_assert(offsetof(UMetabolismBodyEffectProgressBar, _interactionButton) == 0x02E0);
static_assert(offsetof(UMetabolismBodyEffectProgressBar, _circularProgressBarColorFront) == 0x02E8);
static_assert(offsetof(UMetabolismBodyEffectProgressBar, _circularProgressBarColorBack) == 0x02F8);
static_assert(offsetof(FMetabolismRadialProgressBarColorScheme, BackgroundColor) == 0x0000);
static_assert(offsetof(FMetabolismRadialProgressBarColorScheme, PrimaryBarColor) == 0x0010);
static_assert(offsetof(FMetabolismRadialProgressBarColorScheme, PrimaryBarGlowColor) == 0x0020);
static_assert(offsetof(FMetabolismRadialProgressBarColorScheme, SecondaryBarColor) == 0x0030);
static_assert(offsetof(FMetabolismRadialProgressBarColorScheme, SecondaryBarGlowColor) == 0x0040);
static_assert(offsetof(FMetabolismRadialProgressBarColorScheme, FontColor) == 0x0050);
static_assert(offsetof(FMetabolismRadialProgressBarColorScheme, FontInnerGlowColor) == 0x0060);
static_assert(offsetof(FMetabolismRadialProgressBarColorScheme, FontOuterGlowColor) == 0x0070);
static_assert(offsetof(UMetabolismBodyOverviewPanel, _symptomsScrollBox) == 0x0268);
static_assert(offsetof(UMetabolismBodyOverviewPanel, _humanBodyPanel) == 0x0270);
static_assert(offsetof(UMetabolismBodyOverviewPanel, _symptomsBreadcrumb) == 0x0278);
static_assert(offsetof(UMetabolismBodyOverviewPanel, _checkboxMuscles) == 0x0280);
static_assert(offsetof(UMetabolismBodyOverviewPanel, _checkboxBones) == 0x0288);
static_assert(offsetof(UMetabolismBodyOverviewPanel, _checkboxOrgans) == 0x0290);
static_assert(offsetof(UMetabolismBodyOverviewPanel, _rpb_Hitpoints) == 0x0298);
static_assert(offsetof(UMetabolismBodyOverviewPanel, _rpb_Blood) == 0x02A0);
static_assert(offsetof(UMetabolismBodyOverviewPanel, _treatmentMainOverlay) == 0x02A8);
static_assert(offsetof(UMetabolismBodyOverviewPanel, _clearSelectionButton) == 0x02B0);
static_assert(offsetof(UMetabolismBodyOverviewPanel, _selectedItemsOverlay) == 0x02B8);
static_assert(offsetof(UMetabolismBodyOverviewPanel, _itemSelectionReminderOverlay) == 0x02C0);
static_assert(offsetof(UMetabolismBodyOverviewPanel, _selectedItemsPanel) == 0x02C8);
static_assert(offsetof(UMetabolismBodyOverviewPanel, _activeConditionProgressBar) == 0x02D0);
static_assert(offsetof(UMetabolismBodyOverviewPanel, _treatButton) == 0x02D8);
static_assert(offsetof(UMetabolismBodyOverviewPanel, _treatTooltipText) == 0x02E0);
static_assert(offsetof(UMetabolismBodyOverviewPanel, _tooltipClass) == 0x02F8);
static_assert(offsetof(UMetabolismBodyOverviewPanel, _symptomWidgetClass) == 0x0300);
static_assert(offsetof(UMetabolismBodyOverviewPanel, _lowHPColorScheme) == 0x0308);
static_assert(offsetof(UMetabolismBodyOverviewPanel, _midHPColorScheme) == 0x0388);
static_assert(offsetof(UMetabolismBodyOverviewPanel, _highHPColorScheme) == 0x0408);
static_assert(offsetof(UMetabolismBodyOverviewPanel, _lowBloodOxygenationColorScheme) == 0x0488);
static_assert(offsetof(UMetabolismBodyOverviewPanel, _highBloodOxygenationColorScheme) == 0x0508);
static_assert(offsetof(UMetabolismBodyReservesPanel, _rpb_Muscle) == 0x0268);
static_assert(offsetof(UMetabolismBodyReservesPanel, _rpb_Fat) == 0x0270);
static_assert(offsetof(UMetabolismBodyStatsPanel, _tapb_NutrientAbsorption_Protein) == 0x0268);
static_assert(offsetof(UMetabolismBodyStatsPanel, _tapb_NutrientAbsorption_Carbs) == 0x0270);
static_assert(offsetof(UMetabolismBodyStatsPanel, _tapb_NutrientAbsorption_Fat) == 0x0278);
static_assert(offsetof(UMetabolismBodyStatsPanel, _tapb_NutrientAbsorption_Minerals) == 0x0280);
static_assert(offsetof(UMetabolismBodyStatsPanel, _tapb_NutrientAbsorption_Vitamins) == 0x0288);
static_assert(offsetof(UMetabolismBodyStatsPanel, _tapb_NutrientAbsorption_Water) == 0x0290);
static_assert(offsetof(UMetabolismBodyStatsPanel, _tapb_NutrientAbsorption_Alcohol) == 0x0298);
static_assert(offsetof(UMetabolismBodyStatsPanel, _tapb_BodyMassDistribution_Bones) == 0x02A0);
static_assert(offsetof(UMetabolismBodyStatsPanel, _tapb_BodyMassDistribution_Blood) == 0x02A8);
static_assert(offsetof(UMetabolismBodyStatsPanel, _tapb_BodyMassDistribution_Intestines) == 0x02B0);
static_assert(offsetof(UMetabolismBodyStatsPanel, _tapb_BodyMassDistribution_Skin) == 0x02B8);
static_assert(offsetof(UMetabolismBodyStatsPanel, _tapb_BodyMassDistribution_Organs) == 0x02C0);
static_assert(offsetof(UMetabolismBodyStatsPanel, _tapb_BodyMassDistribution_Fat) == 0x02C8);
static_assert(offsetof(UMetabolismBodyStatsPanel, _tapb_BodyMassDistribution_Muscle) == 0x02D0);
static_assert(offsetof(UMetabolismCurrentStatDark, Title) == 0x0268);
static_assert(offsetof(UMetabolismCurrentStatDark, _titleBackground) == 0x0280);
static_assert(offsetof(UMetabolismCurrentStatDark, _title) == 0x0288);
static_assert(offsetof(UMetabolismCurrentStatDark, _valueBackground) == 0x0290);
static_assert(offsetof(UMetabolismCurrentStatDark, _value) == 0x0298);
static_assert(offsetof(UMetabolismCurrentStatDark, _titleBackgroundColor) == 0x02A0);
static_assert(offsetof(UMetabolismCurrentStatDark, _titleForegroundColor) == 0x02B0);
static_assert(offsetof(UMetabolismCurrentStatDark, _valueBackgroundColor) == 0x02C0);
static_assert(offsetof(UMetabolismCurrentStatDark, _valueForegroundColor) == 0x02D0);
static_assert(offsetof(UMetabolismCurrentStatLight, Title) == 0x0268);
static_assert(offsetof(UMetabolismCurrentStatLight, _valueBackground) == 0x0280);
static_assert(offsetof(UMetabolismCurrentStatLight, _title) == 0x0288);
static_assert(offsetof(UMetabolismCurrentStatLight, _value) == 0x0290);
static_assert(offsetof(UMetabolismCurrentStatLight, _normalBackgroundColor) == 0x0298);
static_assert(offsetof(UMetabolismCurrentStatLight, _alertedBackgroundColor) == 0x02A8);
static_assert(offsetof(UMetabolismDigestionPanel, FoodWidgetClass) == 0x0268);
static_assert(offsetof(UMetabolismDigestionPanel, _rpb_Stomach) == 0x0270);
static_assert(offsetof(UMetabolismDigestionPanel, _rpb_Intestine) == 0x0278);
static_assert(offsetof(UMetabolismDigestionPanel, _rpb_Colon) == 0x0280);
static_assert(offsetof(UMetabolismDigestionPanel, _rpb_Bladder) == 0x0288);
static_assert(offsetof(UMetabolismDigestionPanel, _foods) == 0x0290);
static_assert(offsetof(UMetabolismHealthPanel, _icuMonitor) == 0x0268);
static_assert(offsetof(UMetabolismHealthPanel, _bodyOverviewPanel) == 0x0270);
static_assert(offsetof(UMetabolismHealthPanel, _treatmentPanel) == 0x0278);
static_assert(offsetof(UMetabolismHealthPanel, _resetHealthPanelToSelf) == 0x0280);
static_assert(offsetof(UMetabolismHealthPanel, _healthPanelNormal) == 0x0288);
static_assert(offsetof(UMetabolismHealthPanel, _healthPanelOutOfRange) == 0x0290);
static_assert(offsetof(UMetabolismHealthPanel, _healthPanelSwitcher) == 0x0298);
static_assert(offsetof(UMetabolismHealthPanel, _patientName) == 0x02A0);
static_assert(offsetof(UMetabolismHealthPanel, _tooltipClass) == 0x02A8);
static_assert(offsetof(UMetabolismHumanBodyPanel, ColdBodyColor) == 0x0268);
static_assert(offsetof(UMetabolismHumanBodyPanel, HotBodyColor) == 0x0278);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_BodyGlow_Male) == 0x0290);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_BodyScan_Male) == 0x0298);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_BodyGlow_Female) == 0x02A0);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_BodyScan_Female) == 0x02A8);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Head_Male) == 0x02B0);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Ear_Left_Male) == 0x02B8);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Ear_Right_Male) == 0x02C0);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Neck_Male) == 0x02C8);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Trapezius_Male) == 0x02D0);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Shoulder_Left_Male) == 0x02D8);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Shoulder_Right_Male) == 0x02E0);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Chest_Male) == 0x02E8);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Arm_Left_Male) == 0x02F0);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Arm_Right_Male) == 0x02F8);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Forearm_Left_Male) == 0x0300);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Forearm_Right_Male) == 0x0308);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Hand_Left_Male) == 0x0310);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Hand_Right_Male) == 0x0318);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Umbilicus_Male) == 0x0320);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Abdomen_Male) == 0x0328);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Thigh_Left_Male) == 0x0330);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Thigh_Right_Male) == 0x0338);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Kneecap_Left_Male) == 0x0340);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Kneecap_Right_Male) == 0x0348);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Leg_Left_Male) == 0x0350);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Leg_Right_Male) == 0x0358);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Foot_Left_Male) == 0x0360);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Foot_Right_Male) == 0x0368);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Footbones_Left_Male) == 0x0370);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Footbones_Right_Male) == 0x0378);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Legbones_Left_Male) == 0x0380);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Legbones_Right_Male) == 0x0388);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Thighbone_Left_Male) == 0x0390);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Thighbone_Right_Male) == 0x0398);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Pelvis_Male) == 0x03A0);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Spine_Male) == 0x03A8);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Handbones_Left_Male) == 0x03B0);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Handbones_Right_Male) == 0x03B8);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Forearmbones_Left_Male) == 0x03C0);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Forearmbones_Right_Male) == 0x03C8);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Armbone_Left_Male) == 0x03D0);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Armbone_Right_Male) == 0x03D8);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Scapula_Left_Male) == 0x03E0);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Scapula_Right_Male) == 0x03E8);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Ribcage_Male) == 0x03F0);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Skull_Male) == 0x03F8);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Head_Female) == 0x0400);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Ear_Left_Female) == 0x0408);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Ear_Right_Female) == 0x0410);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Neck_Female) == 0x0418);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Trapezius_Female) == 0x0420);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Shoulder_Left_Female) == 0x0428);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Shoulder_Right_Female) == 0x0430);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Chest_Female) == 0x0438);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Arm_Left_Female) == 0x0440);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Arm_Right_Female) == 0x0448);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Forearm_Left_Female) == 0x0450);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Forearm_Right_Female) == 0x0458);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Hand_Left_Female) == 0x0460);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Hand_Right_Female) == 0x0468);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Umbilicus_Female) == 0x0470);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Abdomen_Female) == 0x0478);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Thigh_Left_Female) == 0x0480);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Thigh_Right_Female) == 0x0488);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Kneecap_Left_Female) == 0x0490);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Kneecap_Right_Female) == 0x0498);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Leg_Left_Female) == 0x04A0);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Leg_Right_Female) == 0x04A8);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Foot_Left_Female) == 0x04B0);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Foot_Right_Female) == 0x04B8);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Footbones_Left_Female) == 0x04C0);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Footbones_Right_Female) == 0x04C8);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Legbones_Left_Female) == 0x04D0);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Legbones_Right_Female) == 0x04D8);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Thighbone_Left_Female) == 0x04E0);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Thighbone_Right_Female) == 0x04E8);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Pelvis_Female) == 0x04F0);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Spine_Female) == 0x04F8);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Handbones_Left_Female) == 0x0500);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Handbones_Right_Female) == 0x0508);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Forearmbones_Left_Female) == 0x0510);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Forearmbones_Right_Female) == 0x0518);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Armbone_Left_Female) == 0x0520);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Armbone_Right_Female) == 0x0528);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Scapula_Left_Female) == 0x0530);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Scapula_Right_Female) == 0x0538);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Ribcage_Female) == 0x0540);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Skull_Female) == 0x0548);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_SpinalCord) == 0x0550);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Lungs) == 0x0558);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_RespiratorySystem) == 0x0560);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_CirculatorySystem) == 0x0568);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Colon) == 0x0570);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Intestine) == 0x0578);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Bladder) == 0x0580);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Liver) == 0x0588);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Kidneys) == 0x0590);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_AdrenalGlands) == 0x0598);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Gallbladder) == 0x05A0);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Pancreas) == 0x05A8);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Stomach) == 0x05B0);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Heart) == 0x05B8);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Spleen) == 0x05C0);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Brain) == 0x05C8);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Reproductive_Male) == 0x05D0);
static_assert(offsetof(UMetabolismHumanBodyPanel, _img_Reproductive_Female) == 0x05D8);
static_assert(offsetof(UMetabolismHumanBodyPanel, _btn_EntireBody) == 0x05E0);
static_assert(offsetof(UMetabolismHumanBodyPanel, _btn_HeadRegion) == 0x05E8);
static_assert(offsetof(UMetabolismHumanBodyPanel, _btn_RightLegRegion) == 0x05F0);
static_assert(offsetof(UMetabolismHumanBodyPanel, _btn_LeftLegRegion) == 0x05F8);
static_assert(offsetof(UMetabolismHumanBodyPanel, _btn_TorsoRegion) == 0x0600);
static_assert(offsetof(UMetabolismHumanBodyPanel, _btn_RightArmRegion) == 0x0608);
static_assert(offsetof(UMetabolismHumanBodyPanel, _btn_LeftArmRegion) == 0x0610);
static_assert(offsetof(UMetabolismHumanBodyPanel, _mainOverlay) == 0x0618);
static_assert(offsetof(UMetabolismHumanBodyPanel, _maleOverlay) == 0x0620);
static_assert(offsetof(UMetabolismHumanBodyPanel, _femaleOverlay) == 0x0628);
static_assert(offsetof(UMetabolismHumanBodyPanel, _bothOverlay) == 0x0630);
static_assert(offsetof(UMetabolismHumanBodyPanel, _focusBodyRegion_Head) == 0x0638);
static_assert(offsetof(UMetabolismHumanBodyPanel, _focusBodyRegion_Torso) == 0x0640);
static_assert(offsetof(UMetabolismHumanBodyPanel, _focusBodyRegion_LeftArm) == 0x0648);
static_assert(offsetof(UMetabolismHumanBodyPanel, _focusBodyRegion_RightArm) == 0x0650);
static_assert(offsetof(UMetabolismHumanBodyPanel, _focusBodyRegion_LeftLeg) == 0x0658);
static_assert(offsetof(UMetabolismHumanBodyPanel, _focusBodyRegion_RightLeg) == 0x0660);
static_assert(offsetof(UMetabolismHumanBodyPanel, _vignette) == 0x0668);
static_assert(offsetof(UMetabolismLightItemDisplayPanel, _itemDisplayContainer) == 0x0280);
static_assert(offsetof(UMetabolismLightItemDisplayPanel, _itemDisplayClass) == 0x0288);
static_assert(offsetof(UMetabolismMacronutrientReserve, Title) == 0x0268);
static_assert(offsetof(UMetabolismMacronutrientReserve, _title) == 0x0280);
static_assert(offsetof(UMetabolismMacronutrientReserve, _value) == 0x0288);
static_assert(offsetof(UMetabolismMacronutrientReserve, _spb_ReservesBar) == 0x0290);
static_assert(offsetof(UMetabolismMacronutrientReservesPanel, _reserve_Protein) == 0x0268);
static_assert(offsetof(UMetabolismMacronutrientReservesPanel, _reserve_Carbs) == 0x0270);
static_assert(offsetof(UMetabolismMacronutrientReservesPanel, _reserve_Fat) == 0x0278);
static_assert(offsetof(UMetabolismMacronutrientReservesPanel, _reserve_Fiber) == 0x0280);
static_assert(offsetof(UMetabolismMacronutrientReservesPanel, _reserve_Sugar) == 0x0288);
static_assert(offsetof(UMetabolismMacronutrientReservesPanel, _reserve_SaturatedFat) == 0x0290);
static_assert(offsetof(UMetabolismMacronutrientReservesPanel, _reserve_Alcohol) == 0x0298);
static_assert(offsetof(UMetabolismMineralsPanel, _mineral_Ca) == 0x0268);
static_assert(offsetof(UMetabolismMineralsPanel, _mineral_Fe) == 0x0270);
static_assert(offsetof(UMetabolismMineralsPanel, _mineral_Mg) == 0x0278);
static_assert(offsetof(UMetabolismMineralsPanel, _mineral_P) == 0x0280);
static_assert(offsetof(UMetabolismMineralsPanel, _mineral_K) == 0x0288);
static_assert(offsetof(UMetabolismMineralsPanel, _mineral_Zn) == 0x0290);
static_assert(offsetof(UMetabolismMineralsPanel, _mineral_Cu) == 0x0298);
static_assert(offsetof(UMetabolismMineralsPanel, _mineral_Mn) == 0x02A0);
static_assert(offsetof(UMetabolismMineralsPanel, _mineral_Se) == 0x02A8);
static_assert(offsetof(UMetabolismMineralsPanel, _mineral_Na) == 0x02B0);
static_assert(offsetof(UMetabolismNutritionPanel, _rpb_Calories) == 0x0268);
static_assert(offsetof(UMetabolismNutritionPanel, _rpb_Water) == 0x0270);
static_assert(offsetof(UMetabolismPerformanceDataPanel, _apb_Stamina) == 0x0268);
static_assert(offsetof(UMetabolismPerformanceDataPanel, _apb_WeightLoad) == 0x0270);
static_assert(offsetof(UMetabolismPerformanceDataPanel, _apb_WalkSpeed) == 0x0278);
static_assert(offsetof(UMetabolismPerformanceDataPanel, _apb_JogSpeed) == 0x0280);
static_assert(offsetof(UMetabolismPerformanceDataPanel, _apb_RunSpeed) == 0x0288);
static_assert(offsetof(UMetabolismPerformanceDataPanel, _apb_HealingSpeed) == 0x0290);
static_assert(offsetof(UMetabolismPerformanceDataPanel, _apb_BloodRecoveryRate) == 0x0298);
static_assert(offsetof(UMetabolismPerformanceDataPanel, _apb_ImmuneSystem) == 0x02A0);
static_assert(offsetof(UMetabolismPerformanceDataPanel, _apb_PerformanceScore) == 0x02A8);
static_assert(offsetof(UMetabolismPerformanceDataPanel, _apb_StealthFactor) == 0x02B0);
static_assert(offsetof(UMetabolismPerformanceDataPanel, _apb_MeleeDamage) == 0x02B8);
static_assert(offsetof(UMetabolismPerformanceDataPanel, _csd_ConsumptionRecoveryResting) == 0x02C0);
static_assert(offsetof(UMetabolismPerformanceDataPanel, _csd_ConsumptionRecoveryIdle) == 0x02C8);
static_assert(offsetof(UMetabolismPerformanceDataPanel, _csd_ConsumptionRecoveryEasy) == 0x02D0);
static_assert(offsetof(UMetabolismPerformanceDataPanel, _csd_ConsumptionRecoveryDemanding) == 0x02D8);
static_assert(offsetof(UMetabolismPerformanceDataPanel, _csd_ConsumptionRecoveryVeryDemanding) == 0x02E0);
static_assert(offsetof(UMetabolismPerformanceDataPanel, _csd_ConsumptionRecoveryExtremelyDemanding) == 0x02E8);
static_assert(offsetof(UMetabolismPerformanceDataPanel, _csd_OverloadPenaltyEnergy) == 0x02F0);
static_assert(offsetof(UMetabolismPerformanceDataPanel, _csd_OverloadPenaltyWater) == 0x02F8);
static_assert(offsetof(FMetabolismRadialAttributeProgressBarColor, PositiveColor) == 0x0000);
static_assert(offsetof(FMetabolismRadialAttributeProgressBarColor, NeutralColor) == 0x0010);
static_assert(offsetof(FMetabolismRadialAttributeProgressBarColor, NegativeColor) == 0x0020);
static_assert(offsetof(UMetabolismRadialAttributeProgressBar, BackgroundColor) == 0x0268);
static_assert(offsetof(UMetabolismRadialAttributeProgressBar, BarColor) == 0x0298);
static_assert(offsetof(UMetabolismRadialAttributeProgressBar, BarGlowColor) == 0x02C8);
static_assert(offsetof(UMetabolismRadialAttributeProgressBar, InnerGlowColor) == 0x02F8);
static_assert(offsetof(UMetabolismRadialAttributeProgressBar, OuterGlowColor) == 0x0328);
static_assert(offsetof(UMetabolismRadialAttributeProgressBar, FontColor) == 0x0358);
static_assert(offsetof(UMetabolismRadialAttributeProgressBar, PreviewState) == 0x0388);
static_assert(offsetof(UMetabolismRadialAttributeProgressBar, _coloredBackground) == 0x0390);
static_assert(offsetof(UMetabolismRadialAttributeProgressBar, _radialProgressBar) == 0x0398);
static_assert(offsetof(UMetabolismRadialAttributeProgressBar, _fontEffectPass1) == 0x03A0);
static_assert(offsetof(UMetabolismRadialAttributeProgressBar, _fontEffectPass2) == 0x03A8);
static_assert(offsetof(UMetabolismRadialAttributeProgressBar, _attributeValueTextBlock) == 0x03B0);
static_assert(offsetof(FMetabolismRadialProgressBarFontSettings, FontPadding) == 0x0004);
static_assert(offsetof(UMetabolismRadialProgressBar, _scaleBox) == 0x0288);
static_assert(offsetof(UMetabolismRadialProgressBar, _coloredBackground) == 0x0290);
static_assert(offsetof(UMetabolismRadialProgressBar, _radialProgressBar) == 0x0298);
static_assert(offsetof(UMetabolismRadialProgressBar, _fontEffectPass1) == 0x02A0);
static_assert(offsetof(UMetabolismRadialProgressBar, _fontEffectPass2) == 0x02A8);
static_assert(offsetof(UMetabolismRadialProgressBar, _percentage) == 0x02B0);
static_assert(offsetof(UMetabolismRadialProgressBar, _value) == 0x02B8);
static_assert(offsetof(UMetabolismRadialProgressBar, _title) == 0x02C0);
static_assert(offsetof(UMetabolismRadialProgressBar, _defaultColorScheme) == 0x02C8);
static_assert(offsetof(UMetabolismRadialProgressBar, _alertedColorScheme) == 0x0348);
static_assert(offsetof(UMetabolismRadialProgressBar, _percentageFontSettings) == 0x03C8);
static_assert(offsetof(UMetabolismRightPanel, _nutritionPanel) == 0x0268);
static_assert(offsetof(UMetabolismRightPanel, _macronutrientReservesPanel) == 0x0270);
static_assert(offsetof(UMetabolismRightPanel, _bodyReservesPanel) == 0x0278);
static_assert(offsetof(UMetabolismRightPanel, _vitaminsPanel) == 0x0280);
static_assert(offsetof(UMetabolismRightPanel, _mineralsPanel) == 0x0288);
static_assert(offsetof(UMetabolismRightPanel, _digestionPanel) == 0x0290);
static_assert(offsetof(FConsumableSave, Name) == 0x0000);
static_assert(offsetof(FConsumableSave, MergeGroup) == 0x0010);
static_assert(offsetof(FConsumableSave, Substances) == 0x0030);
static_assert(offsetof(FConsumableSave, ForeignSubstanceClasses) == 0x0100);
static_assert(offsetof(FConsumableSave, UserData) == 0x0110);
static_assert(offsetof(FConsumableDigestionHandlerSave, Data) == 0x0000);
static_assert(offsetof(FDigestionItemSave, Consumable) == 0x0000);
static_assert(offsetof(FDigestionItemSave, SubstancesInStomach) == 0x0130);
static_assert(offsetof(FDigestionItemSave, SubstancesInIntestine) == 0x0200);
static_assert(offsetof(FDigestionItemSave, DigestionHandlers) == 0x02D0);
static_assert(offsetof(FForeignSubstanceSave, Data) == 0x0000);
static_assert(offsetof(UMetabolismSave, DigestionItems) == 0x0030);
static_assert(offsetof(UMetabolismSave, ForeignSubstances) == 0x0040);
static_assert(offsetof(UMetabolismSave, AbsorbedSubstances) == 0x0050);
static_assert(offsetof(UMetabolismSave, FecesVolumeInIntestine) == 0x0120);
static_assert(offsetof(UMetabolismSave, FecesVolumeInColon) == 0x01F0);
static_assert(offsetof(FMetabolismSPBColorScheme, BaseColor) == 0x0000);
static_assert(offsetof(FMetabolismSPBColorScheme, FillColorBottom) == 0x0010);
static_assert(offsetof(FMetabolismSPBColorScheme, FillColorTop) == 0x0020);
static_assert(offsetof(FMetabolismSPBColorScheme, OutlineColorBottom) == 0x0030);
static_assert(offsetof(FMetabolismSPBColorScheme, OutlineColorTop) == 0x0040);
static_assert(offsetof(UMetabolismSegmentedProgressBar, ColorSchemes) == 0x0268);
static_assert(offsetof(UMetabolismSegmentedProgressBar, BrushOverride) == 0x0278);
static_assert(offsetof(UMetabolismSegmentedProgressBar, _progressBarImage) == 0x0300);
static_assert(offsetof(UMetabolismSkillProgressBar, SkillRankIcons) == 0x0290);
static_assert(offsetof(UMetabolismSkillProgressBar, SkillTitle) == 0x02A0);
static_assert(offsetof(UMetabolismSkillProgressBar, _skillRankIcon) == 0x02C8);
static_assert(offsetof(UMetabolismSkillProgressBar, _apb_SkillProgress) == 0x02D0);
static_assert(offsetof(UMetabolismSkillProgressBar, _skillClass) == 0x02D8);
static_assert(offsetof(UMetabolismSkillProgressionPanel, SkillProgressBarWidgetClass) == 0x0268);
static_assert(offsetof(UMetabolismSkillProgressionPanel, _tabRow) == 0x0270);
static_assert(offsetof(UMetabolismSkillProgressionPanel, _tabButtonClass) == 0x0278);
static_assert(offsetof(UMetabolismSkillProgressionPanel, _attributeSwitcher) == 0x0280);
static_assert(offsetof(UMetabolismSkillProgressionPanel, _STR_tab) == 0x0288);
static_assert(offsetof(UMetabolismSkillProgressionPanel, _CON_tab) == 0x0290);
static_assert(offsetof(UMetabolismSkillProgressionPanel, _DEX_tab) == 0x0298);
static_assert(offsetof(UMetabolismSkillProgressionPanel, _INT_tab) == 0x02A0);
static_assert(offsetof(UMetabolismSkillProgressionTab, SkillProgressBarWidgetClass) == 0x0268);
static_assert(offsetof(UMetabolismSkillProgressionTab, _skillsWrapBox) == 0x0270);
static_assert(offsetof(UMetabolismSkillProgressionTab, _skillType) == 0x0280);
static_assert(offsetof(UMetabolismSkillProgressionTab, _skillAttributeName) == 0x0288);
static_assert(offsetof(UMetabolismStatsPanel, _str_progressWidget) == 0x0268);
static_assert(offsetof(UMetabolismStatsPanel, _con_progressWidget) == 0x0270);
static_assert(offsetof(UMetabolismStatsPanel, _dex_progressWidget) == 0x0278);
static_assert(offsetof(UMetabolismStatsPanel, _int_progressWidget) == 0x0280);
static_assert(offsetof(UMetabolismStatsPanel, _skillProgressionPanel) == 0x0288);
static_assert(offsetof(UMetabolismStatsPanel, _basicInfoPanel) == 0x0290);
static_assert(offsetof(UMetabolismStatsPanel, _performanceDataPanel) == 0x0298);
static_assert(offsetof(UMetabolismStatsPanel, _bodyStatsPanel) == 0x02A0);
static_assert(offsetof(UMetabolismSymptomTitle, _title) == 0x0278);
static_assert(offsetof(UMetabolismTissueGroupCheckbox, Title) == 0x0268);
static_assert(offsetof(UMetabolismTissueGroupCheckbox, _title) == 0x0288);
static_assert(offsetof(UMetabolismTissueGroupCheckbox, _checkBox) == 0x0290);
static_assert(offsetof(UMetabolismTitleAndAPB, Title) == 0x0268);
static_assert(offsetof(UMetabolismTitleAndAPB, _titleText) == 0x0280);
static_assert(offsetof(UMetabolismTitleAndAPB, _background) == 0x0288);
static_assert(offsetof(UMetabolismTitleAndAPB, _apb_ValueAndProgress) == 0x0290);
static_assert(offsetof(UMetabolismTitleAndAPB, _backgroundColor) == 0x0298);
static_assert(offsetof(UMetabolismTitleAndAPB, _titleTextColor) == 0x02A8);
static_assert(offsetof(UMetabolismTreatmentPanel, _untreatedColumn) == 0x0268);
static_assert(offsetof(UMetabolismTreatmentPanel, _stabilizationColumn) == 0x0270);
static_assert(offsetof(UMetabolismTreatmentPanel, _recoveryColumn) == 0x0278);
static_assert(offsetof(UMetabolismTreatmentPanel, _untreatedBackground) == 0x0280);
static_assert(offsetof(UMetabolismTreatmentPanel, _stabilizationBackground) == 0x0288);
static_assert(offsetof(UMetabolismTreatmentPanel, _recoveryBackground) == 0x0290);
static_assert(offsetof(UMetabolismTreatmentPanel, _progressBarClass) == 0x0298);
static_assert(offsetof(UMetabolismTreatmentPanel, _tooltipClass) == 0x02A0);
static_assert(offsetof(UMetabolismVitaminAndMineralReserve, Title) == 0x0268);
static_assert(offsetof(UMetabolismVitaminAndMineralReserve, _title) == 0x0280);
static_assert(offsetof(UMetabolismVitaminAndMineralReserve, _value) == 0x0288);
static_assert(offsetof(UMetabolismVitaminAndMineralReserve, _spb_ReservesBar) == 0x0290);
static_assert(offsetof(UMetabolismVitaminsPanel, _vitamin_A) == 0x0268);
static_assert(offsetof(UMetabolismVitaminsPanel, _vitamin_B1) == 0x0270);
static_assert(offsetof(UMetabolismVitaminsPanel, _vitamin_B2) == 0x0278);
static_assert(offsetof(UMetabolismVitaminsPanel, _vitamin_B3) == 0x0280);
static_assert(offsetof(UMetabolismVitaminsPanel, _vitamin_B4) == 0x0288);
static_assert(offsetof(UMetabolismVitaminsPanel, _vitamin_B5) == 0x0290);
static_assert(offsetof(UMetabolismVitaminsPanel, _vitamin_B6) == 0x0298);
static_assert(offsetof(UMetabolismVitaminsPanel, _vitamin_B9) == 0x02A0);
static_assert(offsetof(UMetabolismVitaminsPanel, _vitamin_B12) == 0x02A8);
static_assert(offsetof(UMetabolismVitaminsPanel, _vitamin_C) == 0x02B0);
static_assert(offsetof(UMetabolismVitaminsPanel, _vitamin_D) == 0x02B8);
static_assert(offsetof(UMetabolismVitaminsPanel, _vitamin_E) == 0x02C0);
static_assert(offsetof(UMetabolismVitaminsPanel, _vitamin_K) == 0x02C8);
static_assert(offsetof(AMetalDetector, _resourceSlotComponent) == 0x09A8);
static_assert(offsetof(AMetalDetector, _startEvent) == 0x09C0);
static_assert(offsetof(AMetalDetector, _stopEvent) == 0x09C8);
static_assert(offsetof(AMetalDetector, _RTPCName) == 0x09D0);
static_assert(offsetof(AMetalDetector, _detectionSourceSocketName) == 0x09E8);
static_assert(offsetof(UMicInputIndicator, RingsOverlay) == 0x0268);
static_assert(offsetof(FZombieMeshVariation2, DressedMesh) == 0x0000);
static_assert(offsetof(FZombieMeshVariation2, StrippedMesh) == 0x0008);
static_assert(offsetof(FZombieRelaxedStanceAnimations, WalkLoopAnimation) == 0x0000);
static_assert(offsetof(FZombieRelaxedStanceVariation2, Animations) == 0x0000);
static_assert(offsetof(FZombieCombatStanceAnimations, RunStartAnimation) == 0x0000);
static_assert(offsetof(FZombieCombatStanceAnimations, RunLoopAnimation) == 0x0008);
static_assert(offsetof(FZombieCombatStanceAnimations, RunStopAnimation) == 0x0010);
static_assert(offsetof(FZombieCombatStanceVariation2, Animations) == 0x0000);
static_assert(offsetof(FZombieTurnMontageDescription, MontageL90) == 0x0000);
static_assert(offsetof(FZombieTurnMontageDescription, MontageL180) == 0x0008);
static_assert(offsetof(FZombieTurnMontageDescription, MontageR90) == 0x0010);
static_assert(offsetof(FZombieTurnMontageDescription, MontageR180) == 0x0018);
static_assert(offsetof(FZombieTurnMontageDescription, TurnAngleCurveName) == 0x0020);
static_assert(offsetof(FZombieAttackDescription, Montage) == 0x0000);
static_assert(offsetof(FZombieAttackDescription, PitchRange) == 0x0008);
static_assert(offsetof(FZombieSleepingAnimationData, SleepingLoopAnimation) == 0x0000);
static_assert(offsetof(FZombieSleepingAnimationData, GettingUpAnimation) == 0x0008);
static_assert(offsetof(FWindowClimbingAnimationInfo, AnchorOffset) == 0x0000);
static_assert(offsetof(FWindowClimbingAnimationInfo, AnchoringAnimation) == 0x0010);
static_assert(offsetof(FWindowClimbingAnimationInfo, ClimbingMontage) == 0x0020);
static_assert(offsetof(AZombie2, _navigationInvokerComponent) == 0x0838);
static_assert(offsetof(AZombie2, _hitReactComponent) == 0x0840);
static_assert(offsetof(AZombie2, _baseInteractionComponent) == 0x0848);
static_assert(offsetof(AZombie2, _trapOverlapDetection) == 0x0850);
static_assert(offsetof(AZombie2, _meshVariations) == 0x0858);
static_assert(offsetof(AZombie2, _relaxedStanceVariations) == 0x0868);
static_assert(offsetof(AZombie2, _combatStanceVariations) == 0x0878);
static_assert(offsetof(AZombie2, _turnMontageDescriptions) == 0x0888);
static_assert(offsetof(AZombie2, _intimidateMontages) == 0x0928);
static_assert(offsetof(AZombie2, _agitatedScreamMontages) == 0x0938);
static_assert(offsetof(AZombie2, _attacks) == 0x0948);
static_assert(offsetof(AZombie2, _hitReactType) == 0x0958);
static_assert(offsetof(AZombie2, _centralBone) == 0x097C);
static_assert(offsetof(AZombie2, _landingEffects) == 0x09E0);
static_assert(offsetof(AZombie2, _deathParticles) == 0x09F0);
static_assert(offsetof(AZombie2, _deathParticlesRelativeTransform) == 0x0A00);
static_assert(offsetof(AZombie2, _stance) == 0x0A56);
static_assert(offsetof(AZombie2, _foe) == 0x0A58);
static_assert(offsetof(AZombie2, _fatalBodyPartHit) == 0x0ADC);
static_assert(offsetof(AZombie2, _sleepingAnimationsData) == 0x0AF0);
static_assert(offsetof(AZombie2, _windowClimbingAnimations) == 0x0B00);
static_assert(offsetof(AZombie2, _doorDestructionAnimations) == 0x0B18);
static_assert(offsetof(AZombie2, _doorDestructionNotifyName) == 0x0B2C);
static_assert(offsetof(UZoomMinigameAnimator, _zoomStartOffset) == 0x0034);
static_assert(offsetof(UZoomMinigameAnimator, _zoomEndOffset) == 0x0040);
static_assert(offsetof(UZoomMinigameAnimator, _zoomCurve) == 0x0050);
static_assert(offsetof(UFadeMinigameAnimator, _fadeCurve) == 0x0028);
static_assert(offsetof(AMobilePhone, _resourceSlotComponent) == 0x09D0);
static_assert(offsetof(AMobilePhone, _startEvent) == 0x09D8);
static_assert(offsetof(AMobilePhone, _stopEvent) == 0x09E0);
static_assert(offsetof(UMobilePhoneAvailableQuestsPanel, _availableQuestsContainer) == 0x0278);
static_assert(offsetof(UMobilePhoneAvailableQuestsPanel, _questEntryWidgetClass) == 0x0280);
static_assert(offsetof(UMobilePhoneItemComponent, _minigameClass) == 0x00C8);
static_assert(offsetof(UMobilePhoneMainPanel, _virtualMouseCursorWidget) == 0x0278);
static_assert(offsetof(UMobilePhoneMainPanel, _panelSwitcher) == 0x0298);
static_assert(offsetof(UMobilePhoneMainPanel, _availableQuestsPanel) == 0x02A0);
static_assert(offsetof(UMobilePhoneMainPanel, _questDetailsPanel) == 0x02A8);
static_assert(offsetof(UMobilePhoneMainPanel, _signalStrengthWidgetSwitcher) == 0x02B0);
static_assert(offsetof(UMobilePhoneMainPanel, _batteryPercentageText) == 0x02B8);
static_assert(offsetof(UMobilePhoneMainPanel, _batteryProgressBar) == 0x02C0);
static_assert(offsetof(AMobilePhoneMinigame, _uiController) == 0x0340);
static_assert(offsetof(AMobilePhoneMinigame, _mobilePhoneMeshComponent) == 0x0348);
static_assert(offsetof(AMobilePhoneMinigame, _mobilePhoneWidgetComponent) == 0x0350);
static_assert(offsetof(AMobilePhoneMinigame, _zoomStartLocation) == 0x0358);
static_assert(offsetof(AMobilePhoneMinigame, _zoomEndLocation) == 0x0364);
static_assert(offsetof(AMobilePhoneMinigame, _zoomCurve) == 0x0370);
static_assert(offsetof(AMobilePhoneMinigame, _mobilePhoneMesh) == 0x0388);
static_assert(offsetof(UMobilePhoneQuestDetailsWidget, _questTraderTitle) == 0x0278);
static_assert(offsetof(UMobilePhoneQuestDetailsWidget, _questTier) == 0x0280);
static_assert(offsetof(UMobilePhoneQuestDetailsWidget, _questTitle) == 0x0288);
static_assert(offsetof(UMobilePhoneQuestDetailsWidget, _questDescription) == 0x0290);
static_assert(offsetof(UMobilePhoneQuestDetailsWidget, _questTrader) == 0x0298);
static_assert(offsetof(UMobilePhoneQuestDetailsWidget, _questRequirementsContainer) == 0x02A0);
static_assert(offsetof(UMobilePhoneQuestDetailsWidget, _questTimeLimit) == 0x02A8);
static_assert(offsetof(UMobilePhoneQuestDetailsWidget, _questRewardTitle) == 0x02B0);
static_assert(offsetof(UMobilePhoneQuestDetailsWidget, _questRewardsContainer) == 0x02B8);
static_assert(offsetof(UMobilePhoneQuestDetailsWidget, _playerResponseOverlay) == 0x02C0);
static_assert(offsetof(UMobilePhoneQuestDetailsWidget, _mainMessageOverlay) == 0x02C8);
static_assert(offsetof(UMobilePhoneQuestDetailsWidget, _playerResponseText) == 0x02D0);
static_assert(offsetof(UMobilePhoneQuestDetailsWidget, _traderResponseOverlay) == 0x02D8);
static_assert(offsetof(UMobilePhoneQuestDetailsWidget, _traderResponseText) == 0x02E0);
static_assert(offsetof(UMobilePhoneQuestDetailsWidget, _traderIconRetainer1) == 0x02E8);
static_assert(offsetof(UMobilePhoneQuestDetailsWidget, _traderIcon1) == 0x02F0);
static_assert(offsetof(UMobilePhoneQuestDetailsWidget, _traderIconRetainer2) == 0x02F8);
static_assert(offsetof(UMobilePhoneQuestDetailsWidget, _traderIcon2) == 0x0300);
static_assert(offsetof(UMobilePhoneQuestDetailsWidget, _questAcceptedOverlay) == 0x0308);
static_assert(offsetof(UMobilePhoneQuestDetailsWidget, _playerInitials) == 0x0310);
static_assert(offsetof(UMobilePhoneQuestDetailsWidget, _playerRetainerBox) == 0x0318);
static_assert(offsetof(UMobilePhoneQuestDetailsWidget, _buttonBack) == 0x0320);
static_assert(offsetof(UMobilePhoneQuestDetailsWidget, _buttonAccept) == 0x0328);
static_assert(offsetof(UMobilePhoneQuestDetailsWidget, _buttonOk) == 0x0330);
static_assert(offsetof(UMobilePhoneQuestEntryWidget, _entrySector) == 0x0288);
static_assert(offsetof(UMobilePhoneQuestEntryWidget, _entryTier) == 0x0290);
static_assert(offsetof(UMobilePhoneQuestEntryWidget, _entryTrader) == 0x0298);
static_assert(offsetof(UMobilePhoneQuestEntryWidget, _entryTraderIcon) == 0x02A0);
static_assert(offsetof(UMobilePhoneQuestEntryWidget, _entryTraderIconRetainer) == 0x02A8);
static_assert(offsetof(UMobilePhoneQuestEntryWidget, _entryStatus) == 0x02B0);
static_assert(offsetof(UMobilePhoneQuestEntryWidget, _entryTitle) == 0x02B8);
static_assert(offsetof(UMobilePhoneQuestEntryWidget, _entryTimeLimit) == 0x02C0);
static_assert(offsetof(UMobilePhoneQuestEntryWidget, _timeLimitWidgetSwitcher) == 0x02C8);
static_assert(offsetof(UMobilePhoneQuestEntryWidget, _entryQuestTimer) == 0x02D0);
static_assert(offsetof(UMobilePhoneQuestEntryWidget, _entryUpdateIcon) == 0x02D8);
static_assert(offsetof(UMobilePhoneQuestEntryWidget, _customQuestIcon) == 0x02E0);
static_assert(offsetof(UMobilePhoneQuestEntryWidget, _questCompletedColor) == 0x02E8);
static_assert(offsetof(UMobilePhoneQuestEntryWidget, _questFailedColor) == 0x0310);
static_assert(offsetof(UMobilePhoneQuestEntryWidget, _questInProgressColor) == 0x0338);
static_assert(offsetof(UMobilePhoneQuestEntryWidget, _questRelevantFontColor) == 0x0360);
static_assert(offsetof(UModularCodexEntryElement, _data) == 0x0268);
static_assert(offsetof(UModularCodexEntryElement_Text, _richTextBlock) == 0x0278);
static_assert(offsetof(UModularCodexEntryElement_BulletPoint, _richTextBlock) == 0x0278);
static_assert(offsetof(UModularCodexEntryElement_HorizontalContainer, _horizontalBox) == 0x0278);
static_assert(offsetof(UModularCodexEntryElement_VerticalContainer, _verticalBox) == 0x0278);
static_assert(offsetof(UModularCodexEntryElement_Note, _sizeBox) == 0x0278);
static_assert(offsetof(UModularCodexEntryElement_Image, _imageOverlay) == 0x0278);
static_assert(offsetof(UModularCodexEntryElement_Image, _image) == 0x0280);
static_assert(offsetof(UModularCodexEntryElement_Video, _imageOverlay) == 0x0278);
static_assert(offsetof(UModularCodexEntryElement_Video, _image) == 0x0280);
static_assert(offsetof(UModularCodexEntryElementData, _desiredPadding) == 0x0028);
static_assert(offsetof(UModularCodexEntryElementData_Text, _text) == 0x0038);
static_assert(offsetof(UModularCodexEntryElementData_HorizontalContainer, _elements) == 0x0038);
static_assert(offsetof(UModularCodexEntryElementData_HorizontalContainer, _desiredElementsPadding) == 0x0048);
static_assert(offsetof(UModularCodexEntryElementData_VerticalContainer, _elements) == 0x0038);
static_assert(offsetof(UModularCodexEntryElementData_VerticalContainer, _desiredElementsPadding) == 0x0048);
static_assert(offsetof(UModularCodexEntryElementData_Note, _element) == 0x0038);
static_assert(offsetof(FManualEnhancedImageTextInformation, DesiredLocation) == 0x0000);
static_assert(offsetof(FManualEnhancedImageTextInformation, Text) == 0x0010);
static_assert(offsetof(UModularCodexEntryElementData_Image, _imageTexture) == 0x0038);
static_assert(offsetof(UModularCodexEntryElementData_Image, _textElements) == 0x0060);
static_assert(offsetof(UModularCodexEntryElementData_Video, _videoTexture) == 0x0038);
static_assert(offsetof(UModularCodexEntryElementData_Video, _textElements) == 0x0060);
static_assert(offsetof(UModularTooltip, _sectionClass) == 0x0268);
static_assert(offsetof(UModularTooltip, _descriptionTextBlock) == 0x0270);
static_assert(offsetof(UModularTooltip, _sectionsVerticalBox) == 0x0278);
static_assert(offsetof(UModularTooltip, _advancedDisplayHintTextBlock) == 0x0280);
static_assert(offsetof(UModularTooltipElement, _data) == 0x0268);
static_assert(offsetof(UModularTooltipElement, _neutralDispositionColor) == 0x0270);
static_assert(offsetof(UModularTooltipElement, _goodDispositionColor) == 0x0280);
static_assert(offsetof(UModularTooltipElement, _badDispositionColor) == 0x0290);
static_assert(offsetof(UModularTooltipElement, _desiredHorizontalAlignment) == 0x02A0);
static_assert(offsetof(UModularTooltipElement_Title, _titleTextBlock) == 0x02F8);
static_assert(offsetof(UModularTooltipElement_Value, _nameTextBlock) == 0x02F8);
static_assert(offsetof(UModularTooltipElement_Value, _valueTextBlock) == 0x0300);
static_assert(offsetof(UModularTooltipElement_Timer, _remainingTimeProgressBar) == 0x02F8);
static_assert(offsetof(UModularTooltipElement_Modifier, _modifierTextBlock) == 0x02F8);
static_assert(offsetof(UModularTooltipElement_Modifier, _remainingTimeProgressBar) == 0x0300);
static_assert(offsetof(UModularTooltipElement_ValueWithModifier, _nameTextBlock) == 0x02F8);
static_assert(offsetof(UModularTooltipElement_ValueWithModifier, _currentValueTextBlock) == 0x0300);
static_assert(offsetof(UModularTooltipElement_ValueWithModifier, _baseValueTextBlock) == 0x0308);
static_assert(offsetof(UModularTooltipElement_ValueWithModifier, _modifierSignTextBlock) == 0x0310);
static_assert(offsetof(UModularTooltipElement_ValueWithModifier, _modifierTextBlock) == 0x0318);
static_assert(offsetof(UModularTooltipElement_AffectedBy, _sourceTextBlock) == 0x02F8);
static_assert(offsetof(UModularTooltipElement_AffectedBy, _affectElementOverlay) == 0x0300);
static_assert(offsetof(UModularTooltipElement_Affects, _targetTextBlock) == 0x02F8);
static_assert(offsetof(UModularTooltipElement_Affects, _affectElementOverlay) == 0x0300);
static_assert(offsetof(UModularTooltipElementData_AffectedBy, Affect) == 0x0040);
static_assert(offsetof(UModularTooltipElementData_Affects, Affect) == 0x0040);
static_assert(offsetof(UModularTooltipSection, _sectionElementsPadding) == 0x0268);
static_assert(offsetof(UModularTooltipSection, _sectionSeparatorImage) == 0x0278);
static_assert(offsetof(UModularTooltipSection, _sectionNameTextBlock) == 0x0280);
static_assert(offsetof(UModularTooltipSection, _sectionElementsVerticalBox) == 0x0288);
static_assert(offsetof(UMountPath, PathTag) == 0x0028);
static_assert(offsetof(UMountPath, MountingMontage) == 0x0030);
static_assert(offsetof(UMountPath, MountingMontageFP) == 0x0038);
static_assert(offsetof(UMountPath, StateTagRequiredForAlternativeAnimations) == 0x0040);
static_assert(offsetof(UMountPath, MountingMontageAlternative) == 0x0048);
static_assert(offsetof(UMountPath, MountingMontageAlternativeFP) == 0x0050);
static_assert(offsetof(UMountPath, MountingMotionIntensity) == 0x005C);
static_assert(offsetof(UExternalMountPath, DestinationTransform) == 0x0060);
static_assert(offsetof(UExternalMountPath, AllowMountingVolume) == 0x00A4);
static_assert(offsetof(UExternalMountPath, DisallowMountingVolume) == 0x00C4);
static_assert(offsetof(UExternalMountPath, UnmountingMontage) == 0x00F8);
static_assert(offsetof(UExternalMountPath, UnmountingMontageFP) == 0x0100);
static_assert(offsetof(UExternalMountPath, EnabledAtVehicleSpeed) == 0x010C);
static_assert(offsetof(UExternalMountPath, EnabledAtVehicleAngle) == 0x0114);
static_assert(offsetof(UExternalMountPath, UnmountingMotionIntensity) == 0x011D);
static_assert(offsetof(UInternalMountPath, DestinationSlotId) == 0x0060);
static_assert(offsetof(FMovingSplineSoundData, StartAudioEvent) == 0x0000);
static_assert(offsetof(FMovingSplineSoundData, StopAudioEvent) == 0x0008);
static_assert(offsetof(UMovableAudioSpline, _audioEvents) == 0x0550);
static_assert(offsetof(FMovableCollisionFieldState, MoveType) == 0x0002);
static_assert(offsetof(FMovableCollisionFieldMoveInfo, curveType) == 0x0004);
static_assert(offsetof(UMovableCollisionFieldComponent, _currentState) == 0x00B4);
static_assert(offsetof(UMovableCollisionFieldComponent, _moveInfo) == 0x00D0);
static_assert(offsetof(UMovableCollisionFieldComponent, _startRelativeLocation) == 0x00E0);
static_assert(offsetof(UMovableCollisionFieldComponent, _endRelativeLocation) == 0x00EC);
static_assert(offsetof(AMugshotRoom, _prisoner) == 0x0220);
static_assert(offsetof(AMugshotRoom, _prisonerClass) == 0x0228);
static_assert(offsetof(AMugshotRoom, _prisonerTransform) == 0x0250);
static_assert(offsetof(AMugshotRoom, _sceneRoot) == 0x0280);
static_assert(offsetof(AMugshotRoom, _mugshotCapture) == 0x0288);
static_assert(offsetof(AMugshotRoom, _inmateShirt) == 0x0290);
static_assert(offsetof(UMusicPlayerDisplayWidget, _shuffleImage) == 0x0268);
static_assert(offsetof(UMusicPlayerDisplayWidget, _repeatImage) == 0x0270);
static_assert(offsetof(UMusicPlayerDisplayWidget, _previousImage) == 0x0278);
static_assert(offsetof(UMusicPlayerDisplayWidget, _pauseImage) == 0x0280);
static_assert(offsetof(UMusicPlayerDisplayWidget, _playImage) == 0x0288);
static_assert(offsetof(UMusicPlayerDisplayWidget, _nextImage) == 0x0290);
static_assert(offsetof(UMusicPlayerDisplayWidget, _songTitleText) == 0x0298);
static_assert(offsetof(UNameableItemComponentState, Name) == 0x0040);
static_assert(offsetof(UNameableItemComponent, _name) == 0x00E8);
static_assert(offsetof(UNameableItemComponent, _nameWidget) == 0x00F8);
static_assert(offsetof(UNameableItemComponent, _editNameWidget) == 0x0100);
static_assert(offsetof(UNetworkDataIdAsset, IdToAssetMap) == 0x0030);
static_assert(offsetof(UNetworkDataIdAsset, AssetToIdMap) == 0x0080);
static_assert(offsetof(UNetworkPredictionComponent, _syncPosition) == 0x0100);
static_assert(offsetof(UNetworkPredictionComponent, _syncRotation) == 0x0101);
static_assert(offsetof(UNetworkPredictionComponent, _syncVelocity) == 0x0102);
static_assert(offsetof(UNetworkPredictionComponent, _syncAngularVelocity) == 0x0103);
static_assert(offsetof(ANightVisionGogglesItem, ActivatedSound) == 0x0A48);
static_assert(offsetof(ANightVisionGogglesItem, DeactivatedSound) == 0x0A50);
static_assert(offsetof(ANightVisionGogglesItem, _resourceSlotComponent) == 0x0A70);
static_assert(offsetof(ANightVisionGogglesItem, _nightVisionGogglesOnTag) == 0x0A78);
static_assert(offsetof(ANightVisionGogglesItem, _batteryPercentageToGlitchStrengthCurve) == 0x0A80);
static_assert(offsetof(ANoticeBoard, _meshComponent) == 0x0228);
static_assert(offsetof(ANoticeBoard, _paperMaterials) == 0x0230);
static_assert(offsetof(ANoticeBoard, _minigameClass) == 0x0240);
static_assert(offsetof(ANoticeBoard, _minigameConfigurationClass) == 0x0248);
static_assert(offsetof(ANoticeBoardMinigame, _uiController) == 0x0340);
static_assert(offsetof(ANoticeBoardMinigame, _noticeBoardMeshComponent) == 0x0348);
static_assert(offsetof(ANoticeBoardMinigame, _zoomStartLocation) == 0x0350);
static_assert(offsetof(ANoticeBoardMinigame, _zoomEndLocation) == 0x035C);
static_assert(offsetof(ANoticeBoardMinigame, _zoomCurve) == 0x0368);
static_assert(offsetof(ANoticeBoardMinigame, _noticeBoardMesh) == 0x0370);
static_assert(offsetof(UNoticeBoardMinigameWidget, _noticeBoardPanelWidget) == 0x0280);
static_assert(offsetof(UNoticeBoardMinigameWidget, _zoomControlText) == 0x0288);
static_assert(offsetof(UNoticeBoardMinigameWidget, _acceptQuestControlText) == 0x0290);
static_assert(offsetof(UNoticeBoardMinigameWidget, _acceptQuestProgressBar) == 0x0298);
static_assert(offsetof(UNoticeBoardMinigameWidget, _exitNoticeBoardControlText) == 0x02A0);
static_assert(offsetof(UNoticeBoardMinigameWidget, _detailsText) == 0x02A8);
static_assert(offsetof(UNoticeBoardPanelWidget, _questEntriesOverlay) == 0x0288);
static_assert(offsetof(UNoticeBoardPanelWidget, _enhancementOverlay) == 0x0290);
static_assert(offsetof(UNoticeBoardPanelWidget, _enhancedQuestEntry) == 0x0298);
static_assert(offsetof(UNoticeBoardQuestEntryWidget, _tierIcon) == 0x0268);
static_assert(offsetof(UNoticeBoardQuestEntryWidget, _customQuestIcon) == 0x0270);
static_assert(offsetof(UNoticeBoardQuestEntryWidget, _title) == 0x0278);
static_assert(offsetof(UNoticeBoardQuestEntryWidget, _description) == 0x0280);
static_assert(offsetof(UNoticeBoardQuestEntryWidget, _timeLimitHorizontalBox) == 0x0288);
static_assert(offsetof(UNoticeBoardQuestEntryWidget, _timeLimit) == 0x0290);
static_assert(offsetof(UNoticeBoardQuestEntryWidget, _turnIn) == 0x0298);
static_assert(offsetof(UNoticeBoardQuestEntryWidget, _requirementsTitle) == 0x02A0);
static_assert(offsetof(UNoticeBoardQuestEntryWidget, _rewardsTitle) == 0x02A8);
static_assert(offsetof(UNoticeBoardQuestEntryWidget, _requirementsContainer) == 0x02B0);
static_assert(offsetof(UNoticeBoardQuestEntryWidget, _rewardsContainer) == 0x02B8);
static_assert(offsetof(UNoticeBoardQuestEntryWidget, _tapeSwitcher) == 0x02C0);
static_assert(offsetof(UNoticeBoardQuestEntryWidget, _bloodSplatterSwitcherA) == 0x02C8);
static_assert(offsetof(UNoticeBoardQuestEntryWidget, _bloodSplatterSwitcherB) == 0x02D0);
static_assert(offsetof(UNoticeBoardQuestEntryWidget, _coffeeStainSwitcherA) == 0x02D8);
static_assert(offsetof(UNoticeBoardQuestEntryWidget, _coffeeStainSwitcherB) == 0x02E0);
static_assert(offsetof(UNoticeBoardQuestEntryWidget, _postItNoteSwitcher) == 0x02E8);
static_assert(offsetof(UNoticeBoardQuestEntryWidget, _postItNoteWarning) == 0x02F0);
static_assert(offsetof(UNoticeBoardQuestEntryWidget, _postItNoteOverlay) == 0x02F8);
static_assert(offsetof(UNoticeBoardQuestEntryWidget, _rewardsOverlay) == 0x0300);
static_assert(offsetof(UNotificationPanelWidget, _notificationBox) == 0x0268);
static_assert(offsetof(UNotificationPanelWidget, _nextEventBox) == 0x0270);
static_assert(offsetof(UNotificationPanelWidget, _nextEventCountdown) == 0x0278);
static_assert(offsetof(UNotificationPanelWidget, _nextEventLocation) == 0x0280);
static_assert(offsetof(UNotificationPanelWidget, _eventCancelBox) == 0x0288);
static_assert(offsetof(UNotificationPanelWidget, _eventCancelTime) == 0x0290);
static_assert(offsetof(UNotificationPanelWidget, _eventTime) == 0x0298);
static_assert(offsetof(UNotificationPanelWidget, _eventTimeText) == 0x02A0);
static_assert(offsetof(ANotificationsManager, _queuedNotifications) == 0x0220);
static_assert(offsetof(ANotificationsManager, _queuedNotificationChains) == 0x0270);
static_assert(offsetof(FNotificationAndDelay, Notification) == 0x0000);
static_assert(offsetof(UNotificationChain, _notifications) == 0x0048);
static_assert(offsetof(UNotificationWidget, _notificationSize) == 0x0268);
static_assert(offsetof(UNotificationWidget, _icon) == 0x0270);
static_assert(offsetof(UNotificationWidget, _text) == 0x0278);
static_assert(offsetof(UNotificationWidget, _increaseToMaxSize) == 0x0280);
static_assert(offsetof(UNPCControllerStateArmedNPCBaseAlertedByDamage, _stateDurationRange) == 0x0030);
static_assert(offsetof(UNPCControllerStateArmedNPCBaseAlertedByGunshot, _stateDurationRange) == 0x0038);
static_assert(offsetof(ANPCDrifterAIController, _statesByEnum) == 0x0598);
static_assert(offsetof(UNPCControllerStateDrifterMoveTowardsTargetLocation, _randomLocationRange) == 0x004C);
static_assert(offsetof(ANPCGuardAIController, _statesByEnum) == 0x0598);
static_assert(offsetof(UNPCControllerStateGuardIdle, _voiceLineCueueRange) == 0x0038);
static_assert(offsetof(UNPCInventoryComponent, _containedItems) == 0x0108);
static_assert(offsetof(UNumberPicker, _upArrowButton) == 0x0280);
static_assert(offsetof(UNumberPicker, _downArrowButton) == 0x0288);
static_assert(offsetof(UNumberPicker, _numberText) == 0x0290);
static_assert(offsetof(UOutpostEntriesPanelWidget, _searchBox) == 0x0268);
static_assert(offsetof(UOutpostEntriesPanelWidget, _entryContainer) == 0x0270);
static_assert(offsetof(UOutpostEntriesPanelWidget, _collapseAllButton) == 0x0298);
static_assert(offsetof(UOutpostEntriesPanelWidget, _expandAllButton) == 0x02A0);
static_assert(offsetof(FOutpostInformationTraderUIData, TraderClass) == 0x0000);
static_assert(offsetof(UOutpostInformationDropdownWidget, _outpostInformationTraderUIData) == 0x0268);
static_assert(offsetof(UOutpostInformationDropdownWidget, _outpostTraderEntryWidgetClass) == 0x0278);
static_assert(offsetof(UOutpostInformationDropdownWidget, _background) == 0x0280);
static_assert(offsetof(UOutpostInformationDropdownWidget, _outpostNameTextBlock) == 0x0288);
static_assert(offsetof(UOutpostInformationDropdownWidget, _chbSwitchDropdownState) == 0x0290);
static_assert(offsetof(UOutpostInformationDropdownWidget, _entriesContainer) == 0x0298);
static_assert(offsetof(UOutpostInformationDropdownWidget, _titleOverlay) == 0x02A0);
static_assert(offsetof(UOutpostInformationDropdownWidget, _unopenedBackgroundColorAndOpacity) == 0x02B0);
static_assert(offsetof(UOutpostInformationDropdownWidget, _openedBackgroundColorAndOpacity) == 0x02C0);
static_assert(offsetof(UOutpostTraderDetailsPanelWidget, _mainOverlay) == 0x0268);
static_assert(offsetof(UOutpostTraderDetailsPanelWidget, _entryName) == 0x0270);
static_assert(offsetof(UOutpostTraderDetailsPanelWidget, _traderImage) == 0x0278);
static_assert(offsetof(UOutpostTraderDetailsPanelWidget, _lifetimeTotalQuests) == 0x0280);
static_assert(offsetof(UOutpostTraderDetailsPanelWidget, _lifetimeTier1Quests) == 0x0288);
static_assert(offsetof(UOutpostTraderDetailsPanelWidget, _lifetimeTier2Quests) == 0x0290);
static_assert(offsetof(UOutpostTraderDetailsPanelWidget, _lifetimeTier3Quests) == 0x0298);
static_assert(offsetof(UOutpostTraderDetailsPanelWidget, _currentCycleQuests) == 0x02A0);
static_assert(offsetof(UOutpostTraderDetailsPanelWidget, _availableSpecialDealsBox) == 0x02A8);
static_assert(offsetof(UOutpostTraderDetailsPanelWidget, _availableSpecialDeals) == 0x02B0);
static_assert(offsetof(UOutpostTraderEntryWidget, _backgroundImage) == 0x0278);
static_assert(offsetof(UOutpostTraderEntryWidget, _lockedIcon) == 0x0280);
static_assert(offsetof(UOutpostTraderEntryWidget, _traderName) == 0x0288);
static_assert(offsetof(UOutpostTraderEntryWidget, _traderStatus) == 0x0290);
static_assert(offsetof(UOutpostTraderEntryWidget, _pixelSizeMaterialParameterName) == 0x0298);
static_assert(offsetof(UOutpostTraderEntryWidget, _dpiMaterialParameterName) == 0x02A0);
static_assert(offsetof(UOutpostTraderEntryWidget, _inactiveMaterialInstance) == 0x02A8);
static_assert(offsetof(UOutpostTraderEntryWidget, _inactiveHoveredMaterialInstance) == 0x02B0);
static_assert(offsetof(UOutpostTraderEntryWidget, _activeMaterialInstance) == 0x02B8);
static_assert(offsetof(UPaddleItemTag, PaddlingLHandAnimation) == 0x0030);
static_assert(offsetof(UPaddleItemTag, PaddlingRHandAnimation) == 0x0038);
static_assert(offsetof(UPaddleItemTag, PaddlingLToRAnimation) == 0x0040);
static_assert(offsetof(UPaddleItemTag, PaddlingRToLAnimation) == 0x0048);
static_assert(offsetof(FPaintJobColor, WeaponColor) == 0x0000);
static_assert(offsetof(FPaintJobColor, VehicleColor) == 0x0004);
static_assert(offsetof(FPaintJobColor, BaseElementColor) == 0x0008);
static_assert(offsetof(FPaintJobColor, TurretColor) == 0x000C);
static_assert(offsetof(UPaintJobColorsDataAsset, _paintJobColors) == 0x0030);
static_assert(offsetof(FParachuteAnimParams, OpeningAnimation) == 0x0000);
static_assert(offsetof(FParachuteAnimParams, OpeningAnimationTimeRange) == 0x0008);
static_assert(offsetof(UParachuteItemTag, Pose) == 0x0030);
static_assert(offsetof(UParachuteItemTag, Animation) == 0x0048);
static_assert(offsetof(UParachuteItemTag, MovementParameters) == 0x0058);
static_assert(offsetof(UPauseMenu, _resume) == 0x0310);
static_assert(offsetof(UPauseMenu, _clientSettings) == 0x0318);
static_assert(offsetof(UPauseMenu, _serverSettings) == 0x0320);
static_assert(offsetof(UPauseMenu, _addToFavourites) == 0x0328);
static_assert(offsetof(UPauseMenu, _commitSuicide) == 0x0330);
static_assert(offsetof(UPauseMenu, _statistics) == 0x0338);
static_assert(offsetof(UPauseMenu, _reportIllegalContent) == 0x0340);
static_assert(offsetof(UPauseMenu, _mainMenu) == 0x0348);
static_assert(offsetof(UPauseMenu, _quitGame) == 0x0350);
static_assert(offsetof(UPauseMenu, _suicideTimeCooldown) == 0x0358);
static_assert(offsetof(UPauseMenu, _serverSettingsLockedTooltipClass) == 0x0360);
static_assert(offsetof(UPauseMenu, _serverSettingsLockedTooltip) == 0x0368);
static_assert(offsetof(UPauseMenuUIController, _resumeAllSounds) == 0x0028);
static_assert(offsetof(UPauseMenuUIController, _stopAllSounds) == 0x0030);
static_assert(offsetof(UPauseMenuUIController, _pauseAllSounds) == 0x0038);
static_assert(offsetof(APersistentCollisionManager, _landscapeCollisionComponents) == 0x0220);
static_assert(offsetof(APersistentCollisionManager, _staticMeshCollisionComponents) == 0x0230);
static_assert(offsetof(APersistentCollisionManager, _physicalMaterials) == 0x0240);
static_assert(offsetof(APersistentCollisionManager, _bodySetups) == 0x0250);
static_assert(offsetof(UPersistentPhysicalMaterial, PhysicalMaterial) == 0x0088);
static_assert(offsetof(UPersistentLandscapeHeightfieldComponent, _cachedLocalBox) == 0x0458);
static_assert(offsetof(UPersistentLandscapeHeightfieldComponent, _cookedCollisionData) == 0x0480);
static_assert(offsetof(UPersistentLandscapeHeightfieldComponent, _cookedPhysicalMaterials) == 0x0490);
static_assert(offsetof(UPersistentStaticMeshComponent, _materials) == 0x0458);
static_assert(offsetof(UPersistentInstancedStaticMeshComponent, _perInstanceTransform) == 0x0478);
static_assert(offsetof(APesticideItem, SkeletalMesh) == 0x09A0);
static_assert(offsetof(APesticideItem, _type) == 0x09A8);
static_assert(offsetof(APesticideItem, _applyPesticidePrisonerMontage) == 0x09B0);
static_assert(offsetof(APesticideItem, _applyPesticideItemMontage) == 0x09B8);
static_assert(offsetof(UPhoenixTearsComponent, _itemInjectionMontage) == 0x00D0);
static_assert(offsetof(UPhotoModeMainPanel, _photoModeUI) == 0x0268);
static_assert(offsetof(UPhotoModeMainPanel, _photoModeGrid) == 0x0270);
static_assert(offsetof(UPhotoModeMainPanel, _mainPanelContainer) == 0x0278);
static_assert(offsetof(UPhotoModeMainPanel, _coreMenuTabButtons) == 0x0280);
static_assert(offsetof(UPhotoModeMainPanel, _coreMenu) == 0x0288);
static_assert(offsetof(UPhotoModeMainPanel, _inputLegend) == 0x0290);
static_assert(offsetof(UPhotoModeMainPanel, _gridLine0) == 0x0298);
static_assert(offsetof(UPhotoModeMainPanel, _gridLine1) == 0x02A0);
static_assert(offsetof(UPhotoModeMainPanel, _gridLine2) == 0x02A8);
static_assert(offsetof(UPhotoModeMainPanel, _gridLine3) == 0x02B0);
static_assert(offsetof(UPhotoModeMainPanel, _frameDisplay) == 0x02B8);
static_assert(offsetof(UPhotoModeMainPanel, _logoDisplay) == 0x02C0);
static_assert(offsetof(UPhotoModeMainPanel, _moveCameraBinding) == 0x02C8);
static_assert(offsetof(UPhotoModeMainPanel, _rotateCameraBinding) == 0x02D0);
static_assert(offsetof(UPhotoModeMainPanel, _dollyCameraBinding) == 0x02D8);
static_assert(offsetof(UPhotoModeMainPanel, _takePhotoBinding) == 0x02E0);
static_assert(offsetof(UPhotoModeMainPanel, _showHideUIBinding) == 0x02E8);
static_assert(offsetof(UPhotoModeMainPanel, _cycleGridsBinding) == 0x02F0);
static_assert(offsetof(UPhotoModeMainPanel, _cameraTabTitle) == 0x02F8);
static_assert(offsetof(UPhotoModeMainPanel, _effectsTabTitle) == 0x0310);
static_assert(offsetof(UPhotoModeMainPanel, _frameTabTitle) == 0x0328);
static_assert(offsetof(UPhotoModeMainPanel, _bodyTabTitle) == 0x0340);
static_assert(offsetof(UPhotoModeMainPanel, _buttonClass) == 0x0370);
static_assert(offsetof(UPhotoModeMainPanel, _cameraMode) == 0x0378);
static_assert(offsetof(UPhotoModeMainPanel, _cameraTilt) == 0x0380);
static_assert(offsetof(UPhotoModeMainPanel, _fieldOfView) == 0x0388);
static_assert(offsetof(UPhotoModeMainPanel, _depthOfField) == 0x0390);
static_assert(offsetof(UPhotoModeMainPanel, _focusDistance) == 0x0398);
static_assert(offsetof(UPhotoModeMainPanel, _selfieLight) == 0x03A0);
static_assert(offsetof(UPhotoModeMainPanel, _exposure) == 0x03A8);
static_assert(offsetof(UPhotoModeMainPanel, _contrast) == 0x03B0);
static_assert(offsetof(UPhotoModeMainPanel, _vignette) == 0x03B8);
static_assert(offsetof(UPhotoModeMainPanel, _chromaticAberration) == 0x03C0);
static_assert(offsetof(UPhotoModeMainPanel, _grain) == 0x03C8);
static_assert(offsetof(UPhotoModeMainPanel, _time) == 0x03D0);
static_assert(offsetof(UPhotoModeMainPanel, _frame) == 0x03D8);
static_assert(offsetof(UPhotoModeMainPanel, _logo) == 0x03E0);
static_assert(offsetof(UPhotoModeMainPanel, _aspectRatio) == 0x03E8);
static_assert(offsetof(UPhotoModeMainPanel, _lookAtCamera) == 0x03F0);
static_assert(offsetof(UPhotoModeMainPanel, _upperBodyPose) == 0x03F8);
static_assert(offsetof(UPhotoModeMainPanel, _lowerBodyPose) == 0x0400);
static_assert(offsetof(UPhotoModeMainPanel, _facialExpression) == 0x0408);
static_assert(offsetof(UPhotoModeMainPanel, _selfieModeNote) == 0x0410);
static_assert(offsetof(UPhotoModeMainPanel, _bodyPoseNote) == 0x0418);
static_assert(offsetof(APhotoModePawn, HudWidgetClass) == 0x0288);
static_assert(offsetof(APhotoModePawn, AnimInstanceClass) == 0x0290);
static_assert(offsetof(APhotoModePawn, _camera) == 0x02A8);
static_assert(offsetof(APhotoModePawn, _light) == 0x02B0);
static_assert(offsetof(APhotoModePawn, _visionEffects) == 0x02B8);
static_assert(offsetof(APhotoModePawn, _shutterSound) == 0x02C0);
static_assert(offsetof(UPhysicalSurfacesData, Default) == 0x0030);
static_assert(offsetof(UPhysicalSurfacesData, grass) == 0x0058);
static_assert(offsetof(UPhysicalSurfacesData, ForrestGroundCoastal) == 0x0080);
static_assert(offsetof(UPhysicalSurfacesData, ForrestGroundContinental) == 0x00A8);
static_assert(offsetof(UPhysicalSurfacesData, Rock) == 0x00D0);
static_assert(offsetof(UPhysicalSurfacesData, Stone) == 0x00F8);
static_assert(offsetof(UPhysicalSurfacesData, Gravel) == 0x0120);
static_assert(offsetof(UPhysicalSurfacesData, GravelBeach) == 0x0148);
static_assert(offsetof(UPhysicalSurfacesData, Pebbles) == 0x0170);
static_assert(offsetof(UPhysicalSurfacesData, Snow) == 0x0198);
static_assert(offsetof(UPhysicalSurfacesData, Ice) == 0x01C0);
static_assert(offsetof(UPhysicalSurfacesData, Sand) == 0x01E8);
static_assert(offsetof(UPhysicalSurfacesData, Asphalt) == 0x0210);
static_assert(offsetof(UPhysicalSurfacesData, Dirt) == 0x0238);
static_assert(offsetof(UPhysicalSurfacesData, Water) == 0x0260);
static_assert(offsetof(UPhysicalSurfacesData, WaterOcean) == 0x0288);
static_assert(offsetof(UPhysicalSurfacesData, Cloth) == 0x02B0);
static_assert(offsetof(UPhysicalSurfacesData, Metal) == 0x02D8);
static_assert(offsetof(UPhysicalSurfacesData, Aluminium) == 0x0300);
static_assert(offsetof(UPhysicalSurfacesData, Concrete) == 0x0328);
static_assert(offsetof(UPhysicalSurfacesData, Brick) == 0x0350);
static_assert(offsetof(UPhysicalSurfacesData, Wood) == 0x0378);
static_assert(offsetof(UPhysicalSurfacesData, Plastic) == 0x03A0);
static_assert(offsetof(UPhysicalSurfacesData, Rubber) == 0x03C8);
static_assert(offsetof(UPhysicalSurfacesData, Glass) == 0x03F0);
static_assert(offsetof(UPhysicalSurfacesData, Foliage) == 0x0418);
static_assert(offsetof(UPhysicalSurfacesData, Bark) == 0x0440);
static_assert(offsetof(UPhysicalSurfacesData, Flesh) == 0x0468);
static_assert(offsetof(UPhysicalSurfacesData, RoofTile) == 0x0490);
static_assert(offsetof(UPhysicalSurfacesData, CeramicTiles) == 0x04B8);
static_assert(offsetof(UPhysicalSurfacesData, Scrap) == 0x04E0);
static_assert(offsetof(UPhysicalSurfacesData, Trunk) == 0x0508);
static_assert(offsetof(UPhysicalSurfacesData, Leaves) == 0x0530);
static_assert(offsetof(UPhysicalSurfacesData, Fruit) == 0x0558);
static_assert(offsetof(UPhysicalSurfacesData, Cardboard) == 0x0580);
static_assert(offsetof(UPhysicalSurfacesData, Plaster) == 0x05A8);
static_assert(offsetof(UPhysicalSurfacesData, Kevlar) == 0x05D0);
static_assert(offsetof(UPhysicalSurfacesData, ForceField) == 0x05F8);
static_assert(offsetof(UPhysicalSurfacesData, NoEffect) == 0x0620);
static_assert(offsetof(UPhysicalSurfacesData, WhiteGravel) == 0x0648);
static_assert(offsetof(UPhysicalSurfacesData, Mud) == 0x0670);
static_assert(offsetof(UPhysicalSurfacesData, RiverSand) == 0x0698);
static_assert(offsetof(UPhysicalSurfacesData, GrassContinental) == 0x06C0);
static_assert(offsetof(FPhysicalSurfaceVehicleTireParticleData, ParticleTrail) == 0x0000);
static_assert(offsetof(FPhysicalSurfaceVehicleTireParticleData, ParticleWave) == 0x0008);
static_assert(offsetof(FPhysicalSurfaceVehicleEffectsData, ParticleTrail) == 0x0000);
static_assert(offsetof(FPhysicalSurfaceVehicleEffectsData, ParticleWave) == 0x0010);
static_assert(offsetof(FPhysicalSurfaceVehicleEffectsData, SmallTireParticles) == 0x0020);
static_assert(offsetof(FPhysicalSurfaceVehicleEffectsData, MediumTireParticles) == 0x0030);
static_assert(offsetof(FPhysicalSurfaceVehicleEffectsData, LargeTireParticles) == 0x0040);
static_assert(offsetof(FPhysicalSurfaceEffectsData, Vehicle) == 0x0000);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Default) == 0x0030);
static_assert(offsetof(UPhysicalSurfacesEffectsData, grass) == 0x0080);
static_assert(offsetof(UPhysicalSurfacesEffectsData, ForrestGroundCoastal) == 0x00D0);
static_assert(offsetof(UPhysicalSurfacesEffectsData, ForrestGroundContinental) == 0x0120);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Rock) == 0x0170);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Stone) == 0x01C0);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Gravel) == 0x0210);
static_assert(offsetof(UPhysicalSurfacesEffectsData, GravelBeach) == 0x0260);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Pebbles) == 0x02B0);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Snow) == 0x0300);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Ice) == 0x0350);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Sand) == 0x03A0);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Asphalt) == 0x03F0);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Dirt) == 0x0440);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Water) == 0x0490);
static_assert(offsetof(UPhysicalSurfacesEffectsData, WaterOcean) == 0x04E0);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Cloth) == 0x0530);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Metal) == 0x0580);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Aluminium) == 0x05D0);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Concrete) == 0x0620);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Brick) == 0x0670);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Wood) == 0x06C0);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Plastic) == 0x0710);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Rubber) == 0x0760);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Glass) == 0x07B0);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Foliage) == 0x0800);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Bark) == 0x0850);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Flesh) == 0x08A0);
static_assert(offsetof(UPhysicalSurfacesEffectsData, RoofTile) == 0x08F0);
static_assert(offsetof(UPhysicalSurfacesEffectsData, CeramicTiles) == 0x0940);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Scrap) == 0x0990);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Trunk) == 0x09E0);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Leaves) == 0x0A30);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Fruit) == 0x0A80);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Cardboard) == 0x0AD0);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Plaster) == 0x0B20);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Kevlar) == 0x0B70);
static_assert(offsetof(UPhysicalSurfacesEffectsData, ForceField) == 0x0BC0);
static_assert(offsetof(UPhysicalSurfacesEffectsData, NoEffect) == 0x0C10);
static_assert(offsetof(UPhysicalSurfacesEffectsData, WhiteGravel) == 0x0C60);
static_assert(offsetof(UPhysicalSurfacesEffectsData, Mud) == 0x0CB0);
static_assert(offsetof(UPhysicalSurfacesEffectsData, RiverSand) == 0x0D00);
static_assert(offsetof(UPhysicalSurfacesEffectsData, GrassContinental) == 0x0D50);
static_assert(offsetof(UPickupItemAssetData, Item) == 0x0030);
static_assert(offsetof(FCraftingProcessPerIngredientSlotData, _limiter) == 0x0010);
static_assert(offsetof(FCraftingProcess, _recipe) == 0x0000);
static_assert(offsetof(FCraftingProcess, _perIngredientSlotData) == 0x0008);
static_assert(offsetof(APlaceableActorBase, _id) == 0x0228);
static_assert(offsetof(APlaceableActorBase, _boxCollisionComponent) == 0x0230);
static_assert(offsetof(APlaceableActorBase, _craftingRecipe) == 0x0240);
static_assert(offsetof(APlaceableActorBase, _productClass) == 0x0248);
static_assert(offsetof(APlaceableActorBase, _craftingProcess) == 0x0250);
static_assert(offsetof(APlaceableActorBase, _rootComponent) == 0x0270);
static_assert(offsetof(APlaceableActorBase, _staticMeshComponent_Main) == 0x0278);
static_assert(offsetof(APlaceableActorBase, _staticMeshComponent_Outline) == 0x0280);
static_assert(offsetof(APlaceableActorBase, _staticMeshComponent_Depth) == 0x0288);
static_assert(offsetof(APlaceableActorBase, _queryStaticMeshComponent) == 0x0290);
static_assert(offsetof(APlaceableActorBase, _directionIndicatorStaticMeshComponent) == 0x0298);
static_assert(offsetof(APlaceableActorBase, _primaryMaterialAllowed) == 0x02A0);
static_assert(offsetof(APlaceableActorBase, _primaryMaterialDisallowed) == 0x02A8);
static_assert(offsetof(APlaceableActorBase, _outlineMaterial) == 0x02B0);
static_assert(offsetof(APlaceableActorBase, _depthMaterial) == 0x02B8);
static_assert(offsetof(APlaceableActorBase, _statusFlags) == 0x02F8);
static_assert(offsetof(APlaceableActorBase, _placementState) == 0x0318);
static_assert(offsetof(APlaceableActorBase, _destroyInteractionText) == 0x03E0);
static_assert(offsetof(APlaceableActorBase, _replicatedLocation) == 0x03F8);
static_assert(offsetof(APlaceableActorBase, _replicatedPlacedLocation) == 0x0404);
static_assert(offsetof(APlaceableActorBase, _replicatedRotation) == 0x0410);
static_assert(offsetof(FTilesData, HISMComponentMain) == 0x0000);
static_assert(offsetof(FTilesData, HISMComponentOutline) == 0x0008);
static_assert(offsetof(FTilesData, HISMComponentDepth) == 0x0010);
static_assert(offsetof(APlaceableActorBaseBuilding, _tilesData) == 0x0550);
static_assert(offsetof(APlaceableActorBaseBuilding, _flagAreaMeshComponent) == 0x0568);
static_assert(offsetof(APlaceableActorBaseBuilding, _primaryMaterialFriendlyFlag) == 0x0570);
static_assert(offsetof(APlaceableActorBaseBuilding, _replicatedFirstPointLocation) == 0x0578);
static_assert(offsetof(APlaceableActorBaseBuilding, _replicatedFirstPointRotation) == 0x0584);
static_assert(offsetof(APlaceableActorBaseBuilding, _placementSubState) == 0x0590);
static_assert(offsetof(APlaceableActorBaseBuilding, _stateFlags) == 0x0591);
static_assert(offsetof(APlaceableActorBaseBuilding, _sizeVariationData) == 0x05C8);
static_assert(offsetof(FConZBaseElementIdentifier, Location) == 0x0010);
static_assert(offsetof(APlaceableActorBaseUpgrade, _elementToBeUpgraded) == 0x04F0);
static_assert(offsetof(APlaceableActorGarden, _gardenPlacementState) == 0x04F0);
static_assert(offsetof(APlaceableActorGarden, _staticMeshComponents_Main) == 0x0528);
static_assert(offsetof(APlaceableActorGarden, _staticMeshComponents_Outline) == 0x0538);
static_assert(offsetof(APlaceableActorGarden, _staticMeshComponents_Depth) == 0x0548);
static_assert(offsetof(APlaceableActorGarden, _directionIndicatorStaticMeshComponents) == 0x0558);
static_assert(offsetof(APlaceableActorGarden, _replicatedGardenSize) == 0x0568);
static_assert(offsetof(APlaceableActorGarden, _maxInstancesServerSettingTag) == 0x05B0);
static_assert(offsetof(FLineTraceSocketPair, TraceStart) == 0x0000);
static_assert(offsetof(FLineTraceSocketPair, TraceEnd) == 0x0008);
static_assert(offsetof(APlaceableActorModularBaseBuildingFoundation, _lineTraceSockets) == 0x0680);
static_assert(offsetof(UPlaceableElementWidget, _icon) == 0x0268);
static_assert(offsetof(UPlaceableElementWidget, _destroyButton) == 0x0270);
static_assert(offsetof(UPlaceableOnRackItemTag, SocketName) == 0x0030);
static_assert(offsetof(UPlacedPlaceableWidget, _topRow) == 0x02B8);
static_assert(offsetof(UPlacedPlaceableWidget, _bottomRow) == 0x02C0);
static_assert(offsetof(APlantGrowthDisplay, _plantSpecies) == 0x0220);
static_assert(offsetof(APlantGrowthDisplay, _stageText) == 0x0240);
static_assert(offsetof(APlantGrowthDisplay, _pestsParticleSystem) == 0x0250);
static_assert(offsetof(APlantGrowthDisplay, _pestsParticleComponent) == 0x0258);
static_assert(offsetof(UPlantingPanel, _seedSlot) == 0x0268);
static_assert(offsetof(UPlantingPanel, _fertilizerSlot) == 0x0270);
static_assert(offsetof(UPlantingPanel, _organicFertilizerIcon) == 0x0280);
static_assert(offsetof(UPlantingPanel, _industrialFertilizerIcon) == 0x0308);
static_assert(offsetof(UPlantSeedComponent, _speciesData) == 0x00C8);
static_assert(offsetof(UPlantPestSpecies, SpeciesName) == 0x0030);
static_assert(offsetof(UPlantDiseaseSpecies, SpeciesName) == 0x0030);
static_assert(offsetof(FPlantMesh, Mesh) == 0x0000);
static_assert(offsetof(FPlantMesh, StageMorphTargetInterpolationRange) == 0x0018);
static_assert(offsetof(FPlantMesh, GrowthExponents) == 0x0020);
static_assert(offsetof(FPlantMesh, Transform) == 0x0030);
static_assert(offsetof(FPlantStageMeshData, Meshes) == 0x0008);
static_assert(offsetof(FPlantMeshData, Translation) == 0x0004);
static_assert(offsetof(FPlantMeshData, RandomVerticalOffsetInterval) == 0x0010);
static_assert(offsetof(FPlantMeshData, RandomHorizontalOffsetInterval) == 0x0018);
static_assert(offsetof(FPlantMeshData, RandomScaleInterval) == 0x0020);
static_assert(offsetof(FPlantMeshData, VegetatingPlantMesh) == 0x0028);
static_assert(offsetof(FPlantMeshData, FloweringPlantMesh) == 0x0040);
static_assert(offsetof(FPlantMeshData, RipeningPlantMesh) == 0x0058);
static_assert(offsetof(UPlantSpecies, SpeciesName) == 0x0030);
static_assert(offsetof(UPlantSpecies, SeedsOptimaltemperature) == 0x0048);
static_assert(offsetof(UPlantSpecies, GrowthOptimalTemperature) == 0x0050);
static_assert(offsetof(UPlantSpecies, LastStage) == 0x005C);
static_assert(offsetof(UPlantSpecies, Pests) == 0x0068);
static_assert(offsetof(UPlantSpecies, Diseases) == 0x0078);
static_assert(offsetof(UPlantSpecies, Seed) == 0x0088);
static_assert(offsetof(UPlantSpecies, PlantMesh) == 0x0090);
static_assert(offsetof(UPlantStatusIndicatorWidget, _speciesNameText) == 0x0268);
static_assert(offsetof(UPlantStatusIndicatorWidget, _growthStageText) == 0x0270);
static_assert(offsetof(UPlantStatusIndicatorWidget, _sunEnergyRateText) == 0x0278);
static_assert(offsetof(UPlantStatusIndicatorWidget, _waterAmountText) == 0x0280);
static_assert(offsetof(UPlantStatusIndicatorWidget, _fertilizerText) == 0x0288);
static_assert(offsetof(UPlantStatusIndicatorWidget, _conditionVerticalBox) == 0x0290);
static_assert(offsetof(UPlantStatusIndicatorWidget, _pestHorizontalBox) == 0x0298);
static_assert(offsetof(UPlantStatusIndicatorWidget, _pestStatusIcon) == 0x02A0);
static_assert(offsetof(UPlantStatusIndicatorWidget, _pestStatusText) == 0x02A8);
static_assert(offsetof(UPlantStatusIndicatorWidget, _diseaseHorizontalBox) == 0x02B0);
static_assert(offsetof(UPlantStatusIndicatorWidget, _diseaseStatusIcon) == 0x02B8);
static_assert(offsetof(UPlantStatusIndicatorWidget, _diseaseStatusText) == 0x02C0);
static_assert(offsetof(UPlantStatusIndicatorWidget, _weedsHorizontalBox) == 0x02C8);
static_assert(offsetof(UPlantStatusIndicatorWidget, _weedsStatusIcon) == 0x02D0);
static_assert(offsetof(UPlantStatusIndicatorWidget, _weedsStatusText) == 0x02D8);
static_assert(offsetof(UPlantStatusIndicatorWidget, _pestIconBrush) == 0x02E0);
static_assert(offsetof(UPlantStatusIndicatorWidget, _diseaseIconBrush) == 0x0368);
static_assert(offsetof(UPlantStatusIndicatorWidget, _weedsIconBrush) == 0x03F0);
static_assert(offsetof(UPlantStatusIndicatorWidget, _treatmentIconBrush) == 0x0478);
static_assert(offsetof(UPlasticSurgeryMenuWidget, _overlayMenu) == 0x0270);
static_assert(offsetof(UPlasticSurgeryMenuWidget, _pageSwitcher) == 0x0278);
static_assert(offsetof(UPlasticSurgeryMenuWidget, _carouselGender) == 0x0280);
static_assert(offsetof(UPlasticSurgeryMenuWidget, _sliderHead) == 0x0288);
static_assert(offsetof(UPlasticSurgeryMenuWidget, _carouselHairiness) == 0x0290);
static_assert(offsetof(UPlasticSurgeryMenuWidget, _appearanceUpgradeConditionDisplay) == 0x0298);
static_assert(offsetof(UPlasticSurgeryMenuWidget, _presetColorPickerSkinTone) == 0x02A0);
static_assert(offsetof(UPlasticSurgeryMenuWidget, _sliderAge) == 0x02A8);
static_assert(offsetof(UPlasticSurgeryMenuWidget, _carouselConcealedMode) == 0x02B0);
static_assert(offsetof(UPlasticSurgeryMenuWidget, _sliderPenisBreastSize) == 0x02B8);
static_assert(offsetof(UPlasticSurgeryMenuWidget, _carouselTattoos) == 0x02C0);
static_assert(offsetof(UPlasticSurgeryMenuWidget, _sliderTattooStyle) == 0x02C8);
static_assert(offsetof(UPlasticSurgeryMenuWidget, _tattooUpgradeConditionDisplay) == 0x02D0);
static_assert(offsetof(UPlasticSurgeryMenuWidget, _buttonRandomizeCharacter) == 0x02D8);
static_assert(offsetof(UPlasticSurgeryMenuWidget, _buttonNextToFace) == 0x02E0);
static_assert(offsetof(UPlasticSurgeryMenuWidget, _sliderFaceType) == 0x02E8);
static_assert(offsetof(UPlasticSurgeryMenuWidget, _presetColorPickerEyeColor) == 0x02F0);
static_assert(offsetof(UPlasticSurgeryMenuWidget, _sliderIrisType) == 0x02F8);
static_assert(offsetof(UPlasticSurgeryMenuWidget, _buttonBackToCharacter) == 0x0300);
static_assert(offsetof(UPlasticSurgeryMenuWidget, _buttonRandomizeFace) == 0x0308);
static_assert(offsetof(UPlasticSurgeryMenuWidget, _buttonApplyPlasticSurgery) == 0x0310);
static_assert(offsetof(UPlasticSurgeryMenuWidget, _buttonApplyPlasticSurgeryDeluxeCharacters) == 0x0318);
static_assert(offsetof(UPlasticSurgeryMenuWidget, _overlayPlasticSurgeryConfirmation) == 0x0320);
static_assert(offsetof(UPlasticSurgeryMenuWidget, _buttonCancelConfirmation) == 0x0328);
static_assert(offsetof(UPlasticSurgeryMenuWidget, _buttonContinueConfirmation) == 0x0330);
static_assert(offsetof(UPlasticSurgeryMenuWidget, _faceOptionsScrollbox) == 0x0338);
static_assert(offsetof(UPlasticSurgeryMugshot, _imgSelection) == 0x02C8);
static_assert(offsetof(UPlasticSurgeryMugshot, _mugshotGenderSwitcher) == 0x02D0);
static_assert(offsetof(UPlasticSurgeryMugshot, _maleMugshotSwitcher) == 0x02D8);
static_assert(offsetof(UPlasticSurgeryMugshot, _femaleMugshotSwitcher) == 0x02E0);
static_assert(offsetof(UPlayEffectsWhenParticleCollides, ImpactEffects) == 0x0028);
static_assert(offsetof(APlayerDrone, _firstPersonCameraComponent) == 0x0948);
static_assert(offsetof(APlayerDrone, _thirdPersonCameraComponent) == 0x0950);
static_assert(offsetof(APlayerDrone, _springArmComponent) == 0x0958);
static_assert(offsetof(APlayerDrone, _itemDragComponent) == 0x0960);
static_assert(offsetof(APlayerDrone, _nightVisionMaterial) == 0x0968);
static_assert(offsetof(APlayerDrone, _itemPlacingMaterialAllowed) == 0x0978);
static_assert(offsetof(APlayerDrone, _itemPlacingMaterialDisallowed) == 0x0980);
static_assert(offsetof(APlayerDrone, _colorTintWhenInvisible) == 0x0988);
static_assert(offsetof(APlayerDrone, _colorTintWhenHidden) == 0x0998);
static_assert(offsetof(APlayerDrone, _progressWidget) == 0x0B08);
static_assert(offsetof(APlayerDrone, _currentlyDroppingItem) == 0x0B14);
static_assert(offsetof(APlayerDrone, _doorUpgradeWidget) == 0x0B40);
static_assert(offsetof(APlayerDrone, _droneVisibility) == 0x0B48);
static_assert(offsetof(UPlayerManagementMenu, _buttonBack) == 0x0268);
static_assert(offsetof(UPlayerManagementMenu, _buttonApply) == 0x0270);
static_assert(offsetof(UPossibleCookingIngredientWidget, _mainSwitcher) == 0x0268);
static_assert(offsetof(UPossibleCookingIngredientWidget, _nonEmptyPage) == 0x0270);
static_assert(offsetof(UPossibleCookingIngredientWidget, _ingredientIcon) == 0x0278);
static_assert(offsetof(UPossibleCookingIngredientWidget, _emptyPage) == 0x0280);
static_assert(offsetof(UPossibleCookingIngredientWidget, _cookingTextTooltipClass) == 0x0290);
static_assert(offsetof(FPowerCableMeshInfo, Mesh) == 0x0000);
static_assert(offsetof(UPowerCableMeshSet, Meshes) == 0x0030);
static_assert(offsetof(FPowerNodeConnector, SocketName) == 0x0000);
static_assert(offsetof(FPowerNodeConnector, CableMeshComponent) == 0x0018);
static_assert(offsetof(APowerNode, _root) == 0x0220);
static_assert(offsetof(APowerNode, _mesh) == 0x0228);
static_assert(offsetof(APowerNode, _cableMeshSet) == 0x0230);
static_assert(offsetof(APowerNode, _connectors) == 0x0240);
static_assert(offsetof(APowerNode, _connectionTarget) == 0x0250);
static_assert(offsetof(APracticeLockpickingItem, _possibleLocks) == 0x09A8);
static_assert(offsetof(UPresetColorPickerButton, _displaySwitcher) == 0x02C0);
static_assert(offsetof(UPresetColorPickerButton, _coloredPreviewUnhovered) == 0x02C8);
static_assert(offsetof(UPresetColorPickerButton, _coloredPreviewHovered) == 0x02D0);
static_assert(offsetof(UPresetColorPickerButton, _variableOpacityBorder) == 0x02D8);
static_assert(offsetof(UPresetColorPicker, _container) == 0x0280);
static_assert(offsetof(UPresetColorPicker, _name) == 0x0288);
static_assert(offsetof(UPresetColorPicker, _focusBackground) == 0x0290);
static_assert(offsetof(UPresetColorPicker, _mainLabel) == 0x0298);
static_assert(offsetof(UPresetColorPicker, _defaultFont) == 0x02B0);
static_assert(offsetof(UPresetColorPicker, _buttonClass) == 0x0308);
static_assert(offsetof(UPresetColorPicker, _buttonPadding) == 0x0310);
static_assert(offsetof(UPresetColorPicker, _palette) == 0x0320);
static_assert(offsetof(UPreviewAnimationComponent, _animationsPerTag) == 0x00B0);
static_assert(offsetof(UPreviousNextSwitchWidget, PreviousButton) == 0x0278);
static_assert(offsetof(UPreviousNextSwitchWidget, NextButton) == 0x0280);
static_assert(offsetof(UPrimaryButton, _button) == 0x0290);
static_assert(offsetof(UPrimaryButton, _icon) == 0x0298);
static_assert(offsetof(UPrimaryButton, _buttonStyle) == 0x02A8);
static_assert(offsetof(UPrimaryButton, _buttonType) == 0x0520);
static_assert(offsetof(UPrisonerActionCheckItemFuelStatusDescription, CharacterMontage) == 0x0040);
static_assert(offsetof(UPrisonerActionCheckItemFuelStatusDescription, ItemMontage) == 0x0048);
static_assert(offsetof(UPrisonerActionCutObjectDescription, ActorToCut) == 0x0038);
static_assert(offsetof(UPrisonerActionCutObjectDescription, MeshComponent) == 0x0040);
static_assert(offsetof(UPrisonerActionDecontaminateWithReplenishableResourceDescription, ProxyForReplenishableResource) == 0x0080);
static_assert(offsetof(UPrisonerActionDrinkFromReplenishableResourceDescription, ProxyForReplenishableResource) == 0x0078);
static_assert(offsetof(UPrisonerActionDrinkInteractionDescription, ResourceType) == 0x0038);
static_assert(offsetof(UPrisonerActionEatItem, _startEatingAudioEvent) == 0x0120);
static_assert(offsetof(UPrisonerActionEatItem, _stopEatingAudioEvent) == 0x0128);
static_assert(offsetof(UPrisonerActionEatItem, _itemClass) == 0x0130);
static_assert(offsetof(UPrisonerActionExecuteBodyConditionInteractionDescription, BeginInteractionPatientAudioEvent) == 0x0078);
static_assert(offsetof(UPrisonerActionExecuteBodyConditionInteractionDescription, EndInteractionPatientAudioEvent) == 0x0080);
static_assert(offsetof(UPrisonerActionFillGameResourceContainerDescription, _sourceContainerObj) == 0x0080);
static_assert(offsetof(UPrisonerActionFillGameResourceContainerDescription, _destinationContainerObj) == 0x0088);
static_assert(offsetof(UPrisonerActionFillGameResourceContainerWithReplenishableResourceDescription, ProxyForReplenishableResource) == 0x00A0);
static_assert(offsetof(UPrisonerActionFillGameResourceContainerWithInfiniteResourceDescription, RequiredItemTagsForFilling) == 0x00D8);
static_assert(offsetof(UPrisonerActionFillGameResourceContainerWithInfiniteResourceDescription, ProxyForInfiniteResource) == 0x00E8);
static_assert(offsetof(UPrisonerActionLoadAmmoIntoMagazine, _itemActionSequence) == 0x0128);
static_assert(offsetof(UPrisonerActionMinigameDescription, MinigameConfiguration) == 0x0038);
static_assert(offsetof(UPrisonerActionTuneBow, _tuneBowAudioEvent) == 0x0120);
static_assert(offsetof(UPrisonerActionWashEyesWithReplenishableResourceDescription, ResourceProxy) == 0x0060);
static_assert(offsetof(UPrisonerActionWashEyesWithInfiniteResourceDescription, ResourceType) == 0x0050);
static_assert(offsetof(UPrisonerActionWashEyesWithInfiniteResourceDescription, RequiredItemTagsForFilling) == 0x0098);
static_assert(offsetof(UPrisonerActionWashEyesWithInfiniteResourceDescription, ResourceProxy) == 0x00A8);
static_assert(offsetof(UPrisonerActionWashWithReplenishableResourceDescription, ProxyForReplenishableResource) == 0x0088);
static_assert(offsetof(UPrisonerAnimInstance, _prisoner) == 0x03D0);
static_assert(offsetof(UPrisonerAnimInstance, _supportingHandIKLocation) == 0x0474);
static_assert(offsetof(UPrisonerAnimInstance, _meleeSkill_PrimaryIdleAnimationTP) == 0x0488);
static_assert(offsetof(UPrisonerAnimInstance, _meleeSkill_PrimaryIdleAnimationFP) == 0x0490);
static_assert(offsetof(UPrisonerAnimInstance, _meleeSkill_TiredIdleAnimationTP) == 0x0498);
static_assert(offsetof(UPrisonerAnimInstance, _meleeSkill_TiredIdleAnimationFP) == 0x04A0);
static_assert(offsetof(UPrisonerAnimInstance, _meleeSkill_WalkingIdleAnimationTP) == 0x04A8);
static_assert(offsetof(UPrisonerAnimInstance, _meleeSkill_WalkingIdleAnimationFP) == 0x04B0);
static_assert(offsetof(UPrisonerAnimInstance, _meleeSkill_BlockIdleAnimationTP) == 0x04B8);
static_assert(offsetof(UPrisonerAnimInstance, _meleeSkill_BlockIdleAnimationFP) == 0x04C0);
static_assert(offsetof(UPrisonerAnimInstance, _meleeSkill_AimOffsetBlendSpaceTP) == 0x04C8);
static_assert(offsetof(UPrisonerAnimInstance, _meleeSkill_AimOffsetBlendSpaceFP) == 0x04D0);
static_assert(offsetof(UPrisonerAnimInstance, _aimingDownTheSightsLocationOffset) == 0x05B0);
static_assert(offsetof(UPrisonerAnimInstance, _scopeViewArmDislocationOffset) == 0x05BC);
static_assert(offsetof(UPrisonerAnimInstance, _armsLagRotation) == 0x05C8);
static_assert(offsetof(UPrisonerAnimInstance, _stance) == 0x05DC);
static_assert(offsetof(UPrisonerAnimInstance, _aimOffset) == 0x05EC);
static_assert(offsetof(UPrisonerAnimInstance, _lookAtMeleeTargetAimOffset) == 0x0600);
static_assert(offsetof(UPrisonerAnimInstance, _animationSet) == 0x060C);
static_assert(offsetof(UPrisonerAnimInstance, _acceleration) == 0x0614);
static_assert(offsetof(UPrisonerAnimInstance, _velocity) == 0x0628);
static_assert(offsetof(UPrisonerAnimInstance, _handL) == 0x0640);
static_assert(offsetof(UPrisonerAnimInstance, _handR) == 0x0670);
static_assert(offsetof(UPrisonerAnimInstance, _lowerArmL) == 0x06A0);
static_assert(offsetof(UPrisonerAnimInstance, _lowerArmR) == 0x06D0);
static_assert(offsetof(UPrisonerAnimInstance, _desiredMovementPace) == 0x079C);
static_assert(offsetof(UPrisonerAnimInstance, _clampedDesiredMovementPace) == 0x079D);
static_assert(offsetof(UPrisonerAnimInstance, _movementPaceBeforeGroundStart) == 0x079E);
static_assert(offsetof(UPrisonerAnimInstance, _movementDirectionBeforeGroundStop) == 0x07A8);
static_assert(offsetof(UPrisonerAnimInstance, _movementPaceBeforeGroundStop) == 0x07A9);
static_assert(offsetof(UPrisonerAnimInstance, _animationSetBeforeGroundStop) == 0x07AA);
static_assert(offsetof(UPrisonerAnimInstance, _hitReactState) == 0x07AC);
static_assert(offsetof(UPrisonerAnimInstance, _animationSetBeforeJump) == 0x07D6);
static_assert(offsetof(UPrisonerAnimInstance, _meshOffsetWhenInWater) == 0x07DC);
static_assert(offsetof(UPrisonerAnimInstance, _climbAnchoringAnimation) == 0x08C0);
static_assert(offsetof(UPrisonerAnimInstance, _ladderClimbingRootBoneOffset) == 0x08D0);
static_assert(offsetof(UPrisonerAnimInstance, _windowClimbingAnchoringAnimation) == 0x08F0);
static_assert(offsetof(UPrisonerAnimInstance, _weaponType) == 0x08FC);
static_assert(offsetof(UPrisonerAnimInstance, _itemFirstPersonUpperBodyStandIdle) == 0x0C28);
static_assert(offsetof(UPrisonerAnimInstance, _itemFirstPersonUpperBodyStandWalk) == 0x0C30);
static_assert(offsetof(UPrisonerAnimInstance, _itemFirstPersonUpperBodyStandWalkLimping) == 0x0C38);
static_assert(offsetof(UPrisonerAnimInstance, _itemFirstPersonUpperBodyStandJog) == 0x0C40);
static_assert(offsetof(UPrisonerAnimInstance, _itemFirstPersonUpperBodyStandJogLimping) == 0x0C48);
static_assert(offsetof(UPrisonerAnimInstance, _itemFirstPersonUpperBodyStandRun) == 0x0C50);
static_assert(offsetof(UPrisonerAnimInstance, _itemFirstPersonUpperBodyCrouchIdle) == 0x0C58);
static_assert(offsetof(UPrisonerAnimInstance, _itemFirstPersonUpperBodyCrouchWalk) == 0x0C60);
static_assert(offsetof(UPrisonerAnimInstance, _itemFirstPersonUpperBodyCrouchWalkLimping) == 0x0C68);
static_assert(offsetof(UPrisonerAnimInstance, _itemFirstPersonUpperBodyProneIdle) == 0x0C70);
static_assert(offsetof(UPrisonerAnimInstance, _weaponAimingHipFirstPersonUpperBodyStandIdle) == 0x0C78);
static_assert(offsetof(UPrisonerAnimInstance, _weaponAimingHipFirstPersonUpperBodyStandWalk) == 0x0C80);
static_assert(offsetof(UPrisonerAnimInstance, _weaponAimingHipFirstPersonUpperBodyStandWalkLimping) == 0x0C88);
static_assert(offsetof(UPrisonerAnimInstance, _weaponAimingHipFirstPersonUpperBodyStandJog) == 0x0C90);
static_assert(offsetof(UPrisonerAnimInstance, _weaponAimingHipFirstPersonUpperBodyStandJogLimping) == 0x0C98);
static_assert(offsetof(UPrisonerAnimInstance, _weaponAimingHipFirstPersonUpperBodyStandRun) == 0x0CA0);
static_assert(offsetof(UPrisonerAnimInstance, _weaponAimingHipFirstPersonUpperBodyCrouchIdle) == 0x0CA8);
static_assert(offsetof(UPrisonerAnimInstance, _weaponAimingHipFirstPersonUpperBodyCrouchWalk) == 0x0CB0);
static_assert(offsetof(UPrisonerAnimInstance, _weaponAimingHipFirstPersonUpperBodyCrouchWalkLimping) == 0x0CB8);
static_assert(offsetof(UPrisonerAnimInstance, _weaponAimingHipFirstPersonUpperBodyProneIdle) == 0x0CC0);
static_assert(offsetof(UPrisonerAnimInstance, _itemFirstPersonAimOffsetStanding) == 0x0CD0);
static_assert(offsetof(UPrisonerAnimInstance, _itemFirstPersonAimOffsetCrouching) == 0x0CD8);
static_assert(offsetof(UPrisonerAnimInstance, _itemFirstPersonAimOffsetProne) == 0x0CE0);
static_assert(offsetof(UPrisonerAnimInstance, _rightHandCorrectionPoseStanding) == 0x0CE8);
static_assert(offsetof(UPrisonerAnimInstance, _rightHandCorrectionPoseCrouching) == 0x0CF0);
static_assert(offsetof(UPrisonerAnimInstance, _rightHandCorrectionPoseProne) == 0x0CF8);
static_assert(offsetof(UPrisonerAnimInstance, _rightFistCorrectionPoseStanding) == 0x0D00);
static_assert(offsetof(UPrisonerAnimInstance, _rightFistCorrectionPoseStandingInCombatMode) == 0x0D08);
static_assert(offsetof(UPrisonerAnimInstance, _rightFistCorrectionPoseCrouching) == 0x0D10);
static_assert(offsetof(UPrisonerAnimInstance, _rightFistCorrectionPoseProne) == 0x0D18);
static_assert(offsetof(UPrisonerAnimInstance, _leftHandCorrectionPoseStanding) == 0x0D28);
static_assert(offsetof(UPrisonerAnimInstance, _leftHandCorrectionPoseCrouching) == 0x0D30);
static_assert(offsetof(UPrisonerAnimInstance, _leftHandCorrectionPoseProne) == 0x0D38);
static_assert(offsetof(UPrisonerAnimInstance, _leftFistCorrectionPoseStanding) == 0x0D40);
static_assert(offsetof(UPrisonerAnimInstance, _leftFistCorrectionPoseStandingInCombatMode) == 0x0D48);
static_assert(offsetof(UPrisonerAnimInstance, _leftFistCorrectionPoseCrouching) == 0x0D50);
static_assert(offsetof(UPrisonerAnimInstance, _leftFistCorrectionPoseProne) == 0x0D58);
static_assert(offsetof(UPrisonerAnimInstance, _itemInHandsLeftHandLocationInRightHandSpace) == 0x0D74);
static_assert(offsetof(UPrisonerAnimInstance, _itemInHandsLeftHandRotationInRightHandSpace) == 0x0D80);
static_assert(offsetof(UPrisonerAnimInstance, _itemInHandsLeftObstructedIdleFP) == 0x0DA0);
static_assert(offsetof(UPrisonerAnimInstance, _itemInHandsRightObstructedIdleFP) == 0x0DA8);
static_assert(offsetof(UPrisonerAnimInstance, _itemInHandsObstructedIdleTP) == 0x0DB0);
static_assert(offsetof(UPrisonerAnimInstance, _itemInHandsObstructedIdleProneTP) == 0x0DB8);
static_assert(offsetof(UPrisonerAnimInstance, _combatMode) == 0x0DC0);
static_assert(offsetof(UPrisonerAnimInstance, _prisonerMontageBlendType) == 0x0DC5);
static_assert(offsetof(UPrisonerAnimInstance, _playingInstrumentIdleAnimation) == 0x0EA8);
static_assert(offsetof(UPrisonerAnimInstance, _playingInstrumentPlayAnimation) == 0x0EB0);
static_assert(offsetof(UPrisonerAnimInstance, _playingInstrumentState) == 0x0EB8);
static_assert(offsetof(UPrisonerAnimInstance, _carryingItemIdleFPAnimation) == 0x0EC0);
static_assert(offsetof(UPrisonerAnimInstance, _carryingItemIdleTPAnimation) == 0x0EC8);
static_assert(offsetof(UPrisonerAnimInstance, _carryingItemState) == 0x0ED0);
static_assert(offsetof(UPrisonerAnimInstance, _mountedAnimation) == 0x0ED8);
static_assert(offsetof(UPrisonerAnimInstance, _vehicleDriverForwardIdleAnimation) == 0x0EE8);
static_assert(offsetof(UPrisonerAnimInstance, _vehicleDriverForwardSteeringAnimation) == 0x0EF0);
static_assert(offsetof(UPrisonerAnimInstance, _vehicleDriverForwardSteeringAnimationFP) == 0x0EF8);
static_assert(offsetof(UPrisonerAnimInstance, _vehicleDriverReverseIdleAnimation) == 0x0F00);
static_assert(offsetof(UPrisonerAnimInstance, _vehicleDriverReverseSteeringAnimation) == 0x0F08);
static_assert(offsetof(UPrisonerAnimInstance, _vehicleDriverReverseSteeringAnimationFP) == 0x0F10);
static_assert(offsetof(UPrisonerAnimInstance, _vehiclePassengerIdleAnimation) == 0x0F18);
static_assert(offsetof(UPrisonerAnimInstance, _bowArmsShakeAnimation) == 0x0F40);
static_assert(offsetof(UPrisonerAnimInstance, _handsBoundIdleFPAnimation) == 0x0F58);
static_assert(offsetof(UPrisonerAnimInstance, _handsBoundIdleTPAnimation) == 0x0F60);
static_assert(offsetof(UPrisonerAnimInstance, _restingAnimation) == 0x0F70);
static_assert(offsetof(UPrisonerAnimInstance, _vehicleWeaponAimingStance) == 0x0F84);
static_assert(offsetof(UPrisonerAnimInstance, _vehicleWAPLocationOffsetDefaultStanceFP) == 0x0F88);
static_assert(offsetof(UPrisonerAnimInstance, _vehicleWAPLocationOffsetLeaningStanceFP) == 0x0F94);
static_assert(offsetof(UPrisonerAnimInstance, _vehicleWAPAimOffsetTP) == 0x0FA8);
static_assert(offsetof(UPrisonerAnimInstance, _vehicleWAPAimOffsetDefaultStanceTP) == 0x0FB8);
static_assert(offsetof(UPrisonerAnimInstance, _vehicleWAPAimOffsetLeaningStanceTP) == 0x0FC8);
static_assert(offsetof(UPrisonerAnimInstance, _vehicleWAPUpperBodyIdleRelaxedTP) == 0x0FD8);
static_assert(offsetof(UPrisonerAnimInstance, _vehicleWAPUpperBodyIdleAimingTP) == 0x0FE0);
static_assert(offsetof(UPrisonerAnimInstance, _vehicleWAPLowerBodyIdleRelaxedTP) == 0x0FF0);
static_assert(offsetof(UPrisonerAnimInstance, _vehicleWAPLowerBodyIdleAimingTP) == 0x0FF8);
static_assert(offsetof(UPrisonerAnimInstance, _vehicleWAPLowerBodyIdleRelaxedDefaultTP) == 0x1000);
static_assert(offsetof(UPrisonerAnimInstance, _vehicleWAPLowerBodyIdleAimingDefaultTP) == 0x1008);
static_assert(offsetof(UPrisonerAnimInstance, _vehicleWAPLowerBodyIdleRelaxedLeaningTP) == 0x1010);
static_assert(offsetof(UPrisonerAnimInstance, _vehicleWAPLowerBodyIdleAimingLeaningTP) == 0x1018);
static_assert(offsetof(UPrisonerAnimInstance, _weaponAimingDownTheSightsZeroRangeBlendSpace) == 0x1028);
static_assert(offsetof(UPrisonerAnimInstance, _grappledWallOffsetVector) == 0x1040);
static_assert(offsetof(UPrisonerAnimInstance_Aerial, _upcomingPose) == 0x02B8);
static_assert(offsetof(UPrisonerAnimInstance_Aerial, _previousPose) == 0x02B9);
static_assert(offsetof(UPrisonerAnimInstance_Aerial, _blendAnimationOverride) == 0x02C0);
static_assert(offsetof(UPrisonerAnimInstance_Aerial, _fallingControl) == 0x02D0);
static_assert(offsetof(UPrisonerAnimInstance_Aerial, _handsBoundIdleFPAnimation) == 0x02E8);
static_assert(offsetof(UPrisonerAnimInstance_Aerial, _handsBoundIdleTPAnimation) == 0x02F0);
static_assert(offsetof(UPrisonerAnimInstance_Aerial, _movementPaceBeforeJump) == 0x0301);
static_assert(offsetof(UPrisonerAnimInstance_Airplane, _throttleTransform) == 0x02D0);
static_assert(offsetof(UPrisonerAnimInstance_Airplane, _leftPedalTransform) == 0x0300);
static_assert(offsetof(UPrisonerAnimInstance_Airplane, _rightPedalTransform) == 0x0330);
static_assert(offsetof(UPrisonerAnimInstance_Airplane, _stickTransform) == 0x0360);
static_assert(offsetof(UPrisonerAnimInstance_Airplane, _driverIdleAnimation) == 0x0390);
static_assert(offsetof(UPrisonerAnimInstance_Airplane, _passengerIdleAnimation) == 0x0398);
static_assert(offsetof(UPrisonerAnimInstance_Bike, _driverIdleAnimation) == 0x02E8);
static_assert(offsetof(UPrisonerAnimInstance_Bike, _driverReverseIdleAnimation) == 0x02F0);
static_assert(offsetof(UPrisonerAnimInstance_Bike, _driverLHandleTransform) == 0x0300);
static_assert(offsetof(UPrisonerAnimInstance_Bike, _driverRHandleTransform) == 0x0330);
static_assert(offsetof(UPrisonerAnimInstance_Bike, _driverReverseSeatHandTransform) == 0x0360);
static_assert(offsetof(UPrisonerAnimInstance_Bike, _driverLFootRestTransform) == 0x0390);
static_assert(offsetof(UPrisonerAnimInstance_Bike, _driverRFootRestTransform) == 0x03C0);
static_assert(offsetof(UPrisonerAnimInstance_Bike, _passengerIdleAnimation) == 0x03F0);
static_assert(offsetof(UPrisonerAnimInstance_Bike, _vehicleWAPLowerBodyIdleAimingTP) == 0x0400);
static_assert(offsetof(UPrisonerAnimInstance_Bike, _vehicleWAPLowerBodyIdleRelaxedTP) == 0x0408);
static_assert(offsetof(UPrisonerAnimInstance_Bike, _startEngineStartAnimation) == 0x0410);
static_assert(offsetof(UPrisonerAnimInstance_Bike, _startEngineLoopAnimation) == 0x0418);
static_assert(offsetof(UPrisonerAnimInstance_Bike, _startEngineLongLoopAnimation) == 0x0420);
static_assert(offsetof(UPrisonerAnimInstance_Bike, _startEngineEndAnimation) == 0x0428);
static_assert(offsetof(UPrisonerAnimInstance_Bike, _standUpStartAnimation) == 0x0430);
static_assert(offsetof(UPrisonerAnimInstance_Bike, _standUpLoopAnimation) == 0x0438);
static_assert(offsetof(UPrisonerAnimInstance_Bike, _standUpEndAnimation) == 0x0440);
static_assert(offsetof(UPrisonerAnimInstance_Bike, _turnAimOffset) == 0x0450);
static_assert(offsetof(UPrisonerAnimInstance_Boat, _vehicleDriverForwardIdleAnimation) == 0x02E8);
static_assert(offsetof(UPrisonerAnimInstance_Boat, _vehiclePassengerIdleAnimation) == 0x02F0);
static_assert(offsetof(UPrisonerAnimInstance_Boat, _boatDriverPaddleLAnimation) == 0x02F8);
static_assert(offsetof(UPrisonerAnimInstance_Boat, _boatDriverPaddleRAnimation) == 0x0300);
static_assert(offsetof(UPrisonerAnimInstance_Boat, _boatDriverPaddleLToRAnimation) == 0x0308);
static_assert(offsetof(UPrisonerAnimInstance_Boat, _boatDriverPaddleRToLAnimation) == 0x0310);
static_assert(offsetof(UPrisonerAnimInstance_Boat, _motorHandleSocketTransform) == 0x0320);
static_assert(offsetof(UPrisonerAnimInstance_Boat, _sailsHandleSocketTransform) == 0x0350);
static_assert(offsetof(UPrisonerAnimInstance_Boat, _rudderSocketTransform) == 0x0380);
static_assert(offsetof(UPrisonerAnimInstance_Boat, _movementPace) == 0x03B8);
static_assert(offsetof(UPrisonerAnimInstance_Boat, _engineState) == 0x03C4);
static_assert(offsetof(UPrisonerAnimInstance_Boat, _vehicleWAPLowerBodyIdleAimingTP) == 0x03C8);
static_assert(offsetof(UPrisonerAnimInstance_Boat, _vehicleWAPLowerBodyIdleRelaxedTP) == 0x03D0);
static_assert(offsetof(UPrisonerAnimInstance_Boat, _startEngineStartAnimation) == 0x03E0);
static_assert(offsetof(UPrisonerAnimInstance_Boat, _startEngineLoopAnimation) == 0x03E8);
static_assert(offsetof(UPrisonerAnimInstance_Boat, _startEngineLongLoopAnimation) == 0x03F0);
static_assert(offsetof(UPrisonerAnimInstance_Boat, _startEngineEndAnimation) == 0x03F8);
static_assert(offsetof(UPrisonerAnimInstance_FemaleCorrections, _correctionsDisabledCurveName) == 0x02B8);
static_assert(offsetof(UPrisonerAnimInstance_Fishing, _stance) == 0x02C4);
static_assert(offsetof(UPrisonerAnimInstance_Fishing, _armsLagRotation) == 0x02C8);
static_assert(offsetof(UPrisonerAnimInstance_Grappled, _idleAnimation) == 0x02B8);
static_assert(offsetof(UPrisonerAnimInstance_Parachute, _defaultOpeningAnimation) == 0x02B8);
static_assert(offsetof(UPrisonerAnimInstance_Parachute, _openingAnimation) == 0x02C0);
static_assert(offsetof(UPrisonerAnimInstance_PrisonerCreation, _gender) == 0x02B8);
static_assert(offsetof(UPrisonerAnimInstance_PrisonerCreation, _femaleCloseUpIdle) == 0x02C0);
static_assert(offsetof(UPrisonerAnimInstance_PrisonerCreation, _maleCloseUpIdle) == 0x02C8);
static_assert(offsetof(UPrisonerAnimInstance_VehicleBase, _mountedBlendspace) == 0x1058);
static_assert(offsetof(UPrisonerAnimInstance_VehicleBase, _leftHandIKTransform) == 0x1070);
static_assert(offsetof(UPrisonerAnimInstance_VehicleBase, _rightHandIKTransform) == 0x10A0);
static_assert(offsetof(UPrisonerAnimInstance_WheelBarrow, _driverIdleAnimation) == 0x02D0);
static_assert(offsetof(UPrisonerAnimInstance_WheelBarrow, _driverWalkJogAnimation) == 0x02D8);
static_assert(offsetof(UPrisonerAnimInstance_WheelBarrow, _driverWalkJogLimpingAnimation) == 0x02E0);
static_assert(offsetof(UPrisonerAnimInstance_WheelBarrow, _driverLHandGripTransform) == 0x02F0);
static_assert(offsetof(UPrisonerAnimInstance_WheelBarrow, _driverRHandGripTransform) == 0x0320);
static_assert(offsetof(UPrisonerAnimInstance_WheelBarrow, _passengerIdleAnimation) == 0x0378);
static_assert(offsetof(UPrisonerAnimInstance_WheelBarrow, _vehicleWAPLowerBodyIdleAimingTP) == 0x0388);
static_assert(offsetof(UPrisonerAnimInstance_WheelBarrow, _vehicleWAPLowerBodyIdleRelaxedTP) == 0x0390);
static_assert(offsetof(UPrisonerAnimNotify_PlayGearSound, motionIntensity) == 0x0038);
static_assert(offsetof(FVisualParameter, MorphName) == 0x0000);
static_assert(offsetof(FVisualParameter, MaterialParamName) == 0x0008);
static_assert(offsetof(UPrisonerAppearanceComponent, _visualParameterOverrides) == 0x0108);
static_assert(offsetof(UPrisonerAppearanceComponent, _penisLocationDefaultOverride) == 0x011C);
static_assert(offsetof(UPrisonerAppearanceComponent, _penisLocationFatOverride) == 0x0128);
static_assert(offsetof(UPrisonerAppearanceComponent, _penisLocationMuscularOverride) == 0x0134);
static_assert(offsetof(UPrisonerAppearanceComponent, _penisLocationSkinnyOverride) == 0x0140);
static_assert(offsetof(FPrisonerAppearance_HairStyle, GameUpgradeRequired) == 0x0000);
static_assert(offsetof(FPrisonerAppearance_HairStyle, Mesh) == 0x0008);
static_assert(offsetof(UPrisonerAppearanceDataAsset, GameUpgradeRequired) == 0x0030);
static_assert(offsetof(UPrisonerAppearanceDataAsset, CharacterMeshes) == 0x0038);
static_assert(offsetof(UPrisonerAppearanceDataAsset, TypeTag) == 0x0098);
static_assert(offsetof(UPrisonerAppearanceDataAsset, RaceTag) == 0x00A0);
static_assert(offsetof(UPrisonerAppearanceDataAsset, CharacterAkSwitchValue) == 0x00A8);
static_assert(offsetof(UPrisonerAppearanceDataAsset, SkinNormal) == 0x00B0);
static_assert(offsetof(UPrisonerAppearanceDataAsset, FacialHairStyles) == 0x00D8);
static_assert(offsetof(UPrisonerAppearanceDataAsset, BeardStyles) == 0x00E8);
static_assert(offsetof(UPrisonerAppearanceDataAsset, MoustacheStyles) == 0x00F8);
static_assert(offsetof(UPrisonerAppearanceDataAsset, Hairless_SkinColor) == 0x0108);
static_assert(offsetof(UPrisonerAppearanceDataAsset, Hairless_SkinRoughness) == 0x0130);
static_assert(offsetof(UPrisonerAppearanceDataAsset, Hairless_SkinMask) == 0x0158);
static_assert(offsetof(UPrisonerAppearanceDataAsset, Hairy_SkinColor) == 0x0180);
static_assert(offsetof(UPrisonerAppearanceDataAsset, Hairy_SkinRoughness) == 0x01A8);
static_assert(offsetof(UPrisonerAppearanceDataAsset, Hairy_SkinMask) == 0x01D0);
static_assert(offsetof(FPrisonerAppearance_HairColorPreset, PreviewColor) == 0x0000);
static_assert(offsetof(FPrisonerAppearance_HairColorPreset, ColorName) == 0x0010);
static_assert(offsetof(FPrisonerAppearance_HairColorPreset, RootColor) == 0x0018);
static_assert(offsetof(FPrisonerAppearance_HairColorPreset, RootColorOnHead) == 0x0028);
static_assert(offsetof(FPrisonerAppearance_HairColorPreset, TipColor) == 0x0040);
static_assert(offsetof(FPrisonerAppearance_HairColorPreset, FacialHair_RootColor) == 0x005C);
static_assert(offsetof(FPrisonerAppearance_HairColorPreset, FacialHair_TipColor) == 0x0074);
static_assert(offsetof(FPrisonerAppearance_Tattoo, GameUpgradeRequired) == 0x0000);
static_assert(offsetof(FPrisonerAppearance_TattooArray, Tattoos) == 0x0000);
static_assert(offsetof(FPrisonerAppearance_FaceVariation, SkinColor) == 0x0000);
static_assert(offsetof(FPrisonerAppearance_FaceVariation, SkinNormal) == 0x0028);
static_assert(offsetof(FPrisonerAppearance_SkinTone, PreviewColor) == 0x0000);
static_assert(offsetof(FPrisonerAppearance_SkinTone, SkinColorOffset) == 0x0010);
static_assert(offsetof(FPrisonerAppearance_SkinTone, AverageLipColor) == 0x0020);
static_assert(offsetof(FPrisonerAppearance_SkinParams, FaceVariations) == 0x0000);
static_assert(offsetof(FPrisonerAppearance_SkinParams, SkinTones) == 0x0010);
static_assert(offsetof(FPrisonerAppearance_SkinParams, HairColorPresets) == 0x0020);
static_assert(offsetof(FPrisonerAppearance_IrisColor, PreviewColor) == 0x0000);
static_assert(offsetof(FPrisonerAppearance_IrisColor, IrisColor) == 0x0010);
static_assert(offsetof(FPrisonerAppearance_IrisColor, ColorName) == 0x0020);
static_assert(offsetof(FPrisonerAppearance_IrisVariation, IrisHeight) == 0x0000);
static_assert(offsetof(FPrisonerAppearance_IrisVariation, IrisMasks) == 0x0028);
static_assert(offsetof(UPrisonerAppearanceSetDataAsset, HairClass) == 0x0050);
static_assert(offsetof(UPrisonerAppearanceSetDataAsset, MoustacheClass) == 0x0058);
static_assert(offsetof(UPrisonerAppearanceSetDataAsset, BeardClass) == 0x0060);
static_assert(offsetof(UPrisonerAppearanceSetDataAsset, DefinitionMaterialParamVsFatMassRatio) == 0x0068);
static_assert(offsetof(UPrisonerAppearanceSetDataAsset, DefinitionMaterialParamVsMuscleMassRatio) == 0x00F0);
static_assert(offsetof(UPrisonerAppearanceSetDataAsset, _femaleAppearanceData) == 0x0178);
static_assert(offsetof(UPrisonerAppearanceSetDataAsset, _maleAppearanceData) == 0x0188);
static_assert(offsetof(UPrisonerAppearanceSetDataAsset, _maleHairStyles) == 0x0198);
static_assert(offsetof(UPrisonerAppearanceSetDataAsset, _femaleHairStyles) == 0x01A8);
static_assert(offsetof(UPrisonerAppearanceSetDataAsset, _dyedHairColors) == 0x01B8);
static_assert(offsetof(UPrisonerAppearanceSetDataAsset, _tattooArrays) == 0x01C8);
static_assert(offsetof(UPrisonerAppearanceSetDataAsset, _femaleSkinParams) == 0x0218);
static_assert(offsetof(UPrisonerAppearanceSetDataAsset, _maleSkinParams) == 0x0268);
static_assert(offsetof(UPrisonerAppearanceSetDataAsset, _irisColors) == 0x02B8);
static_assert(offsetof(UPrisonerAppearanceSetDataAsset, _irisVariations) == 0x02C8);
static_assert(offsetof(UPrisonerBodyMuscleGroupToBurnInjuryClassMappings, _burnInjuryClasses) == 0x0030);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_Damage, _damageVsSeverity) == 0x0030);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_Damage, _damageRatioVsSeverity) == 0x00B8);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_Damage, _severityRangeToBeLifeThreatening) == 0x0144);
static_assert(offsetof(UPrisonerBodyEffectUIData, _bodyEffectClass) == 0x0030);
static_assert(offsetof(UPrisonerBodyEffectUIData, _associatedSurvivalTipName) == 0x0038);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomUIData, _name) == 0x0048);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomUIData, _description) == 0x0060);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomUIData, _sideEffectsUIData) == 0x0088);
static_assert(offsetof(FPrisonerMaxMovementPaceVsSeverityKey, SeverityRange) == 0x0000);
static_assert(offsetof(FPrisonerMaxMovementPaceVsSeverityKey, MaxMovementPace) == 0x0010);
static_assert(offsetof(FPrisonerMaxMovementPaceVsSeverity, Keys) == 0x0000);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_MaxMovementPace, _maxMovementPaceVsSeverity) == 0x0030);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_AbstractModifier, _modifierVsSeverity) == 0x0030);
static_assert(offsetof(UPrisonerBodyConditionOrSymptom, _uiDataClass) == 0x0058);
static_assert(offsetof(UPrisonerBodyConditionOrSymptom, _severityRangeToBeLifeThreatening) == 0x0064);
static_assert(offsetof(UPrisonerBodyConditionOrSymptom, _sideEffects) == 0x0080);
static_assert(offsetof(UPrisonerBodyCondition, _initialInteractions) == 0x00A0);
static_assert(offsetof(FBandages, _bandages) == 0x0008);
static_assert(offsetof(UPrisonerBodyCondition_Abrasions, _baseAbrasionsRaiseRateVsConstitution) == 0x00C8);
static_assert(offsetof(UPrisonerBodyCondition_Abrasions, _severityVsAbrasions) == 0x00D8);
static_assert(offsetof(UPrisonerBodyCondition_Abrasions, _bandages) == 0x0170);
static_assert(offsetof(UPrisonerBodyCondition_Abrasions, _bandagesProtectionDecreaseNotification) == 0x0188);
static_assert(offsetof(UPrisonerBodyCondition_Abrasions, _stabilizationDurationVsSeverity) == 0x0198);
static_assert(offsetof(UPrisonerBodyCondition_Abrasions, _recoveryDurationVsSeverity) == 0x0228);
static_assert(offsetof(UPrisonerBodyCondition_Abrasions, _bleedingSeverityVsSeverity) == 0x02B0);
static_assert(offsetof(UPrisonerBodyCondition_Abrasions, _bleedingSymptomClass) == 0x0338);
static_assert(offsetof(UPrisonerBodyCondition_Abrasions, _bleedingSymptomCause) == 0x0340);
static_assert(offsetof(UPrisonerBodyCondition_Abrasions, _painGruntAudioEvent) == 0x0350);
static_assert(offsetof(UPrisonerBodyCondition_Abrasions, _painGruntIntervalVsSeverity) == 0x0358);
static_assert(offsetof(UPrisonerBodyCondition_Abrasions, _painSymptomClass) == 0x03E8);
static_assert(offsetof(UPrisonerBodyCondition_Abrasions, _painSymptomCause) == 0x03F0);
static_assert(offsetof(UPrisonerBodyCondition_Abrasions, _painSymptomOverallIntensityVsSeverity) == 0x03F8);
static_assert(offsetof(UPrisonerBodyCondition_Abrasions, _painSymptomLimpingIntensityVsSeverity) == 0x0480);
static_assert(offsetof(UPrisonerBodyCondition_Abrasions, _painSymptomMaxMovementPaceVsSeverity) == 0x0508);
static_assert(offsetof(UPrisonerBodyCondition_Abrasions, _painSymptomMovementSpeedModifierVsSeverity) == 0x0518);
static_assert(offsetof(UPrisonerBodyCondition_Abrasions, _state) == 0x05A0);
static_assert(offsetof(UPrisonerBodyCondition_Abrasions, _infectionClass) == 0x05B8);
static_assert(offsetof(UPrisonerBodyCondition_Abrasions, _infection) == 0x05C0);
static_assert(offsetof(UPrisonerBodyCondition_Abrasions, _contaminationIncreaseRateMultiplierVsSeverity) == 0x05D0);
static_assert(offsetof(UPrisonerBodyCondition_Abrasions, _contaminationIncreaseRateMultiplierVsAsepsis) == 0x0658);
static_assert(offsetof(UPrisonerBodyCondition_AcuteRadiationSyndrome, _severityVsAmountRatio) == 0x00D0);
static_assert(offsetof(UPrisonerBodyCondition_AcuteRadiationSyndrome, _increaseRateVsEffectiveRadiationAmountRatio) == 0x0158);
static_assert(offsetof(UPrisonerBodyCondition_AcuteRadiationSyndrome, _decreaseRateVsSeverity) == 0x01E0);
static_assert(offsetof(UPrisonerBodyCondition_AcuteRadiationSyndrome, _decreaseRateMultiplierVsConstitutionRatio) == 0x0268);
static_assert(offsetof(UPrisonerBodyCondition_AcuteRadiationSyndrome, _randomBleedingIntervalRange) == 0x0270);
static_assert(offsetof(UPrisonerBodyCondition_AcuteRadiationSyndrome, _randomBleedingChanceVsSeverity) == 0x0278);
static_assert(offsetof(UPrisonerBodyCondition_AcuteRadiationSyndrome, _state) == 0x0308);
static_assert(offsetof(UPrisonerBodyCondition_BasicInjury, _severityVsDamageRatio) == 0x00C0);
static_assert(offsetof(UPrisonerBodyCondition_BladderFull, _needToUrinateSymptomClass) == 0x00C8);
static_assert(offsetof(UPrisonerBodyCondition_BladderFull, _needToUrinateSymptomCause) == 0x00D0);
static_assert(offsetof(UPrisonerBodyCondition_BleedingInjury, _selfStabilizationDurationVsSeverity) == 0x00C8);
static_assert(offsetof(UPrisonerBodyCondition_BleedingInjury, _stabilizationDurationVsBloodLossRatio) == 0x0150);
static_assert(offsetof(UPrisonerBodyCondition_BleedingInjury, _destabilizationActionDifficultyRatioVsSeverity) == 0x01D8);
static_assert(offsetof(UPrisonerBodyCondition_BleedingInjury, _destabilizationNotification) == 0x0260);
static_assert(offsetof(UPrisonerBodyCondition_BleedingInjury, _recoveryDurationVsBloodLossRatio) == 0x0270);
static_assert(offsetof(UPrisonerBodyCondition_BleedingInjury, _bleedingSymptomClass) == 0x02F8);
static_assert(offsetof(UPrisonerBodyCondition_BleedingInjury, _bleedingSymptomCause) == 0x0300);
static_assert(offsetof(UPrisonerBodyCondition_BleedingInjury, _painSymptomClass) == 0x0308);
static_assert(offsetof(UPrisonerBodyCondition_BleedingInjury, _painSymptomCause) == 0x0310);
static_assert(offsetof(UPrisonerBodyCondition_BleedingInjury, _painIntensityVsSeverity) == 0x0318);
static_assert(offsetof(UPrisonerBodyCondition_BleedingInjury, _infectionClassMappings) == 0x03A8);
static_assert(offsetof(UPrisonerBodyCondition_BleedingInjury, _infection) == 0x03B0);
static_assert(offsetof(UPrisonerBodyCondition_BleedingInjury, _contaminationIncreaseRateMultiplierVsSeverity) == 0x03C0);
static_assert(offsetof(UPrisonerBodyCondition_BleedingInjury, _contaminationIncreaseRateMultiplierVsAsepsis) == 0x0448);
static_assert(offsetof(UPrisonerBodyCondition_BleedingInjury, _muscleGroup) == 0x04D8);
static_assert(offsetof(UPrisonerBodyCondition_BleedingInjury, _bandages) == 0x0500);
static_assert(offsetof(UPrisonerBodyCondition_BleedingInjury, _state) == 0x051C);
static_assert(offsetof(UPrisonerBodyCondition_BurnInjury, _severityVsDamageRatio) == 0x00D0);
static_assert(offsetof(UPrisonerBodyCondition_BurnInjury, _untreatedDurationVsSeverity) == 0x0158);
static_assert(offsetof(UPrisonerBodyCondition_BurnInjury, _stabilizationDurationVsSeverity) == 0x01E0);
static_assert(offsetof(UPrisonerBodyCondition_BurnInjury, _recoveryDurationVsSeverity) == 0x0268);
static_assert(offsetof(UPrisonerBodyCondition_BurnInjury, _stabilizationDurationReductionVsGelRatio) == 0x02F0);
static_assert(offsetof(UPrisonerBodyCondition_BurnInjury, _recoveryDurationReductionVsGelRatio) == 0x0378);
static_assert(offsetof(UPrisonerBodyCondition_BurnInjury, _painSymptomClass) == 0x0400);
static_assert(offsetof(UPrisonerBodyCondition_BurnInjury, _painSymptomCause) == 0x0408);
static_assert(offsetof(UPrisonerBodyCondition_BurnInjury, _painIntensityVsSeverity) == 0x0410);
static_assert(offsetof(UPrisonerBodyCondition_BurnInjury, _infectionClassMappings) == 0x04A0);
static_assert(offsetof(UPrisonerBodyCondition_BurnInjury, _infection) == 0x04A8);
static_assert(offsetof(UPrisonerBodyCondition_BurnInjury, _contaminationIncreaseRateMultiplierVsSeverity) == 0x04B8);
static_assert(offsetof(UPrisonerBodyCondition_BurnInjury, _contaminationIncreaseRateMultiplierVsAsepsis) == 0x0540);
static_assert(offsetof(UPrisonerBodyCondition_BurnInjury, _muscleGroup) == 0x05D0);
static_assert(offsetof(UPrisonerBodyCondition_BurnInjury, _bandages) == 0x05E8);
static_assert(offsetof(UPrisonerBodyCondition_BurnInjury, _state) == 0x0608);
static_assert(offsetof(UPrisonerBodyCondition_ColonFull, _needToDefecateSymptomClass) == 0x00C8);
static_assert(offsetof(UPrisonerBodyCondition_ColonFull, _needToDefecateSymptomCause) == 0x00D0);
static_assert(offsetof(UPrisonerBodyCondition_ColonFull, _fartingSymptomClass) == 0x00E0);
static_assert(offsetof(UPrisonerBodyCondition_ColonFull, _fartingSymptomCause) == 0x00E8);
static_assert(offsetof(UPrisonerBodyCondition_Drunkenness, _severityVsAbsorbedAlcoholRatio) == 0x00C0);
static_assert(offsetof(UPrisonerBodyCondition_Drunkenness, _state) == 0x014C);
static_assert(offsetof(UPrisonerBodyCondition_Drunkenness, _vomitProbabilityVsSeverity) == 0x0168);
static_assert(offsetof(UPrisonerBodyCondition_EnergyDeficiency, _severityVsEnergyDeficiencyRatio) == 0x00C0);
static_assert(offsetof(UPrisonerBodyCondition_Exhaustion, _state) == 0x00C0);
static_assert(offsetof(UPrisonerBodyCondition_Exhaustion, _severityVsExhaustion) == 0x00D0);
static_assert(offsetof(UPrisonerBodyCondition_FoodDisgust, _disgustAmountChangeMultiplierVsConstitution) == 0x00C0);
static_assert(offsetof(UPrisonerBodyCondition_FoodDisgust, _disgustAmountDecreaseRateVsConstitution) == 0x00C8);
static_assert(offsetof(UPrisonerBodyCondition_FoodDisgust, _firstDisgustWarning) == 0x00D8);
static_assert(offsetof(UPrisonerBodyCondition_FoodDisgust, _secondDisgustWarning) == 0x00E8);
static_assert(offsetof(UPrisonerBodyCondition_FoodDisgust, _nauseaSymptomClass) == 0x0128);
static_assert(offsetof(FPrisonerBodyBoneGroupsVsSeverityKey, SeverityRange) == 0x0000);
static_assert(offsetof(FPrisonerBodyBoneGroupsVsSeverity, Keys) == 0x0000);
static_assert(offsetof(FPrisonerBodyMuscleGroupsVsSeverityKey, SeverityRange) == 0x0000);
static_assert(offsetof(FPrisonerBodyMuscleGroupsVsSeverity, Keys) == 0x0000);
static_assert(offsetof(FPrisonerBodyOrganGroupsVsSeverityKey, SeverityRange) == 0x0000);
static_assert(offsetof(FPrisonerBodyOrganGroupsVsSeverity, Keys) == 0x0000);
static_assert(offsetof(UPrisonerBodyCondition_ForeignSubstancePoisoning, _severityVsForeignSubstanceAmountRatio) == 0x00C0);
static_assert(offsetof(UPrisonerBodyCondition_ForeignSubstancePoisoning, _state) == 0x0150);
static_assert(offsetof(UPrisonerBodyCondition_ForeignSubstancePoisoning, _affectedBodyBoneGroupsVsSeverity) == 0x0158);
static_assert(offsetof(UPrisonerBodyCondition_ForeignSubstancePoisoning, _affectedBodyMuscleGroupsVsSeverity) == 0x0168);
static_assert(offsetof(UPrisonerBodyCondition_ForeignSubstancePoisoning, _affectedBodyOrganGroupsVsSeverity) == 0x0178);
static_assert(offsetof(UPrisonerBodyCondition_ForeignSubstancePoisoning, _foreignSubstanceClass) == 0x0188);
static_assert(offsetof(UPrisonerBodyCondition_HealthLow, _colorSaturationEffectIntensityVsEffectsIntensity) == 0x00C8);
static_assert(offsetof(UPrisonerBodyCondition_HeavyInjuries, _injuriesDamageRatioToExistVsConstitution) == 0x00C0);
static_assert(offsetof(UPrisonerBodyCondition_HeavyInjuries, _painSymptomClass) == 0x00D0);
static_assert(offsetof(UPrisonerBodyCondition_HeavyInjuries, _painSymptomCause) == 0x00D8);
static_assert(offsetof(UPrisonerBodyCondition_Hyperthermia, _state) == 0x00E8);
static_assert(offsetof(UPrisonerBodyCondition_Hypothermia, _state) == 0x00EC);
static_assert(offsetof(UPrisonerBodyCondition_Infection, _sepsisClass) == 0x00D0);
static_assert(offsetof(UPrisonerBodyCondition_Infection, _sepsisCause) == 0x00D8);
static_assert(offsetof(UPrisonerBodyCondition_Infection, _infectedNotification) == 0x00E0);
static_assert(offsetof(UPrisonerBodyCondition_Infection, _state) == 0x011C);
static_assert(offsetof(UPrisonerBodyCondition_InhalationPoisoning, _severityVsInhalableSubstanceAmountRatio) == 0x00C0);
static_assert(offsetof(UPrisonerBodyCondition_InhalationPoisoning, _state) == 0x014C);
static_assert(offsetof(UPrisonerBodyCondition_InhalationPoisoning, _inhalableSubstanceMaxAmountVsConstitutionRatio) == 0x0158);
static_assert(offsetof(UPrisonerBodyCondition_InhalationPoisoning, _affectedBodyBoneGroupsVsSeverity) == 0x01E8);
static_assert(offsetof(UPrisonerBodyCondition_InhalationPoisoning, _affectedBodyMuscleGroupsVsSeverity) == 0x01F8);
static_assert(offsetof(UPrisonerBodyCondition_InhalationPoisoning, _affectedBodyOrganGroupsVsSeverity) == 0x0208);
static_assert(offsetof(UPrisonerBodyConditionUIData_InhalationPoisoning, _substanceName) == 0x01B8);
static_assert(offsetof(UPrisonerBodyCondition_KillBoxGasPoisoning, _state) == 0x00E4);
static_assert(offsetof(UPrisonerBodyCondition_TimeDrivenSeverity, _severityVsNormalizedElapsedTime) == 0x00C0);
static_assert(offsetof(UPrisonerBodyCondition_Knockout, _reason) == 0x0158);
static_assert(offsetof(UPrisonerBodyCondition_NutrientDeficiency, _nutrient) == 0x00C0);
static_assert(offsetof(UPrisonerBodyCondition_NutrientDeficiency, _severityVsNutrientDeficiencyRatio) == 0x00C8);
static_assert(offsetof(UPrisonerBodyConditionUIData_NutrientDeficiency, NutrientUnit) == 0x01AC);
static_assert(offsetof(UPrisonerBodyCondition_Overburdened, _severityVsWeightLoadRatio) == 0x00C0);
static_assert(offsetof(UPrisonerBodyCondition_RadiationPresence, _radiationDispersionRatePerActionDifficulty) == 0x00D0);
static_assert(offsetof(UPrisonerBodyCondition_RadiationPresence, _effectiveRadiationAmountChangePerForeignSubstancePresence) == 0x00F0);
static_assert(offsetof(UPrisonerBodyCondition_RadiationPresence, _state) == 0x0148);
static_assert(offsetof(UPrisonerBodyCondition_Sepsis, _state) == 0x00E4);
static_assert(offsetof(UPrisonerBodyConditionWithCausesUIData, _causes) == 0x01A8);
static_assert(offsetof(UPrisonerBodyCondition_StaminaLow, _state) == 0x00E0);
static_assert(offsetof(UPrisonerBodyCondition_StaminaLow, _dizzinessSymptomClass) == 0x00E8);
static_assert(offsetof(UPrisonerBodyCondition_StaminaLow, _dizzinessSymptomCause) == 0x00F0);
static_assert(offsetof(UPrisonerBodyCondition_StaminaLow, _passOutNotification) == 0x00F8);
static_assert(offsetof(UPrisonerBodyCondition_StomachEmpty, _stomachGrowlingSymptomClass) == 0x00C8);
static_assert(offsetof(UPrisonerBodyCondition_StomachEmpty, _stomachGrowlingSymptomCause) == 0x00D0);
static_assert(offsetof(UPrisonerBodyCondition_StomachFull, _stomachFullnessSymptomClass) == 0x00E0);
static_assert(offsetof(UPrisonerBodyCondition_StomachFull, _stomachFullnessSymptomCause) == 0x00E8);
static_assert(offsetof(UPrisonerBodyCondition_StomachFull, _fatigueSymptomClass) == 0x00F0);
static_assert(offsetof(UPrisonerBodyCondition_StomachFull, _fatigueSymptomCause) == 0x00F8);
static_assert(offsetof(UPrisonerBodyCondition_StomachFull, _burpingSymptomClass) == 0x0100);
static_assert(offsetof(UPrisonerBodyCondition_StomachFull, _burpingSymptomCause) == 0x0108);
static_assert(offsetof(UPrisonerBodyCondition_StomachFull, _stomachRuptureWarningNotificationClass) == 0x0110);
static_assert(offsetof(UPrisonerBodyCondition_StomachFull, _stomachRuptureNotificationClass) == 0x0118);
static_assert(offsetof(UPrisonerBodyCondition_TearGasExposure, _severityVsTime) == 0x00C0);
static_assert(offsetof(UPrisonerBodyCondition_TrenchFoot, _trenchnessIncreaseRateVsFeetWetness) == 0x00C0);
static_assert(offsetof(UPrisonerBodyCondition_TrenchFoot, _trenchnessIncreaseRateMultiplierVsConstitution) == 0x0148);
static_assert(offsetof(UPrisonerBodyCondition_TrenchFoot, _trenchnessIncreaseRateMultiplierVsAirTemperature) == 0x0150);
static_assert(offsetof(UPrisonerBodyCondition_TrenchFoot, _trenchnessDecreaseRateMultiplierVsAirTemperature) == 0x01D8);
static_assert(offsetof(UPrisonerBodyCondition_TrenchFoot, _recoveryDurationMultiplierVsAirTemperature) == 0x0260);
static_assert(offsetof(UPrisonerBodyCondition_TrenchFoot, _severityVsTrenchness) == 0x02F0);
static_assert(offsetof(UPrisonerBodyCondition_TrenchFoot, _stabilizationDurationVsSeverity) == 0x0388);
static_assert(offsetof(UPrisonerBodyCondition_TrenchFoot, _recoveryDurationVsSeverity) == 0x0410);
static_assert(offsetof(UPrisonerBodyCondition_TrenchFoot, _painGruntAudioEvent) == 0x0498);
static_assert(offsetof(UPrisonerBodyCondition_TrenchFoot, _painGruntIntervalVsSeverity) == 0x04A0);
static_assert(offsetof(UPrisonerBodyCondition_TrenchFoot, _painSymptomClass) == 0x0530);
static_assert(offsetof(UPrisonerBodyCondition_TrenchFoot, _painSymptomCause) == 0x0538);
static_assert(offsetof(UPrisonerBodyCondition_TrenchFoot, _painSymptomOverallIntensityVsSeverity) == 0x0540);
static_assert(offsetof(UPrisonerBodyCondition_TrenchFoot, _painSymptomLimpingIntensityVsSeverity) == 0x05C8);
static_assert(offsetof(UPrisonerBodyCondition_TrenchFoot, _painSymptomMaxMovementPaceVsSeverity) == 0x0650);
static_assert(offsetof(UPrisonerBodyCondition_TrenchFoot, _painSymptomMovementSpeedModifierVsSeverity) == 0x0660);
static_assert(offsetof(UPrisonerBodyCondition_TrenchFoot, _state) == 0x06E8);
static_assert(offsetof(UPrisonerBodyCondition_TutorialInjury, _severityVsDamageRatio) == 0x00C8);
static_assert(offsetof(UPrisonerBodyCondition_TutorialInjury, _stabilizationDurationVsSeverity) == 0x0150);
static_assert(offsetof(UPrisonerBodyCondition_TutorialInjury, _recoveryDurationVsSeverity) == 0x01D8);
static_assert(offsetof(UPrisonerBodyCondition_TutorialInjury, _fakeBloodLossVsFakeDamageRatio) == 0x0260);
static_assert(offsetof(UPrisonerBodyCondition_TutorialInjury, _bleedingSymptomClass) == 0x02E8);
static_assert(offsetof(UPrisonerBodyCondition_TutorialInjury, _bleedingSymptomCause) == 0x02F0);
static_assert(offsetof(UPrisonerBodyCondition_TutorialInjury, _bandages) == 0x0308);
static_assert(offsetof(UPrisonerBodyCondition_TutorialInjury, _muscleGroup) == 0x0320);
static_assert(offsetof(UPrisonerBodyCondition_TutorialInjury, _state) == 0x0321);
static_assert(offsetof(UPrisonerBodyConditionInteraction, _name) == 0x0028);
static_assert(offsetof(UPrisonerBodyConditionInteraction, _beginInteractionMontage) == 0x0068);
static_assert(offsetof(UPrisonerBodyConditionInteraction, _endInteractionMontage) == 0x0069);
static_assert(offsetof(UPrisonerBodyConditionInteraction, _beginInteractionPatientAudioEvent) == 0x0070);
static_assert(offsetof(UPrisonerBodyConditionInteraction, _endInteractionPatientAudioEvent) == 0x0078);
static_assert(offsetof(UPrisonerBodyConditionInteractionItemTag, SupportedConditions) == 0x0030);
static_assert(offsetof(UPrisonerBodyConditionInteractionItemTag, SupportedBodyPartsList) == 0x0048);
static_assert(offsetof(UPrisonerBodyConditionInteractionItemTag, UnsupportedBodyPartsList) == 0x0060);
static_assert(offsetof(UPrisonerBodyConditionInteractionItemTag, InteractionCaption) == 0x0070);
static_assert(offsetof(UPrisonerBodyConditionInteractionItemTag, BeginInteractionMontage) == 0x0088);
static_assert(offsetof(UPrisonerBodyConditionInteractionItemTag, EndInteractionMontage) == 0x0089);
static_assert(offsetof(FPBCTIIT_ApplyBandagesOrDisinfect_Disinfect_PerSkillData, NumUsesPerSeverityLevel) == 0x0000);
static_assert(offsetof(UPBCTIIT_ApplyBandagesOrDisinfect_Disinfect, TreatmentDurationPerSeverityLevel) == 0x0090);
static_assert(offsetof(UPBCTIIT_ApplyBandagesOrDisinfect_Disinfect, TreatmentDurationPerUsePerSeverityLevel) == 0x00A0);
static_assert(offsetof(UPBCTIIT_ApplyBandagesOrDisinfect_Disinfect, SkillData) == 0x00B0);
static_assert(offsetof(FPBCTIIT_ApplyBandagesOrDisinfect_ApplyBandages_PerSkillData, NumUsesPerSeverityLevel) == 0x0000);
static_assert(offsetof(UPBCTIIT_ApplyBandagesOrDisinfect_ApplyBandages, TreatmentDurationPerSeverityLevel) == 0x0090);
static_assert(offsetof(UPBCTIIT_ApplyBandagesOrDisinfect_ApplyBandages, TreatmentDurationPerUsePerSeverityLevel) == 0x00A0);
static_assert(offsetof(UPBCTIIT_ApplyBandagesOrDisinfect_ApplyBandages, RecoveryDurationReductionMultiplierVsItemHealthRatio) == 0x00B8);
static_assert(offsetof(UPBCTIIT_ApplyBandagesOrDisinfect_ApplyBandages, SkillData) == 0x00C0);
static_assert(offsetof(FPBCTI_ApplyBandagesOrDisinfect_DisinfectData, ActionDurationLimits) == 0x0004);
static_assert(offsetof(FPBCTI_ApplyBandagesOrDisinfect_DisinfectData, BeginInteractionPatientAudioEvent) == 0x0028);
static_assert(offsetof(FPBCTI_ApplyBandagesOrDisinfect_DisinfectData, EndInteractionPatientAudioEvent) == 0x0030);
static_assert(offsetof(FPBCTI_ApplyBandagesOrDisinfect_ApplyBandagesData, ActionDurationLimits) == 0x0004);
static_assert(offsetof(UPrisonerBodyConditionTreatInteraction_ApplyBandagesOrDisinfect, _disinfectData) == 0x00A0);
static_assert(offsetof(UPrisonerBodyConditionTreatInteraction_ApplyBandagesOrDisinfect, _applyBandagesData) == 0x00D8);
static_assert(offsetof(FPBCTIIT_ApplyGel_PerSkillData, NumUsesPerSeverityLevel) == 0x0000);
static_assert(offsetof(UPBCTIIT_ApplyGel, TreatmentDurationPerSeverityLevel) == 0x0090);
static_assert(offsetof(UPBCTIIT_ApplyGel, TreatmentDurationPerUsePerSeverityLevel) == 0x00A0);
static_assert(offsetof(UPBCTIIT_ApplyGel, SkillData) == 0x00B0);
static_assert(offsetof(FPBCTI_ApplyGelData, ActionDurationLimits) == 0x0004);
static_assert(offsetof(FPBCTI_ApplyGelData, BeginInteractionPatientAudioEvent) == 0x0028);
static_assert(offsetof(FPBCTI_ApplyGelData, EndInteractionPatientAudioEvent) == 0x0030);
static_assert(offsetof(UPrisonerBodyConditionTreatInteraction_ApplyGel, _applyGelData) == 0x0088);
static_assert(offsetof(UPrisonerBodyEffect_AntibioticsReaction, _uiDataClass) == 0x0040);
static_assert(offsetof(UPrisonerBodyEffect_AntibioticsReaction, _immuneSystemEfficiencyModifierVsAntibioticsAmountRatio) == 0x0048);
static_assert(offsetof(UPrisonerBodyEffectUIData_AntibioticsReaction, _name) == 0x0048);
static_assert(offsetof(UPrisonerBodyEffect_ExhaustionChange, _uiDataClass) == 0x0070);
static_assert(offsetof(UPrisonerBodyEffectUIData_ExhaustionChange, _name) == 0x0048);
static_assert(offsetof(UPrisonerBodyEffectUIData_ExhaustionChange, _suffix) == 0x0060);
static_assert(offsetof(UPrisonerBodyEffect_InfectionController, _passiveContaminationIncreaseRateVsContaminationRatio) == 0x0040);
static_assert(offsetof(UPrisonerBodyEffect_NotificationCooldown, _notificationClass) == 0x0040);
static_assert(offsetof(UPrisonerBodyMuscleGroupToInfectionClassMappings, _infectionClasses) == 0x0030);
static_assert(offsetof(UPrisonerBodySimulationComponent, _data) == 0x0260);
static_assert(offsetof(UPrisonerBodySimulationComponent, _bodyEffects) == 0x0520);
static_assert(offsetof(UPrisonerBodySimulationComponent, _metabolism) == 0x06A8);
static_assert(offsetof(UPrisonerBodySimulationComponent, _repBodyEffects) == 0x0710);
static_assert(offsetof(FPrisonerBodySimulationData_ConsumableDigestionHandlersForValueRange, ValueRange) == 0x0000);
static_assert(offsetof(FPrisonerBodySimulationData_ConsumableDigestionHandlersForValueRange, ConsumptionMethodConstraint) == 0x0011);
static_assert(offsetof(FPrisonerBodySimulationData_ConsumableDigestionHandlersForValueRange, DigestionHandlers) == 0x0018);
static_assert(offsetof(FPrisonerBodySimulationData_ConsumableDigestionHandlersForValueRanges, ValueRanges) == 0x0000);
static_assert(offsetof(FPrisonerBodySimulationData_Effects_ExhaustionChange, Consumption) == 0x0000);
static_assert(offsetof(FPrisonerBodySimulationData_Effects_ExhaustionChange, Resting) == 0x0008);
static_assert(offsetof(FPrisonerBodySimulationData_Effects_ExhaustionChange, Smoking) == 0x0010);
static_assert(offsetof(FPrisonerBodySimulationData_Effects, KnockoutWithoutBlackout) == 0x0000);
static_assert(offsetof(FPrisonerBodySimulationData_Effects, KnockoutWithBlackout) == 0x0008);
static_assert(offsetof(FPrisonerBodySimulationData_Effects, BleedingInjury) == 0x0010);
static_assert(offsetof(FPrisonerBodySimulationData_Effects, DefaultMuscleGroupToBurnInjuryClassMappings) == 0x0018);
static_assert(offsetof(FPrisonerBodySimulationData_Effects, Choking) == 0x0020);
static_assert(offsetof(FPrisonerBodySimulationData_Effects, FoodDisgust) == 0x0028);
static_assert(offsetof(FPrisonerBodySimulationData_Effects, TearGasExposure) == 0x0030);
static_assert(offsetof(FPrisonerBodySimulationData_Effects, Limping) == 0x0038);
static_assert(offsetof(FPrisonerBodySimulationData_Effects, ExhaustionChange) == 0x0040);
static_assert(offsetof(UPrisonerBodySimulationData, MaxStrengthGainRateVsStrength) == 0x0030);
static_assert(offsetof(UPrisonerBodySimulationData, BleedOutDurationVsBleedingSeverity) == 0x00D4);
static_assert(offsetof(UPrisonerBodySimulationData, BleedOutDurationMultiplierVsConstitution) == 0x00DC);
static_assert(offsetof(UPrisonerBodySimulationData, DamageRatioVsBloodLossRatio) == 0x00E8);
static_assert(offsetof(UPrisonerBodySimulationData, HealingSpeedMultiplierVsConstitution) == 0x0170);
static_assert(offsetof(UPrisonerBodySimulationData, HealingSpeedMultiplierVsActionDifficultyRatio) == 0x0178);
static_assert(offsetof(UPrisonerBodySimulationData, ImmuneSystemEfficiencyMultiplierVsConstitution) == 0x0200);
static_assert(offsetof(UPrisonerBodySimulationData, ImmuneSystemEfficiencyMultiplierVsActionDifficultyRatio) == 0x0208);
static_assert(offsetof(UPrisonerBodySimulationData, StaminaChangeRateVsActionDifficulty) == 0x0290);
static_assert(offsetof(UPrisonerBodySimulationData, HeartRateRatioVsActionDifficulty) == 0x02C0);
static_assert(offsetof(UPrisonerBodySimulationData, OxygenSaturationRaiseRateVsActionDifficulty) == 0x02E4);
static_assert(offsetof(UPrisonerBodySimulationData, OxygenSaturationFallRateVsActionDifficulty) == 0x02FC);
static_assert(offsetof(UPrisonerBodySimulationData, PhoenixTearsDiscardRateVsAmount) == 0x0318);
static_assert(offsetof(UPrisonerBodySimulationData, HealingSpeedMultiplierVsPhoenixTearsAmount) == 0x03A0);
static_assert(offsetof(UPrisonerBodySimulationData, ImmuneSystemEfficiencyMultiplierVsPhoenixTearsAmount) == 0x0428);
static_assert(offsetof(UPrisonerBodySimulationData, MetabolismClass) == 0x04B0);
static_assert(offsetof(UPrisonerBodySimulationData, CaloriesConsumptionMultiplierVsHeartRateRatio) == 0x04C0);
static_assert(offsetof(UPrisonerBodySimulationData, WaterConsumptionMultiplierVsHeartRateRatio) == 0x0548);
static_assert(offsetof(UPrisonerBodySimulationData, NutrientsConsumptionFactorVsConstitutionRatio) == 0x05D0);
static_assert(offsetof(UPrisonerBodySimulationData, ConsumptionDurationMultiplierVsEatingSpeed) == 0x05E8);
static_assert(offsetof(UPrisonerBodySimulationData, ConsumptionDurations) == 0x05F0);
static_assert(offsetof(UPrisonerBodySimulationData, DigestionHandlersPerConsumableHealthRatios) == 0x0640);
static_assert(offsetof(UPrisonerBodySimulationData, DigestionHandlersPerConsumableFatsContentRatios) == 0x0650);
static_assert(offsetof(UPrisonerBodySimulationData, DigestionHandlersPerConsumableNutrientContentRatios) == 0x0660);
static_assert(offsetof(UPrisonerBodySimulationData, Effects) == 0x06B0);
static_assert(offsetof(FPrisonerBodyEffectSave, Data) == 0x0000);
static_assert(offsetof(UPrisonerBodySimulationSave, BodyEffects) == 0x00A8);
static_assert(offsetof(UPrisonerBodySimulationSave, Metabolism) == 0x00B8);
static_assert(offsetof(UPrisonerBodySimulationUIDataImpl, BodyEffectsUIData) == 0x00F8);
static_assert(offsetof(UPrisonerBodySimulationUIDataImpl, MetabolismUIData) == 0x0108);
static_assert(offsetof(UPrisonerBodySymptom, _notifier) == 0x00B0);
static_assert(offsetof(UPrisonerBodySymptomUIData, _causes) == 0x00A0);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_Blackout, _symptomClass) == 0x0030);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_Blackout, _symptomCause) == 0x0038);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_Blackout, _intensityVsSeverity) == 0x0040);
static_assert(offsetof(UPrisonerBodySymptom_Bleeding, _vignetteEffectIntensityVsSeverityRatio) == 0x00B8);
static_assert(offsetof(UPrisonerBodySymptom_Bleeding, _vignetteEffectPulsationFrequencyVsSeverityRatio) == 0x0140);
static_assert(offsetof(UPrisonerBodySymptom_Bleeding, _vignetteEffectSeverityRatioMultiplierVsHealthRatio) == 0x01C8);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_BloodshotEyes, _symptomClass) == 0x0030);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_BloodshotEyes, _symptomCause) == 0x0038);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_BloodshotEyes, _intensityVsSeverity) == 0x0040);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_BlurredVision, _symptomClass) == 0x0030);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_BlurredVision, _symptomCause) == 0x0038);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_BlurredVision, _intensityVsSeverity) == 0x0040);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_BlurredVision, _offsetVsSeverity) == 0x00C8);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_BlurredVision, _falloffVsSeverity) == 0x0150);
static_assert(offsetof(UPrisonerBodySymptom_BoostOfEnergy, _severityVsEnergyBoosterSubstanceAmountRatio) == 0x00B8);
static_assert(offsetof(UPrisonerBodySymptom_BoostOfEnergy, _energyBoosterSubstanceClass) == 0x0140);
static_assert(offsetof(UPrisonerBodySymptom_PeriodicSound, _sound) == 0x00B8);
static_assert(offsetof(UPrisonerBodySymptom_PeriodicSound, _soundInitialDelay) == 0x00C0);
static_assert(offsetof(UPrisonerBodySymptom_PeriodicSound, _soundIntervalDeviationRatio) == 0x00C8);
static_assert(offsetof(UPrisonerBodySymptom_PeriodicAffect, _affectIntervalDeviationRatio) == 0x00B8);
static_assert(offsetof(UPrisonerBodySymptom_PeriodicAffect, _affectDurationDeviationRatio) == 0x00C0);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_Disorientation, _symptomClass) == 0x0030);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_Disorientation, _symptomCause) == 0x0038);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_Disorientation, _intensityVsSeverity) == 0x0040);
static_assert(offsetof(UPrisonerBodySymptom_Dizziness, _blackoutIntensityVsElapsedTime) == 0x00E8);
static_assert(offsetof(UPrisonerBodySymptom_Dizziness, _colorDesaturationIntensityVsElapsedTime) == 0x0178);
static_assert(offsetof(UPrisonerBodySymptom_Dizziness, _blurredVisionIntensityVsElapsedTime) == 0x0208);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_DoubleVision, _symptomClass) == 0x0030);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_DoubleVision, _symptomCause) == 0x0038);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_DoubleVision, _intensityVsSeverity) == 0x0040);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_EyePressure, _symptomClass) == 0x0030);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_EyePressure, _symptomCause) == 0x0038);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_EyePressure, _intensityVsSeverity) == 0x0040);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_Fatigue, _symptomClass) == 0x0030);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_Fatigue, _symptomCause) == 0x0038);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_Fatigue, _maxStaminaModifierVsSeverity) == 0x0040);
static_assert(offsetof(FPrisonerHallucinationIllusionInfo, Class) == 0x0000);
static_assert(offsetof(FPrisonerHallucinationIllusionInfo, SeverityLevelConstraint) == 0x0078);
static_assert(offsetof(UPrisonerBodySymptom_Hallucinations, _severityLevelParams) == 0x00B8);
static_assert(offsetof(UPrisonerBodySymptom_Hallucinations, _hallucinationEpisodeClass) == 0x00C8);
static_assert(offsetof(UPrisonerBodySymptom_Hallucinations, _hallucinationIllusionInfosSP) == 0x00D0);
static_assert(offsetof(UPrisonerBodySymptom_Hallucinations, _hallucinationIllusionInfosMP) == 0x00E0);
static_assert(offsetof(UPrisonerBodySymptom_Hallucinations, _effectsIntensityVsElapsedTimePeriod) == 0x0100);
static_assert(offsetof(UPrisonerBodySymptom_Hallucinations, _effectsIntensityScaleVsSeverityRatio) == 0x0190);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_Hallucinations, _symptomClass) == 0x0030);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_Hallucinations, _symptomCause) == 0x0038);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_Hallucinations, _hallucinationsSeverityVsSeverity) == 0x0040);
static_assert(offsetof(UPrisonerHallucinationEpisode, _begunAudioEvent) == 0x0028);
static_assert(offsetof(UPrisonerHallucinationEpisode, _endedAudioEvent) == 0x0030);
static_assert(offsetof(UPrisonerHallucinationEpisode, _visualEffectIntensityVsTime) == 0x0038);
static_assert(offsetof(UPrisonerHallucinationEpisode, _illusionsPreSpawnAudioEvent) == 0x00C8);
static_assert(offsetof(UPrisonerHallucinationEpisode, _loadedIllusionClasses) == 0x0100);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_HeightenedSenses, _symptomClass) == 0x0030);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_HeightenedSenses, _symptomCause) == 0x0038);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_HeightenedSenses, _intensityVsSeverity) == 0x0040);
static_assert(offsetof(UPrisonerBodySymptom_Hunger, _severityVsEnergyRatio) == 0x00B8);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_Leukopenia, _symptomClass) == 0x0030);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_Leukopenia, _symptomCause) == 0x0038);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_Leukopenia, _immuneSystemEfficiencyModifierVsSeverity) == 0x0040);
static_assert(offsetof(UPrisonerBodySymptom_NeedToDefecate, _severityVsColonFullness) == 0x00B8);
static_assert(offsetof(UPrisonerBodySymptom_NeedToUrinate, _severityVsBladderFullness) == 0x00B8);
static_assert(offsetof(UPrisonerBodySymptom_Pain, _painSuppressorsRatioForPainToBeSuppressedVsConstitution) == 0x00BC);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_PeriodicAffect, _symptomClass) == 0x0030);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_PeriodicAffect, _symptomCause) == 0x0038);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_PeriodicAffect, _intervalVsSeverity) == 0x0040);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_PeriodicAffect, _chanceVsSeverity) == 0x00C8);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_PeriodicAffect, _durationVsConstitution) == 0x0150);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_PeriodicAffect, _intensityVsConstitution) == 0x0158);
static_assert(offsetof(UPrisonerBodySymptom_StomachFullness, _severityVsStomachFullness) == 0x00B8);
static_assert(offsetof(UPrisonerBodySymptom_StomachFullness, _eatingSpeedModifierVsSeverity) == 0x0140);
static_assert(offsetof(UPrisonerBodySymptom_Thirst, _severityVsHydrationRatio) == 0x00B8);
static_assert(offsetof(UPrisonerBodySymptom_Vomiting, _retryVomitingInterval) == 0x00EC);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_Weakness, _symptomClass) == 0x0030);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_Weakness, _symptomCause) == 0x0038);
static_assert(offsetof(UPrisonerBodyConditionOrSymptomSideEffect_Weakness, _performanceScoreModifierVsSeverity) == 0x0040);
static_assert(offsetof(UPrisonerBodySymptom_WetFeet, _severityVsFeetWetness) == 0x00C0);
static_assert(offsetof(FBasicPrisonerBodySymptomNotificationParameters, SeverityRange) == 0x0000);
static_assert(offsetof(FBasicPrisonerBodySymptomNotificationParameters, Notification) == 0x0010);
static_assert(offsetof(FBasicPrisonerBodySymptomNotificationParameters, TriggerInterval) == 0x001C);
static_assert(offsetof(UBasicPrisonerBodySymptomNotifier, _triggerDelay) == 0x0030);
static_assert(offsetof(UBasicPrisonerBodySymptomNotifier, _notificationParameters) == 0x0040);
static_assert(offsetof(UPrisonerBuryComponent, _buryState) == 0x00C0);
static_assert(offsetof(UPrisonerCharacterMesh, BodySlotMapping) == 0x0060);
static_assert(offsetof(UPrisonerCharacterMesh, DecayMultiplierData) == 0x0064);
static_assert(offsetof(FPrisonerMeleeAttackTypes, PrimaryMeleeAttackTypeWhenNotMoving) == 0x0000);
static_assert(offsetof(FPrisonerMeleeAttackTypes, PrimaryMeleeAttackTypeWhenWalking) == 0x0008);
static_assert(offsetof(FPrisonerMeleeAttackTypes, PrimaryMeleeAttackTypeWhenJogging) == 0x0010);
static_assert(offsetof(FPrisonerMeleeAttackTypes, PrimaryMeleeAttackTypeWhenRunning) == 0x0018);
static_assert(offsetof(FPrisonerMeleeAttackTypes, PrimaryMeleeAttackTypeWhenFalling) == 0x0020);
static_assert(offsetof(FPrisonerMeleeAttackTypes, SecondaryMeleeAttackTypeWhenNotMoving) == 0x0028);
static_assert(offsetof(FPrisonerMeleeAttackTypes, SecondaryMeleeAttackTypeWhenWalking) == 0x0030);
static_assert(offsetof(FPrisonerMeleeAttackTypes, SecondaryMeleeAttackTypeWhenJogging) == 0x0038);
static_assert(offsetof(FPrisonerMeleeAttackTypes, SecondaryMeleeAttackTypeWhenRunning) == 0x0040);
static_assert(offsetof(FPrisonerMeleeAttackTypes, SecondaryMeleeAttackTypeWhenFalling) == 0x0048);
static_assert(offsetof(FPrisonerMeleeAttackTypes, ComboMeleeAttackTypeWhenNotMoving) == 0x0050);
static_assert(offsetof(FPrisonerMeleeAttackTypes, ComboMeleeAttackTypeWhenWalking) == 0x0058);
static_assert(offsetof(FPrisonerMeleeAttackTypes, ComboMeleeAttackTypeWhenJogging) == 0x0060);
static_assert(offsetof(FPrisonerMeleeAttackTypes, ComboMeleeAttackTypeWhenRunning) == 0x0068);
static_assert(offsetof(FPrisonerMeleeAttackTypes, ComboMeleeAttackTypeWhenFalling) == 0x0070);
static_assert(offsetof(FPrisonerMeleeAttackTypes, BashMeleeAttackType) == 0x0078);
static_assert(offsetof(FPrisonerMeleeAttackTypes, WeaponBayonetMeleeAttackType) == 0x0080);
static_assert(offsetof(FPrisonerTurnMontageDescription, AnimationL90) == 0x0000);
static_assert(offsetof(FPrisonerTurnMontageDescription, AnimationR90) == 0x0008);
static_assert(offsetof(FPrisonerTurnMontageDescription, TurnAngleCurveName) == 0x0010);
static_assert(offsetof(FPrisonerTurnMontageDescription, SlotName) == 0x0018);
static_assert(offsetof(FThrowingAnimationSet, PlayerLongThrowMontage) == 0x0000);
static_assert(offsetof(FThrowingAnimationSet, PlayerLongThrowLoopMontage) == 0x0008);
static_assert(offsetof(FThrowingAnimationSet, PlayerShortThrowMontage) == 0x0010);
static_assert(offsetof(FThrowingAnimationSet, PlayerThrowbackMontage) == 0x0018);
static_assert(offsetof(FPrisonerCommonData_ResponseIdles, DirtyAfterProne) == 0x0000);
static_assert(offsetof(UPrisonerCommonData, MovementData) == 0x0030);
static_assert(offsetof(UPrisonerCommonData, FemaleAnimationInstance) == 0x0038);
static_assert(offsetof(UPrisonerCommonData, MaleAnimationInstance) == 0x0040);
static_assert(offsetof(UPrisonerCommonData, ServerAnimationInstance) == 0x0048);
static_assert(offsetof(UPrisonerCommonData, ExhaustionRange) == 0x0050);
static_assert(offsetof(UPrisonerCommonData, StrengthMeleeDamageMultiplierRange) == 0x0068);
static_assert(offsetof(UPrisonerCommonData, ClothesPartUsedByMeleeAttackCapsuleAttachment) == 0x0078);
static_assert(offsetof(UPrisonerCommonData, AttackerBoneByMeleeAttackCapsuleAttachment) == 0x00C8);
static_assert(offsetof(UPrisonerCommonData, StrengthThrowingDamageMultiplierRange) == 0x011C);
static_assert(offsetof(UPrisonerCommonData, ThrowEnergyRange) == 0x013C);
static_assert(offsetof(UPrisonerCommonData, CorpseClass) == 0x0148);
static_assert(offsetof(UPrisonerCommonData, HeadExplosionGibClass) == 0x0150);
static_assert(offsetof(UPrisonerCommonData, HeadExplosionParticles) == 0x0158);
static_assert(offsetof(UPrisonerCommonData, HeadExplosionGibMeshes) == 0x0160);
static_assert(offsetof(UPrisonerCommonData, CorpseChoppingRecipeDataAsset) == 0x0170);
static_assert(offsetof(UPrisonerCommonData, CorpseHeadlessChoppingRecipeDataAsset) == 0x0178);
static_assert(offsetof(UPrisonerCommonData, CorpseStartSearchAudioEvent) == 0x0180);
static_assert(offsetof(UPrisonerCommonData, CorpseStopSearchAudioEvent) == 0x0188);
static_assert(offsetof(UPrisonerCommonData, DefaultMeshTransform) == 0x01A0);
static_assert(offsetof(UPrisonerCommonData, CrouchViewsAdditionalGlobalOffsetZVsCrouchStage) == 0x01D8);
static_assert(offsetof(UPrisonerCommonData, MovementSettings) == 0x01F8);
static_assert(offsetof(UPrisonerCommonData, MinEyesRotationPitchCurve) == 0x0218);
static_assert(offsetof(UPrisonerCommonData, MaxEyesRotationPitchCurve) == 0x0220);
static_assert(offsetof(UPrisonerCommonData, ComaAudioEvent) == 0x0238);
static_assert(offsetof(UPrisonerCommonData, ComaScreamAudioEvent) == 0x0240);
static_assert(offsetof(UPrisonerCommonData, DeathAudioEvent) == 0x0248);
static_assert(offsetof(UPrisonerCommonData, DeathScreamAudioEvent) == 0x0250);
static_assert(offsetof(UPrisonerCommonData, ColdBreathParticles) == 0x0258);
static_assert(offsetof(UPrisonerCommonData, ColdBreathParticlesAttachPointName) == 0x0260);
static_assert(offsetof(UPrisonerCommonData, StandardUndershirtMaterial) == 0x0268);
static_assert(offsetof(UPrisonerCommonData, DeluxeUndershirtMaterial) == 0x0270);
static_assert(offsetof(UPrisonerCommonData, JumpAudioEvent) == 0x0278);
static_assert(offsetof(UPrisonerCommonData, LandingStaminaDrainCurve) == 0x0288);
static_assert(offsetof(UPrisonerCommonData, ForceUnmountDamageCurve) == 0x0290);
static_assert(offsetof(UPrisonerCommonData, LandingEffects) == 0x0298);
static_assert(offsetof(UPrisonerCommonData, WaterParticlesWhenIdle) == 0x02A8);
static_assert(offsetof(UPrisonerCommonData, WaterParticlesWhenIdleInOcean) == 0x02B0);
static_assert(offsetof(UPrisonerCommonData, WaterParticlesWhenMoving) == 0x02B8);
static_assert(offsetof(UPrisonerCommonData, WaterParticlesWhenMovingInOcean) == 0x02C0);
static_assert(offsetof(UPrisonerCommonData, WaterParticlesWhenDiving) == 0x02C8);
static_assert(offsetof(UPrisonerCommonData, WaterParticlesWhenDivingAttachPointName) == 0x02D0);
static_assert(offsetof(UPrisonerCommonData, WaterContactParticles) == 0x02D8);
static_assert(offsetof(UPrisonerCommonData, WaterContactParticlesAttachPointName) == 0x02E0);
static_assert(offsetof(UPrisonerCommonData, BuoyancyMultiplierVsGearWeightLimitDeviation) == 0x02F0);
static_assert(offsetof(UPrisonerCommonData, StartedDivingAudioEvent) == 0x02F8);
static_assert(offsetof(UPrisonerCommonData, StoppedDivingAudioEvent) == 0x0300);
static_assert(offsetof(UPrisonerCommonData, EndDivingOnPlayAudioEvent) == 0x0308);
static_assert(offsetof(UPrisonerCommonData, GettingDryRateVsSpeed) == 0x0330);
static_assert(offsetof(UPrisonerCommonData, SmallBleedingEffect) == 0x0340);
static_assert(offsetof(UPrisonerCommonData, LargeBleedingEffect) == 0x0348);
static_assert(offsetof(UPrisonerCommonData, UrineParticles) == 0x0350);
static_assert(offsetof(UPrisonerCommonData, UrineParticlesAttachPointName) == 0x0358);
static_assert(offsetof(UPrisonerCommonData, UrineParticlesAttachPointSmallestName) == 0x0360);
static_assert(offsetof(UPrisonerCommonData, UrineParticlesAttachPointBiggestName) == 0x0368);
static_assert(offsetof(UPrisonerCommonData, UrineParticlesAttachPointFemaleName) == 0x0370);
static_assert(offsetof(UPrisonerCommonData, UrineParticlesAttachPointMaleName) == 0x0378);
static_assert(offsetof(UPrisonerCommonData, OpenInventoryAudioEvent) == 0x03A0);
static_assert(offsetof(UPrisonerCommonData, CloseInventoryAudioEvent) == 0x03A8);
static_assert(offsetof(UPrisonerCommonData, OpenOceanAudioEvent) == 0x03B0);
static_assert(offsetof(UPrisonerCommonData, HitReactTypeWhenStanding) == 0x03D4);
static_assert(offsetof(UPrisonerCommonData, HitReactTypeWhenStandingInCombatMode) == 0x03DC);
static_assert(offsetof(UPrisonerCommonData, HitReactTypeWhenStandingInCombatModeAndHoldingBlock) == 0x03E4);
static_assert(offsetof(UPrisonerCommonData, HitReactTypeWhenCrouching) == 0x03EC);
static_assert(offsetof(UPrisonerCommonData, HitReactTypeWhenProne) == 0x03F4);
static_assert(offsetof(UPrisonerCommonData, HitReactTypeWhenCaptured) == 0x03FC);
static_assert(offsetof(UPrisonerCommonData, HitReactLandingParamsMap) == 0x0408);
static_assert(offsetof(UPrisonerCommonData, MeleeAttackCapsulesAttachmentForItemInLHand) == 0x0458);
static_assert(offsetof(UPrisonerCommonData, MeleeAttackCapsulesAttachmentForItemInRHand) == 0x0460);
static_assert(offsetof(UPrisonerCommonData, MeleeAttackTypes) == 0x0468);
static_assert(offsetof(UPrisonerCommonData, MeleeTargetMaxConeHalfAngleVsDistanceToTarget) == 0x04F8);
static_assert(offsetof(UPrisonerCommonData, MeleeHitRagdollImpulseByDamageMagnitudeType) == 0x0508);
static_assert(offsetof(UPrisonerCommonData, ThrowLaunchLocationSocketName) == 0x0560);
static_assert(offsetof(UPrisonerCommonData, ThrowingPathBrightnessFromTimeCurve) == 0x0568);
static_assert(offsetof(UPrisonerCommonData, PhysicalSurfacesData) == 0x0578);
static_assert(offsetof(UPrisonerCommonData, DeluxeWristwatchClass) == 0x0580);
static_assert(offsetof(UPrisonerCommonData, ScopeWidget) == 0x0588);
static_assert(offsetof(UPrisonerCommonData, PlaceableActorItemsClass) == 0x0590);
static_assert(offsetof(UPrisonerCommonData, PlaceableActorFortificationsClass) == 0x0598);
static_assert(offsetof(UPrisonerCommonData, PlaceableActorBaseBuildingClass) == 0x05A0);
static_assert(offsetof(UPrisonerCommonData, PlaceableActorBaseUpgradeClass) == 0x05A8);
static_assert(offsetof(UPrisonerCommonData, PlaceableActorGardenClass) == 0x05B0);
static_assert(offsetof(UPrisonerCommonData, PlaceableActorModularBaseBuildingClass) == 0x05B8);
static_assert(offsetof(UPrisonerCommonData, FeetSlot) == 0x05C8);
static_assert(offsetof(UPrisonerCommonData, HairSlot) == 0x05D0);
static_assert(offsetof(UPrisonerCommonData, HeadSlot) == 0x05D8);
static_assert(offsetof(UPrisonerCommonData, NeckSlot) == 0x05E0);
static_assert(offsetof(UPrisonerCommonData, FacialHairSlot) == 0x05E8);
static_assert(offsetof(UPrisonerCommonData, PenisSlot) == 0x05F0);
static_assert(offsetof(UPrisonerCommonData, ChipSlot) == 0x05F8);
static_assert(offsetof(UPrisonerCommonData, LEyeSlot) == 0x0600);
static_assert(offsetof(UPrisonerCommonData, REyeSlot) == 0x0608);
static_assert(offsetof(UPrisonerCommonData, EyewearSlot) == 0x0610);
static_assert(offsetof(UPrisonerCommonData, HandsSlot) == 0x0618);
static_assert(offsetof(UPrisonerCommonData, MaskSlot) == 0x0620);
static_assert(offsetof(UPrisonerCommonData, CensorshipActiveTag) == 0x0628);
static_assert(offsetof(UPrisonerCommonData, PrisonerMountedTag) == 0x0630);
static_assert(offsetof(UPrisonerCommonData, HeadHiddenTag) == 0x0638);
static_assert(offsetof(UPrisonerCommonData, HeadExplodedTag) == 0x0640);
static_assert(offsetof(UPrisonerCommonData, ShowGenitalsOverrideTag) == 0x0648);
static_assert(offsetof(UPrisonerCommonData, HideWristwatchTag) == 0x0650);
static_assert(offsetof(UPrisonerCommonData, BodyCharacterMeshClass) == 0x0658);
static_assert(offsetof(UPrisonerCommonData, ClothesCharacterMeshClass) == 0x0660);
static_assert(offsetof(UPrisonerCommonData, CensorshipCharacterMeshClass) == 0x0668);
static_assert(offsetof(UPrisonerCommonData, ShoesCharacterMeshClasses) == 0x0670);
static_assert(offsetof(UPrisonerCommonData, FaceCoveringCharacterMeshClasses) == 0x0680);
static_assert(offsetof(UPrisonerCommonData, GearSlotsCausingUpperBodyNoise) == 0x0690);
static_assert(offsetof(UPrisonerCommonData, LeavingTheIslandPenaltyTimes) == 0x06B0);
static_assert(offsetof(UPrisonerCommonData, ItemPlacingMaterialAllowed) == 0x0708);
static_assert(offsetof(UPrisonerCommonData, ItemPlacingMaterialDisallowed) == 0x0710);
static_assert(offsetof(UPrisonerCommonData, VehicleServiceMaterial) == 0x0718);
static_assert(offsetof(UPrisonerCommonData, CommonParameterCollection) == 0x0728);
static_assert(offsetof(UPrisonerCommonData, WeaponSocketName) == 0x0730);
static_assert(offsetof(UPrisonerCommonData, WeaponHolsterSocketName) == 0x0738);
static_assert(offsetof(UPrisonerCommonData, SwapWeapons) == 0x0740);
static_assert(offsetof(UPrisonerCommonData, SwapItemsThrowingItemToWeapon) == 0x0748);
static_assert(offsetof(UPrisonerCommonData, SwapItemsThrowingItemToNotWeapon) == 0x0750);
static_assert(offsetof(UPrisonerCommonData, SwapItemsWeaponToThrowingItem) == 0x0758);
static_assert(offsetof(UPrisonerCommonData, SwapItemsNotWeaponToNotWeapon) == 0x0760);
static_assert(offsetof(UPrisonerCommonData, SwapItemsWeaponToWeapon) == 0x0768);
static_assert(offsetof(UPrisonerCommonData, SwapItemsNotWeaponToWeapon) == 0x0770);
static_assert(offsetof(UPrisonerCommonData, SwapItemsWeaponToNotWeapon) == 0x0778);
static_assert(offsetof(UPrisonerCommonData, EquipRifleStanding) == 0x0780);
static_assert(offsetof(UPrisonerCommonData, UnequipRifleStanding) == 0x0788);
static_assert(offsetof(UPrisonerCommonData, EquipHandgunStanding) == 0x0790);
static_assert(offsetof(UPrisonerCommonData, UnequipHadgunStanding) == 0x0798);
static_assert(offsetof(UPrisonerCommonData, UrinateMaleMontage) == 0x07A0);
static_assert(offsetof(UPrisonerCommonData, UrinateFemaleMontage) == 0x07A8);
static_assert(offsetof(UPrisonerCommonData, UrinateMaleForcedMontage) == 0x07B0);
static_assert(offsetof(UPrisonerCommonData, UrinateFemaleForcedMontage) == 0x07B8);
static_assert(offsetof(UPrisonerCommonData, DefecateMontage) == 0x07C0);
static_assert(offsetof(UPrisonerCommonData, DefecateForcedMontage) == 0x07C8);
static_assert(offsetof(UPrisonerCommonData, VomitMontage) == 0x07D0);
static_assert(offsetof(UPrisonerCommonData, VomitForcedMontage) == 0x07D8);
static_assert(offsetof(UPrisonerCommonData, SearchObject) == 0x07E0);
static_assert(offsetof(UPrisonerCommonData, SearchObjectWhileItemInHands) == 0x07E8);
static_assert(offsetof(UPrisonerCommonData, SearchObjectWhileWeaponInHands) == 0x07F0);
static_assert(offsetof(UPrisonerCommonData, SearchObjectWhenSwimming) == 0x07F8);
static_assert(offsetof(UPrisonerCommonData, SearchPrisoner) == 0x0800);
static_assert(offsetof(UPrisonerCommonData, PatchWoundsStanding) == 0x0808);
static_assert(offsetof(UPrisonerCommonData, PatchWoundsCrouching) == 0x0810);
static_assert(offsetof(UPrisonerCommonData, PatchWoundsProne) == 0x0818);
static_assert(offsetof(UPrisonerCommonData, PatchWoundsStandingEnd) == 0x0820);
static_assert(offsetof(UPrisonerCommonData, PatchWoundsCrouchingEnd) == 0x0828);
static_assert(offsetof(UPrisonerCommonData, PatchWoundsProneEnd) == 0x0830);
static_assert(offsetof(UPrisonerCommonData, EatGeneric) == 0x0838);
static_assert(offsetof(UPrisonerCommonData, EatCan) == 0x0840);
static_assert(offsetof(UPrisonerCommonData, DrinkFromBottleStanding) == 0x0848);
static_assert(offsetof(UPrisonerCommonData, DrinkFromBottleCrouching) == 0x0850);
static_assert(offsetof(UPrisonerCommonData, DrinkInteraction) == 0x0858);
static_assert(offsetof(UPrisonerCommonData, DefaultLongThrowMontage) == 0x0860);
static_assert(offsetof(UPrisonerCommonData, DefaultLongThrowLoopMontage) == 0x0868);
static_assert(offsetof(UPrisonerCommonData, DefaultShortThrowMontage) == 0x0870);
static_assert(offsetof(UPrisonerCommonData, DefaultThrowbackGrenadeMontage) == 0x0878);
static_assert(offsetof(UPrisonerCommonData, ChopTreeStanding) == 0x0880);
static_assert(offsetof(UPrisonerCommonData, ChopTreeStandingEnd) == 0x0888);
static_assert(offsetof(UPrisonerCommonData, ChopLogStanding) == 0x0890);
static_assert(offsetof(UPrisonerCommonData, ChopLogStandingEnd) == 0x0898);
static_assert(offsetof(UPrisonerCommonData, BreakStone) == 0x08A0);
static_assert(offsetof(UPrisonerCommonData, BreakStoneEnd) == 0x08A8);
static_assert(offsetof(UPrisonerCommonData, CraftStanding) == 0x08B0);
static_assert(offsetof(UPrisonerCommonData, CraftCrouching) == 0x08B8);
static_assert(offsetof(UPrisonerCommonData, CraftProne) == 0x08C0);
static_assert(offsetof(UPrisonerCommonData, UncraftStanding) == 0x08C8);
static_assert(offsetof(UPrisonerCommonData, UncraftCrouching) == 0x08D0);
static_assert(offsetof(UPrisonerCommonData, UncraftProne) == 0x08D8);
static_assert(offsetof(UPrisonerCommonData, CheckTime) == 0x08E0);
static_assert(offsetof(UPrisonerCommonData, CheckTimeFemale) == 0x08E8);
static_assert(offsetof(UPrisonerCommonData, CheckTimeWhileItemInHands) == 0x08F0);
static_assert(offsetof(UPrisonerCommonData, CheckTimeWhileItemInHandsFemale) == 0x08F8);
static_assert(offsetof(UPrisonerCommonData, CheckTimeWhileWeaponInHands) == 0x0900);
static_assert(offsetof(UPrisonerCommonData, CheckTimeWhileWeaponInHandsFemale) == 0x0908);
static_assert(offsetof(UPrisonerCommonData, CheckTemperature) == 0x0910);
static_assert(offsetof(UPrisonerCommonData, ForceUnlockStanding) == 0x0918);
static_assert(offsetof(UPrisonerCommonData, ForceUnlockStandingEnd) == 0x0920);
static_assert(offsetof(UPrisonerCommonData, ForceUnlockStandingStop) == 0x0928);
static_assert(offsetof(UPrisonerCommonData, ManualUnlockStanding) == 0x0930);
static_assert(offsetof(UPrisonerCommonData, ManualUnlockStandingEnd) == 0x0938);
static_assert(offsetof(UPrisonerCommonData, ManualUnlockStandingStop) == 0x0940);
static_assert(offsetof(UPrisonerCommonData, SpillMontage) == 0x0948);
static_assert(offsetof(UPrisonerCommonData, StompOutFireMontage) == 0x0950);
static_assert(offsetof(UPrisonerCommonData, BlowAirIntoFireMontage) == 0x0958);
static_assert(offsetof(UPrisonerCommonData, BlowAirIntoLowFireMontage) == 0x0960);
static_assert(offsetof(UPrisonerCommonData, GestureShowFinger) == 0x0968);
static_assert(offsetof(UPrisonerCommonData, GestureStandSurrender) == 0x0970);
static_assert(offsetof(UPrisonerCommonData, GestureWaveHi) == 0x0978);
static_assert(offsetof(UPrisonerCommonData, GestureYouAreDead) == 0x0980);
static_assert(offsetof(UPrisonerCommonData, GestureFY) == 0x0988);
static_assert(offsetof(UPrisonerCommonData, GesturePoint) == 0x0990);
static_assert(offsetof(UPrisonerCommonData, GestureHeart) == 0x0998);
static_assert(offsetof(UPrisonerCommonData, GestureBallpalm) == 0x09A0);
static_assert(offsetof(UPrisonerCommonData, GestureFacepalm) == 0x09A8);
static_assert(offsetof(UPrisonerCommonData, GestureFingerGun) == 0x09B0);
static_assert(offsetof(UPrisonerCommonData, GestureLaughing) == 0x09B8);
static_assert(offsetof(UPrisonerCommonData, GestureSmellWave) == 0x09C0);
static_assert(offsetof(UPrisonerCommonData, GestureSquat) == 0x09C8);
static_assert(offsetof(UPrisonerCommonData, GestureCharge) == 0x09D0);
static_assert(offsetof(UPrisonerCommonData, GestureChargeCombat) == 0x09D8);
static_assert(offsetof(UPrisonerCommonData, GestureFreeze) == 0x09E0);
static_assert(offsetof(UPrisonerCommonData, GestureFreezeCombat) == 0x09E8);
static_assert(offsetof(UPrisonerCommonData, GestureGetDown) == 0x09F0);
static_assert(offsetof(UPrisonerCommonData, GestureGetDownCombat) == 0x09F8);
static_assert(offsetof(UPrisonerCommonData, GestureGetUp) == 0x0A00);
static_assert(offsetof(UPrisonerCommonData, GestureGetUpCombat) == 0x0A08);
static_assert(offsetof(UPrisonerCommonData, GestureHalt) == 0x0A10);
static_assert(offsetof(UPrisonerCommonData, GestureHaltCombat) == 0x0A18);
static_assert(offsetof(UPrisonerCommonData, GestureHurryUp) == 0x0A20);
static_assert(offsetof(UPrisonerCommonData, GestureHurryUpCombat) == 0x0A28);
static_assert(offsetof(UPrisonerCommonData, GesturePointMe) == 0x0A30);
static_assert(offsetof(UPrisonerCommonData, GesturePointMeCombat) == 0x0A38);
static_assert(offsetof(UPrisonerCommonData, GesturePointYou) == 0x0A40);
static_assert(offsetof(UPrisonerCommonData, GesturePointYouCombat) == 0x0A48);
static_assert(offsetof(UPrisonerCommonData, GestureRally) == 0x0A50);
static_assert(offsetof(UPrisonerCommonData, GestureRallyCombat) == 0x0A58);
static_assert(offsetof(UPrisonerCommonData, GestureThumbsUp) == 0x0A60);
static_assert(offsetof(UPrisonerCommonData, GestureThumbsUpCombat) == 0x0A68);
static_assert(offsetof(UPrisonerCommonData, GestureThumbsDown) == 0x0A70);
static_assert(offsetof(UPrisonerCommonData, GestureThumbsDownCombat) == 0x0A78);
static_assert(offsetof(UPrisonerCommonData, GestureUnderstandNo) == 0x0A80);
static_assert(offsetof(UPrisonerCommonData, GestureUnderstandNoCombat) == 0x0A88);
static_assert(offsetof(UPrisonerCommonData, GestureUnderstandYes) == 0x0A90);
static_assert(offsetof(UPrisonerCommonData, GestureUnderstandYesCombat) == 0x0A98);
static_assert(offsetof(UPrisonerCommonData, CommitSuicideStanding) == 0x0AA0);
static_assert(offsetof(UPrisonerCommonData, CommitSuicideCrouching) == 0x0AA8);
static_assert(offsetof(UPrisonerCommonData, CommitSuicideRareStanding) == 0x0AB0);
static_assert(offsetof(UPrisonerCommonData, LockpickRegular) == 0x0AB8);
static_assert(offsetof(UPrisonerCommonData, WhistleMontageMale) == 0x0AC0);
static_assert(offsetof(UPrisonerCommonData, WhistleMontageFemale) == 0x0AC8);
static_assert(offsetof(UPrisonerCommonData, TuneBowMontage) == 0x0AD0);
static_assert(offsetof(UPrisonerCommonData, RepairVehicleMontage) == 0x0AD8);
static_assert(offsetof(UPrisonerCommonData, WashClothMontage) == 0x0AE0);
static_assert(offsetof(UPrisonerCommonData, BuryStandingMontage) == 0x0AE8);
static_assert(offsetof(UPrisonerCommonData, BuryRestStandingMontage) == 0x0AF0);
static_assert(offsetof(UPrisonerCommonData, BuryResumeStandingMontage) == 0x0AF8);
static_assert(offsetof(UPrisonerCommonData, BuryCrouchingMontage) == 0x0B00);
static_assert(offsetof(UPrisonerCommonData, BuryRestCrouchingMontage) == 0x0B08);
static_assert(offsetof(UPrisonerCommonData, SitOnGroundStandingStartMontage) == 0x0B10);
static_assert(offsetof(UPrisonerCommonData, SitOnGroundStandingEndMontage) == 0x0B18);
static_assert(offsetof(UPrisonerCommonData, SitOnGroundCrouchingStartMontage) == 0x0B20);
static_assert(offsetof(UPrisonerCommonData, SitOnGroundCrouchingEndMontage) == 0x0B28);
static_assert(offsetof(UPrisonerCommonData, LayOnGroundStandingStartMontage) == 0x0B30);
static_assert(offsetof(UPrisonerCommonData, LayOnGroundStandingEndMontage) == 0x0B38);
static_assert(offsetof(UPrisonerCommonData, LayOnGroundCrouchingStartMontage) == 0x0B40);
static_assert(offsetof(UPrisonerCommonData, LayOnGroundCrouchingEndMontage) == 0x0B48);
static_assert(offsetof(UPrisonerCommonData, SittingOnGroundAnimation) == 0x0B50);
static_assert(offsetof(UPrisonerCommonData, LyingOnGroundAnimation) == 0x0B58);
static_assert(offsetof(UPrisonerCommonData, LightFlareMontage) == 0x0B60);
static_assert(offsetof(UPrisonerCommonData, ArmTrapMontage) == 0x0B68);
static_assert(offsetof(UPrisonerCommonData, FishingEnterMontage) == 0x0B70);
static_assert(offsetof(UPrisonerCommonData, FishingLeaveMontage) == 0x0B78);
static_assert(offsetof(UPrisonerCommonData, FishingCastMontage) == 0x0B80);
static_assert(offsetof(UPrisonerCommonData, FishingLongCastEndMontage) == 0x0B88);
static_assert(offsetof(UPrisonerCommonData, FishingShortCastEndMontage) == 0x0B90);
static_assert(offsetof(UPrisonerCommonData, FishingPullStartMontage) == 0x0B98);
static_assert(offsetof(UPrisonerCommonData, FishingPullEndMontage) == 0x0BA0);
static_assert(offsetof(UPrisonerCommonData, FishingFishCaughtMontage) == 0x0BA8);
static_assert(offsetof(UPrisonerCommonData, FishingKeepFishMontage) == 0x0BB0);
static_assert(offsetof(UPrisonerCommonData, FishingDiscardFishMontage) == 0x0BB8);
static_assert(offsetof(UPrisonerCommonData, FishingWireBreakMontage) == 0x0BC0);
static_assert(offsetof(UPrisonerCommonData, DanceSwagMontageMale) == 0x0BC8);
static_assert(offsetof(UPrisonerCommonData, DanceSlinkyMontageMale) == 0x0BD0);
static_assert(offsetof(UPrisonerCommonData, DanceJungleStepMontageMale) == 0x0BD8);
static_assert(offsetof(UPrisonerCommonData, DanceMoonslideMontageMale) == 0x0BE0);
static_assert(offsetof(UPrisonerCommonData, DanceFlossMontageMale) == 0x0BE8);
static_assert(offsetof(UPrisonerCommonData, DanceOrangeJusticeMontageMale) == 0x0BF0);
static_assert(offsetof(UPrisonerCommonData, DanceShowtimeMontageMale) == 0x0BF8);
static_assert(offsetof(UPrisonerCommonData, DanceScrubMontageMale) == 0x0C00);
static_assert(offsetof(UPrisonerCommonData, DanceTheCarltonMontageMale) == 0x0C08);
static_assert(offsetof(UPrisonerCommonData, DanceGangnamStyleMontageMale) == 0x0C10);
static_assert(offsetof(UPrisonerCommonData, DanceTechnoVikingMontageMale) == 0x0C18);
static_assert(offsetof(UPrisonerCommonData, DanceOhMamaMontageMale) == 0x0C20);
static_assert(offsetof(UPrisonerCommonData, DanceLoserMontageMale) == 0x0C28);
static_assert(offsetof(UPrisonerCommonData, DanceSeductionMontageMale) == 0x0C30);
static_assert(offsetof(UPrisonerCommonData, DanceTemptationMontageMale) == 0x0C38);
static_assert(offsetof(UPrisonerCommonData, DanceVogueMontageMale) == 0x0C40);
static_assert(offsetof(UPrisonerCommonData, DanceTangoMontageMale) == 0x0C48);
static_assert(offsetof(UPrisonerCommonData, DanceDiscoSpinMontageMale) == 0x0C50);
static_assert(offsetof(UPrisonerCommonData, DanceJaggerMontageMale) == 0x0C58);
static_assert(offsetof(UPrisonerCommonData, DanceSlayinAliveMontageMale) == 0x0C60);
static_assert(offsetof(UPrisonerCommonData, DancePuppetDanceMontageMale) == 0x0C68);
static_assert(offsetof(UPrisonerCommonData, DanceGunsBlazingMontageMale) == 0x0C70);
static_assert(offsetof(UPrisonerCommonData, DanceStepUpMontageMale) == 0x0C78);
static_assert(offsetof(UPrisonerCommonData, DancePartyAnimalMontageMale) == 0x0C80);
static_assert(offsetof(UPrisonerCommonData, DanceHardbassMontageMale) == 0x0C88);
static_assert(offsetof(UPrisonerCommonData, DanceKazachokMontageMale) == 0x0C90);
static_assert(offsetof(UPrisonerCommonData, DancePaddleDanceMontageMale) == 0x0C98);
static_assert(offsetof(UPrisonerCommonData, DanceMoonwalkMontageMale) == 0x0CA0);
static_assert(offsetof(UPrisonerCommonData, DanceSneakyMontageMale) == 0x0CA8);
static_assert(offsetof(UPrisonerCommonData, DanceDeathDropMontageMale) == 0x0CB0);
static_assert(offsetof(UPrisonerCommonData, DanceFelineMontageMale) == 0x0CB8);
static_assert(offsetof(UPrisonerCommonData, DanceGoddessMontageMale) == 0x0CC0);
static_assert(offsetof(UPrisonerCommonData, DanceSultanaMontageMale) == 0x0CC8);
static_assert(offsetof(UPrisonerCommonData, DanceSerpentsCharmMontageMale) == 0x0CD0);
static_assert(offsetof(UPrisonerCommonData, DanceBootyliciousMontageMale) == 0x0CD8);
static_assert(offsetof(UPrisonerCommonData, DanceBubbleBounceMontageMale) == 0x0CE0);
static_assert(offsetof(UPrisonerCommonData, DanceSwagMontageFemale) == 0x0CE8);
static_assert(offsetof(UPrisonerCommonData, DanceSlinkyMontageFemale) == 0x0CF0);
static_assert(offsetof(UPrisonerCommonData, DanceJungleStepMontageFemale) == 0x0CF8);
static_assert(offsetof(UPrisonerCommonData, DanceMoonslideMontageFemale) == 0x0D00);
static_assert(offsetof(UPrisonerCommonData, DanceFlossMontageFemale) == 0x0D08);
static_assert(offsetof(UPrisonerCommonData, DanceOrangeJusticeMontageFemale) == 0x0D10);
static_assert(offsetof(UPrisonerCommonData, DanceShowtimeMontageFemale) == 0x0D18);
static_assert(offsetof(UPrisonerCommonData, DanceScrubMontageFemale) == 0x0D20);
static_assert(offsetof(UPrisonerCommonData, DanceTheCarltonMontageFemale) == 0x0D28);
static_assert(offsetof(UPrisonerCommonData, DanceGangnamStyleMontageFemale) == 0x0D30);
static_assert(offsetof(UPrisonerCommonData, DanceTechnoVikingMontageFemale) == 0x0D38);
static_assert(offsetof(UPrisonerCommonData, DanceOhMamaMontageFemale) == 0x0D40);
static_assert(offsetof(UPrisonerCommonData, DanceLoserMontageFemale) == 0x0D48);
static_assert(offsetof(UPrisonerCommonData, DanceSeductionMontageFemale) == 0x0D50);
static_assert(offsetof(UPrisonerCommonData, DanceTemptationMontageFemale) == 0x0D58);
static_assert(offsetof(UPrisonerCommonData, DanceVogueMontageFemale) == 0x0D60);
static_assert(offsetof(UPrisonerCommonData, DanceTangoMontageFemale) == 0x0D68);
static_assert(offsetof(UPrisonerCommonData, DanceDiscoSpinMontageFemale) == 0x0D70);
static_assert(offsetof(UPrisonerCommonData, DanceJaggerMontageFemale) == 0x0D78);
static_assert(offsetof(UPrisonerCommonData, DanceSlayinAliveMontageFemale) == 0x0D80);
static_assert(offsetof(UPrisonerCommonData, DancePuppetDanceMontageFemale) == 0x0D88);
static_assert(offsetof(UPrisonerCommonData, DanceGunsBlazingMontageFemale) == 0x0D90);
static_assert(offsetof(UPrisonerCommonData, DanceStepUpMontageFemale) == 0x0D98);
static_assert(offsetof(UPrisonerCommonData, DancePartyAnimalMontageFemale) == 0x0DA0);
static_assert(offsetof(UPrisonerCommonData, DanceHardbassMontageFemale) == 0x0DA8);
static_assert(offsetof(UPrisonerCommonData, DanceKazachokMontageFemale) == 0x0DB0);
static_assert(offsetof(UPrisonerCommonData, DancePaddleDanceMontageFemale) == 0x0DB8);
static_assert(offsetof(UPrisonerCommonData, DanceMoonwalkMontageFemale) == 0x0DC0);
static_assert(offsetof(UPrisonerCommonData, DanceSneakyMontageFemale) == 0x0DC8);
static_assert(offsetof(UPrisonerCommonData, DanceDeathDropMontageFemale) == 0x0DD0);
static_assert(offsetof(UPrisonerCommonData, DanceFelineMontageFemale) == 0x0DD8);
static_assert(offsetof(UPrisonerCommonData, DanceGoddessMontageFemale) == 0x0DE0);
static_assert(offsetof(UPrisonerCommonData, DanceSultanaMontageFemale) == 0x0DE8);
static_assert(offsetof(UPrisonerCommonData, DanceSerpentsCharmMontageFemale) == 0x0DF0);
static_assert(offsetof(UPrisonerCommonData, DanceBootyliciousMontageFemale) == 0x0DF8);
static_assert(offsetof(UPrisonerCommonData, DanceBubbleBounceMontageFemale) == 0x0E00);
static_assert(offsetof(UPrisonerCommonData, InjectSelfMontage) == 0x0E08);
static_assert(offsetof(UPrisonerCommonData, InjectOtherMontage) == 0x0E10);
static_assert(offsetof(UPrisonerCommonData, HalloweenGesture1Montage) == 0x0E18);
static_assert(offsetof(UPrisonerCommonData, HalloweenGesture2Montage) == 0x0E20);
static_assert(offsetof(UPrisonerCommonData, HalloweenGesture3Montage) == 0x0E28);
static_assert(offsetof(UPrisonerCommonData, HalloweenGesture4Montage) == 0x0E30);
static_assert(offsetof(UPrisonerCommonData, RemoveWeedMontage) == 0x0E38);
static_assert(offsetof(UPrisonerCommonData, RemoveWeedWithHoeMontage) == 0x0E40);
static_assert(offsetof(UPrisonerCommonData, ApplyPesticideMontage) == 0x0E48);
static_assert(offsetof(UPrisonerCommonData, AddFertilizerMontage) == 0x0E50);
static_assert(offsetof(UPrisonerCommonData, PlantSeedMontage) == 0x0E58);
static_assert(offsetof(UPrisonerCommonData, RemovePlantMontage) == 0x0E60);
static_assert(offsetof(UPrisonerCommonData, DestroyGardenMontage) == 0x0E68);
static_assert(offsetof(UPrisonerCommonData, WashEyesMontage) == 0x0E70);
static_assert(offsetof(UPrisonerCommonData, TurnMontageDescription) == 0x0E78);
static_assert(offsetof(UPrisonerCommonData, ThrowingAnimationSets) == 0x0EC8);
static_assert(offsetof(UPrisonerCommonData, FocusModeZoomEffectCurve) == 0x0F20);
static_assert(offsetof(UPrisonerCommonData, SelfInteractionSegmentInfo) == 0x0F30);
static_assert(offsetof(UPrisonerCommonData, SelfInteractionVoicelineIcons) == 0x0F40);
static_assert(offsetof(UPrisonerCommonData, CharacterDeluxeVoicelines) == 0x0F48);
static_assert(offsetof(UPrisonerCommonData, CharacterVoicelines) == 0x0F58);
static_assert(offsetof(UPrisonerCommonData, PrisonWalletComponentClass) == 0x0F68);
static_assert(offsetof(UPrisonerCommonData, MusicPlayerComponentClass) == 0x0F90);
static_assert(offsetof(UPrisonerCommonData, BodyCompositionMorphsComputer) == 0x0FA8);
static_assert(offsetof(UPrisonerCommonData, PenisLocationDefault) == 0x0FB0);
static_assert(offsetof(UPrisonerCommonData, PenisLocationFat) == 0x0FBC);
static_assert(offsetof(UPrisonerCommonData, PenisLocationMuscular) == 0x0FC8);
static_assert(offsetof(UPrisonerCommonData, PenisLocationSkinny) == 0x0FD4);
static_assert(offsetof(UPrisonerCommonData, FaceAgingIntensityCurve) == 0x0FF8);
static_assert(offsetof(UPrisonerCommonData, ShortHairCurve) == 0x1010);
static_assert(offsetof(UPrisonerCommonData, MediumHairCurve) == 0x1018);
static_assert(offsetof(UPrisonerCommonData, MediumHairPDOCurve) == 0x1020);
static_assert(offsetof(UPrisonerCommonData, MediumHairTopOpacityCurve) == 0x1028);
static_assert(offsetof(UPrisonerCommonData, LongHairCurve) == 0x1030);
static_assert(offsetof(UPrisonerCommonData, LongHairPDOCurve) == 0x1038);
static_assert(offsetof(UPrisonerCommonData, LongHairTopOpacityCurve) == 0x1040);
static_assert(offsetof(UPrisonerCommonData, AfroHairCurve) == 0x1048);
static_assert(offsetof(UPrisonerCommonData, ShortFacialHairCurve) == 0x1050);
static_assert(offsetof(UPrisonerCommonData, MediumFacialHairCurve) == 0x1058);
static_assert(offsetof(UPrisonerCommonData, MediumFacialHairPDOCurve) == 0x1060);
static_assert(offsetof(UPrisonerCommonData, MediumFacialHairTopOpacityCurve) == 0x1068);
static_assert(offsetof(UPrisonerCommonData, LongFacialHairCurve) == 0x1070);
static_assert(offsetof(UPrisonerCommonData, LongFacialHairPDOCurve) == 0x1078);
static_assert(offsetof(UPrisonerCommonData, LongFacialHairTopOpacityCurve) == 0x1080);
static_assert(offsetof(UPrisonerCommonData, AutoTriggeredVomitingNotification) == 0x1098);
static_assert(offsetof(UPrisonerCommonData, AutoTriggeredUrinationNotification) == 0x10A0);
static_assert(offsetof(UPrisonerCommonData, AutoTriggeredDefecationNotification) == 0x10A8);
static_assert(offsetof(UPrisonerCommonData, UIDataClass) == 0x10B0);
static_assert(offsetof(UPrisonerCommonData, DefecateNakedForcedAudioEvent) == 0x10B8);
static_assert(offsetof(UPrisonerCommonData, DefecateClothedForcedAudioEvent) == 0x10C0);
static_assert(offsetof(UPrisonerCommonData, DefecateNakedForcedDiarrheaAudioEvent) == 0x10C8);
static_assert(offsetof(UPrisonerCommonData, DefecateClothedForcedDiarrheaAudioEvent) == 0x10D0);
static_assert(offsetof(UPrisonerCommonData, UrinateForcedAudioEvent) == 0x10D8);
static_assert(offsetof(UPrisonerCommonData, StartBlowingAirAudioEvent) == 0x10E0);
static_assert(offsetof(UPrisonerCommonData, StopBlowingAirAudioEvent) == 0x10E8);
static_assert(offsetof(UPrisonerCommonData, PhoenixTearsEffectSound) == 0x10F0);
static_assert(offsetof(UPrisonerCommonData, DiarrheaParticleSystem) == 0x10F8);
static_assert(offsetof(UPrisonerCommonData, FecesClass) == 0x1100);
static_assert(offsetof(UPrisonerCommonData, FecesSocketName) == 0x1108);
static_assert(offsetof(UPrisonerCommonData, ResponseIdles) == 0x1110);
static_assert(offsetof(UPrisonerCommonData, SkydivingStartAudioEvent) == 0x1118);
static_assert(offsetof(UPrisonerCommonData, SkydivingStopAudioEvent) == 0x1120);
static_assert(offsetof(UPrisonerCommonData, IntroCinematicScreamAudioEvent) == 0x1128);
static_assert(offsetof(UPrisonerCommonData, SurvivalTipEventListenerClass) == 0x1138);
static_assert(offsetof(UPrisonerCommonData, MaxRunningSpeedMultiplierVsStaminaRatio) == 0x1140);
static_assert(offsetof(UPrisonerCommonData, RunningActionDifficultyMultiplierVsStaminaRatio) == 0x11C8);
static_assert(offsetof(UPrisonerConsumableUserData, ConsumptionMethod) == 0x0028);
static_assert(offsetof(UPrisonerConsumableUserData, ItemClass) == 0x0030);
static_assert(offsetof(UPrisonerConsumableUserData, ResourceTypeClass) == 0x0038);
static_assert(offsetof(FCorpseSkeletalMeshRepData, DisplayName) == 0x0000);
static_assert(offsetof(FCorpseSkeletalMeshRepData, Mesh) == 0x0008);
static_assert(offsetof(FCorpseSkeletalMeshRepData, Materials) == 0x0010);
static_assert(offsetof(FCorpseSkeletalMeshRepData, Transform) == 0x0030);
static_assert(offsetof(FCorpseSkeletalMeshRepData, AttachSocket) == 0x0060);
static_assert(offsetof(FCorpseStaticMeshRepData, DisplayName) == 0x0000);
static_assert(offsetof(FCorpseStaticMeshRepData, Mesh) == 0x0008);
static_assert(offsetof(FCorpseStaticMeshRepData, Materials) == 0x0010);
static_assert(offsetof(FCorpseStaticMeshRepData, Transform) == 0x0030);
static_assert(offsetof(FCorpseStaticMeshRepData, AttachSocket) == 0x0060);
static_assert(offsetof(FCorpsePoseData, Location) == 0x0000);
static_assert(offsetof(FCorpsePoseData, Rotation) == 0x0010);
static_assert(offsetof(FCorpsePoseData, LinearVelocity) == 0x0020);
static_assert(offsetof(FCorpsePoseData, AngularVelocity) == 0x002C);
static_assert(offsetof(APrisonerCorpse, RagdollMeshComponent) == 0x0240);
static_assert(offsetof(APrisonerCorpse, MainBoneName) == 0x0248);
static_assert(offsetof(APrisonerCorpse, RagdollMeshData) == 0x0250);
static_assert(offsetof(APrisonerCorpse, StaticMeshData) == 0x02C0);
static_assert(offsetof(APrisonerCorpse, SkeletalMeshData) == 0x02D0);
static_assert(offsetof(APrisonerCorpse, Attachements) == 0x02F0);
static_assert(offsetof(APrisonerCorpse, AttachementSockets) == 0x0300);
static_assert(offsetof(APrisonerCorpse, StrippedStaticMeshData) == 0x0310);
static_assert(offsetof(APrisonerCorpse, StrippedSkeletalMeshData) == 0x0320);
static_assert(offsetof(APrisonerCorpse, CensorMesh) == 0x0330);
static_assert(offsetof(APrisonerCorpse, CensorMaterial) == 0x0338);
static_assert(offsetof(APrisonerCorpse, GenitalsCensorComponent) == 0x0340);
static_assert(offsetof(APrisonerCorpse, LeftBreastCensorComponent) == 0x0348);
static_assert(offsetof(APrisonerCorpse, RightBreastCensorComponent) == 0x0350);
static_assert(offsetof(APrisonerCorpse, _serverBuoyancy) == 0x03A8);
static_assert(offsetof(APrisonerCorpse, _buoyancy) == 0x0418);
static_assert(offsetof(APrisonerCorpse, _censorClass) == 0x0488);
static_assert(offsetof(APrisonerCorpse, PoseData) == 0x06D0);
static_assert(offsetof(APrisonerCorpse, inventory) == 0x0710);
static_assert(offsetof(APrisonerCorpse, _choppingRecipeDataAsset) == 0x0740);
static_assert(offsetof(UPrisonerCreationUIController, _editedPrisonerActorTag) == 0x0344);
static_assert(offsetof(UPrisonerCreationUIController, _mugshotPrisonerActorTag) == 0x034C);
static_assert(offsetof(UPrisonerCreationUIController, _characterMeshesToAddOntoMugshotPrisoner) == 0x0358);
static_assert(offsetof(UPrisonerCreationUIController, _femaleTag) == 0x0368);
static_assert(offsetof(UPrisonerCreationUIController, _maleTag) == 0x0370);
static_assert(offsetof(UPrisonerDebugUI_SkillEntryWidget, _nameTextBlock) == 0x0270);
static_assert(offsetof(UPrisonerDebugUI_BodyConditionEntryWidget, _nameTextBlock) == 0x0270);
static_assert(offsetof(UPrisonerDebugUI_MainWidget, _prisonersComboBox) == 0x0268);
static_assert(offsetof(UPrisonerDebugUI_MainWidget, _lifeTimeTextBlock) == 0x0270);
static_assert(offsetof(UPrisonerDebugUI_MainWidget, _strengthTextBlock) == 0x0278);
static_assert(offsetof(UPrisonerDebugUI_MainWidget, _constitutionTextBlock) == 0x0280);
static_assert(offsetof(UPrisonerDebugUI_MainWidget, _dexterityTextBlock) == 0x0288);
static_assert(offsetof(UPrisonerDebugUI_MainWidget, _intelligenceTextBlock) == 0x0290);
static_assert(offsetof(UPrisonerDebugUI_MainWidget, _healthTextBlock) == 0x0298);
static_assert(offsetof(UPrisonerDebugUI_MainWidget, _bodyTemperatureTextBlock) == 0x02A0);
static_assert(offsetof(UPrisonerDebugUI_MainWidget, _apparentTemperatureTextBlock) == 0x02A8);
static_assert(offsetof(UPrisonerDebugUI_MainWidget, _clothesTemperatureTextBlock) == 0x02B0);
static_assert(offsetof(UPrisonerDebugUI_MainWidget, _skillsListView) == 0x02B8);
static_assert(offsetof(UPrisonerDebugUI_MainWidget, _bodyConditionsListView) == 0x02C0);
static_assert(offsetof(UPrisonerDebugUI_MainWidget, _data) == 0x02D0);
static_assert(offsetof(UPrisonerDebugUI_MainWidget, _tooltipCache) == 0x02D8);
static_assert(offsetof(UPrisonerDebugUI_MainWidget, _prisonerBodyEffects) == 0x02F0);
static_assert(offsetof(UPrisonerFirstPersonSubviewComponent, SubviewID) == 0x07D8);
static_assert(offsetof(UPrisonerFirstPersonSubviewComponent, WeaponFoveationOffset) == 0x07E0);
static_assert(offsetof(UPrisonerFirstPersonSubviewComponent, MinMaxViewPitchByYawAndSpeed) == 0x0800);
static_assert(offsetof(UPrisonerFirstPersonSubviewComponent, LocalSpaceOffsetByYaw) == 0x0808);
static_assert(offsetof(UPrisonerFirstPersonSubviewComponent, LocalSpaceOffsetByPitch) == 0x0810);
static_assert(offsetof(UPrisonerFirstPersonSubviewComponent, ActorSpaceOffsetByYaw) == 0x0818);
static_assert(offsetof(UPrisonerFirstPersonSubviewComponent, ActorSpaceOffsetByPitch) == 0x0820);
static_assert(offsetof(UPrisonerFirstPersonSubviewComponent, LockRotationToSocketAnimationCurveName) == 0x0828);
static_assert(offsetof(UPrisonerFirstPersonSubviewComponent, LockRotationToSocketSocketName) == 0x0830);
static_assert(offsetof(UPrisonerFirstPersonSubviewComponent, ProbeChannel) == 0x083C);
static_assert(offsetof(UPrisonerFirstPersonSubviewComponent, AnimationBobbingTXCurveName) == 0x0840);
static_assert(offsetof(UPrisonerFirstPersonSubviewComponent, AnimationBobbingTYCurveName) == 0x0848);
static_assert(offsetof(UPrisonerFirstPersonSubviewComponent, AnimationBobbingTZCurveName) == 0x0850);
static_assert(offsetof(UPrisonerFirstPersonSubviewComponent, AnimationBobbingRYCurveName) == 0x0858);
static_assert(offsetof(UPrisonerFirstPersonSubviewComponent, AnimationBobbingRPCurveName) == 0x0860);
static_assert(offsetof(UPrisonerFirstPersonSubviewComponent, AnimationBobbingRRCurveName) == 0x0868);
static_assert(offsetof(UPrisonerFirstPersonSubviewComponent, AnimationCameraOffsetTXCurveName) == 0x0878);
static_assert(offsetof(UPrisonerFirstPersonSubviewComponent, AnimationCameraOffsetTYCurveName) == 0x0880);
static_assert(offsetof(UPrisonerFirstPersonSubviewComponent, AnimationCameraOffsetTZCurveName) == 0x0888);
static_assert(offsetof(UPrisonerFirstPersonSubviewComponent, AnimationCameraOffsetRYCurveName) == 0x0890);
static_assert(offsetof(UPrisonerFirstPersonSubviewComponent, AnimationCameraOffsetRPCurveName) == 0x0898);
static_assert(offsetof(UPrisonerFirstPersonSubviewComponent, AnimationCameraOffsetRRCurveName) == 0x08A0);
static_assert(offsetof(FPrisonerFirstPersonSubviewBlendOverride, Source) == 0x0000);
static_assert(offsetof(FPrisonerFirstPersonSubviewBlendOverride, Target) == 0x0001);
static_assert(offsetof(UPrisonerFirstPersonViewComponent, SubviewBlendingPriorities) == 0x00D0);
static_assert(offsetof(UPrisonerFirstPersonViewComponent, SubviewBlendOverrides) == 0x00E0);
static_assert(offsetof(UPrisonerFishingComponent, _fishingState) == 0x00C0);
static_assert(offsetof(UPrisonerForeignSubstance, _absorptionCapacityModifierVsConstitutionRatio) == 0x00B0);
static_assert(offsetof(APrisonerHallucinationIllusion_SeeFirearmsAsSticksAndBananas, _bananaMesh) == 0x0220);
static_assert(offsetof(APrisonerHallucinationIllusion_SeeFirearmsAsSticksAndBananas, _mediumStickMesh) == 0x0228);
static_assert(offsetof(APrisonerHallucinationIllusion_SeeOtherPlayersWithWeirdMasks, _maskMeshes) == 0x0220);
static_assert(offsetof(APrisonerHallucinationIllusion_SeeOtherPlayersWithWeirdMasks, _maskCharacterMeshes) == 0x0230);
static_assert(offsetof(APrisonerHallucinationIllusion_SpawnCompanionCrow, _crowClass) == 0x0220);
static_assert(offsetof(APrisonerHallucinationIllusion_SpawnCompanionCrow, _crowAttachSocketName) == 0x0228);
static_assert(offsetof(APrisonerHallucinationIllusion_SpawnCompanionCrow, _attachedCrowRelativeTransform) == 0x0230);
static_assert(offsetof(APrisonerHallucinationIllusion_SpawnCompanionCrow, _responseIdleInitialInterval) == 0x0260);
static_assert(offsetof(APrisonerHallucinationIllusion_SpawnCompanionCrow, _responseIdleInterval) == 0x0268);
static_assert(offsetof(APrisonerHallucinationIllusion_SpawnCompanionCrow, _responseIdleMontages) == 0x0270);
static_assert(offsetof(APrisonerHallucinationIllusion_SpawnCompanionCrow, _flyoffDirection) == 0x0280);
static_assert(offsetof(APrisonerHallucinationIllusion_SpawnCompanionCrow, _flyoffSpeedVsTime) == 0x0290);
static_assert(offsetof(APrisonerHallucinationIllusion_SpawnCompanionCrow, _flyoffAudioEvent) == 0x0318);
static_assert(offsetof(APrisonerHallucinationIllusion_SpawnCompanionCrow, _cruisingSpeedVsTime) == 0x0320);
static_assert(offsetof(APrisonerHallucinationIllusion_SpawnCompanionCrow, _cruisingRotationRateVsTime) == 0x03A8);
static_assert(offsetof(APrisonerHallucinationIllusion_SpawnCompanionCrow, _rollVsSteerRate) == 0x0430);
static_assert(offsetof(APrisonerHallucinationIllusion_SpawnCompanionCrow, _landingAudioEvent) == 0x04C0);
static_assert(offsetof(APrisonerHallucinationIllusion_SpawnCompanionCrow, _landedAudioEvent) == 0x04C8);
static_assert(offsetof(APrisonerHallucinationIllusion_SpawnCompanionCrow, _landedMontage) == 0x04D0);
static_assert(offsetof(APrisonerHallucinationIllusion_SpawnFakeItemsThatDisappearOnPickup, _fakeItemClasses) == 0x0220);
static_assert(offsetof(APrisonerHallucinationIllusion_SpawnMiniatureZombies, _zombieClasses) == 0x0220);
static_assert(offsetof(APrisonerHallucinationIllusion_SpawnMiniatureZombies, _aiControllerClass) == 0x0230);
static_assert(offsetof(APrisonerHallucinationIllusion_SpawnMiniatureZombies, _zombieGroupSpawnInterval) == 0x0244);
static_assert(offsetof(APrisonerHallucinationIllusion_SpawnMiniatureZombies, _zombieSpawnDistance) == 0x024C);
static_assert(offsetof(APrisonerHallucinationIllusion_SpawnMiniatureZombies, _zombieControllers) == 0x0278);
static_assert(offsetof(FMapHUDPrisonerObject, _prisonerPositionTextureSize) == 0x0018);
static_assert(offsetof(FMapHUDPrisonerObject, _myPrisonerPositionTexture) == 0x0020);
static_assert(offsetof(FMapHUDPrisonerObject, _prisonerPingAnimationTexture) == 0x0028);
static_assert(offsetof(FMapHUDHomeLocationObject, _font) == 0x0018);
static_assert(offsetof(FMapHUDOtherPlayersObject, _otherPlayerPositionOuterRingTexture) == 0x0018);
static_assert(offsetof(FMapHUDOtherPlayersObject, _otherPlayerOuterRingColor) == 0x0020);
static_assert(offsetof(FMapHUDOtherPlayersObject, _otherPlayerHighlightOuterRingColor) == 0x0030);
static_assert(offsetof(FMapHUDOtherPlayersObject, _otherPlayerPositionInnerCicleTexture) == 0x0040);
static_assert(offsetof(FMapHUDOtherPlayersObject, _otherPlayerInnerCircleColor) == 0x0048);
static_assert(offsetof(FMapHUDOtherPlayersObject, _otherPlayerHighlightInnerCircleColor) == 0x0058);
static_assert(offsetof(FMapHUDOtherPlayersObject, _otherPlayerFont) == 0x0068);
static_assert(offsetof(FMapHUDOtherPlayersObject, _otherPlayerNameHighlightColor) == 0x0070);
static_assert(offsetof(FMapHUDOtherPlayersObject, _otherPlayerNameHighlightOutlineColor) == 0x0080);
static_assert(offsetof(FMapHUDOtherPlayersObject, _otherPlayerNameColor) == 0x0090);
static_assert(offsetof(FMapHUDOtherPlayersObject, _otherPlayerNameOutlineColor) == 0x00A0);
static_assert(offsetof(FMapHUDOtherPlayersObject, _prisonerPositionTextureSize) == 0x00B0);
static_assert(offsetof(FMapHUDDroneObject, _droneDirectionTexture) == 0x0018);
static_assert(offsetof(FMapHUDDroneObject, _dronePositionTexture) == 0x0020);
static_assert(offsetof(FMapHUDDroneObject, _dronePingAnimationTexture) == 0x0028);
static_assert(offsetof(FMapHUDVehiclesObject, _vehiclePositionOuterRingTexture) == 0x0018);
static_assert(offsetof(FMapHUDVehiclesObject, _vehicleOuterRingColor) == 0x0020);
static_assert(offsetof(FMapHUDVehiclesObject, _vehicleHighlightOuterRingColor) == 0x0030);
static_assert(offsetof(FMapHUDVehiclesObject, _vehiclePositionInnerCircleTexture) == 0x0040);
static_assert(offsetof(FMapHUDVehiclesObject, _vehicleInnerCircleColor) == 0x0048);
static_assert(offsetof(FMapHUDVehiclesObject, _vehicleHighlightInnerCircleColor) == 0x0058);
static_assert(offsetof(FMapHUDVehiclesObject, _vehicleFont) == 0x0068);
static_assert(offsetof(FMapHUDVehiclesObject, _vehicleNameHighlightColor) == 0x0070);
static_assert(offsetof(FMapHUDVehiclesObject, _vehicleNameHighlightOutlineColor) == 0x0080);
static_assert(offsetof(FMapHUDVehiclesObject, _vehicleNameColor) == 0x0090);
static_assert(offsetof(FMapHUDVehiclesObject, _vehicleNameOutlineColor) == 0x00A0);
static_assert(offsetof(FMapHUDVehiclesObject, _vehiclePositionTextureSize) == 0x00B0);
static_assert(offsetof(FMapHUDFlagsObject, _flagPositionOuterRingTexture) == 0x0018);
static_assert(offsetof(FMapHUDFlagsObject, _flagOuterRingColor) == 0x0020);
static_assert(offsetof(FMapHUDFlagsObject, _flagHighlightOuterRingColor) == 0x0030);
static_assert(offsetof(FMapHUDFlagsObject, _flagPositionInnerCircleTexture) == 0x0040);
static_assert(offsetof(FMapHUDFlagsObject, _flagInnerCircleColor) == 0x0048);
static_assert(offsetof(FMapHUDFlagsObject, _flagHighlightInnerCircleColor) == 0x0058);
static_assert(offsetof(FMapHUDFlagsObject, _flagFont) == 0x0068);
static_assert(offsetof(FMapHUDFlagsObject, _flagNameHighlightColor) == 0x0070);
static_assert(offsetof(FMapHUDFlagsObject, _flagNameHighlightOutlineColor) == 0x0080);
static_assert(offsetof(FMapHUDFlagsObject, _flagNameColor) == 0x0090);
static_assert(offsetof(FMapHUDFlagsObject, _flagNameOutlineColor) == 0x00A0);
static_assert(offsetof(FMapHUDFlagsObject, _flagPositionTextureSize) == 0x00B0);
static_assert(offsetof(FMapHUDQuestObject, _questPositionOuterRingTexture) == 0x0018);
static_assert(offsetof(FMapHUDQuestObject, _questOuterRingColor) == 0x0020);
static_assert(offsetof(FMapHUDQuestObject, _questPositionInnerCircleTexture) == 0x0030);
static_assert(offsetof(FMapHUDQuestObject, _questInnerCircleColor) == 0x0038);
static_assert(offsetof(FMapHUDQuestObject, _questFont) == 0x0048);
static_assert(offsetof(FMapHUDQuestObject, _questNameColor) == 0x0050);
static_assert(offsetof(FMapHUDQuestObject, _questNameOutlineColor) == 0x0060);
static_assert(offsetof(FMapHUDQuestObject, _questPositionTextureSize) == 0x0070);
static_assert(offsetof(APrisonerHUD, HudWidget) == 0x0370);
static_assert(offsetof(APrisonerHUD, DamageDirectionIndicator) == 0x0378);
static_assert(offsetof(APrisonerHUD, TacticsMaterial) == 0x0388);
static_assert(offsetof(APrisonerHUD, LoadingIconWidget) == 0x0390);
static_assert(offsetof(APrisonerHUD, SpawnScreenWidget) == 0x0398);
static_assert(offsetof(APrisonerHUD, WaypointScreenWidget) == 0x03A0);
static_assert(offsetof(APrisonerHUD, _HUDFont) == 0x03B8);
static_assert(offsetof(APrisonerHUD, _HUDFontScope) == 0x03C0);
static_assert(offsetof(APrisonerHUD, _mapPropertiesTexture) == 0x03F0);
static_assert(offsetof(APrisonerHUD, _customMapBorderColor) == 0x03FC);
static_assert(offsetof(APrisonerHUD, _plantingPanelWidgetClass) == 0x0410);
static_assert(offsetof(APrisonerHUD, _adminPlantPanelWidgetClass) == 0x0418);
static_assert(offsetof(APrisonerHUD, _plantStatusIndicatorWidgetClass) == 0x0420);
static_assert(offsetof(APrisonerHUD, _traderCategories) == 0x0428);
static_assert(offsetof(APrisonerHUD, _pauseMenuUIControllerClass) == 0x0448);
static_assert(offsetof(APrisonerHUD, _itemsCraftingUIControllerClass) == 0x0450);
static_assert(offsetof(APrisonerHUD, _baseBuildingUIControllerClass) == 0x0458);
static_assert(offsetof(APrisonerHUD, _cookingUIControllerClass) == 0x0460);
static_assert(offsetof(APrisonerHUD, _chatUIControllerClass) == 0x0468);
static_assert(offsetof(APrisonerHUD, _activeUIContextType) == 0x0538);
static_assert(offsetof(APrisonerHUD, _existingUIContexts) == 0x0540);
static_assert(offsetof(APrisonerHUD, _scoreboardWidget) == 0x0598);
static_assert(offsetof(APrisonerHUD, _prisonerMapHUDObject) == 0x05E8);
static_assert(offsetof(APrisonerHUD, _homeLocationMapHUDObject) == 0x0628);
static_assert(offsetof(APrisonerHUD, _worldEventsMapHUDObject) == 0x0670);
static_assert(offsetof(APrisonerHUD, _otherPlayersMapHUDObjects) == 0x0688);
static_assert(offsetof(APrisonerHUD, _droneMapHUDObject) == 0x0748);
static_assert(offsetof(APrisonerHUD, _vehicleMapHUDObjects) == 0x0780);
static_assert(offsetof(APrisonerHUD, _flagMapHUDObjects) == 0x0860);
static_assert(offsetof(APrisonerHUD, _questMapHUDObject) == 0x0940);
static_assert(offsetof(APrisonerHUD, _itemSplitWidget) == 0x09D0);
static_assert(offsetof(APrisonerHUD, _raidProtectionSelectionWidget) == 0x09D8);
static_assert(offsetof(APrisonerHUD, _onMapOpened) == 0x09F0);
static_assert(offsetof(APrisonerHUD, _onMapClosed) == 0x09F8);
static_assert(offsetof(UPrisonerInventoryComponent, _chipMesh) == 0x0150);
static_assert(offsetof(UPrisonerInventoryComponent, _quickAccessManager) == 0x0158);
static_assert(offsetof(UPrisonerInventoryComponent, _clothesPartsToDamageByMeleeAttackCapsuleAttachment) == 0x01E0);
static_assert(offsetof(UPrisonerInventoryComponent, _parachuteClass) == 0x0240);
static_assert(offsetof(UPrisonerInventoryComponent, _inventoryClothes) == 0x0248);
static_assert(offsetof(UPrisonerInventoryComponent, _inventoryHandsHolsters) == 0x0250);
static_assert(offsetof(UPrisonerLifeIndicatorsSprite, _mainVerticalBox) == 0x0268);
static_assert(offsetof(UPrisonerLifeIndicatorsSprite, _sizeBox) == 0x0270);
static_assert(offsetof(UPrisonerLifeIndicatorsSprite, _dualProgressBarBreathing) == 0x0278);
static_assert(offsetof(UPrisonerLifeIndicatorsSprite, _gradedProgressBarActionDifficulty) == 0x0280);
static_assert(offsetof(UPrisonerLifeIndicatorsSprite, CircularProgressBarSpritesHLTH) == 0x0288);
static_assert(offsetof(UPrisonerLifeIndicatorsSprite, CircularProgressBarSpritesSTA) == 0x0298);
static_assert(offsetof(UPrisonerLifeIndicatorsSprite, CircularProgressBarSpritesNRG) == 0x02A8);
static_assert(offsetof(UPrisonerLifeIndicatorsSprite, CircularProgressBarSpritesHYD) == 0x02B8);
static_assert(offsetof(UPrisonerLifeIndicatorsSprite, CircularProgressBarSpritesNoise) == 0x02C8);
static_assert(offsetof(UPrisonerLifeIndicatorsSprite, CircularProgressBarSpritesAIPerception) == 0x02D8);
static_assert(offsetof(UPrisonerLifeIndicatorsSprite, _overburdenedWarningImage) == 0x02E8);
static_assert(offsetof(UPrisonerLifeIndicatorsSprite, NewAnimation) == 0x0368);
static_assert(offsetof(UPrisonerLifeIndicatorsSprite, _prisoner) == 0x0370);
static_assert(offsetof(UPrisonerSpawnEquipment, Condition) == 0x0030);
static_assert(offsetof(UPrisonerSpawnEquipment, ItemClass) == 0x0078);
static_assert(offsetof(UPrisonerSpawnEquipment, EquipType) == 0x00A0);
static_assert(offsetof(UPrisonerSpawnEquipment, BiomeRequriment) == 0x00A4);
static_assert(offsetof(UPrisonerLoadout, primary) == 0x0030);
static_assert(offsetof(UPrisonerLoadout, primaryAttachments) == 0x0038);
static_assert(offsetof(UPrisonerLoadout, secondary) == 0x0048);
static_assert(offsetof(UPrisonerLoadout, secondaryAttachments) == 0x0050);
static_assert(offsetof(UPrisonerLoadout, tertiary) == 0x0060);
static_assert(offsetof(UPrisonerLoadout, tertiaryAttachments) == 0x0068);
static_assert(offsetof(UPrisonerLoadout, outfit) == 0x0078);
static_assert(offsetof(UPrisonerLoadout, support) == 0x0088);
static_assert(offsetof(UPrisonerMeshManager, _prisonerFPShadowMeshComponent) == 0x0248);
static_assert(offsetof(UPrisonerMeshManager, _prisonerFPShadowMesh) == 0x0538);
static_assert(offsetof(UPrisonerMeshManager, _bodyPartVsCharacterMeshSlotMapping) == 0x0540);
static_assert(offsetof(UPrisonerMeshManager, _wettablePartVsCharacterMeshSlotMapping) == 0x06C0);
static_assert(offsetof(UPrisonerMeshManager, _clothesPartVsCharacterMeshSlotMapping) == 0x0740);
static_assert(offsetof(UPrisonerMeshManager, _characterBodyClass) == 0x08A0);
static_assert(offsetof(UPrisonerMeshManager, _classesIgnoringFPVHiding) == 0x08A8);
static_assert(offsetof(UPrisonerMeshManager, _highHeelsTag) == 0x08B8);
static_assert(offsetof(FPrisonerGroundStanceData, MaxMovementPace) == 0x0004);
static_assert(offsetof(FPrisonerGroundStanceData, MaxLimpingMovementPace) == 0x0005);
static_assert(offsetof(FPrisonerAquaticModeData, MaxMovementPace) == 0x0004);
static_assert(offsetof(FPrisonerAerialPosePair, PoseA) == 0x0000);
static_assert(offsetof(FPrisonerAerialPosePair, PoseB) == 0x0001);
static_assert(offsetof(FPrisonerAerialPoseTransition, Animation) == 0x0008);
static_assert(offsetof(FPrisonerAerialPoseTransition, AnimationTimeRange) == 0x0010);
static_assert(offsetof(FPrisonerAerialPoseTransition, PitchBlendCurve) == 0x0018);
static_assert(offsetof(FWindowMantlingAnimationInfo, AnchorOffset) == 0x0000);
static_assert(offsetof(FWindowMantlingAnimationInfo, AnchoringAnimation) == 0x0010);
static_assert(offsetof(FWindowMantlingAnimationInfo, ClimbingMontage) == 0x0020);
static_assert(offsetof(FLedgeMantlingAnimationInfo, AnchorOffset) == 0x0000);
static_assert(offsetof(FLedgeMantlingAnimationInfo, AnchoringAnimation) == 0x0010);
static_assert(offsetof(FLedgeMantlingAnimationInfo, ClimbingMontage) == 0x0020);
static_assert(offsetof(FConditionalPrisonerMovementParams, Condition) == 0x0000);
static_assert(offsetof(FConditionalPrisonerMovementParams, Value) == 0x0048);
static_assert(offsetof(UPrisonerMovementCommonData, StandingData) == 0x0030);
static_assert(offsetof(UPrisonerMovementCommonData, CrouchingData) == 0x003C);
static_assert(offsetof(UPrisonerMovementCommonData, ProneData) == 0x0048);
static_assert(offsetof(UPrisonerMovementCommonData, SwimmingData) == 0x0054);
static_assert(offsetof(UPrisonerMovementCommonData, DivingData) == 0x0060);
static_assert(offsetof(UPrisonerMovementCommonData, FallData) == 0x006C);
static_assert(offsetof(UPrisonerMovementCommonData, SkydiveSlowData) == 0x0084);
static_assert(offsetof(UPrisonerMovementCommonData, SkydiveFastData) == 0x009C);
static_assert(offsetof(UPrisonerMovementCommonData, HandsBoundData) == 0x00B4);
static_assert(offsetof(UPrisonerMovementCommonData, AerialPoseTransitionMap) == 0x00D0);
static_assert(offsetof(UPrisonerMovementCommonData, JumpZVelocityMultiplierVsGroundSpeedMps) == 0x0128);
static_assert(offsetof(UPrisonerMovementCommonData, JumpZVelocityMultiplierVsGroundSlopeDegrees) == 0x01B0);
static_assert(offsetof(UPrisonerMovementCommonData, JumpStaminaDrainVsTotalMassKg) == 0x0238);
static_assert(offsetof(UPrisonerMovementCommonData, WindowMantlingAnimations) == 0x02C0);
static_assert(offsetof(UPrisonerMovementCommonData, LedgeMantlingAnimations) == 0x02D0);
static_assert(offsetof(UPrisonerMovementCommonData, PostLadderClimbingLaunchVelocity) == 0x02F4);
static_assert(offsetof(UPrisonerMovementCommonData, BodyRotationDrag) == 0x032C);
static_assert(offsetof(UPrisonerMovementCommonData, RotationRateMultiplierVsPerformanceRatio) == 0x0338);
static_assert(offsetof(UPrisonerMovementCommonData, MantlingSpeedMultiplierVsPerformanceRatio) == 0x0340);
static_assert(offsetof(UPrisonerMovementCommonData, _groundMovementParams) == 0x0348);
static_assert(offsetof(UPrisonerMovementCommonData, _aquaticMovementParams) == 0x0358);
static_assert(offsetof(FPrisonerClimbAnimationInfo, AnchorOffset) == 0x0010);
static_assert(offsetof(FPrisonerClimbAnimationInfo, AnchoringAnimation) == 0x0020);
static_assert(offsetof(FPrisonerClimbAnimationInfo, ClimbingMontage) == 0x0030);
static_assert(offsetof(FLadderInfoRepData, LadderTransform) == 0x0000);
static_assert(offsetof(FLadderInfoRepData, CapsuleBias) == 0x0030);
static_assert(offsetof(FLadderInfoRepData, RootBoneOffset) == 0x003C);
static_assert(offsetof(FLadderInfoRepData, PhysicalSurfaceForSounds) == 0x004C);
static_assert(offsetof(UPrisonerMovementComponent, MaxRotationRateCurve) == 0x0DE8);
static_assert(offsetof(UPrisonerMovementComponent, JumpZVelocityMultiplierVsSpeed) == 0x0E68);
static_assert(offsetof(UPrisonerMovementComponent, JumpZVelocityMultiplierVsGroundSlopeAngle) == 0x0E70);
static_assert(offsetof(UPrisonerMovementComponent, ClimbAnimations) == 0x0E78);
static_assert(offsetof(UPrisonerMovementComponent, PostLadderClimbingLaunchVelocity) == 0x0EA0);
static_assert(offsetof(UPrisonerMovementComponent, MaxHorzDistanceToWindowForClimbingVsSpeed) == 0x0EB8);
static_assert(offsetof(UPrisonerMovementComponent, WindowClimbingAnimations) == 0x0EC0);
static_assert(offsetof(UPrisonerMovementComponent, DesiredWaterImmersionCorrectionAccelerationCurve) == 0x0EF0);
static_assert(offsetof(UPrisonerMovementComponent, OceanWavesAcceleration) == 0x0EFC);
static_assert(offsetof(UPrisonerMovementComponent, BodyRotationDrag) == 0x0F38);
static_assert(offsetof(UPrisonerMovementComponent, WaterForceWhenSwimmingParams) == 0x0F4C);
static_assert(offsetof(UPrisonerMovementComponent, _repAccelerationNormal) == 0x0F64);
static_assert(offsetof(UPrisonerMovementComponent, _ladderInfoRepData) == 0x1200);
static_assert(offsetof(FPrisonerMovementSettings_Ground, MaxSpeedMultiplierVsPerformanceScore) == 0x0000);
static_assert(offsetof(FPrisonerMovementSettings_Ground, AccelerationMultiplierVsPerformanceScore) == 0x0008);
static_assert(offsetof(FPrisonerMovementSettings_Ground, FrictionMultiplierVsPerformanceScore) == 0x0014);
static_assert(offsetof(FPrisonerMovementSettings_Air, Fall) == 0x0000);
static_assert(offsetof(FPrisonerMovementSettings_Air, SkydiveSlow) == 0x0018);
static_assert(offsetof(FPrisonerMovementSettings_Air, SkydiveFast) == 0x0030);
static_assert(offsetof(FPrisonerMovementSettings_Air, HandsBound) == 0x0048);
static_assert(offsetof(FPrisonerMovementSettings_Air, PoseTransitionParamsMap) == 0x0060);
static_assert(offsetof(FPrisonerMovementSettings_Air, JumpZVelocityMultiplierVsPerformanceScore) == 0x00F0);
static_assert(offsetof(FPrisonerMovementSettings_Water, MaxSpeedMultiplierVsPerformanceScore) == 0x0000);
static_assert(offsetof(FPrisonerMovementSettings_Misc, RotationRateMultiplierVsPerformanceScore) == 0x0000);
static_assert(offsetof(FPrisonerMovementSettings_Misc, ClimbingSpeedMultiplierVsPerformanceScore) == 0x0008);
static_assert(offsetof(FPrisonerMovementSettings_Misc, WindowClimbingSpeedMultiplierVsPerformanceScore) == 0x0010);
static_assert(offsetof(UPrisonerMovementSettings, Ground) == 0x0030);
static_assert(offsetof(UPrisonerMovementSettings, GroundMI) == 0x004C);
static_assert(offsetof(UPrisonerMovementSettings, Air) == 0x0068);
static_assert(offsetof(UPrisonerMovementSettings, Water) == 0x0160);
static_assert(offsetof(UPrisonerMovementSettings, Misc) == 0x016C);
static_assert(offsetof(UPrisonerMovementSettings, MiscMI) == 0x0184);
static_assert(offsetof(UPrisonerMovementDebugWidget, ServerText) == 0x0268);
static_assert(offsetof(UPrisonerMovementDebugWidget, ClientText) == 0x0270);
static_assert(offsetof(UPrisonerMovementDebugWidget, Prisoner) == 0x0278);
static_assert(offsetof(UPrisonerMusicPlayerComponent, _musicRootFolder) == 0x00C0);
static_assert(offsetof(UPrisonerMusicPlayerComponent, _turnOnAudioEvent) == 0x00D8);
static_assert(offsetof(UPrisonerMusicPlayerComponent, _turnOffAudioEvent) == 0x00E0);
static_assert(offsetof(UPrisonerMusicPlayerComponent, _importerLibrary) == 0x00E8);
static_assert(offsetof(UPrisonerMusicPlayerComponent, _audioComponent) == 0x00F0);
static_assert(offsetof(UPrisonerMusicPlayerComponent, _radioComponent) == 0x00F8);
static_assert(offsetof(UPrisonerMusicPlayerComponent, _playingSoundWave) == 0x0100);
static_assert(offsetof(UPrisonerPhotoModeAnimInstance, _unarmedPoses) == 0x02C0);
static_assert(offsetof(UPrisonerPhotoModeAnimInstance, _riflePoses) == 0x02D0);
static_assert(offsetof(UPrisonerPhotoModeAnimInstance, _handgunPoses) == 0x02E0);
static_assert(offsetof(UPrisonerPhotoModeAnimInstance, _meleePoses) == 0x02F0);
static_assert(offsetof(UPrisonerPhotoModeAnimInstance, _lowerBodyPoses) == 0x0300);
static_assert(offsetof(UPrisonerPhotoModeAnimInstance, _facialExpressions) == 0x0310);
static_assert(offsetof(UPrisonerPhotoModeAnimInstance, _maleFacialExpressions) == 0x0320);
static_assert(offsetof(UPrisonerPhotoModeAnimInstance, _femaleFacialExpressions) == 0x0330);
static_assert(offsetof(UPrisonerPhotoModeAnimInstance, _poseGroup) == 0x0340);
static_assert(offsetof(UPrisonerPhotoModeAnimInstance, _correctionPose) == 0x0368);
static_assert(offsetof(UPrisonerPrisonWalletComponent, _deluxeItemsPreset) == 0x00C0);
static_assert(offsetof(UPrisonerResponseIdle, Montages) == 0x0028);
static_assert(offsetof(UPrisonerResponseIdle_StaminaInRange, StaminaRatioRange) == 0x0098);
static_assert(offsetof(UPrisonerResponseIdle_BodyConditionOrSymptomPresence, BodyConditionOrSymptom) == 0x0098);
static_assert(offsetof(UPrisonerResponseIdle_BodyConditionOrSymptomPresence, SeverityLevels) == 0x00A0);
static_assert(offsetof(FPrisonerRestingData, mode) == 0x0000);
static_assert(offsetof(FPrisonerRestingData, RestingAnimation) == 0x0008);
static_assert(offsetof(FPrisonerRestingDataAutonomous, Location) == 0x0004);
static_assert(offsetof(FPrisonerRestingDataAutonomous, EulerRotation) == 0x0010);
static_assert(offsetof(UPrisonerRestingComponent, _restingData) == 0x00C0);
static_assert(offsetof(UPrisonerRestingComponent, _restingDataAutonomous) == 0x00D8);
static_assert(offsetof(FPrisonerInitialSkillInfo, Skill) == 0x0000);
static_assert(offsetof(FPrisonerInitialSkillInfo, InitialLevel) == 0x0008);
static_assert(offsetof(FSkillRecord, ID) == 0x0000);
static_assert(offsetof(FSkillRecord, Level) == 0x0008);
static_assert(offsetof(FSkillRecord, SkillSpecificData) == 0x0010);
static_assert(offsetof(UPrisonerSkillComponent, InitialSkills) == 0x00B0);
static_assert(offsetof(UPrisonerSkillComponent, _skills) == 0x00D0);
static_assert(offsetof(UPrisonerSkillComponent, _actions) == 0x00E0);
static_assert(offsetof(UPrisonerSkillComponent, _skillClasses) == 0x0198);
static_assert(offsetof(UPrisonerSkillComponent, _lastSurroundingItems) == 0x01A0);
static_assert(offsetof(UPrisonerSkillComponent, _replicatedSkills) == 0x0238);
static_assert(offsetof(UPrisonerSkillComponent, _simProxyReplicatedSkills) == 0x0248);
static_assert(offsetof(UPrisonerSkillsUIDataImpl, SkillsUIData) == 0x0028);
static_assert(offsetof(FActiveMovingThroughFoliageSounds, StartAudioEvent) == 0x0008);
static_assert(offsetof(FActiveMovingThroughFoliageSounds, StopAudioEvent) == 0x0010);
static_assert(offsetof(UPrisonerSoundComponent, PeriodicInhaleAudioEvent) == 0x0130);
static_assert(offsetof(UPrisonerSoundComponent, PeriodicExhaleAudioEvent) == 0x0138);
static_assert(offsetof(UPrisonerSoundComponent, HoldBreathInhaleAudioEvent) == 0x0140);
static_assert(offsetof(UPrisonerSoundComponent, HoldBreathExhaleAudioEvent) == 0x0148);
static_assert(offsetof(UPrisonerSoundComponent, HoldBreathBreathlessExhaleAudioEvent) == 0x0150);
static_assert(offsetof(UPrisonerSoundComponent, HeartbeatAudioEvent) == 0x0160);
static_assert(offsetof(UPrisonerSoundComponent, FootstepsAudioEvent) == 0x0168);
static_assert(offsetof(UPrisonerSoundComponent, FootstepsEnhancerAudioEvent) == 0x0170);
static_assert(offsetof(UPrisonerSoundComponent, StartGenericMovingThroughFoliageAudioEvent) == 0x0180);
static_assert(offsetof(UPrisonerSoundComponent, StopGenericMovingThroughFoliageAudioEvent) == 0x0188);
static_assert(offsetof(UPrisonerSoundComponent, GenericOneShotMovingThroughFoliageAudioEvent) == 0x0190);
static_assert(offsetof(UPrisonerSoundComponent, GearNoiseAudioEvent) == 0x0198);
static_assert(offsetof(UPrisonerSoundComponent, GearNoiseAudioEventWhenInWater) == 0x01A0);
static_assert(offsetof(UPrisonerSoundComponent, StartGenericEatItemAudioEvent) == 0x01B0);
static_assert(offsetof(UPrisonerSoundComponent, StopGenericEatItemAudioEvent) == 0x01B8);
static_assert(offsetof(UPrisonerSoundComponent, StartGenericDrinkItemAudioEvent) == 0x01C0);
static_assert(offsetof(UPrisonerSoundComponent, StopGenericDrinkItemAudioEvent) == 0x01C8);
static_assert(offsetof(UPrisonerSoundComponent, StartGenericDrinkWaterAudioEvent) == 0x01D0);
static_assert(offsetof(UPrisonerSoundComponent, StopGenericDrinkWaterAudioEvent) == 0x01D8);
static_assert(offsetof(UPrisonerSoundComponent, StartGenericExamineObjectAudioEvent) == 0x01E0);
static_assert(offsetof(UPrisonerSoundComponent, StopGenericExamineObjectAudioEvent) == 0x01E8);
static_assert(offsetof(UPrisonerSoundComponent, StartGenericCraftAudioEvent) == 0x01F0);
static_assert(offsetof(UPrisonerSoundComponent, StopGenericCraftAudioEvent) == 0x01F8);
static_assert(offsetof(UPrisonerSoundComponent, StartGenericUncraftAudioEvent) == 0x0200);
static_assert(offsetof(UPrisonerSoundComponent, StopGenericUncraftAudioEvent) == 0x0208);
static_assert(offsetof(UPrisonerSoundComponent, StartGenericVehicleRepairAudioEvent) == 0x0210);
static_assert(offsetof(UPrisonerSoundComponent, StopGenericVehicleRepairAudioEvent) == 0x0218);
static_assert(offsetof(UPrisonerSoundComponent, StartWashClothAudioEvent) == 0x0220);
static_assert(offsetof(UPrisonerSoundComponent, StopWashClothAudioEvent) == 0x0228);
static_assert(offsetof(UPrisonerSoundComponent, StartInGameAudioEvent) == 0x0230);
static_assert(offsetof(UPrisonerSoundComponent, StopInGameAudioEvent) == 0x0238);
static_assert(offsetof(UPrisonerSoundComponent, CalmStateAudioEvent) == 0x0240);
static_assert(offsetof(UPrisonerSoundComponent, IntenseStateAudioEvent) == 0x0248);
static_assert(offsetof(UPrisonerSoundComponent, CombatStateAudioEvent) == 0x0250);
static_assert(offsetof(UPrisonerSoundComponent, OutOfBoundsSound) == 0x0258);
static_assert(offsetof(UPrisonerSoundComponent, ChipExplosionSound) == 0x0260);
static_assert(offsetof(UPrisonerSoundComponent, UnconsciousnessStartAudioEvent) == 0x0268);
static_assert(offsetof(UPrisonerSoundComponent, UnconsciousnessResetAudioEvent) == 0x0270);
static_assert(offsetof(UPrisonerSoundComponent, _activeMovingThroughFoliageSounds) == 0x02C0);
static_assert(offsetof(UPrisonerThirdPersonAerialSubviewComponent, PostProcessSettings) == 0x0220);
static_assert(offsetof(FLocalOffsetCurves, YawIdle) == 0x0000);
static_assert(offsetof(FLocalOffsetCurves, YawMoving) == 0x0008);
static_assert(offsetof(FLocalOffsetCurves, PitchIdle) == 0x0010);
static_assert(offsetof(FLocalOffsetCurves, PitchMoving) == 0x0018);
static_assert(offsetof(UPrisonerThirdPersonSubviewComponent, SubviewID) == 0x0298);
static_assert(offsetof(UPrisonerThirdPersonSubviewComponent, GlobalOffset) == 0x02C0);
static_assert(offsetof(UPrisonerThirdPersonSubviewComponent, MaxLocalOffsetWhenColliding) == 0x02D0);
static_assert(offsetof(UPrisonerThirdPersonSubviewComponent, TraceOriginGlobalOffset) == 0x02E4);
static_assert(offsetof(UPrisonerThirdPersonSubviewComponent, TraceOriginRelativeOffset) == 0x02F0);
static_assert(offsetof(UPrisonerThirdPersonSubviewComponent, LocalOffsetCurves) == 0x0300);
static_assert(offsetof(UPrisonerThirdPersonSubviewComponent, AnimationOffsetTZCurveName) == 0x0340);
static_assert(offsetof(UPrisonerThirdPersonSubviewComponent, PostProcessSettings) == 0x0350);
static_assert(offsetof(UPrisonerThirdPersonSubviewComponent, _clippingPreventionOffset) == 0x08D4);
static_assert(offsetof(UPrisonerThirdPersonSubviewComponent, _clippingPreventionTraceOffset) == 0x08E8);
static_assert(offsetof(FPrisonerThirdPersonSubviewBlendOverride, Source) == 0x0000);
static_assert(offsetof(FPrisonerThirdPersonSubviewBlendOverride, Target) == 0x0001);
static_assert(offsetof(UPrisonerThirdPersonViewComponent, SubviewBlendingPriorities) == 0x00D0);
static_assert(offsetof(UPrisonerThirdPersonViewComponent, SubviewBlendOverrides) == 0x00E0);
static_assert(offsetof(UPrisonerThrowComponent, _throwingState) == 0x00C0);
static_assert(offsetof(UPrisonerThrowComponent, _itemToThrow) == 0x00C4);
static_assert(offsetof(UPrisonerUIDataController, _prisonerUIData) == 0x00C8);
static_assert(offsetof(UPrisonerUIDataController, _tooltipCache) == 0x00D0);
static_assert(offsetof(UPrisonerUIDataImpl, SkillsUIData) == 0x0838);
static_assert(offsetof(UPrisonerUIDataImpl, BodySimulationUIData) == 0x0840);
static_assert(offsetof(UPrisonerUIDataResponse, _payload) == 0x0028);
static_assert(offsetof(UPrisonerUIDebugDataResponse, _payload) == 0x0028);
static_assert(offsetof(UPrisonerVehicleAction_InstallAttachmentDescription, Vehicle) == 0x0038);
static_assert(offsetof(FProjectileData, Caption) == 0x0000);
static_assert(offsetof(FProjectileData, BallisticDragModel) == 0x0028);
static_assert(offsetof(FProjectileData, TargetTypeMultiplier) == 0x0038);
static_assert(offsetof(AProjectile, StaticMesh) == 0x0220);
static_assert(offsetof(AProjectile, ImpactEffects) == 0x0238);
static_assert(offsetof(AProjectile, ProjectileData) == 0x0240);
static_assert(offsetof(AProjectile, FlyByAudioEvent) == 0x02D0);
static_assert(offsetof(AProjectile, ColorMaterialParameterName) == 0x02D8);
static_assert(offsetof(AProjectile, InitialColor) == 0x02E0);
static_assert(offsetof(AProjectile, FinalColor) == 0x02F0);
static_assert(offsetof(AProjectile, TrailNiagaraSystem) == 0x0318);
static_assert(offsetof(AProjectile, WaterSplashParticleSystem) == 0x0320);
static_assert(offsetof(AProjectile, _directlyHitActor) == 0x0330);
static_assert(offsetof(AProjectile, _directlyHitComponent) == 0x0338);
static_assert(offsetof(AProjectile, _trailNiagaraComponent) == 0x0408);
static_assert(offsetof(AProjectile, _flags) == 0x041C);
static_assert(offsetof(AProjectile, _ignoreComponentsArray) == 0x0428);
static_assert(offsetof(AProjectile, _materialInstance) == 0x0438);
static_assert(offsetof(AProjectile, _weaponFiringModeWhenShot) == 0x0448);
static_assert(offsetof(AProjectile, _firedShotDescriptionRep) == 0x0450);
static_assert(offsetof(UAmmunitionArrowSpawningParams, AmmunitionArrowClass) == 0x0028);
static_assert(offsetof(FProjectileArrowData, AmmunitionArrowClass) == 0x0000);
static_assert(offsetof(AProjectileArrow, _tempSceneComponent) == 0x0468);
static_assert(offsetof(AProjectileArrow, _relativeRotationSceneComponent) == 0x0470);
static_assert(offsetof(AProjectileArrow, _projectileArrowData) == 0x0478);
static_assert(offsetof(AProjectileExplosive, _explosionParticle) == 0x0488);
static_assert(offsetof(AProjectileExplosive, _explosionAudioEvent) == 0x0490);
static_assert(offsetof(AProjectileExplosive, _explosionCameraShakeClass) == 0x0498);
static_assert(offsetof(UExplosiveAmmunitionArrowSpawningParams, HitPhysicalSurface) == 0x0038);
static_assert(offsetof(AProjectileFlare, _particleSystemComponent) == 0x0468);
static_assert(offsetof(AProjectileFlare, _pointLightComponent) == 0x0470);
static_assert(offsetof(AProjectileFlare, _akFlareComponent) == 0x0478);
static_assert(offsetof(AProjectileFlare, _parachuteParticlesScale) == 0x048C);
static_assert(offsetof(AProjectileFlare, _burnStart) == 0x04A0);
static_assert(offsetof(AProjectileFlare, _burnEnd) == 0x04A8);
static_assert(offsetof(AProjectileFlare, _burningNoiseTag) == 0x04B4);
static_assert(offsetof(FImpactEffectData, ParticleSystem) == 0x0000);
static_assert(offsetof(FImpactEffectData, NiagaraParticleSystem) == 0x0008);
static_assert(offsetof(FImpactEffectData, Decal) == 0x0010);
static_assert(offsetof(UProjectileImpactEffects, BulletPenetrationExitParticlesDaytime) == 0x0058);
static_assert(offsetof(UProjectileImpactEffects, BulletPenetrationExitParticlesNighttime) == 0x0060);
static_assert(offsetof(UProjectileImpactEffects, DayTimePenetrationDecal) == 0x0068);
static_assert(offsetof(UProjectileImpactEffects, NightTimePenetrationDecal) == 0x0070);
static_assert(offsetof(UProjectileImpactEffects, AudioEvent) == 0x0078);
static_assert(offsetof(UProjectileImpactEffects, Default) == 0x0080);
static_assert(offsetof(UProjectileImpactEffects, grass) == 0x0098);
static_assert(offsetof(UProjectileImpactEffects, ForrestGroundCoastal) == 0x00B0);
static_assert(offsetof(UProjectileImpactEffects, ForrestGroundContinental) == 0x00C8);
static_assert(offsetof(UProjectileImpactEffects, Rock) == 0x00E0);
static_assert(offsetof(UProjectileImpactEffects, Stone) == 0x00F8);
static_assert(offsetof(UProjectileImpactEffects, Gravel) == 0x0110);
static_assert(offsetof(UProjectileImpactEffects, GravelBeach) == 0x0128);
static_assert(offsetof(UProjectileImpactEffects, Pebbles) == 0x0140);
static_assert(offsetof(UProjectileImpactEffects, Snow) == 0x0158);
static_assert(offsetof(UProjectileImpactEffects, Ice) == 0x0170);
static_assert(offsetof(UProjectileImpactEffects, Sand) == 0x0188);
static_assert(offsetof(UProjectileImpactEffects, Asphalt) == 0x01A0);
static_assert(offsetof(UProjectileImpactEffects, Dirt) == 0x01B8);
static_assert(offsetof(UProjectileImpactEffects, Water) == 0x01D0);
static_assert(offsetof(UProjectileImpactEffects, WaterOcean) == 0x01E8);
static_assert(offsetof(UProjectileImpactEffects, Cloth) == 0x0200);
static_assert(offsetof(UProjectileImpactEffects, Metal) == 0x0218);
static_assert(offsetof(UProjectileImpactEffects, Aluminium) == 0x0230);
static_assert(offsetof(UProjectileImpactEffects, Concrete) == 0x0248);
static_assert(offsetof(UProjectileImpactEffects, Brick) == 0x0260);
static_assert(offsetof(UProjectileImpactEffects, Wood) == 0x0278);
static_assert(offsetof(UProjectileImpactEffects, Plastic) == 0x0290);
static_assert(offsetof(UProjectileImpactEffects, Rubber) == 0x02A8);
static_assert(offsetof(UProjectileImpactEffects, Glass) == 0x02C0);
static_assert(offsetof(UProjectileImpactEffects, Folliage) == 0x02D8);
static_assert(offsetof(UProjectileImpactEffects, Bark) == 0x02F0);
static_assert(offsetof(UProjectileImpactEffects, Flesh) == 0x0308);
static_assert(offsetof(UProjectileImpactEffects, RoofTile) == 0x0320);
static_assert(offsetof(UProjectileImpactEffects, CeramicsTiles) == 0x0338);
static_assert(offsetof(UProjectileImpactEffects, Scrap) == 0x0350);
static_assert(offsetof(UProjectileImpactEffects, Trunk) == 0x0368);
static_assert(offsetof(UProjectileImpactEffects, Leaves) == 0x0380);
static_assert(offsetof(UProjectileImpactEffects, Cardboard) == 0x0398);
static_assert(offsetof(UProjectileImpactEffects, Plaster) == 0x03B0);
static_assert(offsetof(UProjectileImpactEffects, Kevlar) == 0x03C8);
static_assert(offsetof(UProjectileImpactEffects, ForceField) == 0x03E0);
static_assert(offsetof(UProjectileImpactEffects, NoEffect) == 0x03F8);
static_assert(offsetof(UProjectileImpactEffects, WhiteGravel) == 0x0410);
static_assert(offsetof(UProjectileImpactEffects, Mud) == 0x0428);
static_assert(offsetof(UProjectileImpactEffects, RiverSand) == 0x0440);
static_assert(offsetof(UProjectileImpactEffects, GrassContinental) == 0x0458);
static_assert(offsetof(AProjectileRocket, _alternateMash) == 0x04B0);
static_assert(offsetof(AProjectileRocket, _propulsionParticleSystem) == 0x04C0);
static_assert(offsetof(AProjectileShotgun, projectileClass) == 0x0468);
static_assert(offsetof(UQuartalPieProgressBar, ProgressIcons) == 0x0268);
static_assert(offsetof(UQuartalPieProgressBar, _displayedImage) == 0x0278);
static_assert(offsetof(UQuestInteractableAssetUserData, QuestInteractableTag) == 0x0028);
static_assert(offsetof(AQuestBook, _meshComponent) == 0x0228);
static_assert(offsetof(AQuestBook, _questBookMinigameClass) == 0x0258);
static_assert(offsetof(AQuestBookMinigame, _questPagesWidgetComponent) == 0x0340);
static_assert(offsetof(AQuestBookMinigame, _questBookMeshComponent) == 0x0348);
static_assert(offsetof(AQuestBookMinigame, _openBookIdleAnimation) == 0x0350);
static_assert(offsetof(AQuestBookMinigame, _closedBookIdleAnimation) == 0x0358);
static_assert(offsetof(AQuestBookMinigame, _openBookAnimation) == 0x0360);
static_assert(offsetof(AQuestBookMinigame, _closeBookAnimation) == 0x0368);
static_assert(offsetof(AQuestBookMinigame, _forwardsPageFlipAnimation) == 0x0370);
static_assert(offsetof(AQuestBookMinigame, _backwardsPageFlipAnimation) == 0x0378);
static_assert(offsetof(AQuestBookMinigame, _questBookMaterial) == 0x0380);
static_assert(offsetof(UQuestBookMinigameConfiguration, QuestBookUsed) == 0x0050);
static_assert(offsetof(UQuestBookMinigameWidget, _acceptQuestControlCaption) == 0x0280);
static_assert(offsetof(UQuestBookMinigameWidget, _changeSideControlCaption) == 0x0298);
static_assert(offsetof(UQuestBookMinigameWidget, _exitBookControlCaption) == 0x02B0);
static_assert(offsetof(UQuestBookMinigameWidget, _acceptQuestLabel) == 0x02C8);
static_assert(offsetof(UQuestBookMinigameWidget, _acceptQuestControlText) == 0x02D0);
static_assert(offsetof(UQuestBookMinigameWidget, _changeSideLabel) == 0x02D8);
static_assert(offsetof(UQuestBookMinigameWidget, _changeSideControlText) == 0x02E0);
static_assert(offsetof(UQuestBookMinigameWidget, _exitBookLabel) == 0x02E8);
static_assert(offsetof(UQuestBookMinigameWidget, _exitBookControlText) == 0x02F0);
static_assert(offsetof(UQuestBookMinigameWidget, _acceptQuestProgressBar) == 0x02F8);
static_assert(offsetof(UQuestBookMinigameWidget, _gridPanel) == 0x0300);
static_assert(offsetof(UQuestBookPagesWidget, _movingPage) == 0x0268);
static_assert(offsetof(UQuestBookPagesWidget, _staticPage) == 0x0270);
static_assert(offsetof(FPageSplatterInfo, SplatterTextures) == 0x0008);
static_assert(offsetof(UQuestBookPageWidget, _titleText) == 0x0268);
static_assert(offsetof(UQuestBookPageWidget, _tierIcon) == 0x0270);
static_assert(offsetof(UQuestBookPageWidget, _descriptionText) == 0x0278);
static_assert(offsetof(UQuestBookPageWidget, _requirementsLabel) == 0x0280);
static_assert(offsetof(UQuestBookPageWidget, _requirementsText) == 0x0288);
static_assert(offsetof(UQuestBookPageWidget, _timeLimitText) == 0x0290);
static_assert(offsetof(UQuestBookPageWidget, _locationText) == 0x0298);
static_assert(offsetof(UQuestBookPageWidget, _rewardsText) == 0x02A0);
static_assert(offsetof(UQuestBookPageWidget, _acceptedImage) == 0x02A8);
static_assert(offsetof(UQuestBookPageWidget, _splattersOverlay) == 0x02B0);
static_assert(offsetof(UQuestBookPageWidget, _timeLimitHorizontalBox) == 0x02B8);
static_assert(offsetof(UQuestBookPageWidget, _rewardsVerticalBox) == 0x02C0);
static_assert(offsetof(UQuestBookPageWidget, _splatterInfos) == 0x02C8);
static_assert(offsetof(UQuestBookPageWidget, _splatterSpawnRangeFromYCurve) == 0x02D8);
static_assert(offsetof(UQuestBookPageWidget, _stampPressAnimationCurve) == 0x0360);
static_assert(offsetof(UQuestCommonData, TemplateInteractable) == 0x0030);
static_assert(offsetof(FMapLocationMarker, Location) == 0x0000);
static_assert(offsetof(UQuestCondition, TrackingCaption) == 0x0030);
static_assert(offsetof(UQuestCondition, DialogueUponCompletionName) == 0x0048);
static_assert(offsetof(UQuestCondition, LocationsShownOnMap) == 0x0050);
static_assert(offsetof(UQuestCondition, WidgetsToHighlight) == 0x0068);
static_assert(offsetof(UQuestCondition_BodyCondition, BodyCondition) == 0x0078);
static_assert(offsetof(UQuestCondition_BodyCondition, State) == 0x00A0);
static_assert(offsetof(UQuestCondition_CircularSubMenuOpened, SubMenu) == 0x0078);
static_assert(offsetof(UQuestCondition_ClickUIButton, ButtonTag) == 0x0078);
static_assert(offsetof(UQuestCondition_CustomZone, ZoneNames) == 0x0078);
static_assert(offsetof(UQuestCondition_DrivingWaypoint, WaypointClass) == 0x0078);
static_assert(offsetof(UQuestCondition_DrivingWaypoint, VehicleToSpawn) == 0x00A0);
static_assert(offsetof(UQuestCondition_DrivingWaypoint, CircularAreaGroupName) == 0x00B0);
static_assert(offsetof(UQuestCondition_Elimination, CharacterClass) == 0x0078);
static_assert(offsetof(UQuestCondition_Elimination, CircularAreaName) == 0x00B4);
static_assert(offsetof(UQuestCondition_HudMode, TargetMode) == 0x0078);
static_assert(offsetof(UQuestCondition_InputMapping, MappingName) == 0x0078);
static_assert(offsetof(UQuestCondition_InputMapping, MappingNames) == 0x0080);
static_assert(offsetof(UQuestCondition_InputMapping, RequiredHoveredActor) == 0x0090);
static_assert(offsetof(UQuestCondition_Interactable, InteractableClass) == 0x0078);
static_assert(offsetof(FInteractableDescription, AnchorMeshPathStringRef) == 0x0000);
static_assert(offsetof(FInteractableDescription, FallbackTransform) == 0x0020);
static_assert(offsetof(FInteractableDescription, VisibleMesh) == 0x0050);
static_assert(offsetof(UQuestCondition_InteractablePersistentMesh, Interactables) == 0x00B0);
static_assert(offsetof(UQuestCondition_InteractablePersistentMesh, MaxNumInteractables) == 0x00C4);
static_assert(offsetof(UQuestCondition_InteractableUserData, _questInteractableTag) == 0x00B0);
static_assert(offsetof(UQuestCondition_InteractableUserData, PossibleInteractableSets) == 0x00C0);
static_assert(offsetof(UQuestCondition_InteractableUserData, MaxNumInteractables) == 0x00E0);
static_assert(offsetof(UQuestCondition_InteractableUserData, LimitToCircularAreaNames) == 0x00E8);
static_assert(offsetof(UQuestCondition_ItemEquipped, SlotFilter) == 0x0089);
static_assert(offsetof(UQuestCondition_ItemEquipped, SlotFilterMulti) == 0x0090);
static_assert(offsetof(UQuestCondition_ItemEquipped, TriggerOn) == 0x00A0);
static_assert(offsetof(FQuestItem, MinAcceptedCookLevel) == 0x005C);
static_assert(offsetof(FQuestItem, MaxAcceptedCookLevel) == 0x005D);
static_assert(offsetof(FQuestItem, MinAcceptedCookQuality) == 0x005E);
static_assert(offsetof(FQuestItemSet_Data, Items) == 0x0000);
static_assert(offsetof(UQuestItemSet_Asset, ItemSet) == 0x0030);
static_assert(offsetof(UQuestCondition_ItemSet, ItemSetAsset) == 0x0080);
static_assert(offsetof(UQuestCondition_ItemSet, ItemSetData) == 0x0090);
static_assert(offsetof(UQuestCondition_ItemsInVicinity, MustBeInVicinity) == 0x0078);
static_assert(offsetof(UQuestCondition_PlaceableActor, TriggerType) == 0x0078);
static_assert(offsetof(UQuestCondition_PrisonerAction, TriggerType) == 0x0088);
static_assert(offsetof(UQuestCondition_TalkToNPC, CharacterClass) == 0x0078);
static_assert(offsetof(UQuestCondition_UITabOpen, TargetTab) == 0x0079);
static_assert(offsetof(UQuestCondition_UITabOpen, TargetSubTab) == 0x007B);
static_assert(offsetof(UQuestEntriesPanelWidget, _searchBox) == 0x0268);
static_assert(offsetof(UQuestEntriesPanelWidget, _entryContainer) == 0x0270);
static_assert(offsetof(UQuestEntriesPanelWidget, _entryWidgetClass) == 0x0278);
static_assert(offsetof(UQuestEntryDetailsPanelWidget, _mainOverlay) == 0x0268);
static_assert(offsetof(UQuestEntryDetailsPanelWidget, _scrollBox) == 0x0270);
static_assert(offsetof(UQuestEntryDetailsPanelWidget, _entryName) == 0x0278);
static_assert(offsetof(UQuestEntryDetailsPanelWidget, _entryRemainingTime) == 0x0280);
static_assert(offsetof(UQuestEntryDetailsPanelWidget, _entryDescription) == 0x0288);
static_assert(offsetof(UQuestEntryDetailsPanelWidget, _entryQuestGiver) == 0x0290);
static_assert(offsetof(UQuestEntryDetailsPanelWidget, _entryOutpost) == 0x0298);
static_assert(offsetof(UQuestEntryDetailsPanelWidget, _entryTierText) == 0x02A0);
static_assert(offsetof(UQuestEntryDetailsPanelWidget, _entryTierIconColor) == 0x02A8);
static_assert(offsetof(UQuestEntryDetailsPanelWidget, _entryQuestGiverIcon) == 0x02D0);
static_assert(offsetof(UQuestEntryDetailsPanelWidget, _entryTrackingDataContainer) == 0x02D8);
static_assert(offsetof(UQuestEntryDetailsPanelWidget, _entryRewardsVerticalBox) == 0x02E0);
static_assert(offsetof(UQuestEntryDetailsPanelWidget, _entryRewardsContainer) == 0x02E8);
static_assert(offsetof(UQuestEntryDetailsPanelWidget, _abandonQuestButton) == 0x02F0);
static_assert(offsetof(UQuestEntryDetailsPanelWidget, _trackingDataWidgetClass) == 0x02F8);
static_assert(offsetof(UQuestEntryDetailsPanelWidget, _abandonQuestTooltipText) == 0x0300);
static_assert(offsetof(UQuestEntryDetailsPanelWidget, _tooltipClass) == 0x0318);
static_assert(offsetof(UQuestEntryWidget, _backgroundImage) == 0x0278);
static_assert(offsetof(UQuestEntryWidget, _questNotificationIcon) == 0x0280);
static_assert(offsetof(UQuestEntryWidget, _entryName) == 0x0288);
static_assert(offsetof(UQuestEntryWidget, _entryTimeRemaining) == 0x0290);
static_assert(offsetof(UQuestEntryWidget, _trackingCheckbox) == 0x0298);
static_assert(offsetof(UQuestEntryWidget, _pixelSizeMaterialParameterName) == 0x02A0);
static_assert(offsetof(UQuestEntryWidget, _dpiMaterialParameterName) == 0x02A8);
static_assert(offsetof(UQuestEntryWidget, _inactiveMaterialInstance) == 0x02B0);
static_assert(offsetof(UQuestEntryWidget, _inactiveHoveredMaterialInstance) == 0x02B8);
static_assert(offsetof(UQuestEntryWidget, _activeMaterialInstance) == 0x02C0);
static_assert(offsetof(UQuestEntryWidget, _customQuestSymbol) == 0x02C8);
static_assert(offsetof(UQuestGiverComponent, _typeOfSourceActor) == 0x00C0);
static_assert(offsetof(UQuestGiverComponent, _sectorSelectionType) == 0x00E9);
static_assert(offsetof(AQuestInteractable, _component) == 0x0230);
static_assert(offsetof(AQuestInteractable, _interactionPrompt) == 0x0238);
static_assert(offsetof(AQuestInteractable, _allowOnlyTags) == 0x0270);
static_assert(offsetof(FQuestGiverSetup, MinQuestsAvailablePerTier) == 0x0010);
static_assert(offsetof(FQuestGiverSetup, QuestsProbabilityPerTier) == 0x0060);
static_assert(offsetof(FQuestGiverSetup, AllowedOnlyFromNPC) == 0x00B0);
static_assert(offsetof(FQuestGiverSetup, RequireCompletedQuestFromOtherNPC) == 0x00D8);
static_assert(offsetof(FSpecialQuestSetupArray, TagsRequirements) == 0x0000);
static_assert(offsetof(FSpecialQuestSetupArray, Quests) == 0x0048);
static_assert(offsetof(UQuestManagerData, NumberOfQuestsThatUnlocksATier) == 0x0030);
static_assert(offsetof(UQuestManagerData, SpecialQuestSets) == 0x00D0);
static_assert(offsetof(UQuestManagerData, QuestRootFolder) == 0x00F8);
static_assert(offsetof(UQuestManagerData, QuestSubFolders) == 0x0100);
static_assert(offsetof(UQuestManagerData, InitiallyAvailableTasks) == 0x0110);
static_assert(offsetof(UQuestManagerData, MobilePhoneItemClass) == 0x0128);
static_assert(offsetof(UQuestManagerData, GeneralGoodsNPCClass) == 0x0150);
static_assert(offsetof(FCircularArea, Location) == 0x0000);
static_assert(offsetof(FCircularAreaGroup, CircularAreaArray) == 0x0000);
static_assert(offsetof(UCircularAreaGroupComponent, Name) == 0x01F8);
static_assert(offsetof(UCircularAreaGroupComponent, CircularAreaGroup) == 0x0200);
static_assert(offsetof(FComponentSoftPtrWithZeroTransform, ZeroTransform) == 0x0000);
static_assert(offsetof(FComponentSoftPtrWithZeroTransform, ComponentPath) == 0x0030);
static_assert(offsetof(FComponentReferenceCollection, ComponentRefs) == 0x0000);
static_assert(offsetof(AQuestManager, _data) == 0x0298);
static_assert(offsetof(AQuestManager, _outpostLocations) == 0x02F0);
static_assert(offsetof(AQuestManager, _questSetups) == 0x0340);
static_assert(offsetof(AQuestManager, _questAssetIdToNetIndexMap) == 0x0390);
static_assert(offsetof(AQuestManager, _circularAreaGroups) == 0x04D8);
static_assert(offsetof(AQuestManager, _interactableComponentsMap) == 0x0528);
static_assert(offsetof(AQuestManager, _questGiverUniqueIdToNetIndexMap) == 0x0580);
static_assert(offsetof(AQuestManager, _questGiverNetIndexToUniqueIdMap) == 0x05D0);
static_assert(offsetof(FTraderSpecialDeal, TradeableClass) == 0x0038);
static_assert(offsetof(FQuestRewards, RewardTradeDeal) == 0x0000);
static_assert(offsetof(FQuestRewards, RewardTradeDeals) == 0x0070);
static_assert(offsetof(FQuestRewards, RewardCurrency) == 0x0080);
static_assert(offsetof(UQuestSetup, AssociatedNPC) == 0x0030);
static_assert(offsetof(UQuestSetup, LimitedToLocation) == 0x005C);
static_assert(offsetof(UQuestSetup, Title) == 0x0070);
static_assert(offsetof(UQuestSetup, DescriptionSegments) == 0x0088);
static_assert(offsetof(UQuestSetup, CustomPhoneCompletionMessage) == 0x00A0);
static_assert(offsetof(UQuestSetup, PossibleRewards) == 0x00B8);
static_assert(offsetof(UQuestSetup, TagUnlocks) == 0x00C8);
static_assert(offsetof(UQuestSetup, ConditionsSequence) == 0x00F0);
static_assert(offsetof(UQuestSetup, _loadableName) == 0x0108);
static_assert(offsetof(UQuestTimerTextBlock, _textBlock) == 0x0268);
static_assert(offsetof(UQuestTimerTextBlock, _timerFont) == 0x0270);
static_assert(offsetof(UQuestTimerTextBlock, _timerColorAndOpacity) == 0x02C8);
static_assert(offsetof(UQuestTimerTextBlock, _questCompletedColorAndOpacity) == 0x02F0);
static_assert(offsetof(UQuestTimerTextBlock, _questFailedColorAndOpacity) == 0x0318);
static_assert(offsetof(UQuestTrackingCheckbox, _uncheckedNormalImage) == 0x0298);
static_assert(offsetof(UQuestTrackingCheckbox, _uncheckedHoveredImage) == 0x0320);
static_assert(offsetof(UQuestTrackingCheckbox, _checkedNormalImage) == 0x03A8);
static_assert(offsetof(UQuestTrackingCheckbox, _checkedHoveredImage) == 0x0430);
static_assert(offsetof(UQuestTrackingCheckbox, _image) == 0x04B8);
static_assert(offsetof(FQuestTrackingDataWidgetStyle, IncompleteColor) == 0x0000);
static_assert(offsetof(FQuestTrackingDataWidgetStyle, IncompleteHighlightColor) == 0x0010);
static_assert(offsetof(FQuestTrackingDataWidgetStyle, IncompleteIcon) == 0x0020);
static_assert(offsetof(FQuestTrackingDataWidgetStyle, CompleteColor) == 0x00A8);
static_assert(offsetof(FQuestTrackingDataWidgetStyle, CompleteIcon) == 0x00B8);
static_assert(offsetof(FQuestTrackingDataWidgetStyle, IconSize) == 0x0144);
static_assert(offsetof(UQuestTrackingDataWidget, _icon) == 0x0268);
static_assert(offsetof(UQuestTrackingDataWidget, _caption) == 0x0270);
static_assert(offsetof(UQuestTrackingDataWidget, _progressText) == 0x0278);
static_assert(offsetof(UQuestTrackingDataWidget, _widgetStyle) == 0x0280);
static_assert(offsetof(UQuestTrackingWidget, _title) == 0x0268);
static_assert(offsetof(UQuestTrackingWidget, _turnInText) == 0x0270);
static_assert(offsetof(UQuestTrackingWidget, _trackingDataContainer) == 0x0278);
static_assert(offsetof(UQuestTrackingWidget, _mainSizeBox) == 0x0280);
static_assert(offsetof(UQuestTrackingWidget, _mainWidgetVerticalBox) == 0x0288);
static_assert(offsetof(UQuestTrackingWidget, _questTimer) == 0x0290);
static_assert(offsetof(UQuestTrackingWidget, _paddingWhileInTabMenu) == 0x0298);
static_assert(offsetof(UQuestTrackingWidget, _paddingNormal) == 0x02A8);
static_assert(offsetof(UQuestTrackingWidget, _trackingDataWidgetClass) == 0x02B8);
static_assert(offsetof(FQuestGiverUIData, Name) == 0x0000);
static_assert(offsetof(FQuestGiverUIData, Icon) == 0x0018);
static_assert(offsetof(FQuestGiverUIData, PlayerQuestAcceptResponses) == 0x0040);
static_assert(offsetof(FQuestGiverUIData, QuestGiverQuestCompletedResponses) == 0x0050);
static_assert(offsetof(FQuestGiverUIData, QuestGiverQuestFailedResponses) == 0x0060);
static_assert(offsetof(FQuestGiverUIData, QuestAcceptedAudioEvent) == 0x0070);
static_assert(offsetof(FQuestGiverUIData, QuestCompletedAudioEvent) == 0x0078);
static_assert(offsetof(FQuestGiverUIData, QuestBookOpenedAudioEvent) == 0x0080);
static_assert(offsetof(FQuestGiverUIData, QuestBookNoQuestTakenAudioEvent) == 0x0088);
static_assert(offsetof(FQuestGiverUIData, QuestBookNoQuestsAvailableAudioEvent) == 0x0090);
static_assert(offsetof(UQuestUIData, TaskCategoryIconTypeMap) == 0x0030);
static_assert(offsetof(UQuestUIData, QuestTierBrushes) == 0x00D0);
static_assert(offsetof(UQuestUIData, QuestTierTextMaterials) == 0x00E0);
static_assert(offsetof(UQuestUIData, QuestStartLimiterFlagsMessageMap) == 0x00F0);
static_assert(offsetof(UQuestUIData, PhoneMessageReceivedNotificationTitle) == 0x0140);
static_assert(offsetof(UQuestUIData, PhoneMessageReceivedNotificationText) == 0x0158);
static_assert(offsetof(UQuestUIData, QuestBookInteractionTraderLocked) == 0x0178);
static_assert(offsetof(UQuestUIData, QuestBookInteractionUnknownTraderLocked) == 0x0190);
static_assert(offsetof(UQuestUIData, QuestBookInteractionActiveLimit) == 0x01A8);
static_assert(offsetof(UQuestUIData, QuestBookInteractionDailyLimit) == 0x01C0);
static_assert(offsetof(UQuestUIData, QuestBookInteractionDepleted) == 0x01D8);
static_assert(offsetof(UQuestUIData, QuestBookInteractionLoading) == 0x01F0);
static_assert(offsetof(UQuickAccessBarWidget, _quickAccessItemContainers) == 0x0268);
static_assert(offsetof(UQuickAccessBarWidget, _horizontalBox) == 0x0278);
static_assert(offsetof(UQuickAccessBarWidget, UI_QuickAccessItemWidget) == 0x0280);
static_assert(offsetof(UQuickAccessBarWidget, UI_QuickAccessItemWidget0) == 0x0288);
static_assert(offsetof(UQuickAccessBarWidget, UI_QuickAccessItemWidget1) == 0x0290);
static_assert(offsetof(UQuickAccessBarWidget, UI_QuickAccessItemWidget2) == 0x0298);
static_assert(offsetof(UQuickAccessBarWidget, UI_QuickAccessItemWidget3) == 0x02A0);
static_assert(offsetof(UQuickAccessBarWidget, UI_QuickAccessItemWidget4) == 0x02A8);
static_assert(offsetof(UQuickAccessBarWidget, UI_QuickAccessItemWidget5) == 0x02B0);
static_assert(offsetof(UQuickAccessBarWidget, UI_QuickAccessItemWidget6) == 0x02B8);
static_assert(offsetof(UQuickAccessBarWidget, UI_QuickAccessItemWidget7) == 0x02C0);
static_assert(offsetof(UQuickAccessBarWidget, UI_QuickAccessItemWidget8) == 0x02C8);
static_assert(offsetof(UQuickAccessItemSwitcher3, _nameText) == 0x0270);
static_assert(offsetof(UQuickAccessItemSwitcher3, _slotWidget) == 0x0278);
static_assert(offsetof(UQuickAccessItemSwitcher3, IndexText) == 0x0280);
static_assert(offsetof(UQuickAccessItemSwitcher3, _itemWidget) == 0x0288);
static_assert(offsetof(UQuickAccessItemSwitcher3, _throwingModeCheckbox) == 0x0290);
static_assert(offsetof(UQuickAccessItemSwitcher3, _throwingModeCaption) == 0x02B0);
static_assert(offsetof(UQuickAccessItemSwitcher3, _throwingModeDescription) == 0x02C8);
static_assert(offsetof(UQuickAccessItemSwitcher3, _conzInputMappingName) == 0x02E0);
static_assert(offsetof(UQuickAccessItemWidget, _imageWidget) == 0x0268);
static_assert(offsetof(UQuickAccessItemWidget, DefaultPosition) == 0x0290);
static_assert(offsetof(UQuickAccessItemWidget, _additionalIcon) == 0x02A0);
static_assert(offsetof(UQuickAccessItemWidget, _additionalText) == 0x02A8);
static_assert(offsetof(UQuickAccessItemWidget, _lowerLeftBox) == 0x0330);
static_assert(offsetof(UQuickAccessItemWidget, _additionalIconSizeBox) == 0x0338);
static_assert(offsetof(UQuickAccessItemWidget, TextColor) == 0x0360);
static_assert(offsetof(UQuickAccessItemWidget, _conzControlMappingName) == 0x0370);
static_assert(offsetof(UQuickAccessItemWidget, _alternativeControlText) == 0x0378);
static_assert(offsetof(UQuickAccessItemWidget, _alarmColor) == 0x0390);
static_assert(offsetof(UQuickAccessItemWidget, TextBlockSlotNumber) == 0x03A0);
static_assert(offsetof(UQuickAccessItemWidget, _sizeBox) == 0x03A8);
static_assert(offsetof(UQuickAccessItemWidget, LowerLeftBoxFadeIn) == 0x03B0);
static_assert(offsetof(UQuickAccessItemWidget, LowerLeftBoxFadeOut) == 0x03B8);
static_assert(offsetof(UQuickAccessItemWidget, BlinkingBackground) == 0x03C0);
static_assert(offsetof(UQuickAccessItemWidget, AdditionalIconFadeIn) == 0x03C8);
static_assert(offsetof(UQuickAccessItemWidget, AdditionalIconFadeOut) == 0x03D0);
static_assert(offsetof(UQuickAccessItemWidget, ShowLowerLeftBoxAnimation) == 0x03D8);
static_assert(offsetof(UQuickAccessItemWidget, ShowAdditionalIconAnimation) == 0x03E0);
static_assert(offsetof(AQuiver, ArrowsBoneName) == 0x0A40);
static_assert(offsetof(AQuiver, _arrowMeshComponentsArray2) == 0x0A48);
static_assert(offsetof(ARackItem, _lockStaticMesh) == 0x0B90);
static_assert(offsetof(FRadiationSourceDescription, Transform) == 0x0000);
static_assert(offsetof(FRadiationSourceDescription, Extents) == 0x0030);
static_assert(offsetof(FRadiationSourceDescription, EpicenterLocation) == 0x003C);
static_assert(offsetof(ARadiationManager, _levelRadiationSources) == 0x0238);
static_assert(offsetof(ARadioItem, _radioComponent) == 0x09A8);
static_assert(offsetof(ARadioItem, _resourceSlotComponent) == 0x09B0);
static_assert(offsetof(URadioTrack, Audio) == 0x0030);
static_assert(offsetof(URadioTrack, TrackName) == 0x003C);
static_assert(offsetof(URadioCategory, Tracks) == 0x0028);
static_assert(offsetof(URadioCategoryShuffle, _tracksAlreadyPlayed) == 0x0048);
static_assert(offsetof(URadioProgram, CategoryClasses) == 0x0028);
static_assert(offsetof(URadioProgram, Categories) == 0x0038);
static_assert(offsetof(FRadioProgramData, ProgramClass) == 0x0000);
static_assert(offsetof(FRadioProgramData, Program) == 0x0008);
static_assert(offsetof(ARadioStation, _stationName) == 0x0250);
static_assert(offsetof(ARadioStation, _programsData) == 0x0258);
static_assert(offsetof(ARadioStation, _playlist) == 0x0270);
static_assert(offsetof(ARagItem, _inventoryIcon_Dirty) == 0x09B8);
static_assert(offsetof(ARagItem, _inventoryIconInHands_Dirty) == 0x09E0);
static_assert(offsetof(ARagItem, _outsideInventoryIcon_Dirty) == 0x0A08);
static_assert(offsetof(ARagItem, _inventoryIcon_Aseptic) == 0x0A30);
static_assert(offsetof(ARagItem, _inventoryIconInHands_Aseptic) == 0x0A58);
static_assert(offsetof(ARagItem, _outsideInventoryIcon_Aseptic) == 0x0A80);
static_assert(offsetof(ARagItem, _dirtyMesh) == 0x0AB8);
static_assert(offsetof(ARagItem, _cleanMesh) == 0x0AC0);
static_assert(offsetof(ARagItem, _asepticMesh) == 0x0AC8);
static_assert(offsetof(ARagItem, _dirtyMaterial) == 0x0AD0);
static_assert(offsetof(ARagItem, _cleanMaterial) == 0x0AD8);
static_assert(offsetof(ARagItem, _asepticMaterial) == 0x0AE0);
static_assert(offsetof(URaidProtectionSelectionWidget, _buttonCancel) == 0x0288);
static_assert(offsetof(URaidProtectionSelectionWidget, _buttonPay) == 0x0290);
static_assert(offsetof(URaidProtectionSelectionWidget, _buttonCancel2) == 0x0298);
static_assert(offsetof(URaidProtectionSelectionWidget, _buttonSet) == 0x02A0);
static_assert(offsetof(URaidProtectionSelectionWidget, _startHour) == 0x02A8);
static_assert(offsetof(URaidProtectionSelectionWidget, _startMinute) == 0x02B0);
static_assert(offsetof(URaidProtectionSelectionWidget, _endHour) == 0x02B8);
static_assert(offsetof(URaidProtectionSelectionWidget, _endMinute) == 0x02C0);
static_assert(offsetof(URaidProtectionSelectionWidget, _remainingCooldown) == 0x02C8);
static_assert(offsetof(URaidProtectionSelectionWidget, _currencyText) == 0x02D0);
static_assert(offsetof(URaidProtectionSelectionWidget, _currencyIcon) == 0x02D8);
static_assert(offsetof(URaidProtectionSelectionWidget, _panelSwitcher) == 0x02E0);
static_assert(offsetof(URaidProtectionSelectionWidget, _timeSpanContainer) == 0x02E8);
static_assert(offsetof(URaidProtectionSelectionWidget, _timeSpanText) == 0x02F0);
static_assert(offsetof(URaidProtectionSelectionWidget, _goldIcon) == 0x02F8);
static_assert(offsetof(URaidProtectionSelectionWidget, _cashIcon) == 0x0380);
static_assert(offsetof(URainCollectorComponent, _collectorID) == 0x00C8);
static_assert(offsetof(URainCollectorComponent, _collectingStartSound) == 0x00E8);
static_assert(offsetof(URainCollectorComponent, _collectingStopSound) == 0x00F0);
static_assert(offsetof(URangedResourceConsumerComponent, _repResourceType) == 0x00E0);
static_assert(offsetof(FConnectionSaveData, ID) == 0x0000);
static_assert(offsetof(URangedResourceConsumerEntityComponentSave, ResourceType) == 0x0028);
static_assert(offsetof(URangedResourceConsumerEntityComponentSave, ResourceSupplierId) == 0x0040);
static_assert(offsetof(URangedResourceConsumerEntityComponentSave, RegisteredProviders) == 0x0050);
static_assert(offsetof(URangedResourceConsumerEntityComponentSave, Connections) == 0x0060);
static_assert(offsetof(URangedResourceConsumerEntityComponentSetup, ResourceType) == 0x0048);
static_assert(offsetof(URangedResourceConsumerEntityComponentSetup, ResourceSupplierName) == 0x005C);
static_assert(offsetof(URangedResourceProviderComponent, _repResourceType) == 0x00F8);
static_assert(offsetof(URangedResourceProviderComponent, _influenceAreaVisualizerClass) == 0x0108);
static_assert(offsetof(URangedResourceProviderEntityComponentSave, ResourceType) == 0x0028);
static_assert(offsetof(URangedResourceProviderEntityComponentSave, ResourceSupplierId) == 0x0040);
static_assert(offsetof(URangedResourceProviderEntityComponentSave, Connections) == 0x0050);
static_assert(offsetof(URangedResourceProviderEntityComponentSetup, ResourceType) == 0x0048);
static_assert(offsetof(URangedResourceProviderEntityComponentSetup, ResourceSupplierName) == 0x0058);
static_assert(offsetof(ARazor, _razorWeakSpotComponent) == 0x0860);
static_assert(offsetof(ARazor, _navigationInvokerComponent) == 0x0868);
static_assert(offsetof(ARazor, _hitReactComponent) == 0x0870);
static_assert(offsetof(ARazor, _razorCommonData) == 0x0878);
static_assert(offsetof(ARazor, _targetPawn) == 0x08A4);
static_assert(offsetof(ARazor, _razorStance) == 0x08F4);
static_assert(offsetof(ARazor, _razorSleepingStage) == 0x08F5);
static_assert(offsetof(ARazorAIController, _currentSightSenseConfig) == 0x0468);
static_assert(offsetof(ARazorAIController, _currentHearingSenseConfig) == 0x0470);
static_assert(offsetof(ARazorAIController, _sightSenseConfigSleeping) == 0x0478);
static_assert(offsetof(ARazorAIController, _hearingSenseConfigSleeping) == 0x0480);
static_assert(offsetof(ARazorAIController, _sightSenseConfigAlerted) == 0x0488);
static_assert(offsetof(ARazorAIController, _hearingSenseConfigAlerted) == 0x0490);
static_assert(offsetof(ARazorAIController, _sightSenseConfigCombat) == 0x0498);
static_assert(offsetof(ARazorAIController, _hearingSenseConfigCombat) == 0x04A0);
static_assert(offsetof(ARazorAIController, _noiseAccumulationMultiplierPerNoiseTag) == 0x04B0);
static_assert(offsetof(ARazorAIController, _grappleActionParameters) == 0x0508);
static_assert(offsetof(ARazorAIController, _alertedStateDurationRange) == 0x05A4);
static_assert(offsetof(ARazorAIController, _alertedAggressiveStateTimeOnInterestPoint) == 0x05D0);
static_assert(offsetof(ARazorAIController, _alertedAggressiveStateDurationRange) == 0x05E0);
static_assert(offsetof(ARazorAIController, _combatPauseBetweenAttacksRange) == 0x060C);
static_assert(offsetof(ARazorAIController, _combatPauseBetweenMovementsRange) == 0x061C);
static_assert(offsetof(ARazorAIController, _mountAttackTargetDamageBoneNames) == 0x0690);
static_assert(offsetof(ARazorAIController, _ventilationDespawnMovementDelayRange) == 0x06CC);
static_assert(offsetof(URazorAnimInstance, _razorStance) == 0x02C1);
static_assert(offsetof(URazorAnimInstance, _sleepingStage) == 0x02C2);
static_assert(offsetof(URazorAnimInstance, _acceleration) == 0x02C4);
static_assert(offsetof(URazorAnimInstance, _velocity) == 0x02D4);
static_assert(offsetof(URazorAnimInstance, _moveDirectionRelativeToForwardVector) == 0x0324);
static_assert(offsetof(URazorAnimInstance, _walkStopAnimation) == 0x0338);
static_assert(offsetof(URazorAnimInstance, _jogStopAnimation) == 0x0340);
static_assert(offsetof(URazorAnimInstance, _runStopAnimation) == 0x0348);
static_assert(offsetof(URazorAnimInstance, _runCurveStopAnimation) == 0x0350);
static_assert(offsetof(URazorAnimInstance, _grappledIdleAnimation) == 0x0358);
static_assert(offsetof(URazorAnimInstance, _meshRootCurrentOffset) == 0x038C);
static_assert(offsetof(FRazorTurnMontageDescription, MontageL90) == 0x0000);
static_assert(offsetof(FRazorTurnMontageDescription, MontageL180) == 0x0008);
static_assert(offsetof(FRazorTurnMontageDescription, MontageR90) == 0x0010);
static_assert(offsetof(FRazorTurnMontageDescription, MontageR180) == 0x0018);
static_assert(offsetof(FRazorTurnMontageDescription, TurnAngleCurveName) == 0x0020);
static_assert(offsetof(FRazorAttackMontageDescription, Montage) == 0x0000);
static_assert(offsetof(FRazorDeathAnimationData, AnimMontage) == 0x0000);
static_assert(offsetof(FRazorDeathAnimationData, TimeToRagdollRange) == 0x0008);
static_assert(offsetof(FRazorUpperBodyPitchRangeData, ActualPitchRange) == 0x0000);
static_assert(offsetof(URazorCommonData, TurnMontageDescriptions) == 0x00D0);
static_assert(offsetof(URazorCommonData, SuddenWakeUpMontages) == 0x0120);
static_assert(offsetof(URazorCommonData, NormalWakeUpMontages) == 0x0130);
static_assert(offsetof(URazorCommonData, EnterCombatMontage) == 0x0140);
static_assert(offsetof(URazorCommonData, BasicAttackAnimations) == 0x0148);
static_assert(offsetof(URazorCommonData, GroupAttackAnimations) == 0x0158);
static_assert(offsetof(URazorCommonData, MountAttackJumpMontage) == 0x0168);
static_assert(offsetof(URazorCommonData, MountAttackFailedMontage) == 0x0170);
static_assert(offsetof(URazorCommonData, MountAttackFailedToTallObstacleMontage) == 0x0178);
static_assert(offsetof(URazorCommonData, MountAttackFailedToShortObstacleMontage) == 0x0180);
static_assert(offsetof(URazorCommonData, VentilationSpawnAttackMontage) == 0x0190);
static_assert(offsetof(URazorCommonData, VentilationSpawnAttackMontageEnd) == 0x0198);
static_assert(offsetof(URazorCommonData, WeakSpotDeathMontages) == 0x01A0);
static_assert(offsetof(URazorCommonData, MeleeDeathFrontMontage) == 0x01B0);
static_assert(offsetof(URazorCommonData, MeleeDeathBackMontage) == 0x01C0);
static_assert(offsetof(URazorCommonData, ProjectileDeathFrontMontage) == 0x01D0);
static_assert(offsetof(URazorCommonData, ProjectileDeathBackMontage) == 0x01E0);
static_assert(offsetof(URazorCommonData, UpperBodyPitchRanges) == 0x01F0);
static_assert(offsetof(URazorCommonData, MountAttackInitiateChargeMontages) == 0x0208);
static_assert(offsetof(URazorCommonData, IntimidationMontages) == 0x0218);
static_assert(offsetof(URazorCommonData, DoorDestructionAnimations) == 0x0228);
static_assert(offsetof(URazorCommonData, DoorDestructionNotifyName) == 0x023C);
static_assert(offsetof(URazorCommonData, RazorPositionDuringVentilationAttackCurve) == 0x0248);
static_assert(offsetof(URazorCommonData, IdleSleepingAudioEvent) == 0x0250);
static_assert(offsetof(URazorCommonData, IdleAlertedAudioEvent) == 0x0258);
static_assert(offsetof(URazorCommonData, IdleAlertedAggressiveAudioEvent) == 0x0260);
static_assert(offsetof(URazorCommonData, IdleCombatAudioEvent) == 0x0268);
static_assert(offsetof(URazorCommonData, DeathAudioEvent) == 0x0270);
static_assert(offsetof(URazorCommonData, FootstepAudioEvent) == 0x0278);
static_assert(offsetof(URazorCommonData, StartSearchAudioEvent) == 0x0280);
static_assert(offsetof(URazorCommonData, StopSearchAudioEvent) == 0x0288);
static_assert(offsetof(URazorCommonData, HitReactTypeStanding) == 0x0290);
static_assert(offsetof(URazorCommonData, HitReactTypeWeakSpot) == 0x0298);
static_assert(offsetof(ARazorSpawnPoint, _staticMeshComponent) == 0x0220);
static_assert(offsetof(ARazorSpawnPoint, _grateStaticMeshComponent) == 0x0228);
static_assert(offsetof(ARazorSpawnPoint, _movableAudioSpline) == 0x0230);
static_assert(offsetof(ARazorSpawnPoint, _exitTransform) == 0x0240);
static_assert(offsetof(ARazorSpawnPoint, _grateLaunchPosition) == 0x0270);
static_assert(offsetof(ARazorSpawnPoint, _grateLaunchDirectionVectorRelative) == 0x027C);
static_assert(offsetof(ARazorSpawnPoint, _burstOpenParticles) == 0x0298);
static_assert(offsetof(ARazorSpawnPoint, _particleAttachPointName) == 0x02A0);
static_assert(offsetof(ARazorSpawnPoint, _beginPlayAudioEvent) == 0x02A8);
static_assert(offsetof(ARazorSpawnPoint, _stopAudioEvent) == 0x02B0);
static_assert(offsetof(ARazorSpawnPoint, _commotionAudioEvent) == 0x02B8);
static_assert(offsetof(ARazorSpawnPoint, _burstOpenAudioEvent) == 0x02C0);
static_assert(offsetof(URecipeIngredientButton, _background) == 0x02C0);
static_assert(offsetof(URecipeIngredientButton, _lines) == 0x02C8);
static_assert(offsetof(URecipeIngredientButton, _border) == 0x02D0);
static_assert(offsetof(URecipeIngredientButton, _icon) == 0x02D8);
static_assert(offsetof(URecipeIngredientButton, _wholeUsesHBox) == 0x02E0);
static_assert(offsetof(URecipeIngredientButton, _wholeUsesTextBlock) == 0x02E8);
static_assert(offsetof(URecipeIngredientButton, _partialUsesHBox) == 0x02F0);
static_assert(offsetof(URecipeIngredientButton, _partialUsesTextBlock) == 0x02F8);
static_assert(offsetof(URecipeIngredientButton, _infoButton) == 0x0300);
static_assert(offsetof(URecipeIngredientButton, _ingredientTextTooltipClass) == 0x0310);
static_assert(offsetof(ARefrigeratorItem, _rangedResourceConsumerComponent) == 0x0B90);
static_assert(offsetof(ARegularDoorStatic, _openRotation) == 0x0590);
static_assert(offsetof(ARegularDoorStatic, _closedRotation) == 0x059C);
static_assert(offsetof(ARemoteKeyItem, _resourceSlotComponent) == 0x09A0);
static_assert(offsetof(ARemoteKeyItem, _triggerAudioEvent) == 0x09B0);
static_assert(offsetof(ARemoteSensorItem, _resourceSlotComponent) == 0x09C0);
static_assert(offsetof(UWeaponActionUnloadAmmoSequence, Animations) == 0x0028);
static_assert(offsetof(URemoveCartridge, MontageEndSectionName) == 0x0050);
static_assert(offsetof(URemoveMagazineInsertMagazineInsertCartridge, MontageEndSectionName) == 0x0090);
static_assert(offsetof(URemoveMagazineRemoveCartridge, MontageEndSectionName) == 0x0050);
static_assert(offsetof(URepairableItemTag, Params) == 0x0030);
static_assert(offsetof(FRequiredRepairingItemTagParams, ItemTag) == 0x0000);
static_assert(offsetof(FRepairToolItemParams, RepairableItemTypes) == 0x0000);
static_assert(offsetof(FRepairToolItemParams, StartRepairSound) == 0x0020);
static_assert(offsetof(FRepairToolItemParams, StopRepairSound) == 0x0028);
static_assert(offsetof(FRepairToolItemParams, StartRepairMontage) == 0x0030);
static_assert(offsetof(FRepairToolItemParams, StopRepairMontage) == 0x0038);
static_assert(offsetof(FRepairToolItemParams, RequiredRepairingItemTagsParms) == 0x0048);
static_assert(offsetof(URepairToolItemTag, Params) == 0x0030);
static_assert(offsetof(UReplenishableResourceComponent, _replenishableResourceFillItemInteractionData) == 0x0638);
static_assert(offsetof(UReplenishableResourceComponent, StartDrinkingAudioEvent) == 0x0680);
static_assert(offsetof(UReplenishableResourceComponent, StopDrinkingAudioEvent) == 0x0688);
static_assert(offsetof(AReplicatedExplosionEffectsActor, _explosionParticlesTransform) == 0x0230);
static_assert(offsetof(AReplicatedExplosionEffectsActor, _defaultParticleSystem) == 0x0260);
static_assert(offsetof(AReplicatedExplosionEffectsActor, _explosionSound) == 0x02B8);
static_assert(offsetof(UBaseResourceLightAnimator, _resourceRatioToBaseLightModifierCurve) == 0x0038);
static_assert(offsetof(UBaseResourceLightAnimator, _resourceRatioToRandomLightModifierBumpCurve) == 0x00C0);
static_assert(offsetof(UResourcePoweredLightItemComponent, _emissiveColorOn) == 0x00E8);
static_assert(offsetof(UResourcePoweredLightItemComponent, _emissiveColorOff) == 0x00EC);
static_assert(offsetof(UResourcePoweredLightItemComponent, _lightActivatedAudioEvent) == 0x00F0);
static_assert(offsetof(UResourcePoweredLightItemComponent, _animatorClass) == 0x00F8);
static_assert(offsetof(UResourcePoweredLightItemComponent, _lightAnimator) == 0x0128);
static_assert(offsetof(FRespawnParameters, SectorLocationPriceCurrency) == 0x0008);
static_assert(offsetof(FRespawnParameters, ShelterLocationPriceCurrency) == 0x0010);
static_assert(offsetof(FRespawnParameters, SquadLocationPriceCurrency) == 0x0018);
static_assert(offsetof(FRespawnParameters, PermadeathThresholdPriceCurrency) == 0x0020);
static_assert(offsetof(URespawnSettings, Parameters) == 0x0048);
static_assert(offsetof(URestAssetData, RestingMode) == 0x0030);
static_assert(offsetof(URestAssetData, RestingAnimation) == 0x0038);
static_assert(offsetof(URestAssetData, AdditionalEndRestLocations) == 0x0040);
static_assert(offsetof(FRunningSkillParametersPerSkillLevel, MaxSpeedMultiplier) == 0x0000);
static_assert(offsetof(FRunningSkillParametersPerSkillLevel, StaminaConsumptionMultiplier) == 0x0008);
static_assert(offsetof(URunningSkill, NoSkillExperienceAwards) == 0x00C8);
static_assert(offsetof(URunningSkill, BasicSkillExperienceAwards) == 0x00D0);
static_assert(offsetof(URunningSkill, MediumSkillExperienceAwards) == 0x00D8);
static_assert(offsetof(URunningSkill, AdvancedSkillExperienceAwards) == 0x00E0);
static_assert(offsetof(URunningSkill, AboveAdvancedSkillExperienceAwards) == 0x00E8);
static_assert(offsetof(URunningSkill, NoSkillParameters) == 0x00F0);
static_assert(offsetof(URunningSkill, BasicSkillParameters) == 0x0100);
static_assert(offsetof(URunningSkill, MediumSkillParameters) == 0x0110);
static_assert(offsetof(URunningSkill, AdvancedSkillParameters) == 0x0120);
static_assert(offsetof(FScopeZoomLevelSettings, PostProcessSettings) == 0x0010);
static_assert(offsetof(UScopeableItemComponent, _zoomLevelSettings) == 0x00C8);
static_assert(offsetof(UScopeableItemComponent, _scopingOverlayTexture) == 0x00D8);
static_assert(offsetof(UScopeableItemComponent, _montageStandingFP) == 0x00E8);
static_assert(offsetof(UScopeableItemComponent, _montageCrouchingFP) == 0x00F0);
static_assert(offsetof(UScopeableItemComponent, _montageProneFP) == 0x00F8);
static_assert(offsetof(UScopeableItemComponent, _montageStandingTP) == 0x0100);
static_assert(offsetof(UScopeableItemComponent, _montageCrouchingTP) == 0x0108);
static_assert(offsetof(UScopeableItemComponent, _montageProneTP) == 0x0110);
static_assert(offsetof(UScrollingSizeBox, _mainSizeBox) == 0x0268);
static_assert(offsetof(UScrollingSizeBox, _customContentSlot) == 0x0270);
static_assert(offsetof(UScrollingSizeBox, _direction) == 0x0299);
static_assert(offsetof(UScrollingSizeBox, _loopingType) == 0x029A);
static_assert(offsetof(UScrollingSizeBox, _dynamic) == 0x029B);
static_assert(offsetof(UScrollingSizeBox, _scrollDemand) == 0x029C);
static_assert(offsetof(USearchBox, _editBox) == 0x02B0);
static_assert(offsetof(USearchBox, _backgroundSwitcher) == 0x02B8);
static_assert(offsetof(USearchBox, _clearSearchButton) == 0x02C0);
static_assert(offsetof(USearchBox, _searchQueryTextOverride) == 0x02F0);
static_assert(offsetof(FSearchPerItemData, NeededMaterials) == 0x0000);
static_assert(offsetof(FSearchPerItemData, RequiredMaterials) == 0x0010);
static_assert(offsetof(FSearchPerItemData, ProhibitedMaterials) == 0x0020);
static_assert(offsetof(FSearchPerItemData, SpawnerPreset) == 0x0030);
static_assert(offsetof(USearchItemDataAsset, Caption) == 0x0030);
static_assert(offsetof(USearchItemDataAsset, SearchData) == 0x0050);
static_assert(offsetof(USearchItemDataAsset, StartSearchAudioEvent) == 0x0060);
static_assert(offsetof(USearchItemDataAsset, StopSearchAudioEvent) == 0x0068);
static_assert(offsetof(USearchItemDataAsset, noiseLevel) == 0x0070);
static_assert(offsetof(USearchForItemsAssetData, SearchAsset) == 0x0030);
static_assert(offsetof(USedentaryNPCAnimInstance, _headTurningRotator) == 0x02C0);
static_assert(offsetof(FSedentaryNPCHeadAnimationAndAudio, HeadAnimation) == 0x0000);
static_assert(offsetof(FSedentaryNPCHeadAnimationAndAudio, AudioEvent) == 0x0008);
static_assert(offsetof(USedentaryNPCBackgroundInteraction, _backgroundInteractionType) == 0x0028);
static_assert(offsetof(USedentaryNPCBackgroundInteraction, _newBackgroundInteractionInterval) == 0x0038);
static_assert(offsetof(USedentaryNPCBackgroundInteraction, _animationVariationsBegin) == 0x0058);
static_assert(offsetof(USedentaryNPCBackgroundInteraction, _animationVariationsTick) == 0x0068);
static_assert(offsetof(USedentaryNPCBackgroundInteraction, _animationVariationsEnd) == 0x0078);
static_assert(offsetof(USedentaryNPCBackgroundInteraction, _animationVariationsOneShot) == 0x0088);
static_assert(offsetof(USedentaryNPCBackgroundInteraction, _stopOwningPawnAudioEvent) == 0x0098);
static_assert(offsetof(USedentaryNPCHeadAnimInstance, _updateableBones) == 0x02C0);
static_assert(offsetof(USedentaryNPCHeadAnimInstance, _bonesWithUpdateableTransforms) == 0x02D0);
static_assert(offsetof(USedentaryNPCHeadAnimInstance, _faceIdleAnimation) == 0x0320);
static_assert(offsetof(USedentaryNPCHeadAnimInstance, _headBoneName) == 0x0328);
static_assert(offsetof(USedentaryNPCHeadAnimInstance, _headFollowingRotation) == 0x0330);
static_assert(offsetof(USedentaryNPCHeadAnimInstance, _animationHeadScale) == 0x0380);
static_assert(offsetof(USelectionOverlayWidget, _solidShown) == 0x02B0);
static_assert(offsetof(USelectionOverlayWidget, _gradientShown) == 0x02B8);
static_assert(offsetof(USelectionOverlayWidget, _solidSelected) == 0x02C0);
static_assert(offsetof(USelectionOverlayWidget, _gradientSelected) == 0x02C8);
static_assert(offsetof(USelectionOverlayWidget, _highlightColorRef) == 0x02D0);
static_assert(offsetof(USentryEncounterSaveState, SpawnerLocationZero) == 0x0040);
static_assert(offsetof(USentryEncounterSaveState, SpawnerRotator) == 0x004C);
static_assert(offsetof(USentryEncounterSaveState, PatrolPointsRelativeLocations) == 0x0058);
static_assert(offsetof(FSentryMeleeAttackDescription, AttackAnimation) == 0x0000);
static_assert(offsetof(FSentryPatrolPoint, LocationRelativeToSentry) == 0x0000);
static_assert(offsetof(FSentryDamageEffectData, ParticleSystem) == 0x0000);
static_assert(offsetof(ASentry2, _pelvisBoneName) == 0x08B0);
static_assert(offsetof(ASentry2, _eyesViewPointSocketName) == 0x08B8);
static_assert(offsetof(ASentry2, _longRangeWeaponSocketName) == 0x08C0);
static_assert(offsetof(ASentry2, _longRangeWeaponMuzzleFlashBoneNames) == 0x08C8);
static_assert(offsetof(ASentry2, _longRangeWeaponBoneName) == 0x08D8);
static_assert(offsetof(ASentry2, _mediumRangeWeaponSocketName) == 0x08E0);
static_assert(offsetof(ASentry2, _mediumRangeWeaponMuzzleFlashBoneNames) == 0x08E8);
static_assert(offsetof(ASentry2, _mediumRangeWeaponBoneName) == 0x08F8);
static_assert(offsetof(ASentry2, _highPrecisionWeaponSocketName) == 0x0900);
static_assert(offsetof(ASentry2, _highPrecisionWeaponBoneName) == 0x0908);
static_assert(offsetof(ASentry2, _grenadeLauncherSocketNames) == 0x0910);
static_assert(offsetof(ASentry2, _highPrecisionWeaponChargingSocket) == 0x0920);
static_assert(offsetof(ASentry2, _meleeAttackFailureGrenadeDropSocket) == 0x0928);
static_assert(offsetof(ASentry2, _damageParticlesSockets) == 0x0938);
static_assert(offsetof(ASentry2, _fireBulletAudioEvent) == 0x0948);
static_assert(offsetof(ASentry2, _startHighFireRateAttack) == 0x0950);
static_assert(offsetof(ASentry2, _endHighFireRateAttack) == 0x0958);
static_assert(offsetof(ASentry2, _reloadAudioEvent) == 0x0960);
static_assert(offsetof(ASentry2, _highPrecisionWeaponFireShotAudioEvent) == 0x0968);
static_assert(offsetof(ASentry2, _grenadeLaunchAudioEffect) == 0x0970);
static_assert(offsetof(ASentry2, _tearGasGrenadeLaunchAudioEffect) == 0x0978);
static_assert(offsetof(ASentry2, _stunGrenadeLaunchAudioEffect) == 0x0980);
static_assert(offsetof(ASentry2, _deathAudioEvent) == 0x0988);
static_assert(offsetof(ASentry2, _freezeWarningAudioEvent) == 0x0990);
static_assert(offsetof(ASentry2, _dropWeaponsRaiseHandsAudioEvent) == 0x0998);
static_assert(offsetof(ASentry2, _walkAwayAudioEvent) == 0x09A0);
static_assert(offsetof(ASentry2, _beginCombatAudioEvent) == 0x09A8);
static_assert(offsetof(ASentry2, _startSearchCorpseAudioEvent) == 0x09B0);
static_assert(offsetof(ASentry2, _stopSearchCorpseAudioEvent) == 0x09B8);
static_assert(offsetof(ASentry2, _upperBodyRotationAudioEvent) == 0x09C0);
static_assert(offsetof(ASentry2, _normalAttackMontage) == 0x09C8);
static_assert(offsetof(ASentry2, _mediumRangeAttackMontage) == 0x09D0);
static_assert(offsetof(ASentry2, _reloadMontageLongRangeWeapon) == 0x09D8);
static_assert(offsetof(ASentry2, _reloadMontageMediumRangeWeapon) == 0x09E0);
static_assert(offsetof(ASentry2, _deathMontage) == 0x09E8);
static_assert(offsetof(ASentry2, _meleeMontageDescriptions) == 0x09F0);
static_assert(offsetof(ASentry2, _highprecisionAttackMontage) == 0x0A00);
static_assert(offsetof(ASentry2, _enemySpottedMontage) == 0x0A08);
static_assert(offsetof(ASentry2, _upperBodyFocusLocation) == 0x0A2C);
static_assert(offsetof(ASentry2, _simulatedShooterFiringStrategyLongRange) == 0x0A48);
static_assert(offsetof(ASentry2, _simulatedShooterFiringStrategyHighFireRate) == 0x0A50);
static_assert(offsetof(ASentry2, _simulatedShooterFiringStrategyHighPrecision) == 0x0A58);
static_assert(offsetof(ASentry2, _simulatedShooterFiringStrategyMediumRange) == 0x0A60);
static_assert(offsetof(ASentry2, _simulatedShooterFiringStrategyLongRangeSP) == 0x0A68);
static_assert(offsetof(ASentry2, _simulatedShooterFiringStrategyHighFireRateSP) == 0x0A70);
static_assert(offsetof(ASentry2, _simulatedShooterFiringStrategyHighPrecisionSP) == 0x0A78);
static_assert(offsetof(ASentry2, _simulatedShooterFiringStrategyMediumRangeSP) == 0x0A80);
static_assert(offsetof(ASentry2, _projectileClass) == 0x0A98);
static_assert(offsetof(ASentry2, _projectileClassClient) == 0x0AA0);
static_assert(offsetof(ASentry2, _mediumRangeProjectileClass) == 0x0AC0);
static_assert(offsetof(ASentry2, _mediumRangeProjectileClassClient) == 0x0AC8);
static_assert(offsetof(ASentry2, _highPrecisonWeaponProjectileClass) == 0x0AE8);
static_assert(offsetof(ASentry2, _highPrecisonWeaponProjectileClassClient) == 0x0AF0);
static_assert(offsetof(ASentry2, _grenadeProjectileClass) == 0x0B08);
static_assert(offsetof(ASentry2, _tearGasGrenadeItemClass) == 0x0B10);
static_assert(offsetof(ASentry2, _stunGrenadeItemClass) == 0x0B18);
static_assert(offsetof(ASentry2, _sentryMovementComponent) == 0x0B38);
static_assert(offsetof(ASentry2, _hitReactComponent) == 0x0B40);
static_assert(offsetof(ASentry2, _hitReactTag) == 0x0B48);
static_assert(offsetof(ASentry2, _weaponOverrideAimLocationRep) == 0x0BD0);
static_assert(offsetof(ASentry2, _patrolPoints) == 0x0C10);
static_assert(offsetof(ASentry2, _muzzlePS) == 0x0C20);
static_assert(offsetof(ASentry2, _muzzlePSCs) == 0x0C28);
static_assert(offsetof(ASentry2, _highPrecisionWeaponMuzzlePS) == 0x0C38);
static_assert(offsetof(ASentry2, _highPrecisionWeaponMuzzlePSC) == 0x0C40);
static_assert(offsetof(ASentry2, _highPrecisionWeaponChargingPS) == 0x0C58);
static_assert(offsetof(ASentry2, _highPrecisionWeaponChargingPSC) == 0x0C60);
static_assert(offsetof(ASentry2, _mediumRangeWeaponPS) == 0x0C68);
static_assert(offsetof(ASentry2, _mediumRangeWeaponPSC) == 0x0C70);
static_assert(offsetof(ASentry2, _lightMaterialSlotName) == 0x0CB0);
static_assert(offsetof(ASentry2, _additionalLightsMaterialSlotNames) == 0x0CB8);
static_assert(offsetof(ASentry2, _normalLightColor) == 0x0CC8);
static_assert(offsetof(ASentry2, _alertedLightColor) == 0x0CCC);
static_assert(offsetof(ASentry2, _combatLightColor) == 0x0CD0);
static_assert(offsetof(ASentry2, _emissionColorParameterName) == 0x0CD8);
static_assert(offsetof(ASentry2, _damageEffectsNumPerHealthStateData) == 0x0CE4);
static_assert(offsetof(ASentry2, _damageParticleEffectsPSData) == 0x0D48);
static_assert(offsetof(ASentry2, _stompCameraShake) == 0x0DD0);
static_assert(offsetof(ASentry2, _laserMeshComponent) == 0x0DD8);
static_assert(offsetof(ASentry2, _transientHeatSourceParameters) == 0x0E00);
static_assert(offsetof(ASentry2, _transientHeatSourceOffset) == 0x0E24);
static_assert(offsetof(ASentry2, _foe) == 0x0E68);
static_assert(offsetof(ASentry2, _healthServerSettingName) == 0x0EA0);
static_assert(offsetof(ASentry2, _projectileDamageMultiplierServerSettingName) == 0x0EA8);
static_assert(offsetof(ASentry2, _railgunProjectileDamageMultiplierServerSettingName) == 0x0EB0);
static_assert(offsetof(ASentry2, _grenadeProjectileDamageMultiplierServerSettingName) == 0x0EB8);
static_assert(offsetof(ASentry2, _spawnableDropshipClass) == 0x0EC0);
static_assert(offsetof(USentryAIControllerEncounterSaveState, SentryState) == 0x0080);
static_assert(offsetof(ASentryAIController2, _currentSightSenseConfig) == 0x0528);
static_assert(offsetof(ASentryAIController2, _currentHearingSenseConfig) == 0x0530);
static_assert(offsetof(ASentryAIController2, _sightSenseConfigPatrolling) == 0x0538);
static_assert(offsetof(ASentryAIController2, _sightSenseConfigAlerted) == 0x0540);
static_assert(offsetof(ASentryAIController2, _sightSenseConfigCombat) == 0x0548);
static_assert(offsetof(ASentryAIController2, _hearingSenseConfigPatrolling) == 0x0550);
static_assert(offsetof(ASentryAIController2, _hearingSenseConfigAlerted) == 0x0558);
static_assert(offsetof(ASentryAIController2, _hearingSenseConfigCombat) == 0x0560);
static_assert(offsetof(ASentryAIController2, _specialNoiseTags) == 0x0578);
static_assert(offsetof(ASentryAIController2, _detectionDelayTimerData) == 0x05AC);
static_assert(offsetof(ASentryAIController2, _sentryCombatBehaviorModes) == 0x06C8);
static_assert(offsetof(ASentryAIController2, _attackModeExitRanges) == 0x0754);
static_assert(offsetof(ASentryAIController2, _pauseBetweenBaseElementsToDestroy) == 0x07D8);
static_assert(offsetof(ASentryAIController2, _extractionCooldownTimeInterval) == 0x081C);
static_assert(offsetof(FInPlaceTurningData, LAnimationInfo) == 0x0000);
static_assert(offsetof(FInPlaceTurningData, RAnimationInfo) == 0x0014);
static_assert(offsetof(USentryAnimInstance2, _turnInPlaceData) == 0x02D0);
static_assert(offsetof(USentryAnimInstance2, _movementPace) == 0x0357);
static_assert(offsetof(USentryAnimInstance2, _velocity) == 0x0368);
static_assert(offsetof(USentryAnimInstance2, _forwardVector) == 0x037C);
static_assert(offsetof(USentryAnimInstance2, _sentryStance) == 0x038A);
static_assert(offsetof(USentryAnimInstance2, _sentryHealthState) == 0x038B);
static_assert(offsetof(USentryAnimInstance2, _combatVariation) == 0x038C);
static_assert(offsetof(USentryAnimInstance2, _longRangeGunLookAtLocation) == 0x0390);
static_assert(offsetof(USentryAnimInstance2, _mediumRangeGunLookAtLocation) == 0x03A0);
static_assert(offsetof(USentryAnimInstance2, _highPrecisionGunLookAtLocation) == 0x03B0);
static_assert(offsetof(USentryAnimInstance2, _partGlitchingInfo) == 0x03D0);
static_assert(offsetof(USentryAnimInstance2, _minigunRotationAngles) == 0x03E0);
static_assert(offsetof(FSentryHotZoneVolumeData, HotZoneBoxComponent) == 0x0000);
static_assert(offsetof(ASentryGuardVolume2, _hotZonesLocalLocations) == 0x0278);
static_assert(offsetof(ASentryGuardVolume2, _hotZonesBuildings) == 0x0298);
static_assert(offsetof(ASentryGuardVolume2, _hotZonesVolumes) == 0x02A8);
static_assert(offsetof(USentryMovementComponent, MaxRotationRateCurve) == 0x0DA0);
static_assert(offsetof(ASentrySpawner2, SentryClass) == 0x0228);
static_assert(offsetof(ASentrySpawner2, PatrolPoints) == 0x0250);
static_assert(offsetof(ASentrySpawner2, Sprite) == 0x0260);
static_assert(offsetof(USentryThirdPersonViewComponent, StandingSubviewName) == 0x00D0);
static_assert(offsetof(USentryThirdPersonViewComponent, StandingAimingSubviewName) == 0x00D8);
static_assert(offsetof(UServerBrowser, PasswordPopup) == 0x02D8);
static_assert(offsetof(UServerBrowser, PasswordPopupTextBox) == 0x02E0);
static_assert(offsetof(UServerBrowser, MenuVerticalBox) == 0x02E8);
static_assert(offsetof(UServerBrowser, Back) == 0x02F0);
static_assert(offsetof(UServerBrowser, DirectConnectTextBox) == 0x02F8);
static_assert(offsetof(UServerBrowser, MainVerticalBox) == 0x0300);
static_assert(offsetof(UServerBrowser, PasswordPopupCancelButton) == 0x0308);
static_assert(offsetof(UServerBrowser, PasswordPopupOkButton) == 0x0310);
static_assert(offsetof(UServerBrowser, Refresh) == 0x0318);
static_assert(offsetof(UServerBrowser, ServerHosting) == 0x0320);
static_assert(offsetof(UServerBrowser, _searchBox) == 0x0328);
static_assert(offsetof(UServerBrowser, ServersCategoryOverlay) == 0x0330);
static_assert(offsetof(UServerBrowser, SortByHost) == 0x0338);
static_assert(offsetof(UServerBrowser, SortByOfficial) == 0x0340);
static_assert(offsetof(UServerBrowser, SortByPassword) == 0x0348);
static_assert(offsetof(UServerBrowser, SortByPing) == 0x0350);
static_assert(offsetof(UServerBrowser, SortByPlayers) == 0x0358);
static_assert(offsetof(UServerBrowser, SortByVersion) == 0x0360);
static_assert(offsetof(UServerBrowser, _hideEmptyCB) == 0x0368);
static_assert(offsetof(UServerBrowser, _hideFullCB) == 0x0370);
static_assert(offsetof(UServerBrowser, _passwordProtectedCB) == 0x0378);
static_assert(offsetof(UServerBrowser, _favoritesCB) == 0x0380);
static_assert(offsetof(UServerBrowser, _typeDropdown) == 0x0388);
static_assert(offsetof(UServerBrowser, _activityDropdown) == 0x0390);
static_assert(offsetof(UServerBrowser, _regionDropdown) == 0x0398);
static_assert(offsetof(UServerBrowser, _latencyDropdown) == 0x03A0);
static_assert(offsetof(UServerBrowser, _sortFavorites) == 0x03A8);
static_assert(offsetof(UServerBrowser, UI_ScrollBar) == 0x03B0);
static_assert(offsetof(UServerBrowser, CircularThrobber) == 0x03B8);
static_assert(offsetof(UServerBrowser, SelectedServer) == 0x03C0);
static_assert(offsetof(UServerBrowser, _lastButton) == 0x0440);
static_assert(offsetof(UServerBrowser, _lastWidget) == 0x0448);
static_assert(offsetof(UServerBrowser, _serverList) == 0x0450);
static_assert(offsetof(UServerBrowser, _connectButton) == 0x0458);
static_assert(offsetof(UServerBrowser, _serverInfoWidgetClass) == 0x04C8);
static_assert(offsetof(UServerBrowserCheckboxWidget, _checkBox) == 0x0280);
static_assert(offsetof(UServerBrowserCheckboxWidget, _label) == 0x0288);
static_assert(offsetof(UServerBrowserCheckboxWidget, _uncheckedLabelColor) == 0x0290);
static_assert(offsetof(UServerBrowserCheckboxWidget, _checkedLabelColor) == 0x02A0);
static_assert(offsetof(UServerBrowserCheckboxWidget, _labelText) == 0x02B0);
static_assert(offsetof(UServerBrowserDropdownEntryWidget, _icon) == 0x0280);
static_assert(offsetof(UServerBrowserDropdownEntryWidget, _label) == 0x0288);
static_assert(offsetof(UServerBrowserDropdownEntryWidget, _regularIconColor) == 0x0290);
static_assert(offsetof(UServerBrowserDropdownEntryWidget, _hoveredIconColor) == 0x02A0);
static_assert(offsetof(UServerBrowserDropdownEntryWidget, _selectedIconColor) == 0x02B0);
static_assert(offsetof(UServerBrowserDropdownWidget, _backgroundImage) == 0x0298);
static_assert(offsetof(UServerBrowserDropdownWidget, _label) == 0x02A0);
static_assert(offsetof(UServerBrowserDropdownWidget, _entriesSizeBox) == 0x02A8);
static_assert(offsetof(UServerBrowserDropdownWidget, _entriesVerticalBox) == 0x02B0);
static_assert(offsetof(UServerBrowserDropdownWidget, _entryUIData) == 0x02B8);
static_assert(offsetof(UServerBrowserDropdownWidget, _entryWidgetClass) == 0x02C8);
static_assert(offsetof(FServerInfo, Address) == 0x0000);
static_assert(offsetof(FServerInfo, Name) == 0x0018);
static_assert(offsetof(FServerInfo, Version) == 0x0038);
static_assert(offsetof(UServerInfoWidget, _serverInfo) == 0x02C8);
static_assert(offsetof(UServerInfoWidget, ClickSound) == 0x0328);
static_assert(offsetof(UServerInfoWidget, DeleteServerButton) == 0x0330);
static_assert(offsetof(UServerInfoWidget, Button) == 0x0338);
static_assert(offsetof(UServerInfoWidget, NameText) == 0x0340);
static_assert(offsetof(UServerInfoWidget, PingText) == 0x0348);
static_assert(offsetof(UServerInfoWidget, PlayersText) == 0x0350);
static_assert(offsetof(UServerInfoWidget, _passwordIcon) == 0x0358);
static_assert(offsetof(UServerInfoWidget, _officialIcon) == 0x0360);
static_assert(offsetof(UServerInfoWidget, _backgroundImage) == 0x0368);
static_assert(offsetof(UServerInfoWidget, VersionText) == 0x0370);
static_assert(offsetof(UServerInfoWidget, _favoriteButtonSwitcher) == 0x0378);
static_assert(offsetof(UServerInfoWidget, _favoriteServerButton) == 0x0380);
static_assert(offsetof(UServerInfoWidget, Throbber) == 0x0388);
static_assert(offsetof(UServerInfoWidget, _regularColor) == 0x0390);
static_assert(offsetof(UServerInfoWidget, _invertedColor) == 0x03A0);
static_assert(offsetof(UServerInfoWidget, _transparentColor) == 0x03B0);
static_assert(offsetof(UServerInfoWidget, _lowPingColor) == 0x03C0);
static_assert(offsetof(UServerInfoWidget, _mediumPingColor) == 0x03D0);
static_assert(offsetof(UServerInfoWidget, _highPingColor) == 0x03E0);
static_assert(offsetof(AShark, _sharkBiteBloodPS) == 0x0888);
static_assert(offsetof(AShark, _sharkBiteBloodPSC) == 0x0890);
static_assert(offsetof(AShark, _spawnBiteAttackParticlesSocketName) == 0x089C);
static_assert(offsetof(AShark, _onDeathPS) == 0x08A8);
static_assert(offsetof(AShark, _onDeathPSC) == 0x08B0);
static_assert(offsetof(AShark, _onDeathParticlesSocketName) == 0x08B8);
static_assert(offsetof(ASharkAIController, _behaviorMap) == 0x0510);
static_assert(offsetof(ASharkAIController, _grappleActionParameter) == 0x0590);
static_assert(offsetof(USharkAnimInstance, _mouthTargetName) == 0x02C8);
static_assert(offsetof(USharkAnimInstance, _teethTargetName) == 0x02D4);
static_assert(offsetof(USharkAnimInstance, _eyesTargetName) == 0x02E0);
static_assert(offsetof(USharkAnimInstance, _velocity) == 0x02EC);
static_assert(offsetof(USharkAnimInstance, _behaviorMode) == 0x0300);
static_assert(offsetof(UShotsFiredTrackerWidget, _widgetText) == 0x0268);
static_assert(offsetof(ASilentAlarmTrapItem, _triggerSound) == 0x0AD0);
static_assert(offsetof(ASilentAlarmTrapItem, _nameableItemComponent) == 0x0AE0);
static_assert(offsetof(USimpleDropdownEntryCategoryTitle, _label) == 0x0268);
static_assert(offsetof(USimpleTextDropdownEntry, _background) == 0x0278);
static_assert(offsetof(USimpleTextDropdownEntry, _label) == 0x0280);
static_assert(offsetof(USimpleTextDropdownEntry, _black) == 0x0288);
static_assert(offsetof(USimpleTextDropdownEntry, _white) == 0x0298);
static_assert(offsetof(USimpleTextDropdownEntryWithCheckBox, _checkBox) == 0x02C0);
static_assert(offsetof(ASkeletalWeaponAttachment, _skeletalMesh) == 0x09D0);
static_assert(offsetof(FSliderWithLabelAndNumberTextStyle, Font) == 0x0000);
static_assert(offsetof(FSliderWithLabelAndNumberTextStyle, ColorAndOpacity) == 0x0058);
static_assert(offsetof(FSliderWithLabelAndNumberStyle, FocusBackgroundImage) == 0x0000);
static_assert(offsetof(FSliderWithLabelAndNumberStyle, LabelText) == 0x0088);
static_assert(offsetof(FSliderWithLabelAndNumberStyle, NumberText) == 0x00F0);
static_assert(offsetof(USliderWithLabelAndNumber, _name) == 0x0DD8);
static_assert(offsetof(USliderWithLabelAndNumber, _valueDisplay) == 0x0DE0);
static_assert(offsetof(USliderWithLabelAndNumber, _focusBackgroundImage) == 0x0DE8);
static_assert(offsetof(USliderWithLabelAndNumber, _selectedAndFocusedSWNANStyle) == 0x0DF0);
static_assert(offsetof(USliderWithLabelAndNumber, _selectedAndUnfocusedSWNANStyle) == 0x0F48);
static_assert(offsetof(USliderWithLabelAndNumber, _unselectedSWNANStyle) == 0x10A0);
static_assert(offsetof(USliderWithLabelAndNumber, _highlightedSWNANStyle) == 0x11F8);
static_assert(offsetof(USliderWithLabelAndNumber, _disabledSWNANStyle) == 0x1350);
static_assert(offsetof(USliderWithLabelAndNumber, _label) == 0x14A8);
static_assert(offsetof(ASlidingDoorStatic, ClosedPositionComponent) == 0x0590);
static_assert(offsetof(ASlidingDoorStatic, OpenPositionComponent) == 0x0598);
static_assert(offsetof(FSmokableSubstance, InhalationPoisoningType) == 0x0000);
static_assert(offsetof(USmokableItemComponent, _smokableSubstances) == 0x01A8);
static_assert(offsetof(USmokableItemComponent, _burningIcon) == 0x01C0);
static_assert(offsetof(USmokableItemComponent, _burningMaterial) == 0x01D0);
static_assert(offsetof(USmokableItemComponent, _itemInHandsSocketName) == 0x01DC);
static_assert(offsetof(USmokableItemComponent, _itemEquippedSocketName) == 0x01E4);
static_assert(offsetof(USmokableItemComponent, _offsetWhenEquipped) == 0x0200);
static_assert(offsetof(ASmokeGrenadeItem, _smokeParticle) == 0x0A68);
static_assert(offsetof(ASmokeGrenadeItem, _smokeStartedAudioEvent) == 0x0A70);
static_assert(offsetof(ASmokeGrenadeItem, _smokeStoppedAudioEvent) == 0x0A78);
static_assert(offsetof(ASmokeGrenadeItem, _smokeAudioComponent) == 0x0A88);
static_assert(offsetof(USnipingSkill, NoSkillExperienceAwards) == 0x00C0);
static_assert(offsetof(USnipingSkill, BasicSkillExperienceAwards) == 0x00F4);
static_assert(offsetof(USnipingSkill, MediumSkillExperienceAwards) == 0x0128);
static_assert(offsetof(USnipingSkill, AdvancedSkillExperienceAwards) == 0x015C);
static_assert(offsetof(USnipingSkill, AboveAdvancedSkillExperienceAwards) == 0x0190);
static_assert(offsetof(USortByButton, Button) == 0x0280);
static_assert(offsetof(USortByButton, SizeBox) == 0x0288);
static_assert(offsetof(USortByButton, TextBlock) == 0x0290);
static_assert(offsetof(USortByButton, Text) == 0x02A0);
static_assert(offsetof(USortByButton, Type) == 0x02B8);
static_assert(offsetof(ASoundEmitter, AudioEvent) == 0x0220);
static_assert(offsetof(USoundNotificationDescription, AudioEvent) == 0x0040);
static_assert(offsetof(USoundNotificationDescription, Actor) == 0x0048);
static_assert(offsetof(ASpline, SceneComponent) == 0x0220);
static_assert(offsetof(ASpline, SplineComponent) == 0x0228);
static_assert(offsetof(ASoundSpline, AudioEvent) == 0x0240);
static_assert(offsetof(ASoundSpline, InsideSplineAudioEvent) == 0x0248);
static_assert(offsetof(ASoundSpline, OutsideSplineAudioEvent) == 0x0250);
static_assert(offsetof(USpawnChoiceWidget, _progressBar) == 0x0278);
static_assert(offsetof(USpawnChoiceWidget, _progressMaterial) == 0x0280);
static_assert(offsetof(USpawnChoiceWidget, _choiceButton) == 0x0288);
static_assert(offsetof(USpawnChoiceWidget, _optionText) == 0x0290);
static_assert(offsetof(USpawnChoiceWidget, _prohibitedText) == 0x0298);
static_assert(offsetof(USpawnChoiceWidget, _priceText) == 0x02A0);
static_assert(offsetof(USpawnChoiceWidget, SelectionArrow) == 0x02A8);
static_assert(offsetof(USpawnChoiceWidget, Border) == 0x02B0);
static_assert(offsetof(USpawnChoiceWidget, _priceCurrency) == 0x02C0);
static_assert(offsetof(USpawnChoiceWidget, _optionTextBlockText) == 0x02C8);
static_assert(offsetof(FParticleCollisionDecalData, Decal) == 0x0000);
static_assert(offsetof(USpawnDecalWhenParticleCollides, Decals) == 0x0028);
static_assert(offsetof(USpawnMenuWidget, _randomLocationButton) == 0x0268);
static_assert(offsetof(USpawnMenuWidget, _sectorLocationButton) == 0x0270);
static_assert(offsetof(USpawnMenuWidget, _shelterLocationButton) == 0x0278);
static_assert(offsetof(USpawnMenuWidget, _squadLocationButton) == 0x0280);
static_assert(offsetof(USpawnMenuWidget, _locationOptions) == 0x0288);
static_assert(offsetof(USpawnMenuWidget, _respawnDisabledLabel) == 0x0290);
static_assert(offsetof(USpawnMenuWidget, _combatLabel) == 0x0298);
static_assert(offsetof(USpawnMenuWidget, _noAvailableLabel) == 0x02A0);
static_assert(offsetof(USpawnMenuWidget, _limitExceededLabel) == 0x02A8);
static_assert(offsetof(USpawnMenuWidget, _deathTitlePanel) == 0x02B0);
static_assert(offsetof(USpawnMenuWidget, _deathTitleLabel) == 0x02B8);
static_assert(offsetof(USpawnMenuWidget, _comaTitlePanel) == 0x02C0);
static_assert(offsetof(USpawnMenuWidget, _comatoseTitleLabel) == 0x02C8);
static_assert(offsetof(USpawnMenuWidget, _timerPanel) == 0x02D0);
static_assert(offsetof(USpawnMenuWidget, _timerLabel) == 0x02D8);
static_assert(offsetof(USpawnMenuWidget, _timer) == 0x02E0);
static_assert(offsetof(USpawnMenuWidget, _wakeUpPanel) == 0x02E8);
static_assert(offsetof(USpawnMenuWidget, _wakeUpButton) == 0x02F0);
static_assert(offsetof(USpawnMenuWidget, _healthCriticalLabel) == 0x02F8);
static_assert(offsetof(USpawnMenuWidget, _spawnSectorSelector) == 0x0300);
static_assert(offsetof(USpawnMenuWidget, _suddenDeathText) == 0x0308);
static_assert(offsetof(USpawnMenuWidget, _permadeathText) == 0x0320);
static_assert(offsetof(USpawnMenuWidget, TotalPriceText) == 0x0358);
static_assert(offsetof(USpawnMenuWidget, Border) == 0x0360);
static_assert(offsetof(USpawnMenuWidget, CurrentCurrencyText) == 0x0368);
static_assert(offsetof(USpawnMenuWidget, RemainingCurrencyText) == 0x0370);
static_assert(offsetof(USpawnMenuWidget, MainStateLabel) == 0x0378);
static_assert(offsetof(USpawnScreen, _mainMenuButton) == 0x0268);
static_assert(offsetof(USpawnScreen, _respawnButton) == 0x0270);
static_assert(offsetof(USpawnScreen, _scoreBoardButton) == 0x0278);
static_assert(offsetof(USpawnScreen, _screen) == 0x0280);
static_assert(offsetof(USpawnScreen, _scoreboard) == 0x0288);
static_assert(offsetof(USpawnScreen, _gameEventLoadoutMenuWidget) == 0x0290);
static_assert(offsetof(USpawnScreen, _spawnMenuWidget) == 0x0298);
static_assert(offsetof(USpawnScreen, _blackout) == 0x02A0);
static_assert(offsetof(USpawnScreen, WaitTimeText) == 0x02C0);
static_assert(offsetof(USpawnScreen, PenaltyCountdown) == 0x02C8);
static_assert(offsetof(USpawnSectorSelectorWidget, _selectorImage) == 0x0268);
static_assert(offsetof(USpawnSectorSelectorWidget, _deathImage) == 0x0270);
static_assert(offsetof(USphereMotionTriggerComponent, SphereCollisionComponent) == 0x0528);
static_assert(offsetof(USphereMotionTriggerComponent, VisualizationMeshComponent) == 0x0530);
static_assert(offsetof(USphereMotionTriggerComponent, _visualizationMesh) == 0x0540);
static_assert(offsetof(ASplineZone, configuration) == 0x0230);
static_assert(offsetof(USquadEditor, _dropdownMenuTextureSelectionWidgetClass) == 0x0268);
static_assert(offsetof(USquadEditor, _dropdownMenuColorSelectionWidgetClass) == 0x0270);
static_assert(offsetof(USquadEditor, BackgroundGrid) == 0x0278);
static_assert(offsetof(USquadEditor, SymbolGrid) == 0x0280);
static_assert(offsetof(USquadEditor, ColorGrid) == 0x0288);
static_assert(offsetof(USquadEditor, BackgroundSelector) == 0x0290);
static_assert(offsetof(USquadEditor, BackgroundDropdownBackground) == 0x0298);
static_assert(offsetof(USquadEditor, BackgroundDropdownMenu) == 0x02A0);
static_assert(offsetof(USquadEditor, BackgroundDropdownBorder) == 0x02A8);
static_assert(offsetof(USquadEditor, SymbolSelector) == 0x02B0);
static_assert(offsetof(USquadEditor, SymbolDropdownBackground) == 0x02B8);
static_assert(offsetof(USquadEditor, SymbolDropdownMenu) == 0x02C0);
static_assert(offsetof(USquadEditor, SymbolDropdownBorder) == 0x02C8);
static_assert(offsetof(USquadEditor, BackgroundPrimaryColorSelector) == 0x02D0);
static_assert(offsetof(USquadEditor, BackgroundSecondaryColorSelector) == 0x02D8);
static_assert(offsetof(USquadEditor, BackgroundTertiaryColorSelector) == 0x02E0);
static_assert(offsetof(USquadEditor, ColorDropdownBackground) == 0x02E8);
static_assert(offsetof(USquadEditor, ColorDropdownMenu) == 0x02F0);
static_assert(offsetof(USquadEditor, ColorDropdownBorder) == 0x02F8);
static_assert(offsetof(USquadEditor, SymbolPrimaryColorSelector) == 0x0300);
static_assert(offsetof(USquadEditor, SymbolSecondaryColorSelector) == 0x0308);
static_assert(offsetof(USquadEditor, SymbolTertiaryColorSelector) == 0x0310);
static_assert(offsetof(USquadEditor, UI_SquadEmblem) == 0x0318);
static_assert(offsetof(USquadEditor, NameTextBox) == 0x0320);
static_assert(offsetof(USquadEditor, MessageTextBox) == 0x0328);
static_assert(offsetof(USquadEditor, InformationTextBox) == 0x0330);
static_assert(offsetof(USquadEditor, InformationBox) == 0x0338);
static_assert(offsetof(USquadEditor, MessageBoxBox) == 0x0340);
static_assert(offsetof(USquadEditor, EmblemBox) == 0x0348);
static_assert(offsetof(USquadEditor, AcceptButton) == 0x0350);
static_assert(offsetof(USquadEditor, CancelButton) == 0x0358);
static_assert(offsetof(USquadEmblemWidget, _symbol) == 0x0268);
static_assert(offsetof(USquadEmblemWidget, _background) == 0x0270);
static_assert(offsetof(USquadEmblemWidget, _material) == 0x0278);
static_assert(offsetof(USquadLeftPanel, SquadName) == 0x02F0);
static_assert(offsetof(USquadLeftPanel, SquadMessage) == 0x02F8);
static_assert(offsetof(USquadLeftPanel, MemberCount) == 0x0300);
static_assert(offsetof(USquadLeftPanel, SquadEmblem) == 0x0308);
static_assert(offsetof(USquadLeftPanel, EditButton) == 0x0310);
static_assert(offsetof(USquadLeftPanel, LeaveButton) == 0x0318);
static_assert(offsetof(USquadLeftPanel, CreateButton) == 0x0320);
static_assert(offsetof(USquadLeftPanel, MemberListBox) == 0x0328);
static_assert(offsetof(USquadLeftPanel, _mainSwitcher) == 0x0330);
static_assert(offsetof(USquadLeftPanel, _genericTooltipClass) == 0x0338);
static_assert(offsetof(USquadLeftPanel, _tooltipClass) == 0x0340);
static_assert(offsetof(USquadLeftPanel, _leaveSquadTooltipText) == 0x0348);
static_assert(offsetof(USquadLeftPanel, _createSquadTooltipText) == 0x0360);
static_assert(offsetof(USquadLeftPanel, _squadMemberPanelClass) == 0x0378);
static_assert(offsetof(USquadListing, SquadName) == 0x0268);
static_assert(offsetof(USquadListing, squadRank) == 0x0270);
static_assert(offsetof(USquadListing, SquadScore) == 0x0278);
static_assert(offsetof(USquadListing, Highlight) == 0x0280);
static_assert(offsetof(USquadListing, ContentBox) == 0x0288);
static_assert(offsetof(USquadListing, SeparatorBox) == 0x0290);
static_assert(offsetof(USquadListing, _emblemSizeBox) == 0x0298);
static_assert(offsetof(USquadListing, _squadEmblemWidget) == 0x02A0);
static_assert(offsetof(USquadListing, _squadTooltipClass) == 0x02A8);
static_assert(offsetof(USquadMemberPanel, PlayerName) == 0x0268);
static_assert(offsetof(USquadMemberPanel, FameText) == 0x0270);
static_assert(offsetof(USquadMemberPanel, FPText) == 0x0278);
static_assert(offsetof(USquadMemberPanel, RankIcon) == 0x0280);
static_assert(offsetof(USquadMemberPanel, HoverButton) == 0x0288);
static_assert(offsetof(USquadMemberPanel, MakeLeaderButton) == 0x0290);
static_assert(offsetof(USquadMemberPanel, PromoteButton) == 0x0298);
static_assert(offsetof(USquadMemberPanel, DemoteButton) == 0x02A0);
static_assert(offsetof(USquadMemberPanel, KickButton) == 0x02A8);
static_assert(offsetof(USquadMemberPanel, CommandBox) == 0x02B0);
static_assert(offsetof(USquadMemberPanel, FamePointBox) == 0x02B8);
static_assert(offsetof(USquadMemberPanel, _memberTextures) == 0x02C0);
static_assert(offsetof(USquadMemberPanel, _probationTexture) == 0x0310);
static_assert(offsetof(USquadMemberPanel, _tooltipClass) == 0x0398);
static_assert(offsetof(USquadMemberPanel, _toolTip) == 0x03B0);
static_assert(offsetof(USquadRightPanel, RankingBox) == 0x02F0);
static_assert(offsetof(USquadRightPanel, _squadListingClass) == 0x02F8);
static_assert(offsetof(USquadRightPanel, _darkListingBackgroundColor) == 0x0318);
static_assert(offsetof(USquadRightPanel, _lightListingBackgroundColor) == 0x0328);
static_assert(offsetof(USquadRightPanel, _selectedListingBackgroundColor) == 0x0338);
static_assert(offsetof(USquadTooltip, SquadName) == 0x0268);
static_assert(offsetof(USquadTooltip, SquadInformation) == 0x0270);
static_assert(offsetof(USquadTooltip, SquadEmblem) == 0x0278);
static_assert(offsetof(USquareCheckbox, _selectAnimation) == 0x0278);
static_assert(offsetof(FStartLocationDescription, Transform) == 0x0010);
static_assert(offsetof(AStartLocationManager, _startLocationDescriptions) == 0x0220);
static_assert(offsetof(UStaticDoorReplicator, _queuedInitialSyncLockData) == 0x0110);
static_assert(offsetof(UStatisticsDetailsWidget, _generalSubcategoryTab) == 0x0268);
static_assert(offsetof(UStatisticsDetailsWidget, _foodSubcategoryTab) == 0x0270);
static_assert(offsetof(UStatisticsDetailsWidget, _huntingSubcategoryTab) == 0x0278);
static_assert(offsetof(UStatisticsDetailsWidget, _fishingSubcategoryTab) == 0x0280);
static_assert(offsetof(UStatisticsDetailsWidget, _travelSubcategoryTab) == 0x0288);
static_assert(offsetof(UStatisticsDetailsWidget, _metabolismSubcategoryTab) == 0x0290);
static_assert(offsetof(UStatisticsDetailsWidget, _craftingSubcategoryTab) == 0x0298);
static_assert(offsetof(UStatisticsDetailsWidget, _combatSubcategoryTab) == 0x02A0);
static_assert(offsetof(UStatisticsDetailsWidget, _eventsSubcategoryTab) == 0x02A8);
static_assert(offsetof(UStatisticsDetailsWidget, _subcategorySwitcher) == 0x02B0);
static_assert(offsetof(UStatisticsDetailsWidget, _generalStatisticsList) == 0x0350);
static_assert(offsetof(UStatisticsDetailsWidget, _foodStatisticsList) == 0x0358);
static_assert(offsetof(UStatisticsDetailsWidget, _huntingStatisticsList) == 0x0360);
static_assert(offsetof(UStatisticsDetailsWidget, _fishingStatisticsList) == 0x0368);
static_assert(offsetof(UStatisticsDetailsWidget, _travelStatisticsList) == 0x0370);
static_assert(offsetof(UStatisticsDetailsWidget, _metabolismStatisticsList) == 0x0378);
static_assert(offsetof(UStatisticsDetailsWidget, _craftingStatisticsList) == 0x0380);
static_assert(offsetof(UStatisticsDetailsWidget, _combatStatisticsList) == 0x0388);
static_assert(offsetof(UStatisticsDetailsWidget, _eventsStatisticsList) == 0x0390);
static_assert(offsetof(UStatisticsListRow, _statNameTextBox) == 0x0268);
static_assert(offsetof(UStatisticsListRow, _statValueTextBox) == 0x0270);
static_assert(offsetof(UStatisticsListRow, _statUnitTextBox) == 0x0278);
static_assert(offsetof(UStatisticsListWidget, _subcategoryName) == 0x0268);
static_assert(offsetof(UStatisticsListWidget, _subcategoryTextBox) == 0x0280);
static_assert(offsetof(UStatisticsListWidget, _scrollBox) == 0x0288);
static_assert(offsetof(UStatisticsPanelWidget, _survivalDetailsWidget) == 0x0268);
static_assert(offsetof(UStatisticsPanelWidget, _backButton) == 0x0270);
static_assert(offsetof(UStatisticsSubcategoryTab, _subcategoryIcon) == 0x0280);
static_assert(offsetof(UStatisticsSubcategoryTab, _tabSelectionImage) == 0x0288);
static_assert(offsetof(UStatisticsSubcategoryTab, _subcategoryImage) == 0x0290);
static_assert(offsetof(UStatisticsSubcategoryTab, _selectedTabTexture) == 0x0298);
static_assert(offsetof(UStealthSkill, NoSkillExperienceAwards) == 0x00B0);
static_assert(offsetof(UStealthSkill, BasicSkillExperienceAwards) == 0x00B8);
static_assert(offsetof(UStealthSkill, MediumSkillExperienceAwards) == 0x00C0);
static_assert(offsetof(UStealthSkill, AdvancedSkillExperienceAwards) == 0x00C8);
static_assert(offsetof(UStealthSkill, AboveAdvancedSkillExperienceAwards) == 0x00D0);
static_assert(offsetof(USubtitleWidget, _subtitle) == 0x0268);
static_assert(offsetof(USubtitleWidget, _subtitleOverlay) == 0x0270);
static_assert(offsetof(USurvivalSkill, NoSkillParameters) == 0x00B0);
static_assert(offsetof(USurvivalSkill, BasicSkillParameters) == 0x00B1);
static_assert(offsetof(USurvivalSkill, MediumSkillParameters) == 0x00B2);
static_assert(offsetof(USurvivalSkill, AdvancedSkillParameters) == 0x00B3);
static_assert(offsetof(USurvivalSkill, AboveAdvancedSkillParameters) == 0x00B4);
static_assert(offsetof(FTipAndItems, SurvivalTip) == 0x0000);
static_assert(offsetof(USurvivalTipEventListener, _tipsAndNeededItems) == 0x0028);
static_assert(offsetof(USurvivalTipManager, _survivalTipsTable) == 0x0178);
static_assert(offsetof(USurvivalTipsView, _widgetClassToSpawn) == 0x0268);
static_assert(offsetof(USurvivalTipsView, _widgetList) == 0x0278);
static_assert(offsetof(USurvivalTipsView, _widgetPool) == 0x0280);
static_assert(offsetof(USurvivalTipsView, _activeWidgets) == 0x0300);
static_assert(offsetof(USurvivalTipsView, _survivalTipsTable) == 0x0310);
static_assert(offsetof(USurvivalTipWidget, _tipText) == 0x0280);
static_assert(offsetof(USurvivalTipWidget, _tipRetainerBox) == 0x0288);
static_assert(offsetof(USurvivalTipWidget, _rootSizeBox) == 0x0290);
static_assert(offsetof(USurvivalTipWidget, _progressBar) == 0x0298);
static_assert(offsetof(USurvivalTipWidget, _dpiMaterialParameterName) == 0x02A0);
static_assert(offsetof(USurvivalTipWidget, _widgetPixelSizeParameterName) == 0x02A8);
static_assert(offsetof(USurvivalTipWidget, _horizontalRolloutPercentParameterName) == 0x02B0);
static_assert(offsetof(USurvivalTipWidget, _animationDuration) == 0x02B8);
static_assert(offsetof(USurvivalTipWidget, _animationCurve) == 0x02C0);
static_assert(offsetof(USurvivalTipWidget, _onSurvivalTipActivated) == 0x02C8);
static_assert(offsetof(USwingItemComponent, _swingSpeedLevelVsInputSpeed) == 0x00E0);
static_assert(offsetof(USwingItemComponent, _prisonerActionDifficultyVsSwingSpeedLevel) == 0x0168);
static_assert(offsetof(USwingItemComponent, _maxAllowedPrisonerMovementPaceWhenInHands) == 0x01F0);
static_assert(offsetof(USwingItemComponent, _bodyTemperatureCoolingRatesVsSwingSpeedLevel) == 0x01F8);
static_assert(offsetof(USwingItemComponent, _itemSwingAnimMontage) == 0x0280);
static_assert(offsetof(USwingItemComponent, _prisonerSwingAnimMontage) == 0x0288);
static_assert(offsetof(USwingItemComponent, _prisonerSwingAnimMontageStartSectionName) == 0x0290);
static_assert(offsetof(USwingItemComponent, _prisonerSwingAnimMontageLoopSectionName) == 0x0298);
static_assert(offsetof(USwingItemComponent, _prisonerSwingAnimMontageEndSectionName) == 0x02A0);
static_assert(offsetof(USwingItemComponent, _animMontagePlayRateVsSwingSpeedLevel) == 0x02B0);
static_assert(offsetof(ASwitch, Mesh) == 0x0248);
static_assert(offsetof(ASwitch, _interactionText) == 0x0250);
static_assert(offsetof(USwitchboardComponent, _repSwitchStates) == 0x01B0);
static_assert(offsetof(ASwitchboardMinigame, _switchboardComponent) == 0x0340);
static_assert(offsetof(ASwitchboardMinigame, _gaugeClusterComponent) == 0x0348);
static_assert(offsetof(ASwitchboardMinigame, _schematicMeshRef) == 0x0350);
static_assert(offsetof(ASwitchboardMinigame, _zoomStartLocation) == 0x0380);
static_assert(offsetof(ASwitchboardMinigame, _zoomEndLocation) == 0x038C);
static_assert(offsetof(ASwitchboardMinigame, _zoomCurve) == 0x0398);
static_assert(offsetof(ASwitchboardMinigame, _fadeCurve) == 0x03A0);
static_assert(offsetof(ASwitchboardMinigame, _fuseBurnedParticlesRef) == 0x03A8);
static_assert(offsetof(ASwitchboardMinigame, _fuseMeshComponent) == 0x03D8);
static_assert(offsetof(USwitchboardMinigameConfiguration, SchematicMesh) == 0x0068);
static_assert(offsetof(FSwitchMaterialEmissiveColorProperties, OnEmissiveColor) == 0x0000);
static_assert(offsetof(FSwitchMaterialEmissiveColorProperties, OffEmissiveColor) == 0x0010);
static_assert(offsetof(FSwitchMaterialEmissiveColorProperties, EmissiveColorPropertyName) == 0x0024);
static_assert(offsetof(USwitchboardSwitchAssetData, ActivationTag) == 0x0028);
static_assert(offsetof(USwitchboardSwitchAssetData, OffRelativeTransform) == 0x0030);
static_assert(offsetof(USwitchboardSwitchAssetData, OnRelativeTransform) == 0x0060);
static_assert(offsetof(USwitchboardSwitchAssetData, ToggleAudio) == 0x0098);
static_assert(offsetof(USwitchboardSwitchAssetData, EmissiveControlProperties) == 0x00A0);
static_assert(offsetof(USwitchboardSwitchAssetData, Switch) == 0x00B0);
static_assert(offsetof(UTabButton, _button) == 0x02F8);
static_assert(offsetof(UTabButton, _text) == 0x0300);
static_assert(offsetof(UTabButton, _sizeBox) == 0x0308);
static_assert(offsetof(UTabButton, _initialTitle) == 0x0310);
static_assert(offsetof(UTabButton, _selectedButtonStyle) == 0x0328);
static_assert(offsetof(UTabButton, _selectedUnfocusedButtonStyle) == 0x05B0);
static_assert(offsetof(UTabButton, _deselectedButtonStyle) == 0x0838);
static_assert(offsetof(UTabButton, _selectedTextStyle) == 0x0AC0);
static_assert(offsetof(UTabButton, _selectedUnfocusedTextStyle) == 0x0B58);
static_assert(offsetof(UTabButton, _deselectedTextStyle) == 0x0BF0);
static_assert(offsetof(UTabButtonAlertable, _alertedTextColorHandle) == 0x0C88);
static_assert(offsetof(UTabButtonAlertable, _alertedBackgroundColorHandle) == 0x0C98);
static_assert(offsetof(UTabContainer, _containerContent) == 0x02B0);
static_assert(offsetof(UTabContainer, _previous) == 0x02B8);
static_assert(offsetof(UTabContainer, _next) == 0x02B9);
static_assert(offsetof(UTabContainer, _in) == 0x02BA);
static_assert(offsetof(UTabElement, CategoryNameWidget) == 0x0268);
static_assert(offsetof(UTabElement, _initialPosition) == 0x0274);
static_assert(offsetof(UTabElement, _oldPosition) == 0x027C);
static_assert(offsetof(UTabElement, _newPosition) == 0x0284);
static_assert(offsetof(UTabElement, _initialSize) == 0x028C);
static_assert(offsetof(UTabElement, _oldSize) == 0x0294);
static_assert(offsetof(UTabElement, _newSize) == 0x029C);
static_assert(offsetof(UTabGroup, _tabPanel) == 0x0298);
static_assert(offsetof(UTabGroup, _previous) == 0x02A0);
static_assert(offsetof(UTabGroup, _next) == 0x02A1);
static_assert(offsetof(UTabGroup, _in) == 0x02A2);
static_assert(offsetof(UTabGroup, _tabHorizontalAlignment) == 0x02A4);
static_assert(offsetof(UTabGroup, _tabVerticalAlignment) == 0x02A5);
static_assert(offsetof(UTabMenu, _inventoryTab) == 0x0268);
static_assert(offsetof(UTabMenu, _craftingTab) == 0x0270);
static_assert(offsetof(UTabMenu, _healthTab) == 0x0278);
static_assert(offsetof(UTabMenu, _metabolismTab) == 0x0280);
static_assert(offsetof(UTabMenu, _squadTab) == 0x0288);
static_assert(offsetof(UTabMenu, _gameEventsTab) == 0x0290);
static_assert(offsetof(UTabMenu, _manualTab) == 0x0298);
static_assert(offsetof(UTabMenu, _tradingTab) == 0x02A0);
static_assert(offsetof(UTabMenu, _journalTab) == 0x02A8);
static_assert(offsetof(UTabMenu, _centralSwitcher) == 0x02B0);
static_assert(offsetof(UTabMenu, _leftSwitcher) == 0x02B8);
static_assert(offsetof(UTabMenu, _rightSwitcher) == 0x02C0);
static_assert(offsetof(UTabMenu, _inventoryLeftPanel) == 0x02C8);
static_assert(offsetof(UTabMenu, _metabolismLeftPanel) == 0x02D0);
static_assert(offsetof(UTabMenu, _squadLeftPanel) == 0x02D8);
static_assert(offsetof(UTabMenu, _gameEventsLeftPanel) == 0x02E0);
static_assert(offsetof(UTabMenu, _emptyLeftPanel) == 0x02E8);
static_assert(offsetof(UTabMenu, _inventoryCentralPanel) == 0x02F0);
static_assert(offsetof(UTabMenu, _buildingCentralPanel) == 0x02F8);
static_assert(offsetof(UTabMenu, _manualCentralPanel) == 0x0300);
static_assert(offsetof(UTabMenu, _journalCentralPanel) == 0x0308);
static_assert(offsetof(UTabMenu, _emptyCentralPanel) == 0x0310);
static_assert(offsetof(UTabMenu, _inventoryRightPanel) == 0x0318);
static_assert(offsetof(UTabMenu, _craftingRightPanel) == 0x0320);
static_assert(offsetof(UTabMenu, _healthRightPanel) == 0x0328);
static_assert(offsetof(UTabMenu, _metabolismRightPanel) == 0x0330);
static_assert(offsetof(UTabMenu, _squadRightPanel) == 0x0338);
static_assert(offsetof(UTabMenu, _gameEventsRightPanel) == 0x0340);
static_assert(offsetof(UTabMenu, _tradingRightPanel) == 0x0348);
static_assert(offsetof(UTabMenu, _emptyRightPanel) == 0x0350);
static_assert(offsetof(UTabMenu, _squadEditor) == 0x0358);
static_assert(offsetof(UTabMenu, _tabClass) == 0x0450);
static_assert(offsetof(UTabMenu, _tooltipClass) == 0x0458);
static_assert(offsetof(UTabModeTab, _mainSizeBox) == 0x0308);
static_assert(offsetof(UTabModeTab, _backgroundImage) == 0x0310);
static_assert(offsetof(UTabModeTab, _title) == 0x0318);
static_assert(offsetof(UTabModeTab, _hotkey) == 0x0320);
static_assert(offsetof(UTabModeTab, _titleText) == 0x0328);
static_assert(offsetof(UTabModeTab, _hotkeyText) == 0x0340);
static_assert(offsetof(UTabModeTab, _backgroundTextureActive) == 0x0358);
static_assert(offsetof(UTabModeTab, _backgroundTextureInactive) == 0x03E0);
static_assert(offsetof(UTabModeTab, _inactiveUnalertedColor) == 0x0468);
static_assert(offsetof(UTabModeTab, _inactiveAlertedColor) == 0x0478);
static_assert(offsetof(UTacticsSkill, _detectionTimeDistanceScale) == 0x0138);
static_assert(offsetof(FHandsPoseCorrections, RightHand) == 0x0000);
static_assert(offsetof(FHandsPoseCorrections, RightFist) == 0x0008);
static_assert(offsetof(FHandsPoseCorrections, RightFistInCombatMode) == 0x0010);
static_assert(offsetof(FHandsPoseCorrections, LeftHand) == 0x0020);
static_assert(offsetof(FHandsPoseCorrections, LeftFist) == 0x0028);
static_assert(offsetof(FHandsPoseCorrections, LeftFistInCombatMode) == 0x0030);
static_assert(offsetof(UHandsCorrectionsData, Corrections) == 0x0030);
static_assert(offsetof(UHandsCorrectionsData, FirstPersonCorrections) == 0x00F0);
static_assert(offsetof(FItemFirstPersonUpperBodyAnimationsData, StandIdle) == 0x0000);
static_assert(offsetof(FItemFirstPersonUpperBodyAnimationsData, StandWalk) == 0x0008);
static_assert(offsetof(FItemFirstPersonUpperBodyAnimationsData, StandWalkLimping) == 0x0010);
static_assert(offsetof(FItemFirstPersonUpperBodyAnimationsData, StandJog) == 0x0018);
static_assert(offsetof(FItemFirstPersonUpperBodyAnimationsData, StandJogLimping) == 0x0020);
static_assert(offsetof(FItemFirstPersonUpperBodyAnimationsData, StandRun) == 0x0028);
static_assert(offsetof(FItemFirstPersonUpperBodyAnimationsData, CrouchIdle) == 0x0030);
static_assert(offsetof(FItemFirstPersonUpperBodyAnimationsData, CrouchWalk) == 0x0038);
static_assert(offsetof(FItemFirstPersonUpperBodyAnimationsData, CrouchWalkLimping) == 0x0040);
static_assert(offsetof(FItemFirstPersonUpperBodyAnimationsData, ProneIdle) == 0x0048);
static_assert(offsetof(UItemFirstPersonAnimationsDataAsset, UpperBody) == 0x0030);
static_assert(offsetof(UItemFirstPersonAnimationsDataAsset, AimOffsetStanding) == 0x0080);
static_assert(offsetof(UItemFirstPersonAnimationsDataAsset, AimOffsetCrouching) == 0x0088);
static_assert(offsetof(UItemFirstPersonAnimationsDataAsset, AimOffsetProne) == 0x0090);
static_assert(offsetof(UTakeInHandsAssetData, AttachmentSocketMountType) == 0x0030);
static_assert(offsetof(UTakeInHandsAssetData, GripSocketName) == 0x0038);
static_assert(offsetof(UTakeInHandsAssetData, SupportingHandIKSocketName) == 0x0040);
static_assert(offsetof(UTakeInHandsAssetData, TakeInHandsMontage) == 0x0048);
static_assert(offsetof(UTakeInHandsAssetData, RemoveFromHandsMontage) == 0x0050);
static_assert(offsetof(UTakeInHandsAssetData, MeleeSkillAnimationsPreset) == 0x0058);
static_assert(offsetof(UTakeInHandsAssetData, HandsCorrectionssData) == 0x0060);
static_assert(offsetof(UTakeInHandsAssetData, FirstPersonAnimationsData) == 0x0068);
static_assert(offsetof(UTakeInHandsAssetData, MaxPaceOverride) == 0x0072);
static_assert(offsetof(UTakeInHandsAssetData, ActionStance) == 0x008A);
static_assert(offsetof(UTakeInHandsAssetData, ActionStanceFlag) == 0x008B);
static_assert(offsetof(UTakeInHandsAssetData, StanceWhileCarrying) == 0x008D);
static_assert(offsetof(UTakeInHandsAssetData, CarryStanceFlag) == 0x008E);
static_assert(offsetof(UTakeInHandsAssetData, MaxPaceWhileCarrying) == 0x0090);
static_assert(offsetof(UTakeInHandsAssetData, CarryItemIdleAnimationFP) == 0x0098);
static_assert(offsetof(UTakeInHandsAssetData, CarryItemIdleAnimationTP) == 0x00A0);
static_assert(offsetof(UTakeInHandsAssetData, PlayerLongThrowMontage) == 0x00A8);
static_assert(offsetof(UTakeInHandsAssetData, PlayerLongThrowLoopMontage) == 0x00B0);
static_assert(offsetof(UTakeInHandsAssetData, PlayerShortThrowMontage) == 0x00B8);
static_assert(offsetof(UTakeInHandsAssetData, PlayerThrowbackMontage) == 0x00C0);
static_assert(offsetof(UTakeInHandsAssetData, ThrowingItemToWeaponMontage) == 0x00C8);
static_assert(offsetof(UTakeInHandsAssetData, WeaponToThrowingItemMontage) == 0x00D0);
static_assert(offsetof(UTakeInHandsAssetData, ThrowingAnimationSets) == 0x00D8);
static_assert(offsetof(UTakeInHandsAssetData, LeftObstructedIdleAnimationFP) == 0x0130);
static_assert(offsetof(UTakeInHandsAssetData, RightObstructedIdleAnimationFP) == 0x0138);
static_assert(offsetof(UTakeInHandsAssetData, ObstructedIdleAnimationTP) == 0x0140);
static_assert(offsetof(UTakeInHandsAssetData, ObstructedIdleAnimationProneTP) == 0x0148);
static_assert(offsetof(UTaskEntriesDropdownWidget, _background) == 0x0268);
static_assert(offsetof(UTaskEntriesDropdownWidget, _categoryNameTextBlock) == 0x0270);
static_assert(offsetof(UTaskEntriesDropdownWidget, _chbSwitchDropdownState) == 0x0278);
static_assert(offsetof(UTaskEntriesDropdownWidget, _entriesContainer) == 0x0280);
static_assert(offsetof(UTaskEntriesDropdownWidget, _titleOverlay) == 0x0288);
static_assert(offsetof(UTaskEntriesDropdownWidget, _unopenedBackgroundColorAndOpacity) == 0x0298);
static_assert(offsetof(UTaskEntriesDropdownWidget, _openedBackgroundColorAndOpacity) == 0x02A8);
static_assert(offsetof(UTaskEntriesDropdownWidget, _taskCategory) == 0x02B8);
static_assert(offsetof(UTaskEntriesDropdownWidget, _categoryIcon) == 0x02C0);
static_assert(offsetof(UTaskEntriesPanelWidget, _searchBox) == 0x0268);
static_assert(offsetof(UTaskEntriesPanelWidget, _activeEntriesVerticalBox) == 0x0270);
static_assert(offsetof(UTaskEntriesPanelWidget, _activeEntryContainer) == 0x0278);
static_assert(offsetof(UTaskEntriesPanelWidget, _entriesVerticalBox) == 0x0280);
static_assert(offsetof(UTaskEntriesPanelWidget, _entryContainer) == 0x0288);
static_assert(offsetof(UTaskEntriesPanelWidget, _dropdownWidgetClass) == 0x0290);
static_assert(offsetof(UTaskEntriesPanelWidget, _entryWidgetClass) == 0x0298);
static_assert(offsetof(UTaskEntriesPanelWidget, _collapseAllButton) == 0x02C0);
static_assert(offsetof(UTaskEntriesPanelWidget, _expandAllButton) == 0x02C8);
static_assert(offsetof(UTaskEntryDetailsPanelWidget, _mainOverlay) == 0x0268);
static_assert(offsetof(UTaskEntryDetailsPanelWidget, _scrollBox) == 0x0270);
static_assert(offsetof(UTaskEntryDetailsPanelWidget, _entryName) == 0x0278);
static_assert(offsetof(UTaskEntryDetailsPanelWidget, _entryDescription) == 0x0280);
static_assert(offsetof(UTaskEntryDetailsPanelWidget, _entryTrackingDataContainer) == 0x0288);
static_assert(offsetof(UTaskEntryDetailsPanelWidget, _rewardsVerticalBox) == 0x0290);
static_assert(offsetof(UTaskEntryDetailsPanelWidget, _entryRewardsContainer) == 0x0298);
static_assert(offsetof(UTaskEntryDetailsPanelWidget, _abandonTaskButton) == 0x02A0);
static_assert(offsetof(UTaskEntryDetailsPanelWidget, _startTaskButton) == 0x02A8);
static_assert(offsetof(UTaskEntryDetailsPanelWidget, _trackingDataWidgetClass) == 0x02B0);
static_assert(offsetof(UTaskEntryDetailsPanelWidget, _dialogueTextFont) == 0x02B8);
static_assert(offsetof(UTaskEntryDetailsPanelWidget, _abandonTaskTooltipText) == 0x0310);
static_assert(offsetof(UTaskEntryDetailsPanelWidget, _startTaskTooltipText) == 0x0328);
static_assert(offsetof(UTaskEntryDetailsPanelWidget, _tooltipClass) == 0x0340);
static_assert(offsetof(UTaskEntryDetailsPanelWidget, _stepDialogueTextColor) == 0x0400);
static_assert(offsetof(UTaskEntryWidget, _backgroundImage) == 0x0278);
static_assert(offsetof(UTaskEntryWidget, _entryName) == 0x0280);
static_assert(offsetof(UTaskEntryWidget, _trackingCheckbox) == 0x0288);
static_assert(offsetof(UTaskEntryWidget, _pixelSizeMaterialParameterName) == 0x0290);
static_assert(offsetof(UTaskEntryWidget, _dpiMaterialParameterName) == 0x0298);
static_assert(offsetof(UTaskEntryWidget, _inactiveMaterialInstance) == 0x02A0);
static_assert(offsetof(UTaskEntryWidget, _inactiveHoveredMaterialInstance) == 0x02A8);
static_assert(offsetof(UTaskEntryWidget, _activeMaterialInstance) == 0x02B0);
static_assert(offsetof(UTaskEntryWidget, _entryCompletedIcon) == 0x02B8);
static_assert(offsetof(UTaskSetup, Title) == 0x0030);
static_assert(offsetof(UTaskSetup, Category) == 0x0048);
static_assert(offsetof(UTaskSetup, DescriptionSegments) == 0x0050);
static_assert(offsetof(UTaskSetup, StartingDialogueName) == 0x0060);
static_assert(offsetof(UTaskSetup, ConditionsSequence) == 0x0070);
static_assert(offsetof(UTaskSetup, Rewards) == 0x0090);
static_assert(offsetof(UTaskSetup, AddBodyConditionWhenStartingTask) == 0x01B8);
static_assert(offsetof(UTaskSetup, BodyConditionAdminCommandParams) == 0x01E0);
static_assert(offsetof(UTaskSetup, DialogueUponEarlyFailName) == 0x01F4);
static_assert(offsetof(UTaskSetup, DialogueUponEarlyCompletionName) == 0x01FC);
static_assert(offsetof(ATeamDeathmatchGameEvent, _teamDeathmatchParameters) == 0x0588);
static_assert(offsetof(ATeamDeathmatchLocationMarker, TeamDeathmatchParameters) == 0x0418);
static_assert(offsetof(ATeamDeathmatchLocationMarker, FocusOffset) == 0x042C);
static_assert(offsetof(UTeamInvitationWidget, invitor) == 0x0268);
static_assert(offsetof(UTeamInvitationWidget, invited) == 0x0270);
static_assert(offsetof(UTeamInvitationWidget, _flagWarningMessage) == 0x0280);
static_assert(offsetof(UTeamInvitationWidget, TimerText) == 0x0288);
static_assert(offsetof(UTeamInvitationWidget, InvitationMessage) == 0x0290);
static_assert(offsetof(UTeamInvitationWidget, Accept) == 0x0298);
static_assert(offsetof(UTeamInvitationWidget, Decline) == 0x02A0);
static_assert(offsetof(UTeamInvitationWidget, _confirmationMessageBox) == 0x02B0);
static_assert(offsetof(UTelemetryCheckbox, _checkboxIcon) == 0x0268);
static_assert(offsetof(UTelemetryMenu, _mainSwitcher) == 0x0280);
static_assert(offsetof(UTelemetryMenu, _buttonModify) == 0x0288);
static_assert(offsetof(UTelemetryMenu, _buttonAcceptAll) == 0x0290);
static_assert(offsetof(UTelemetryMenu, _buttonAbout) == 0x0298);
static_assert(offsetof(UTelemetryMenu, _buttonCancel) == 0x02A0);
static_assert(offsetof(UTelemetryMenu, _buttonDone) == 0x02A8);
static_assert(offsetof(UTelemetryMenu, _buttonBack) == 0x02B0);
static_assert(offsetof(UTelemetryMenu, _buttonGamepiresPrivacyPolicy) == 0x02B8);
static_assert(offsetof(UTelemetryMenu, _checkboxPAGA) == 0x02C0);
static_assert(offsetof(UTelemetryMenu, _checkboxIBA) == 0x02C8);
static_assert(offsetof(UTelemetrySetting, _modifyButton) == 0x0268);
static_assert(offsetof(UTelemetrySetting, _telementryMenuClass) == 0x0270);
static_assert(offsetof(FTeleportUserDataReplicator, UserData) == 0x0000);
static_assert(offsetof(FTeleportRepData, Subject) == 0x0004);
static_assert(offsetof(FTeleportRepData, TargetLocation) == 0x000C);
static_assert(offsetof(FTeleportRepData, TargetRotation) == 0x0018);
static_assert(offsetof(FTeleportRepData, UserDataReplicator) == 0x0028);
static_assert(offsetof(UTeleportComponent, _repData) == 0x00B8);
static_assert(offsetof(FTextBoxTextStyle, Font) == 0x0000);
static_assert(offsetof(FTextBoxTextStyle, ColorAndOpacity) == 0x0058);
static_assert(offsetof(FTextBoxWithLabelStyle, FocusBackgroundImage) == 0x0000);
static_assert(offsetof(FTextBoxWithLabelStyle, LabelText) == 0x0088);
static_assert(offsetof(FTextBoxWithLabelStyle, InputBoxText) == 0x00F0);
static_assert(offsetof(UTextBoxWithLabel, _name) == 0x02D0);
static_assert(offsetof(UTextBoxWithLabel, _inputTextBox) == 0x02D8);
static_assert(offsetof(UTextBoxWithLabel, _focusBackgroundImage) == 0x02E0);
static_assert(offsetof(UTextBoxWithLabel, _showPasswordOff) == 0x02E8);
static_assert(offsetof(UTextBoxWithLabel, _showPasswordOn) == 0x02F0);
static_assert(offsetof(UTextBoxWithLabel, _showPasswordIconOverlay) == 0x02F8);
static_assert(offsetof(UTextBoxWithLabel, _label) == 0x0300);
static_assert(offsetof(UTextBoxWithLabel, _selectedAndFocusedTWLStyle) == 0x0318);
static_assert(offsetof(UTextBoxWithLabel, _selectedAndUnfocusedTWLStyle) == 0x0470);
static_assert(offsetof(UTextBoxWithLabel, _unselectedTWLStyle) == 0x05C8);
static_assert(offsetof(UTextBoxWithLabel, _highlightedTWLStyle) == 0x0720);
static_assert(offsetof(UTextBoxWithLabel, _disabledTWLStyle) == 0x0878);
static_assert(offsetof(UTextBoxWithLabel, _correctInputTextBoxStyle) == 0x09D0);
static_assert(offsetof(UTextBoxWithLabel, _incorrectInputTextBoxStyle) == 0x11C8);
static_assert(offsetof(UTextInputWidget, MainButton) == 0x0280);
static_assert(offsetof(UTextInputWidget, TextBox) == 0x0288);
static_assert(offsetof(UTextInputWidget, TextBlock) == 0x0290);
static_assert(offsetof(UTextInputWidget, TitleSizeBox) == 0x0298);
static_assert(offsetof(UTextInputWidget, InputSizeBox) == 0x02A0);
static_assert(offsetof(UTextInputWidget, InputImage) == 0x02A8);
static_assert(offsetof(UTextInputWidget, Image) == 0x02B0);
static_assert(offsetof(UTextInputWidget, Image0) == 0x02B8);
static_assert(offsetof(UTextInputWidget, Title) == 0x02D8);
static_assert(offsetof(UTextInputWidget, DefaultValue) == 0x02F0);
static_assert(offsetof(UTextInputWidget, ValueJustification) == 0x030C);
static_assert(offsetof(UTextInputWidget, InputBackgroundColor) == 0x0310);
static_assert(offsetof(UTextInputWidget, InputType) == 0x0320);
static_assert(offsetof(UTextOnlyTooltip, _textBlock) == 0x0268);
static_assert(offsetof(AThermometer, _thermalSensorComponent) == 0x09A0);
static_assert(offsetof(UThieverySkill, _lockpickingDurationModifierCurve) == 0x00B0);
static_assert(offsetof(UThieverySkill, _lockpickingStartAngleModifierCurve) == 0x00B8);
static_assert(offsetof(UThieverySkill, _lockpickingAngleModifierCurve) == 0x00C0);
static_assert(offsetof(UThieverySkill, _lockpickingDurabilityModifierCurve) == 0x00C8);
static_assert(offsetof(UThieverySkill, _dialPadDurationModifierCurve) == 0x00D0);
static_assert(offsetof(UThieverySkill, _voltageMatchingDurationModifierCurve) == 0x00D8);
static_assert(offsetof(FMeleeWeaponDesc, TargetTypeMultiplier) == 0x0008);
static_assert(offsetof(FMeleeWeaponDesc, ImpactSoundCategory) == 0x0028);
static_assert(offsetof(FMeleeWeaponDesc, ImpactEffects) == 0x0030);
static_assert(offsetof(UThrowableItemTag, WeaponDesc) == 0x0030);
static_assert(offsetof(UThrowingComponent, ItemThrowingBehavior) == 0x01F8);
static_assert(offsetof(UThrowingComponent, InitialRotation) == 0x0208);
static_assert(offsetof(UThrowingComponent, UpdatedRotation) == 0x0214);
static_assert(offsetof(UThrowingComponent, MinRandomImpactRotation) == 0x0220);
static_assert(offsetof(UThrowingComponent, MaxRandomImpactRotation) == 0x022C);
static_assert(offsetof(UThrowingComponent, MinStance) == 0x023D);
static_assert(offsetof(UThrowingComponent, _splashParticleSystem) == 0x15F8);
static_assert(offsetof(UThrowingComponent, _splashAudioEvent) == 0x1600);
static_assert(offsetof(UThrowingQuickAccessItemWidget, _imageWidget) == 0x0270);
static_assert(offsetof(UThrowingQuickAccessItemWidget, DefaultPosition) == 0x0288);
static_assert(offsetof(UThrowingQuickAccessItemWidget, _itemWidget) == 0x0290);
static_assert(offsetof(UThrowingQuickAccessItemWidget, SizeBox) == 0x0298);
static_assert(offsetof(UThrowingQuickAccessItemWidget, _additionalIcon) == 0x02A0);
static_assert(offsetof(UThrowingQuickAccessItemWidget, _additionalText) == 0x02A8);
static_assert(offsetof(UThrowingQuickAccessItemWidget, TextBlockItemSlotNumber) == 0x02B0);
static_assert(offsetof(ATimeControllableLight, _intensityVsTimeOfDayCurve) == 0x0238);
static_assert(offsetof(ATimeControllableLight, _pointLightComponent) == 0x0240);
static_assert(offsetof(ATimeControllableSpotLight, _intensityVsTimeOfDayCurve) == 0x0238);
static_assert(offsetof(ATimeControllableSpotLight, _pointLightComponent) == 0x0240);
static_assert(offsetof(ATimedGiftSpawner, _referenceItem) == 0x0238);
static_assert(offsetof(UTimedTriggerComponent, _countdownStartAudioEvent) == 0x04E8);
static_assert(offsetof(UTimedTriggerComponent, _countdownStopAudioEvent) == 0x04F0);
static_assert(offsetof(FTireSurfaceAudioEntry, SoundGroup) == 0x0000);
static_assert(offsetof(UTireToSurfaceAudioData, _movementStarted) == 0x0038);
static_assert(offsetof(UTireToSurfaceAudioData, _movementStopped) == 0x0040);
static_assert(offsetof(UTireToSurfaceAudioData, _noSurface) == 0x0048);
static_assert(offsetof(UTireToSurfaceAudioData, _flatTireContinuousStart) == 0x0050);
static_assert(offsetof(UTireToSurfaceAudioData, _flatTireContinuousStop) == 0x0058);
static_assert(offsetof(UTireToSurfaceAudioData, _soundGroups) == 0x0060);
static_assert(offsetof(UTitleAndDescriptionTooltip, _titleTextBlock) == 0x0268);
static_assert(offsetof(UTitleAndDescriptionTooltip, _descriptionTextBlock) == 0x0270);
static_assert(offsetof(UTooltipBase, BackgroundImage) == 0x0268);
static_assert(offsetof(UTooltipBase, ItemImage) == 0x0270);
static_assert(offsetof(UTooltipBase, ItemImageBox) == 0x0278);
static_assert(offsetof(UTooltipBase, NameText) == 0x0280);
static_assert(offsetof(UTooltipBase, DescriptionText) == 0x0288);
static_assert(offsetof(UTooltipBase, ProgressBar) == 0x0290);
static_assert(offsetof(UTooltipBase, _item) == 0x0298);
static_assert(offsetof(FTournamentStats, UserProfileId) == 0x0000);
static_assert(offsetof(FTournamentStats, PlayerName) == 0x0008);
static_assert(offsetof(FTournamentStats, LastDeathTime) == 0x0028);
static_assert(offsetof(ATournament, StartAnnouncement) == 0x0230);
static_assert(offsetof(ATournament, SuddenDeathAnnouncement) == 0x0238);
static_assert(offsetof(ATournament, EndAnnouncement) == 0x0240);
static_assert(offsetof(ATournament, _stats) == 0x0250);
static_assert(offsetof(ATournament, _scoreboardWidget) == 0x0260);
static_assert(offsetof(UTournamentScoreboardRowWidget, _rankText) == 0x0268);
static_assert(offsetof(UTournamentScoreboardRowWidget, _playerNameText) == 0x0270);
static_assert(offsetof(UTournamentScoreboardRowWidget, _famePointsText) == 0x0278);
static_assert(offsetof(UTournamentScoreboardRowWidget, _killsText) == 0x0280);
static_assert(offsetof(UTournamentScoreboardRowWidget, _deathIcon) == 0x0288);
static_assert(offsetof(UTournamentScoreboardWidget, _instruction) == 0x0268);
static_assert(offsetof(UTournamentScoreboardWidget, _table) == 0x0270);
static_assert(offsetof(UTournamentScoreboardWidget, _rowClass) == 0x0278);
static_assert(offsetof(ATrackingMarker2, SceneComponent) == 0x0228);
static_assert(offsetof(ATrackingMarker2, DirectionArrow) == 0x0230);
static_assert(offsetof(ATrackingMarker2, ConeDecal) == 0x0238);
static_assert(offsetof(ATrackingMarker2, Particles) == 0x0240);
static_assert(offsetof(ATrackingMarker2, AnimalClass) == 0x0250);
static_assert(offsetof(ATrackingMarker2, Direction) == 0x025C);
static_assert(offsetof(ATrackingMarker2, BleedingSeverity) == 0x026C);
static_assert(offsetof(FSedentaryNPCMarker, SedentaryNPCClass) == 0x0000);
static_assert(offsetof(FSedentaryNPCMarker, SpawnTransform) == 0x0030);
static_assert(offsetof(ATradeOutpostBuilding, _sedentaryNPCMarkers) == 0x0500);
static_assert(offsetof(ATradeOutpostBuilding, _spawnedSedentaryNPCs) == 0x0510);
static_assert(offsetof(ATradeOutpostBuilding, _questBook) == 0x0538);
static_assert(offsetof(ATradeOutpostBuilding, _questGiverComponent) == 0x0540);
static_assert(offsetof(ATradeOutpostManager, _sprite) == 0x0220);
static_assert(offsetof(ATradeOutpostManager, _outpostDescription) == 0x0228);
static_assert(offsetof(ATradeOutpostManager, _startingProsperityLevel) == 0x0230);
static_assert(offsetof(ATradeOutpostManager, _assignedTradePosts) == 0x0238);
static_assert(offsetof(ATradeOutpostManager, _otherAssignedTradeOutpostBuildings) == 0x0248);
static_assert(offsetof(FTraderMarker, TraderPersonality) == 0x0068);
static_assert(offsetof(FTraderMarker, PurchasedTradeablesSpawnTransform) == 0x0070);
static_assert(offsetof(FTraderMarker, DepotSpawnTransform) == 0x00A0);
static_assert(offsetof(FTraderLocationMarker, MarkerType) == 0x0000);
static_assert(offsetof(FTraderLocationMarker, Transform) == 0x0010);
static_assert(offsetof(ATradePost, _traderMarkers) == 0x0560);
static_assert(offsetof(ATradePost, _locationMarkers) == 0x0570);
static_assert(offsetof(ATradePost, _spawnedTraders) == 0x0580);
static_assert(offsetof(ATradePost, _spawnedDepots) == 0x05A0);
static_assert(offsetof(UTraderBuyPanel, _traderItemButtonClass) == 0x0280);
static_assert(offsetof(UTraderBuyPanel, _cashOrCreditRadioBtn) == 0x0288);
static_assert(offsetof(UTraderBuyPanel, _subpanelSwitcher) == 0x0290);
static_assert(offsetof(UTraderBuyPanel, _catResults) == 0x0298);
static_assert(offsetof(UTraderBuyPanel, _itemsOfChosenCategory) == 0x02A0);
static_assert(offsetof(UTraderBuyPanel, _chosenItem) == 0x02A8);
static_assert(offsetof(UTraderBuyPanel, _relatedItems) == 0x02B0);
static_assert(offsetof(UTraderBuyPanel, _itemSearchBox) == 0x02B8);
static_assert(offsetof(UTraderBuyPanel, _itemCategoryDropdown) == 0x02C0);
static_assert(offsetof(UTraderBuyPanel, _itemSortingDropdown) == 0x02C8);
static_assert(offsetof(UTraderBuyPanel, _categoryTitle) == 0x02D0);
static_assert(offsetof(UTraderBuyPanel, _btnFilterSufficientFP) == 0x02D8);
static_assert(offsetof(UTraderBuyPanel, _btnFilterInsufficientFP) == 0x02E0);
static_assert(offsetof(UTraderBuyPanel, _warningMessage) == 0x02E8);
static_assert(offsetof(UTraderBuyPanel, _headerBannerPrisonerCashOnHand) == 0x02F0);
static_assert(offsetof(UTraderBuyPanel, _headerBannerPrisonerCashInBank) == 0x02F8);
static_assert(offsetof(UTraderBuyPanel, _prisonerCashOnHand) == 0x0300);
static_assert(offsetof(UTraderBuyPanel, _prisonerCashInBank) == 0x0308);
static_assert(offsetof(UTraderBuyPanel, _prisonerGoldInBank) == 0x0310);
static_assert(offsetof(UTraderBuyPanel, _prisonerFamePoints) == 0x0318);
static_assert(offsetof(UTraderBuyPanel, _buyTotal) == 0x0320);
static_assert(offsetof(UTraderBuyPanel, _buyTotalGold) == 0x0328);
static_assert(offsetof(UTraderBuyPanel, _exitBackSwitcher) == 0x0330);
static_assert(offsetof(UTraderBuyPanel, _btnExit) == 0x0338);
static_assert(offsetof(UTraderBuyPanel, _exitTooltipText) == 0x0340);
static_assert(offsetof(UTraderBuyPanel, _btnBack) == 0x0358);
static_assert(offsetof(UTraderBuyPanel, _backTooltipText) == 0x0360);
static_assert(offsetof(UTraderBuyPanel, _cartBuySwitcher) == 0x0378);
static_assert(offsetof(UTraderBuyPanel, _btnCart) == 0x0380);
static_assert(offsetof(UTraderBuyPanel, _cartTooltipText) == 0x0388);
static_assert(offsetof(UTraderBuyPanel, _btnBuy) == 0x03A0);
static_assert(offsetof(UTraderBuyPanel, _buyTooltipText) == 0x03A8);
static_assert(offsetof(UTraderBuyPanel, _tooltipClass) == 0x03C8);
static_assert(offsetof(UTraderBuyPanel, _buyTotalZeroColor) == 0x0440);
static_assert(offsetof(UTraderBuyPanel, _buyTotalNonZeroColor) == 0x0468);
static_assert(offsetof(UTraderBuyPanel, _noOwnedCardInInventoryColor) == 0x0490);
static_assert(offsetof(UTraderBuyPanel, _sortTypeBrushes) == 0x04B8);
static_assert(offsetof(UTraderForPlayerAndDepotItemResponse, _payload) == 0x0028);
static_assert(offsetof(UTraderDepotPanel, _prisonerCashOnHand) == 0x0268);
static_assert(offsetof(UTraderDepotPanel, _prisonerCashInBank) == 0x0270);
static_assert(offsetof(UTraderDepotPanel, _prisonerGoldInBank) == 0x0278);
static_assert(offsetof(UTraderDepotPanel, _prisonerFamePoints) == 0x0280);
static_assert(offsetof(UTraderDepotPanel, _btnExit) == 0x0288);
static_assert(offsetof(UTraderDepotPanel, _exitTooltipText) == 0x0290);
static_assert(offsetof(UTraderDepotPanel, _inventoryDepotWidget2) == 0x02A8);
static_assert(offsetof(UTraderDepotPanel, _soundExitOnClick) == 0x02B0);
static_assert(offsetof(UTraderDepotPanel, _soundButtonOnHover) == 0x02B8);
static_assert(offsetof(UTraderDepotPanel, _tooltipClass) == 0x02C0);
static_assert(offsetof(FTraderDropdownMenuEntry, Title) == 0x0000);
static_assert(offsetof(FTraderDropdownMenuEntry, TradeCategories) == 0x0020);
static_assert(offsetof(FTraderDropdownMenuEntry, RelatedCategoryButton) == 0x0040);
static_assert(offsetof(FTraderDropdownMenuEntry, PanelToOpenOnClick) == 0x0048);
static_assert(offsetof(UTraderDropdownMenu, _backgroundSwitcher) == 0x02A0);
static_assert(offsetof(UTraderDropdownMenu, _comboBox) == 0x02A8);
static_assert(offsetof(UTraderDropdownMenu, _dropdownIcon) == 0x02B0);
static_assert(offsetof(UTraderDropdownMenu, _comboBoxEntries) == 0x02B8);
static_assert(offsetof(UTraderFilterFamePointsButton, _lockImage) == 0x02B8);
static_assert(offsetof(UTraderFilterFamePointsButton, _selectedLookBrush) == 0x02C0);
static_assert(offsetof(UTraderFilterFamePointsButton, _deselectedLookBrush) == 0x0348);
static_assert(offsetof(UTraderItemButton, _button) == 0x02D0);
static_assert(offsetof(UTraderItemButton, _icon) == 0x02D8);
static_assert(offsetof(UTraderItemButton, _saleIcon) == 0x02E0);
static_assert(offsetof(UTraderItemButton, _priceOverlay) == 0x02E8);
static_assert(offsetof(UTraderItemButton, _title) == 0x02F0);
static_assert(offsetof(UTraderItemButton, _amountInStockOverlay) == 0x02F8);
static_assert(offsetof(UTraderItemButton, _amountInStock) == 0x0300);
static_assert(offsetof(UTraderItemButton, _tradeDataOverlay) == 0x0308);
static_assert(offsetof(UTraderItemButton, _priceBackground) == 0x0310);
static_assert(offsetof(UTraderItemButton, _price) == 0x0318);
static_assert(offsetof(UTraderItemButton, _quantity) == 0x0320);
static_assert(offsetof(UTraderItemButton, _quantityFadeout) == 0x0328);
static_assert(offsetof(UTraderItemButton, _quantityBackground) == 0x0330);
static_assert(offsetof(UTraderItemButton, _quantityBackgroundFadeout) == 0x0338);
static_assert(offsetof(UTraderItemButton, _lockedOverlay) == 0x0340);
static_assert(offsetof(UTraderItemButton, _lockedWidgetSwitcher) == 0x0348);
static_assert(offsetof(UTraderItemButton, _requiredFamePointsText) == 0x0350);
static_assert(offsetof(UTraderItemButton, _changeQuantity) == 0x0358);
static_assert(offsetof(UTraderItemButton, _salePriceBackgroundColor) == 0x0360);
static_assert(offsetof(UTraderItemButton, _iconBlankTexture) == 0x0448);
static_assert(offsetof(UTraderItemButton, _soundOnHover) == 0x0450);
static_assert(offsetof(UTraderItemButton, _soundOnClick) == 0x0458);
static_assert(offsetof(UTraderItemCategoryButton, _button) == 0x0280);
static_assert(offsetof(UTraderItemCategoryButton, _icon) == 0x0288);
static_assert(offsetof(UTraderItemCategoryButton, _title) == 0x0290);
static_assert(offsetof(UTraderItemCategoryButton, _lockedOverlay) == 0x0298);
static_assert(offsetof(UTraderItemCategoryButton, _lockedWidgetSwitcher) == 0x02A0);
static_assert(offsetof(UTraderItemCategoryButton, _requiredFamePointsText) == 0x02A8);
static_assert(offsetof(UTraderItemCategoryButton, _titleValue) == 0x02B0);
static_assert(offsetof(UTraderItemCategoryButton, _iconTexture) == 0x02C8);
static_assert(offsetof(UTraderItemCategoryButton, _iconBlankTexture) == 0x02F0);
static_assert(offsetof(UTraderItemCategoryButton, _iconSize) == 0x02F8);
static_assert(offsetof(UTraderItemCategoryButton, _tradeCategories) == 0x0300);
static_assert(offsetof(UTraderItemCategoryButton, _panelToOpenOnClick) == 0x0320);
static_assert(offsetof(UTraderItemCategoryButton, _soundOnHover) == 0x0328);
static_assert(offsetof(UTraderItemCategoryButton, _soundOnClick) == 0x0330);
static_assert(offsetof(UTraderMainPanel, _tabRow) == 0x0268);
static_assert(offsetof(UTraderMainPanel, _panelSwitcher) == 0x0270);
static_assert(offsetof(UTraderMainPanel, _buyPanel) == 0x0278);
static_assert(offsetof(UTraderMainPanel, _sellPanel) == 0x0280);
static_assert(offsetof(UTraderMainPanel, _depotPanel) == 0x0288);
static_assert(offsetof(UTraderMainPanel, _loadingScreen) == 0x0290);
static_assert(offsetof(UTraderMainUIController, TraderBuyUIController) == 0x0088);
static_assert(offsetof(UTraderMainUIController, TraderSellUIController) == 0x0090);
static_assert(offsetof(FTraderMarkerTradeableOverrideStruct, TradeableClass) == 0x0000);
static_assert(offsetof(FTraderMarkerTradeableOverrideStruct, PurchaseCurrencyType) == 0x002C);
static_assert(offsetof(UTraderPersonalityDataAsset, TraderPersistentId) == 0x0030);
static_assert(offsetof(UTraderPersonalityDataAsset, HumanReadableTraderName) == 0x0040);
static_assert(offsetof(UTraderPersonalityDataAsset, TraderType) == 0x0050);
static_assert(offsetof(UTraderPersonalityDataAsset, PurchasableTradeablesClassesOverride) == 0x0058);
static_assert(offsetof(UTraderSellListEntry, _entryIcon) == 0x0280);
static_assert(offsetof(UTraderSellListEntry, _entryCaption) == 0x0288);
static_assert(offsetof(UTraderSellListEntry, _entryPrice) == 0x0290);
static_assert(offsetof(UTraderSellListEntry, _btnCancel) == 0x0298);
static_assert(offsetof(UTraderSellListEntry, _missingTextureIcon) == 0x0308);
static_assert(offsetof(UTraderSellPanel, _cashOrCreditRadioBtn) == 0x0268);
static_assert(offsetof(UTraderSellPanel, _sellList) == 0x0270);
static_assert(offsetof(UTraderSellPanel, _headerBannerPrisonerCashOnHand) == 0x0278);
static_assert(offsetof(UTraderSellPanel, _headerBannerPrisonerCashInBank) == 0x0280);
static_assert(offsetof(UTraderSellPanel, _prisonerCashOnHand) == 0x0288);
static_assert(offsetof(UTraderSellPanel, _prisonerCashInBank) == 0x0290);
static_assert(offsetof(UTraderSellPanel, _prisonerGoldInBank) == 0x0298);
static_assert(offsetof(UTraderSellPanel, _prisonerFamePoints) == 0x02A0);
static_assert(offsetof(UTraderSellPanel, _traderFunds) == 0x02A8);
static_assert(offsetof(UTraderSellPanel, _saleTotal) == 0x02B0);
static_assert(offsetof(UTraderSellPanel, _warningMessage) == 0x02B8);
static_assert(offsetof(UTraderSellPanel, _btnExit) == 0x02C0);
static_assert(offsetof(UTraderSellPanel, _exitTooltipText) == 0x02C8);
static_assert(offsetof(UTraderSellPanel, _btnSell) == 0x02E0);
static_assert(offsetof(UTraderSellPanel, _sellTooltipText) == 0x02E8);
static_assert(offsetof(UTraderSellPanel, _tooltipClass) == 0x0300);
static_assert(offsetof(UTraderSellPanel, _sellListEntryWidgetClass) == 0x0308);
static_assert(offsetof(UTraderSellPanel, _partialPriceSellText) == 0x0328);
static_assert(offsetof(UTraderSellPanel, _worthlessPriceSellText) == 0x0340);
static_assert(offsetof(UEconomyManagerResponseData, _assignedDepotItem) == 0x0030);
static_assert(offsetof(UEconomyManagerResponseData, _tradeables) == 0x0038);
static_assert(offsetof(UEconomyManagerResponseData, _specialDeals) == 0x0048);
static_assert(offsetof(UTradingOutpostDescriptionDataAsset, TradeOutpostPersistentId) == 0x0030);
static_assert(offsetof(UTrapData, SphereMotionTriggerComponentClass) == 0x0030);
static_assert(offsetof(UTrapData, BoxMotionTriggerComponentClass) == 0x0038);
static_assert(offsetof(UTrapData, LaserTriggerComponentClass) == 0x0040);
static_assert(offsetof(UTrapData, TimedTriggerComponentClass) == 0x0048);
static_assert(offsetof(UTrapItemUserData, OwnerUserProfileId) == 0x0028);
static_assert(offsetof(UTrashCarouselWidget, _leftArrowIcon) == 0x02E8);
static_assert(offsetof(UTrashCarouselWidget, _rightArrowIcon) == 0x0370);
static_assert(offsetof(UTrashCarouselWidget, _disabledLeftArrowIcon) == 0x03F8);
static_assert(offsetof(UTrashCarouselWidget, _disabledRightArrowIcon) == 0x0480);
static_assert(offsetof(UTrashCarouselWidget, _selectionDisplay) == 0x0508);
static_assert(offsetof(UTrashCarouselWidget, _leftArrow) == 0x0510);
static_assert(offsetof(UTrashCarouselWidget, _rightArrow) == 0x0518);
static_assert(offsetof(UTrashCarouselWidget, _font) == 0x0520);
static_assert(offsetof(UTrashCarouselWidget, _possibleValues) == 0x0578);
static_assert(offsetof(UTrashCarouselWidget, _carouselValues) == 0x0588);
static_assert(offsetof(UTrashNamedCarouselWidget, _name) == 0x02F8);
static_assert(offsetof(UTrashNamedCarouselWidget, _carousel) == 0x0300);
static_assert(offsetof(UTrashNamedCarouselWidget, _focusBackground) == 0x0308);
static_assert(offsetof(UTrashNamedCarouselWidget, _label) == 0x0310);
static_assert(offsetof(UTrashNamedCarouselWidget, _mainLabel) == 0x0320);
static_assert(offsetof(UTrashNamedCarouselWidget, _defaultFont) == 0x0338);
static_assert(offsetof(UTrashNamedCarouselWidget, _possibleValues) == 0x03E8);
static_assert(offsetof(UTrashNamedCarouselWidget, _carouselValues) == 0x03F8);
static_assert(offsetof(UTrashNamedSliderWidget, _nameBox) == 0x02F8);
static_assert(offsetof(UTrashNamedSliderWidget, _name) == 0x0300);
static_assert(offsetof(UTrashNamedSliderWidget, _valueDisplayBox) == 0x0308);
static_assert(offsetof(UTrashNamedSliderWidget, _valueDisplay) == 0x0310);
static_assert(offsetof(UTrashNamedSliderWidget, _slider) == 0x0318);
static_assert(offsetof(UTrashNamedSliderWidget, _focusBackground) == 0x0320);
static_assert(offsetof(UTrashNamedSliderWidget, _label) == 0x0328);
static_assert(offsetof(UTrashNamedSliderWidget, _mainLabel) == 0x0338);
static_assert(offsetof(UTrashNamedSliderWidget, _defaultFont) == 0x0350);
static_assert(offsetof(UTrashSliderWidget, _emptySlider) == 0x02F8);
static_assert(offsetof(UTrashSliderWidget, _filledSlider) == 0x0380);
static_assert(offsetof(UTrashSliderWidget, _selectedSlider) == 0x0408);
static_assert(offsetof(UTrashSliderWidget, _normalThumb) == 0x05A0);
static_assert(offsetof(UTrashSliderWidget, _selectedThumb) == 0x0628);
static_assert(offsetof(UTrashSliderWidget, _slider) == 0x0738);
static_assert(offsetof(UTrashSliderWidget, _progressBar) == 0x0740);
static_assert(offsetof(UTrashSliderWidget, _selectedColor) == 0x0748);
static_assert(offsetof(UTrashSliderWidget, _disabledColor) == 0x0758);
static_assert(offsetof(UTriggerItemTag, TriggerType) == 0x0030);
static_assert(offsetof(FCountedAmmunitionData, AmmunitionItemClass) == 0x0000);
static_assert(offsetof(FCountedAmmunitionData, State) == 0x0030);
static_assert(offsetof(ATurretItem, _turretMeshComponent) == 0x09A8);
static_assert(offsetof(ATurretItem, _muzzlePSC) == 0x09B0);
static_assert(offsetof(ATurretItem, _smokeAfterShotFiredPSC) == 0x09B8);
static_assert(offsetof(ATurretItem, _perceptionComponent) == 0x09C0);
static_assert(offsetof(ATurretItem, _rangedResourceConsumerComponent) == 0x09C8);
static_assert(offsetof(ATurretItem, _paintjobComponent) == 0x09D0);
static_assert(offsetof(ATurretItem, _spotlightTurnOnTime) == 0x09E0);
static_assert(offsetof(ATurretItem, _spotlightTurnOffTime) == 0x09E1);
static_assert(offsetof(ATurretItem, _influenceAreaVisualizerClass) == 0x0A00);
static_assert(offsetof(ATurretItem, _compatibleAmmoTypes) == 0x0A48);
static_assert(offsetof(ATurretItem, _defaultFillAmmo) == 0x0A68);
static_assert(offsetof(ATurretItem, _ammoRep) == 0x0A90);
static_assert(offsetof(ATurretItem, _lightsEmissionParameterName) == 0x0B04);
static_assert(offsetof(ATurretItem, _simulatedShooterFiringStrategyAuthorityNormal) == 0x0B18);
static_assert(offsetof(ATurretItem, _simulatedShooterFiringStrategyAuthorityOptimized) == 0x0B20);
static_assert(offsetof(ATurretItem, _simulatedShooterFiringStrategySimulated) == 0x0B28);
static_assert(offsetof(ATurretItem, _barrelBoneName) == 0x0B68);
static_assert(offsetof(ATurretItem, _muzzleSocketName) == 0x0B70);
static_assert(offsetof(ATurretItem, _barrelOffset) == 0x0B78);
static_assert(offsetof(ATurretItem, _turnOnAudioEvent) == 0x0B90);
static_assert(offsetof(ATurretItem, _turnOffAudioEvent) == 0x0B98);
static_assert(offsetof(ATurretItem, _loadAmmoAudioEvent) == 0x0BA0);
static_assert(offsetof(ATurretItem, _unloadAmmoAudioEvent) == 0x0BA8);
static_assert(offsetof(ATurretItem, _startSpinUpAudioEvent) == 0x0BB0);
static_assert(offsetof(ATurretItem, _stopSpinUpAudioEvent) == 0x0BB8);
static_assert(offsetof(ATurretItem, _fireSingleShotAudioEvent) == 0x0BC0);
static_assert(offsetof(ATurretItem, _startAutoFireAudioEvent) == 0x0BC8);
static_assert(offsetof(ATurretItem, _stopAutoFireAudioEvent) == 0x0BD0);
static_assert(offsetof(ATurretItem, _destroyedAudioEvent) == 0x0BD8);
static_assert(offsetof(ATurretItem, _startRotationAudioEvent) == 0x0BE0);
static_assert(offsetof(ATurretItem, _stopRotationAudioEvent) == 0x0BE8);
static_assert(offsetof(ATurretItem, _startActivatedAudioEvent) == 0x0BF0);
static_assert(offsetof(ATurretItem, _stopActivatedAudioEvent) == 0x0BF8);
static_assert(offsetof(ATurretItem, _packedState) == 0x0C58);
static_assert(offsetof(UTurretItemAnimInstance, _barrelRotation) == 0x02B8);
static_assert(offsetof(UTurretItemEntitySave, AmmunitionData) == 0x0028);
static_assert(offsetof(FTurretPaintjobPatternParams, Name) == 0x0000);
static_assert(offsetof(FTurretPaintjobPatternParams, Texture) == 0x0018);
static_assert(offsetof(FTurretPaintjobPatternParams, DeluxeVersionRequired) == 0x0028);
static_assert(offsetof(UTurretPaintjobItemComponent, _patterns) == 0x00C8);
static_assert(offsetof(UTurretPaintjobCommonData, Patterns) == 0x0030);
static_assert(offsetof(UTwitchDropsMainMenuButtonWidget, _button) == 0x0268);
static_assert(offsetof(UTwitchDropsMainMenuButtonWidget, _backgroundHorizontalBox) == 0x0270);
static_assert(offsetof(UTwitchDropsMainMenuButtonWidget, _displayText) == 0x0278);
static_assert(offsetof(UTwitchDropsMainMenuButtonWidget, _icon) == 0x0280);
static_assert(offsetof(UTwitchDropsMainMenuButtonWidget, _notConnectedIcon) == 0x0288);
static_assert(offsetof(UTwitchDropsMainMenuButtonWidget, _connectedIcon) == 0x0310);
static_assert(offsetof(UTwitchDropsMainMenuButtonWidget, _invalidConnectionIcon) == 0x0398);
static_assert(offsetof(UTwitchDropsMainMenuButtonWidget, _criticalErrorIcon) == 0x0420);
static_assert(offsetof(UTwitchDropsMainMenuButtonWidget, _twitchDropsUIController) == 0x04A8);
static_assert(offsetof(UUIRepresentableObjectWidget, _mainSizeBox) == 0x02F8);
static_assert(offsetof(UUIRepresentableObjectWidget, _imageScaleBox) == 0x0300);
static_assert(offsetof(UUIRepresentableObjectWidget, _image) == 0x0308);
static_assert(offsetof(UUIRepresentationSubobject, _inContainerIcon) == 0x0038);
static_assert(offsetof(UUIRepresentationSubobject, _inVicinityIcon) == 0x0060);
static_assert(offsetof(UUIRepresentationSubobject, _inHandsOrHolstersIcon) == 0x0088);
static_assert(offsetof(FGenericUISounds, StopDeena) == 0x0000);
static_assert(offsetof(FGenericUISounds, ButtonClick) == 0x0008);
static_assert(offsetof(FGenericUISounds, ButtonHover) == 0x0010);
static_assert(offsetof(FGenericUISounds, TabMenuTabClick) == 0x0018);
static_assert(offsetof(FGenericUISounds, TabMenuSubtabClick) == 0x0020);
static_assert(offsetof(FGenericUISounds, TabMenuCategoryTabClick) == 0x0028);
static_assert(offsetof(FGenericUISounds, FilterClick) == 0x0030);
static_assert(offsetof(FGenericUISounds, DropdownCollapseExpandToggleClick) == 0x0038);
static_assert(offsetof(FNotificationUISounds, PlayerKillIndicator) == 0x0000);
static_assert(offsetof(FNotificationUISounds, DialogueInterruptIndicator) == 0x0008);
static_assert(offsetof(FBankATMUISounds, ButtonClick) == 0x0000);
static_assert(offsetof(FBankATMUISounds, ButtonHover) == 0x0008);
static_assert(offsetof(FBankATMUISounds, TransactionFailed) == 0x0010);
static_assert(offsetof(FBankATMUISounds, TransactionSuccessful) == 0x0018);
static_assert(offsetof(FTraderUISounds, ExitButtonClick) == 0x0000);
static_assert(offsetof(FTraderUISounds, BackButtonClick) == 0x0008);
static_assert(offsetof(FTraderUISounds, CartButtonClick) == 0x0010);
static_assert(offsetof(FItemsCraftingUISounds, CraftButtonClick) == 0x0000);
static_assert(offsetof(FItemsCraftingUISounds, AutoCraftButtonClick) == 0x0008);
static_assert(offsetof(FItemsCraftingUISounds, DetailsButtonClick) == 0x0010);
static_assert(offsetof(FItemsCraftingUISounds, BackButtonClick) == 0x0018);
static_assert(offsetof(FBaseBuildingUISounds, PlaceButtonClick) == 0x0000);
static_assert(offsetof(FBaseBuildingUISounds, DetailsButtonClick) == 0x0008);
static_assert(offsetof(FBaseBuildingUISounds, BackButtonClick) == 0x0010);
static_assert(offsetof(FCookingUISounds, AddRecipeClick) == 0x0000);
static_assert(offsetof(FCookingUISounds, DetailsButtonClick) == 0x0008);
static_assert(offsetof(FCookingUISounds, BackButtonClick) == 0x0010);
static_assert(offsetof(FJournalUISounds, QuestEntryClick) == 0x0000);
static_assert(offsetof(FJournalUISounds, QuestEntryHover) == 0x0008);
static_assert(offsetof(FJournalUISounds, TrackQuest) == 0x0010);
static_assert(offsetof(FJournalUISounds, UntrackQuest) == 0x0018);
static_assert(offsetof(FJournalUISounds, AbandonQuest) == 0x0020);
static_assert(offsetof(FManualUISounds, CategoryCollapseExpandToggleClick) == 0x0000);
static_assert(offsetof(FManualUISounds, CodexEntryClick) == 0x0008);
static_assert(offsetof(FManualUISounds, TaskEntryClick) == 0x0010);
static_assert(offsetof(FSquadUISounds, CreateSquadClick) == 0x0000);
static_assert(offsetof(FSquadUISounds, EditSquadClick) == 0x0008);
static_assert(offsetof(FSquadUISounds, LeaveSquadClick) == 0x0010);
static_assert(offsetof(FEventsUISounds, EventSelectionCollapseExpandToggleClick) == 0x0000);
static_assert(offsetof(FEventsUISounds, EventSelectionClick) == 0x0008);
static_assert(offsetof(FQuestUISounds, QuestHover) == 0x0000);
static_assert(offsetof(FQuestUISounds, QuestZoomIn) == 0x0008);
static_assert(offsetof(FQuestUISounds, AcceptQuest) == 0x0010);
static_assert(offsetof(FQuestUISounds, AcceptQuestFailed) == 0x0018);
static_assert(offsetof(FQuestUISounds, QuestCompleted) == 0x0020);
static_assert(offsetof(FQuestUISounds, QuestStepCompleted) == 0x0028);
static_assert(offsetof(FQuestUISounds, QuestFailed) == 0x0030);
static_assert(offsetof(FQuestUISounds, OpenQuestDetails) == 0x0038);
static_assert(offsetof(FQuestUISounds, FlipQuestBookPage) == 0x0040);
static_assert(offsetof(FQuestUISounds, OpenQuestBook) == 0x0048);
static_assert(offsetof(FQuestUISounds, CloseQuestBook) == 0x0050);
static_assert(offsetof(FSettingsUISounds, CarouselSelectionClick) == 0x0000);
static_assert(offsetof(FSettingsUISounds, CarouselHover) == 0x0008);
static_assert(offsetof(FSettingsUISounds, SliderIncrement) == 0x0010);
static_assert(offsetof(FSettingsUISounds, SliderDecrement) == 0x0018);
static_assert(offsetof(FSettingsUISounds, SliderHover) == 0x0020);
static_assert(offsetof(FSettingsUISounds, ControlMappingClick) == 0x0028);
static_assert(offsetof(FSettingsUISounds, ControlMappingHover) == 0x0030);
static_assert(offsetof(FSettingsUISounds, TextBoxFocusReceived) == 0x0038);
static_assert(offsetof(FSettingsUISounds, TextBoxTextInput) == 0x0040);
static_assert(offsetof(FSettingsUISounds, TextBoxHover) == 0x0048);
static_assert(offsetof(UUISoundsData, Generic) == 0x0030);
static_assert(offsetof(UUISoundsData, Notification) == 0x0070);
static_assert(offsetof(UUISoundsData, BankATM) == 0x0080);
static_assert(offsetof(UUISoundsData, Trader) == 0x00A0);
static_assert(offsetof(UUISoundsData, ItemsCrafting) == 0x00B8);
static_assert(offsetof(UUISoundsData, BaseBuilding) == 0x00D8);
static_assert(offsetof(UUISoundsData, Cooking) == 0x00F0);
static_assert(offsetof(UUISoundsData, Journal) == 0x0108);
static_assert(offsetof(UUISoundsData, Manual) == 0x0130);
static_assert(offsetof(UUISoundsData, Squad) == 0x0148);
static_assert(offsetof(UUISoundsData, Events) == 0x0160);
static_assert(offsetof(UUISoundsData, Quests) == 0x0170);
static_assert(offsetof(UUISoundsData, Settings) == 0x01C8);
static_assert(offsetof(FItemUnpackingSpawnedItem, ItemClass) == 0x0000);
static_assert(offsetof(FItemUnpackingSpawnedItem, CountType) == 0x0008);
static_assert(offsetof(FItemUnpackingSpawnedItem, CustomSpawnMethod) == 0x0010);
static_assert(offsetof(UUnpackableTag, _unpackingType) == 0x0030);
static_assert(offsetof(UUnpackableTag, _interactionCaption) == 0x0038);
static_assert(offsetof(UUnpackableTag, _spawnedItems) == 0x0050);
static_assert(offsetof(UUnusableWorldItemTag, UnusableItem) == 0x0030);
static_assert(offsetof(UUpdateableNotificationDescription, NotificationName) == 0x0078);
static_assert(offsetof(UUserProfile, _globalSpamProtectionState) == 0x0108);
static_assert(offsetof(UUserProfile, _localSpamProtectionState) == 0x0110);
static_assert(offsetof(FVehicleAttachmentSave, Data) == 0x0000);
static_assert(offsetof(UVehicleBaseSave, VehicleAttachments) == 0x0038);
static_assert(offsetof(UVehicleBaseSave, LastSteadyLocation) == 0x0048);
static_assert(offsetof(UVehicleDamageRegionAssetData, Tag) == 0x0028);
static_assert(offsetof(FVehicleAttachmentMeshSetup, Mesh) == 0x0008);
static_assert(offsetof(FVehicleAttachmentMeshSetup, AnimationBlueprintClass) == 0x0020);
static_assert(offsetof(FVehicleAttachmentMeshSetup, Offset) == 0x0030);
static_assert(offsetof(FVehicleAttachmentMeshSetup, CollisionEnabled) == 0x006C);
static_assert(offsetof(FVehicleAttachmentMeshSetup, CollisionProfileName) == 0x0070);
static_assert(offsetof(FVehicleAttachmentMeshSetup, PhysicalMaterialOverride) == 0x0078);
static_assert(offsetof(FVehicleAttachmentAdditionalSocket, Name) == 0x0000);
static_assert(offsetof(FVehicleAttachmentAdditionalSocket, Transform) == 0x0010);
static_assert(offsetof(FVehicleAttachmentDestructionEffectMesh, Mesh) == 0x0000);
static_assert(offsetof(FVehicleAttachmentDestructionEffectMesh, Offset) == 0x0020);
static_assert(offsetof(FVehicleAttachmentDestructionEffectParticle, ParticleEffect) == 0x0000);
static_assert(offsetof(FVehicleAttachmentDestructionEffectParticle, Offset) == 0x0010);
static_assert(offsetof(FVehicleAttachmentDestructionEffect, DestructionMeshes) == 0x0000);
static_assert(offsetof(FVehicleAttachmentDestructionEffect, DestructionParticles) == 0x0010);
static_assert(offsetof(FVehiclePaintjobPatternParams, Name) == 0x0000);
static_assert(offsetof(FVehiclePaintjobPatternParams, Texture) == 0x0018);
static_assert(offsetof(FVehiclePaintjobPatternParams, DeluxeVersionRequired) == 0x0028);
static_assert(offsetof(UVehicleAttachment, ParentSocket) == 0x0038);
static_assert(offsetof(UVehicleAttachment, MeshSetup) == 0x0040);
static_assert(offsetof(UVehicleAttachment, QueryMeshSetup) == 0x00D0);
static_assert(offsetof(UVehicleAttachment, AdditionalSockets) == 0x0158);
static_assert(offsetof(UVehicleAttachment, HealthDisplay) == 0x0168);
static_assert(offsetof(UVehicleAttachment, _associatedCollisionShapes) == 0x0170);
static_assert(offsetof(UVehicleAttachment, _displayName) == 0x0180);
static_assert(offsetof(UVehicleAttachment, _slots) == 0x01A0);
static_assert(offsetof(UVehicleAttachment, _requiredServiceToolTag) == 0x01B4);
static_assert(offsetof(UVehicleAttachment, _regularMaterials) == 0x01D8);
static_assert(offsetof(UVehicleAttachment, _serviceModeMaterial) == 0x01E8);
static_assert(offsetof(UVehicleAttachment, AttachmentItemClass) == 0x0238);
static_assert(offsetof(UVehicleAttachment, _tradeableClassOverride) == 0x0260);
static_assert(offsetof(UVehicleAttachment, _acceptableServiceModes) == 0x02B0);
static_assert(offsetof(UVehicleAttachment, _damageRegion) == 0x02C0);
static_assert(offsetof(UVehicleAttachment, _damagePropagationVsArmorPiercing) == 0x02D0);
static_assert(offsetof(UVehicleAttachment, _damagePropagationVsCollisionDamage) == 0x0358);
static_assert(offsetof(UVehicleAttachment, _damageRatios) == 0x03E8);
static_assert(offsetof(UVehicleAttachment, _burnDamagePerSecondVsTemperature) == 0x0440);
static_assert(offsetof(UVehicleAttachment, _repairSkill) == 0x04D8);
static_assert(offsetof(UVehicleAttachment, _destructionEffect) == 0x0508);
static_assert(offsetof(UVehicleAttachment, _paintJobColors) == 0x0540);
static_assert(offsetof(UVehicleAttachment, _paintjobPatterns) == 0x0558);
static_assert(offsetof(UVehicleAttachment_Airfoil, AerodynamicSurfaces) == 0x0568);
static_assert(offsetof(FVehicleAttachmentAlternatorSetup, RpmChargeCurve) == 0x0000);
static_assert(offsetof(UVehicleAttachment_Alternator, AlternatorSetup) == 0x0570);
static_assert(offsetof(FVehicleAttachmentBatterySetup, BatteryResourceType) == 0x0000);
static_assert(offsetof(FVehicleAttachmentBatterySetup, PrisonerChargingMontage) == 0x0018);
static_assert(offsetof(FVehicleAttachmentBatterySetup, StartChargingAudioEvent) == 0x0020);
static_assert(offsetof(FVehicleAttachmentBatterySetup, StopChargingAudioEvent) == 0x0028);
static_assert(offsetof(UVehicleAttachment_Battery, BatterySetup) == 0x0568);
static_assert(offsetof(UVehicleAttachment_Battery, _simulationData) == 0x0598);
static_assert(offsetof(FVehicleServiceItemSlot, ItemLocationSocketName) == 0x0000);
static_assert(offsetof(FVehicleServiceItemSlot, AttachPointSocketName) == 0x0008);
static_assert(offsetof(FVehicleServiceItemSlot, ServiceTag) == 0x0010);
static_assert(offsetof(UVehicleAttachment_Chassis, _mountSlotClasses) == 0x0570);
static_assert(offsetof(UVehicleAttachment_Chassis, _serviceItemSlots) == 0x0580);
static_assert(offsetof(UVehicleAttachment_Chassis, _mountSlots) == 0x0590);
static_assert(offsetof(FDashboardMaterialParameter, MaterialSlotName) == 0x0000);
static_assert(offsetof(FDashboardMaterialParameter, MaterialParameterName) == 0x0008);
static_assert(offsetof(FDashboardMaterialParameter, DynamicMaterial) == 0x0018);
static_assert(offsetof(FDashboardMaterialParameterCache, _speedParam) == 0x0008);
static_assert(offsetof(FDashboardMaterialParameterCache, _rpmParam) == 0x0028);
static_assert(offsetof(FDashboardMaterialParameterCache, _fuelRatioParam) == 0x0048);
static_assert(offsetof(FDashboardMaterialParameterCache, _batteryRatioParam) == 0x0068);
static_assert(offsetof(FDashboardMaterialParameterCache, _handbrakeParam) == 0x0088);
static_assert(offsetof(FDashboardMaterialParameterCache, _lightsParam) == 0x00A8);
static_assert(offsetof(FDashboardMaterialParameterCache, _engineParam) == 0x00C8);
static_assert(offsetof(FDashboardMaterialParameterCache, _gearParam) == 0x00E8);
static_assert(offsetof(UVehicleAttachment_Dashboard, _materialParameterCache) == 0x0578);
static_assert(offsetof(UVehicleAttachment_Dashboard, _lightsToggleTags) == 0x0688);
static_assert(offsetof(FVehicleAttachmentDoorAnimationSet, PrisonerTransformToInteract) == 0x0000);
static_assert(offsetof(FVehicleAttachmentDoorAnimationSet, PrisonerUnmountedOpenMontage) == 0x0030);
static_assert(offsetof(FVehicleAttachmentDoorAnimationSet, PrisonerUnmountedCloseMontage) == 0x0038);
static_assert(offsetof(FVehicleAttachmentDoorAnimationSet, PrisonerMountedOpenMontage) == 0x0040);
static_assert(offsetof(FVehicleAttachmentDoorAnimationSet, PrisonerMountedCloseMontage) == 0x0048);
static_assert(offsetof(FVehicleAttachmentDoorSetup, OpenRotator) == 0x0000);
static_assert(offsetof(FVehicleAttachmentDoorSetup, DoorAnimationSets) == 0x0010);
static_assert(offsetof(UVehicleAttachment_Door, DoorSetup) == 0x0570);
static_assert(offsetof(UVehicleAttachment_Door, _flags) == 0x05A0);
static_assert(offsetof(UVehicleAttachment_Door, _reservee) == 0x05A8);
static_assert(offsetof(UVehicleAttachment_Door, _mountPathObstructionTags) == 0x05B0);
static_assert(offsetof(FVehicleAttachmentEngineBlockSetup, AccelerationCurve) == 0x0000);
static_assert(offsetof(FVehicleAttachmentEngineBlockSetup, TorqueCurve) == 0x0008);
static_assert(offsetof(FVehicleAttachmentEngineBlockSetup, FuelResourceType) == 0x0030);
static_assert(offsetof(FVehicleAttachmentEngineBlockSetup, FuelConsumptionVsEngineRpm) == 0x0038);
static_assert(offsetof(FVehicleAttachmentEngineBlockSetup, FuelConsumptionMultiplierVsEngineLoad) == 0x0040);
static_assert(offsetof(FVehicleAttachmentEngineBlockSetup, FuelConsumptionMultiplierVsAdditionalMass) == 0x0048);
static_assert(offsetof(FVehicleAttachmentEngineBlockSetup, PrisonerFillingFuelMontage) == 0x0068);
static_assert(offsetof(FVehicleAttachmentEngineBlockSetup, PrisonerDrainingFuelMontage) == 0x0070);
static_assert(offsetof(FVehicleAttachmentEngineBlockSetup, InSocketTypes) == 0x0078);
static_assert(offsetof(FVehicleAttachmentEngineBlockSetup, OutSocketTypes) == 0x0098);
static_assert(offsetof(FVehicleAttachmentEngineBlockSetup, StartFillingFuelAudioEvent) == 0x00B8);
static_assert(offsetof(FVehicleAttachmentEngineBlockSetup, StopFillingFuelAudioEvent) == 0x00C0);
static_assert(offsetof(FVehicleAttachmentEngineBlockSetup, StartFillingFuelWithReplenishableResourceAudioEvent) == 0x00C8);
static_assert(offsetof(FVehicleAttachmentEngineBlockSetup, StopFillingFuelWithReplenishableResourceAudioEvent) == 0x00D0);
static_assert(offsetof(FVehicleAttachmentEngineBlockSetup, StartDrainingFuelAudioEvent) == 0x00D8);
static_assert(offsetof(FVehicleAttachmentEngineBlockSetup, StopDrainingFuelAudioEvent) == 0x00E0);
static_assert(offsetof(FVehicleAttachmentEngineBlockSetup, ReplenishableFillSourceOverlapBoxExtent) == 0x00E8);
static_assert(offsetof(FVehicleAttachmentEngineBlockSetup, RunningAudioEventStart) == 0x00F8);
static_assert(offsetof(FVehicleAttachmentEngineBlockSetup, RunningAudioEventStop) == 0x0100);
static_assert(offsetof(FVehicleAttachmentEngineBlockSetup, CoolantRatioToTemperatureRiseCurve) == 0x0120);
static_assert(offsetof(FVehicleAttachmentEngineBlockSetup, IgnitionAudioEventStart) == 0x0130);
static_assert(offsetof(FVehicleAttachmentEngineBlockSetup, IgnitionAudioEventStop) == 0x0138);
static_assert(offsetof(FVehicleAttachmentEngineBlockSetup, IgnitionSuccessAudioEvent) == 0x0140);
static_assert(offsetof(FVehicleAttachmentEngineBlockSetup, StallingAudioEventStart) == 0x0150);
static_assert(offsetof(FVehicleAttachmentEngineBlockSetup, StallingAudioEventStop) == 0x0158);
static_assert(offsetof(FVehicleAttachmentEngineBlockSetup, RemovedAudioEventStart) == 0x0160);
static_assert(offsetof(FVehicleAttachmentEngineBlockSimulationData, State) == 0x0000);
static_assert(offsetof(UVehicleAttachment_EngineBlock, EngineSetup) == 0x0578);
static_assert(offsetof(UVehicleAttachment_EngineBlock, _simulationData) == 0x06E0);
static_assert(offsetof(UVehicleAttachment_EngineBlock, _tradeableClass) == 0x0710);
static_assert(offsetof(UVehicleAttachment_EngineBlock, _repEngineBlockState) == 0x0738);
static_assert(offsetof(UVehicleAttachment_EngineBlock, _toggleOnTag) == 0x0760);
static_assert(offsetof(UVehicleAttachment_EngineBlock, _toggleOffTag) == 0x0768);
static_assert(offsetof(FVehicleGearSetup, Name) == 0x0000);
static_assert(offsetof(FVehicleAttachmentGearboxSetup, Gears) == 0x0000);
static_assert(offsetof(FVehicleAttachmentGearboxSetup, GearsReduced) == 0x0010);
static_assert(offsetof(UVehicleAttachment_Gearbox, GearboxSetup) == 0x0568);
static_assert(offsetof(UVehicleAttachment_Gearbox, _simulationData) == 0x05A8);
static_assert(offsetof(UVehicleAttachment_InventoryExpansion, _itemContainerClass) == 0x0570);
static_assert(offsetof(UVehicleAttachment_InventoryExpansion, _itemContainerEntityId) == 0x0578);
static_assert(offsetof(UVehicleAttachment_InventoryExpansion, _itemContainer) == 0x0580);
static_assert(offsetof(FVehicleLightReference, Name) == 0x0000);
static_assert(offsetof(FVehicleLightReference, LightType) == 0x0008);
static_assert(offsetof(FVehicleLightReference, MaterialSlotName) == 0x000C);
static_assert(offsetof(FVATMaterialParam, DynamicMaterial) == 0x0010);
static_assert(offsetof(FVehicleLightsData, ToggleTags) == 0x0000);
static_assert(offsetof(FVehicleLightsData, EnableTags) == 0x0020);
static_assert(offsetof(FVehicleLightsData, DisableTags) == 0x0040);
static_assert(offsetof(FVehicleLightsData, LightReferences) == 0x0068);
static_assert(offsetof(FVehicleLightsData, MaterialParameters) == 0x0088);
static_assert(offsetof(UVehicleAttachment_Lights, _lightsData) == 0x0578);
static_assert(offsetof(UVehicleAttachment_Lights, _simulationData) == 0x05A8);
static_assert(offsetof(UVehicleAttachment_MountableInventoryExpansion, _mountSlotClasses) == 0x0590);
static_assert(offsetof(UVehicleAttachment_MountableInventoryExpansion, _inventoryVisualsMeshSetup) == 0x05A0);
static_assert(offsetof(UVehicleAttachment_MountableInventoryExpansion, _inventoryVisualsCollisionShapeName) == 0x0628);
static_assert(offsetof(UVehicleAttachment_MountableInventoryExpansion, _mountSlots) == 0x0630);
static_assert(offsetof(UVehicleAttachment_Radio, _radioComponent) == 0x0570);
static_assert(offsetof(UVehicleAttachment_Radio, _toggleTags) == 0x0578);
static_assert(offsetof(UVehicleAttachment_Radio, _changeStationTags) == 0x0598);
static_assert(offsetof(UVehicleAttachment_Radio, _increaseVolumeTags) == 0x05B8);
static_assert(offsetof(UVehicleAttachment_Radio, _decreaseVolumeTags) == 0x05D8);
static_assert(offsetof(UVehicleAttachment_Radio, _radioComponentOffset) == 0x0620);
static_assert(offsetof(UVehicleAttachment_Seat, _mountSlotClasses) == 0x0570);
static_assert(offsetof(UVehicleAttachment_Seat, _mountSlots) == 0x0580);
static_assert(offsetof(FWeaponMountSetup, WeaponClass) == 0x0000);
static_assert(offsetof(FWeaponMountSetup, MountingWeaponSocket) == 0x0018);
static_assert(offsetof(UVehicleAttachment_WeaponMount, WeaponId) == 0x0568);
static_assert(offsetof(UVehicleAttachment_WeaponMount, _supportedWeapons) == 0x0570);
static_assert(offsetof(UVehicleAttachment_DcxWheel, WheelIndices) == 0x05C0);
static_assert(offsetof(FVehicleAttachmentWheelSetup, SteeringBoneName) == 0x0028);
static_assert(offsetof(FVehicleAttachmentWheelSetup, SuspensionBoneName) == 0x0030);
static_assert(offsetof(UVehicleAttachment_ConstrainedWheel, WheelSetup) == 0x05C0);
static_assert(offsetof(UVehicleAttachment_ConstrainedWheel, VisualMeshSetup) == 0x0610);
static_assert(offsetof(UVehicleAttachment_ConstrainedWheel, SteeringMeshSetup) == 0x06A0);
static_assert(offsetof(UVehicleAttachmentDashboardAnimInstance, _steerRotator) == 0x02BC);
static_assert(offsetof(UVehicleAttachmentDashboardAnimInstance, _velocity) == 0x02C8);
static_assert(offsetof(UVehicleAttachmentHealthWidget, _text) == 0x0268);
static_assert(offsetof(UVehicleAttachmentHealthWidget, _progressBar) == 0x0270);
static_assert(offsetof(AVehicleAttachmentItem, _paintjobComponent) == 0x09A0);
static_assert(offsetof(UVehicleAttachmentTag, AttachmentClass) == 0x0030);
static_assert(offsetof(UVehicleBasePushMountSlot, PushStartMountInteractionCaption) == 0x0188);
static_assert(offsetof(UVehicleBasePushMountSlot, LeftHandIKSocketName) == 0x01A0);
static_assert(offsetof(UVehicleBasePushMountSlot, RightHandIKSocketName) == 0x01A8);
static_assert(offsetof(FWaterParticleTransform, ParticleSystem) == 0x0000);
static_assert(offsetof(FWaterParticleTransform, Transform) == 0x0010);
static_assert(offsetof(FWaterParticleTransform, Direction) == 0x0040);
static_assert(offsetof(UVehicleBuoyancySystem, _buoyancy) == 0x0030);
static_assert(offsetof(UVehicleBuoyancySystem, _rudderInputName) == 0x00A4);
static_assert(offsetof(UVehicleBuoyancySystem, _rudderEfficiencyBySpeedKmH) == 0x00B0);
static_assert(offsetof(UVehicleBuoyancySystem, _waterParticleTransforms) == 0x0138);
static_assert(offsetof(UVehicleCameraStabilizerComponent, _componentWorldOffset) == 0x01FC);
static_assert(offsetof(FVehicleCorpseBurningParticles, Particles) == 0x0000);
static_assert(offsetof(FVehicleCorpseBurningParticles, ParticlesTransform) == 0x0010);
static_assert(offsetof(FVehicleCorpseBurningParticles, DEPRECATED_HeatSourceParameters) == 0x0040);
static_assert(offsetof(FVehicleCorpseBurningParticles, DEPRECATED_HeatSourceId) == 0x0068);
static_assert(offsetof(AVehicleCorpse, _mesh) == 0x0228);
static_assert(offsetof(AVehicleCorpse, _explosionParticles) == 0x0230);
static_assert(offsetof(AVehicleCorpse, _explosionParticlesTransform) == 0x0240);
static_assert(offsetof(AVehicleCorpse, _explosionAudioEvent) == 0x0270);
static_assert(offsetof(AVehicleCorpse, _burningParticles) == 0x0280);
static_assert(offsetof(AVehicleCorpse, _burningAudioEvent) == 0x0290);
static_assert(offsetof(AVehicleCraftedItem, _vehiclePrimaryAssetId) == 0x09A0);
static_assert(offsetof(FVehicleForcePushParams, InteractionName) == 0x0000);
static_assert(offsetof(FVehicleForcePushParams, Impulse) == 0x0020);
static_assert(offsetof(FVehicleForcePushParams, Location) == 0x002C);
static_assert(offsetof(UVehicleForcePushComponent, _forcePushParams) == 0x00B0);
static_assert(offsetof(UVehicleGroupSpawningPreset, VehiclePresets) == 0x0030);
static_assert(offsetof(UVehicleHudWidget, _mountSlotIndicators) == 0x0268);
static_assert(offsetof(UVehicleHudWidget, Speed1s) == 0x0278);
static_assert(offsetof(UVehicleHudWidget, Speed10s) == 0x0280);
static_assert(offsetof(UVehicleHudWidget, Speed100s) == 0x0288);
static_assert(offsetof(UVehicleHudWidget, Gear) == 0x0290);
static_assert(offsetof(UVehicleHudWidget, HealthBar) == 0x0298);
static_assert(offsetof(UVehicleHudWidget, FuelBar) == 0x02A0);
static_assert(offsetof(UVehicleHudWidget, BatteryBar) == 0x02A8);
static_assert(offsetof(UVehicleHudWidget, EngineBrokenIndicator) == 0x02B0);
static_assert(offsetof(UVehicleHudWidget, Blink) == 0x02B8);
static_assert(offsetof(UVehicleHudWidget, Overlay) == 0x02C0);
static_assert(offsetof(UVehicleHudWidget, TextBlock) == 0x02C8);
static_assert(offsetof(UVehicleHudWidget, TextBlock0) == 0x02D0);
static_assert(offsetof(UVehicleHudWidget, SizeBox) == 0x02D8);
static_assert(offsetof(UVehicleHudWidget, SizeBox1) == 0x02E0);
static_assert(offsetof(UVehicleHudWidget, Image) == 0x02E8);
static_assert(offsetof(UVehicleHudWidget, Image2) == 0x02F0);
static_assert(offsetof(UVehicleHudWidget, Image3) == 0x02F8);
static_assert(offsetof(UVehicleHudWidget, Image4) == 0x0300);
static_assert(offsetof(UVehicleHudWidget, Image5) == 0x0308);
static_assert(offsetof(UVehicleHudWidget, kmh) == 0x0310);
static_assert(offsetof(AVehicleItemContainer, _owningVehicleAttachment) == 0x0BC4);
static_assert(offsetof(FVehicleManualSpawnPresetArray, PresetPerSpawnType) == 0x0000);
static_assert(offsetof(AVehicleManager, _manualSpawnPresetsMap) == 0x0280);
static_assert(offsetof(AVehicleManager, _purchaseSpawnPresetsMap) == 0x02D0);
static_assert(offsetof(AVehicleManager, _spawnGroupParentTag) == 0x0370);
static_assert(offsetof(AVehicleManager, _spawnGroupsIgnoringPreferredDistanceBetweenSpawners) == 0x0378);
static_assert(offsetof(AVehicleManager, _vehicleSpawnPoints) == 0x04D0);
static_assert(offsetof(UVehicleMeshComponent, _navBoundingBox) == 0x0EE0);
static_assert(offsetof(UVehicleMountSlotIndicators, _backgroundGradient) == 0x0268);
static_assert(offsetof(UVehicleMountSlotIndicators, _vehicleMountSlotsContainer) == 0x0270);
static_assert(offsetof(UVehicleMountSlotsWidget, _mountSlotsCanvas) == 0x0268);
static_assert(offsetof(UVehicleMountSlotWidget, _slotStateSwitcher) == 0x0268);
static_assert(offsetof(UVehicleMountSlotWidget, _keybindLabel) == 0x0270);
static_assert(offsetof(UVehiclePaintjobItemComponent, _patterns) == 0x00C8);
static_assert(offsetof(UVehiclePaintjobCommonData, Patterns) == 0x0030);
static_assert(offsetof(UVehiclePresetNode, PossibleAttachmentAssetIds) == 0x0028);
static_assert(offsetof(UVehiclePresetNode, AttachmentAssetId) == 0x0038);
static_assert(offsetof(UVehiclePresetNode, SpawnHealthPercentageRange) == 0x0050);
static_assert(offsetof(UVehiclePresetNode, Children) == 0x0060);
static_assert(offsetof(UVehiclePreset, VehicleAssetId) == 0x0034);
static_assert(offsetof(UVehiclePreset, RootNode) == 0x0048);
static_assert(offsetof(UVehiclePreset, FuelAmountSpawnPercentageRange) == 0x0050);
static_assert(offsetof(UVehiclePreset, BatteryChargeSpawnPercentageRange) == 0x0060);
static_assert(offsetof(UVehiclePreset, LockClass) == 0x0070);
static_assert(offsetof(UVehicleServiceComponent, _serviceStation) == 0x00B0);
static_assert(offsetof(UVehicleServiceComponent, _serviceInitiatorId) == 0x00B8);
static_assert(offsetof(UVehicleServiceComponent, _currentAction) == 0x00C0);
static_assert(offsetof(UVehicleServiceItemComponent, _serviceStationClass) == 0x00B0);
static_assert(offsetof(UVehicleServiceItemComponent, _supportedServiceTags) == 0x00B8);
static_assert(offsetof(FVehicleServiceData, ServiceStationSaveObject) == 0x0010);
static_assert(offsetof(UVehicleServiceRegistry, _serviceData) == 0x00B0);
static_assert(offsetof(AVehicleServiceStation, _serviceMode) == 0x0220);
static_assert(offsetof(AVehicleServiceStation, _mesh) == 0x0228);
static_assert(offsetof(AVehicleServiceStation, _displayName) == 0x0230);
static_assert(offsetof(AVehicleServiceStation, _vehicleAttachSocketName) == 0x0248);
static_assert(offsetof(AVehicleServiceStation, _vehicleAttachTransformServerOnly) == 0x0250);
static_assert(offsetof(AVehicleServiceStation, _blockCheckBoxExtent) == 0x028C);
static_assert(offsetof(AVehicleServiceStation, _movingStartAudioEvent) == 0x0298);
static_assert(offsetof(AVehicleServiceStation, _movingStopAudioEvent) == 0x02A0);
static_assert(offsetof(AVehicleServiceStation, _assignedTradePost) == 0x02A8);
static_assert(offsetof(AVehicleServiceStation, _servicedVehicle) == 0x02B8);
static_assert(offsetof(UPortableVehicleServiceStationSaveObject, AssetId) == 0x0028);
static_assert(offsetof(UPortableVehicleServiceStationSaveObject, ServiceMode) == 0x0038);
static_assert(offsetof(UPortableVehicleServiceStationSaveObject, Location) == 0x0040);
static_assert(offsetof(UPortableVehicleServiceStationSaveObject, Rotation) == 0x004C);
static_assert(offsetof(UPortableVehicleServiceStationSaveObject, OriginalItemClass) == 0x0058);
static_assert(offsetof(APortableVehicleServiceStation, _serviceModeRep) == 0x02D8);
static_assert(offsetof(APortableVehicleServiceStation, _poseVsSericeModeMap) == 0x02E0);
static_assert(offsetof(APortableVehicleServiceStation, _originalItemClass) == 0x0330);
static_assert(offsetof(UVehicleServiceToolTag, GameplayTag) == 0x0030);
static_assert(offsetof(FWeaponTypeMontage, WeaponType) == 0x0000);
static_assert(offsetof(FWeaponTypeMontage, Montage) == 0x0008);
static_assert(offsetof(FWeaponTypeMontage, SupportedYawAngles) == 0x0010);
static_assert(offsetof(FVehicleWeaponAimingStanceTransitionMontages, stance) == 0x0000);
static_assert(offsetof(FVehicleWeaponAimingStanceTransitionMontages, WeaponTypeMontages) == 0x0008);
static_assert(offsetof(FVehicleWeaponAimingStanceTransitionCurves, stance) == 0x0000);
static_assert(offsetof(FVehicleWeaponAimingStanceTransitionCurves, SupportedYawAngles) == 0x0008);
static_assert(offsetof(FFirstPersonViewParameters, MinMaxViewPitch) == 0x0000);
static_assert(offsetof(FFirstPersonViewParameters, MinMaxViewYaw) == 0x0008);
static_assert(offsetof(FFirstPersonViewParameters, MinMaxViewYawInCombatMode) == 0x0010);
static_assert(offsetof(FFirstPersonViewParameters, MinMaxViewYawIfBlocked) == 0x0018);
static_assert(offsetof(FFirstPersonViewParameters, MinMaxViewPitchByYaw) == 0x0020);
static_assert(offsetof(FVehicleWeaponAimingFirstPersonData, ViewParameters) == 0x0000);
static_assert(offsetof(FVehicleWeaponAimingFirstPersonData, LocationOffset) == 0x0028);
static_assert(offsetof(FVehicleWeaponAimingFirstPersonData, LocationOffsetByYaw) == 0x0038);
static_assert(offsetof(FVehicleWeaponAimingFirstPersonData, LocationOffsetByPitch) == 0x0040);
static_assert(offsetof(FBasePoseAimOffsetPair, UpperBodyPose) == 0x0000);
static_assert(offsetof(FBasePoseAimOffsetPair, LowerBodyPose) == 0x0008);
static_assert(offsetof(FBasePoseAimOffsetPair, AimOffset) == 0x0010);
static_assert(offsetof(FVehicleThirdPersonWeaponTypeData, WeaponType) == 0x0000);
static_assert(offsetof(FVehicleThirdPersonWeaponTypeData, IdlePoseAndAimOffset) == 0x0008);
static_assert(offsetof(FVehicleWeaponAimingThirdPersonData, WeaponTypeData) == 0x0000);
static_assert(offsetof(FVehicleWeaponAimingStanceData, StanceTransitionMontages) == 0x0000);
static_assert(offsetof(FVehicleWeaponAimingStanceData, SupportedAnglesForTransition) == 0x0010);
static_assert(offsetof(FVehicleWeaponAimingStanceData, FirstPerson) == 0x0020);
static_assert(offsetof(FVehicleWeaponAimingStanceData, ThirdPerson) == 0x0068);
static_assert(offsetof(UVehicleWeaponAimingParameters, SupportedStance) == 0x0028);
static_assert(offsetof(UVehicleWeaponAimingParameters, StanceData) == 0x0038);
static_assert(offsetof(AVehicleSpawner, SpawnerComponent) == 0x0220);
static_assert(offsetof(FVehicleSpawnerMarker, Transform) == 0x0000);
static_assert(offsetof(FVehicleSpawnerMarker, VehicleGroupSpawningPreset) == 0x0030);
static_assert(offsetof(UVehicleSpawnerComponent, SpawnerMarkers) == 0x01F8);
static_assert(offsetof(AVehicleTrajectoryVisualizer, _splineComponent) == 0x0220);
static_assert(offsetof(AVehicleTrajectoryVisualizer, _meshComponent) == 0x0228);
static_assert(offsetof(FWeaponMountData, MountedSocket) == 0x0000);
static_assert(offsetof(FWeaponMountData, Weapon) == 0x0008);
static_assert(offsetof(UVehicleWeaponsSystem, _weaponMountDataArray) == 0x0040);
static_assert(offsetof(UVerticalScrollBoxDropdownContent, _entriesScrollBox) == 0x0268);
static_assert(offsetof(UVerticalScrollBoxDropdownContent, _simpleDropdownEntryCategoryTitle) == 0x0270);
static_assert(offsetof(UVicinityContainer3, _container) == 0x0280);
static_assert(offsetof(UVicinityContainer3, _containerScrollBox) == 0x0288);
static_assert(offsetof(UVicinityContainerRowItemWidget, _caption) == 0x0520);
static_assert(offsetof(UVicinityContainerRowItemWidget, PlayerGivenName) == 0x0528);
static_assert(offsetof(UVicinityContainerRowItemWidget, _titleSwitcher) == 0x0530);
static_assert(offsetof(UVicinityContainerRowItemWidget, Image) == 0x0538);
static_assert(offsetof(UVicinityContainerRowItemWidget, Image0) == 0x0540);
static_assert(offsetof(UVicinityContainerRowItemWidget, Image1) == 0x0548);
static_assert(offsetof(UVicinityContainerRowItemWidget, TextBlock) == 0x0550);
static_assert(offsetof(UVicinityContainerRowItemWidget, UpperLeftIcon) == 0x0558);
static_assert(offsetof(UVicinityContainerRowItemWidget, ProgressBarLeftFirst) == 0x0560);
static_assert(offsetof(UVicinityContainerRowItemWidget, ProgressBarLeftSecond) == 0x0568);
static_assert(offsetof(UVicinityContainerRowItemWidget, SizeBox) == 0x0570);
static_assert(offsetof(UVicinityContainerRowItemWidget, _openedBackgroundColor) == 0x0578);
static_assert(offsetof(UVicinityContainerRowItemWidget, _closedBackgroundColor) == 0x0588);
static_assert(offsetof(UVicinityContainerRowItemWidget, _selectedBackgroundColor) == 0x0598);
static_assert(offsetof(UVicinityContainerRowItemWidget, _openedFontColor) == 0x05A8);
static_assert(offsetof(UVicinityContainerRowItemWidget, _closedFontColor) == 0x05B8);
static_assert(offsetof(UVicinityPanel3, _searchedItemsBox) == 0x0280);
static_assert(offsetof(UVicinityPanel3, _vicinityBox) == 0x0288);
static_assert(offsetof(UVicinityPanel3, _vicinityContainersBox) == 0x0290);
static_assert(offsetof(UVicinityPanel3, _tradingBox) == 0x0298);
static_assert(offsetof(UVicinityPanel3, _tradingBoxOverlay) == 0x02A0);
static_assert(offsetof(UVicinityPanel3, _adjustableSeparator) == 0x02A8);
static_assert(offsetof(UVicinityPanel3, _searchedItems) == 0x02B0);
static_assert(offsetof(UVicinityPanel3, _vicinityItems) == 0x0300);
static_assert(offsetof(UVicinityPanel3, _vicinityContainers) == 0x0350);
static_assert(offsetof(UVicinityPanel3, _tradingItems) == 0x03A0);
static_assert(offsetof(UVicinityPanel3, _filterCheckboxesNames) == 0x0490);
static_assert(offsetof(UVicinityPanel3, _vicinityContainersPadding) == 0x04E0);
static_assert(offsetof(UVicinityPanel3, _medicalFilterClasses) == 0x0500);
static_assert(offsetof(UVicinityPanel3, _toolFilterItemTags) == 0x0510);
static_assert(offsetof(UVisionEffectsComponent, FadeOutMaterial) == 0x00F0);
static_assert(offsetof(UVisionEffectsComponent, LowLightVisionMaterial) == 0x00F8);
static_assert(offsetof(UVisionEffectsComponent, NightVisionMaterial) == 0x0100);
static_assert(offsetof(UVisionEffectsComponent, AnimalEyesMaterialParameterCollection) == 0x0110);
static_assert(offsetof(UVisionEffectsComponent, AnimalEyesEmissiveMaterialName) == 0x0118);
static_assert(offsetof(UVisionEffectsComponent, NightVisionGlitchStrengthParameterName) == 0x0124);
static_assert(offsetof(UVisionEffectsComponent, FlashbangEffectMaterial) == 0x0130);
static_assert(offsetof(UVisionEffectsComponent, FallingBlurMaterial) == 0x0138);
static_assert(offsetof(UVisionEffectsComponent, TakenDamageMaterial) == 0x0140);
static_assert(offsetof(UVisionEffectsComponent, TakenDamageMaterialParameterCollection) == 0x0148);
static_assert(offsetof(UVisionEffectsComponent, TakenDamageBlurIntensityParameterName) == 0x0150);
static_assert(offsetof(UVisionEffectsComponent, TakenDamageStainsIntensityParameterName) == 0x0158);
static_assert(offsetof(UVisionEffectsComponent, TakenDamageVignetteIntensityParameterName) == 0x0160);
static_assert(offsetof(UVisionEffectsComponent, TakenDamageBlurShapeCurve) == 0x0168);
static_assert(offsetof(UVisionEffectsComponent, TakenDamageBlurIntensityCurve) == 0x0170);
static_assert(offsetof(UVisionEffectsComponent, TakenDamageBlurDurationCurve) == 0x0178);
static_assert(offsetof(UVisionEffectsComponent, TakenDamageStainsShapeCurve) == 0x0180);
static_assert(offsetof(UVisionEffectsComponent, TakenDamageStainsIntensityCurve) == 0x0188);
static_assert(offsetof(UVisionEffectsComponent, TakenDamageStainsDurationCurve) == 0x0190);
static_assert(offsetof(UVisionEffectsComponent, TakenDamageVignetteShapeCurve) == 0x0198);
static_assert(offsetof(UVisionEffectsComponent, TakenDamageVignetteIntensityCurve) == 0x01A0);
static_assert(offsetof(UVisionEffectsComponent, TakenDamageVignetteDurationCurve) == 0x01A8);
static_assert(offsetof(UVisionEffectsComponent, TakenDamageCameraShakeClass) == 0x01B8);
static_assert(offsetof(UVisionEffectsComponent, TakenDamageCameraShakeScaleCurve) == 0x01C0);
static_assert(offsetof(UVisionEffectsComponent, TacticsEffectMaterial) == 0x01C8);
static_assert(offsetof(UVisionEffectsComponent, FocusModeMaterial) == 0x01D0);
static_assert(offsetof(UVisionEffectsComponent, DoubleVisionMaterial) == 0x01D8);
static_assert(offsetof(UVisionEffectsComponent, DoubleVisionIntensityParameterName) == 0x01E0);
static_assert(offsetof(UVisionEffectsComponent, BlurredVisionMaterial) == 0x01E8);
static_assert(offsetof(UVisionEffectsComponent, BlurredVisionIntensityParameterName) == 0x01F0);
static_assert(offsetof(UVisionEffectsComponent, UnderwaterBlurMaterial) == 0x01F8);
static_assert(offsetof(UVisionEffectsComponent, PhotoModeTransitionMaterial) == 0x0200);
static_assert(offsetof(UVisionEffectsComponent, ScopeZoomMaterial) == 0x0208);
static_assert(offsetof(UVisionEffectsComponent, ScopeZoomBlendPPParameterName) == 0x0210);
static_assert(offsetof(UVisionEffectsComponent, ScopeZoomBlackoutDensityParameterName) == 0x0218);
static_assert(offsetof(UVisionEffectsComponent, ScopeZoomChromaticAberrationDampeningParameterName) == 0x0220);
static_assert(offsetof(UVisionEffectsComponent, ScopeZoomCrosshairBaseScaleParameterName) == 0x0228);
static_assert(offsetof(UVisionEffectsComponent, ScopeZoomCrosshairDepthOffsetMultiplierParameterName) == 0x0230);
static_assert(offsetof(UVisionEffectsComponent, ScopeZoomCrosshairScaleMultiplierParameterName) == 0x0238);
static_assert(offsetof(UVisionEffectsComponent, ScopeZoomDistortionPowerParameterName) == 0x0240);
static_assert(offsetof(UVisionEffectsComponent, ScopeZoomDistortionScaleParameterName) == 0x0248);
static_assert(offsetof(UVisionEffectsComponent, ScopeZoomEyeDistanceBlackoutMultiplierParameterName) == 0x0250);
static_assert(offsetof(UVisionEffectsComponent, ScopeZoomGlowIntensityAtNightParameterName) == 0x0258);
static_assert(offsetof(UVisionEffectsComponent, ScopeZoomLensDepthOffsetMultiplierParameterName) == 0x0260);
static_assert(offsetof(UVisionEffectsComponent, ScopeZoomLensScaleParameterName) == 0x0268);
static_assert(offsetof(UVisionEffectsComponent, ScopeZoomLensUIScaleParameterName) == 0x0270);
static_assert(offsetof(UVisionEffectsComponent, ScopeZoomLensZoomParameterName) == 0x0278);
static_assert(offsetof(UVisionEffectsComponent, ScopeZoomOptimalEyeDistanceParameterName) == 0x0280);
static_assert(offsetof(UVisionEffectsComponent, ScopeZoomCrosshairCenterScreenOffsetParameterName) == 0x0288);
static_assert(offsetof(UVisionEffectsComponent, ScopeZoomLensCenterScreenOffsetParameterName) == 0x0290);
static_assert(offsetof(UVisionEffectsComponent, ScopeZoomCrosshairParameterName) == 0x0298);
static_assert(offsetof(UVisionEffectsComponent, ScopeZoomCrosshairColorParameterName) == 0x02A0);
static_assert(offsetof(UVisionEffectsComponent, ScopeZoomCrosshairColorAtNightParameterName) == 0x02A8);
static_assert(offsetof(UVisionEffectsComponent, ScopeZoomCrosshairGlowColorParameterName) == 0x02B0);
static_assert(offsetof(UVisionEffectsComponent, ScopeZoomDirtMaskParameterName) == 0x02B8);
static_assert(offsetof(UVisionEffectsComponent, ScopeZoomDirtinessParameterName) == 0x02C0);
static_assert(offsetof(UVisionEffectsComponent, ScopeZoomDarkeningParameterName) == 0x02C8);
static_assert(offsetof(UVisionEffectsComponent, ScopeZoomLensNormalMapParameterName) == 0x02D0);
static_assert(offsetof(UVisionEffectsComponent, ScopeZoomLensUIParameterName) == 0x02D8);
static_assert(offsetof(UVisionEffectsComponent, IsNightVisionActiveOnScopeParameterName) == 0x02E0);
static_assert(offsetof(UVisionEffectsComponent, ScopeInHandsNightVisionMaterial) == 0x02E8);
static_assert(offsetof(UVisionEffectsComponent, InjuryMaterial) == 0x02F0);
static_assert(offsetof(UVisionEffectsComponent, TraumaMaterial) == 0x02F8);
static_assert(offsetof(UVisionEffectsComponent, BulletHitMaterial) == 0x0300);
static_assert(offsetof(UVisionEffectsComponent, SickMaterial) == 0x0308);
static_assert(offsetof(UVisionEffectsComponent, ColdMaterial) == 0x0310);
static_assert(offsetof(UVisionEffectsComponent, HotMaterial) == 0x0318);
static_assert(offsetof(UVisionEffectsComponent, FatigueMaterial) == 0x0320);
static_assert(offsetof(UVisionEffectsComponent, HallucinationMaterial) == 0x0328);
static_assert(offsetof(UVisionEffectsComponent, EyePressureMaterial) == 0x0330);
static_assert(offsetof(UVisionEffectsComponent, BloodyEyesMaterial) == 0x0338);
static_assert(offsetof(UVisionEffectsComponent, RadiationMaterial) == 0x0340);
static_assert(offsetof(UVisionEffectsComponent, DepthOfFieldMaterial) == 0x0348);
static_assert(offsetof(UVisionEffectsComponent, PhoenixTearsMaterial) == 0x0350);
static_assert(offsetof(UVisionEffectsComponent, HeightenedSensesSaturationColor) == 0x0360);
static_assert(offsetof(UVisionEffectsComponent, _postProcessSettings) == 0x0370);
static_assert(offsetof(UVisionEffectsComponent, _blurredVisionMaterialInstance) == 0x0F60);
static_assert(offsetof(UVisionEffectsComponent, _doubleVisionIntensityMaterialInstance) == 0x0FB8);
static_assert(offsetof(UVisionEffectsComponent, _headgearOverlayMaterialInstance) == 0x0FC0);
static_assert(offsetof(UVisionEffectsComponent, _scopeZoomMaterialInstance) == 0x0FC8);
static_assert(offsetof(UVisionEffectsComponent, _nightVisionMaterialInstance) == 0x0FD0);
static_assert(offsetof(UVisionEffectsComponent, _scopeInHandsNightVisionMaterialInstance) == 0x0FD8);
static_assert(offsetof(UVisionEffectsComponent, _fallingBlurMaterialInstance) == 0x0FE0);
static_assert(offsetof(UVisionEffectsComponent, _underwaterPostProcessingCurrent) == 0x0FE8);
static_assert(offsetof(UVisionEffectsComponent, _underwaterPostProcessingLast) == 0x0FF0);
static_assert(offsetof(UVisionEffectsComponent, _injuryMaterial) == 0x1018);
static_assert(offsetof(UVisionEffectsComponent, _traumaMaterial) == 0x1028);
static_assert(offsetof(UVisionEffectsComponent, _hallucinationMaterial) == 0x1038);
static_assert(offsetof(UVisionEffectsComponent, _eyePressureMaterial) == 0x1048);
static_assert(offsetof(UVisionEffectsComponent, _bloodyEyesMaterial) == 0x1058);
static_assert(offsetof(UVisionEffectsComponent, _bulletHitMaterial) == 0x1068);
static_assert(offsetof(UVisionEffectsComponent, _sickMaterial) == 0x1078);
static_assert(offsetof(UVisionEffectsComponent, _coldMaterial) == 0x1088);
static_assert(offsetof(UVisionEffectsComponent, _hotMaterial) == 0x1098);
static_assert(offsetof(UVisionEffectsComponent, _fatigueMaterial) == 0x10A8);
static_assert(offsetof(UVisionEffectsComponent, _radiationMaterial) == 0x10B8);
static_assert(offsetof(UVisionEffectsComponent, _depthOfFieldMaterial) == 0x10C8);
static_assert(offsetof(UVisionEffectsComponent, _phoenixTearsMaterial) == 0x10D8);
static_assert(offsetof(UVisualOverlayItemTag, OverlayMaterial) == 0x0030);
static_assert(offsetof(UVoiceAudioComponent, VoiceDecoder) == 0x0868);
static_assert(offsetof(FVoltageMatchingSwitchElementsPairing, SwitchTag) == 0x0000);
static_assert(offsetof(FVoltageMatchingSwitchElementsPairing, ElementSockets) == 0x0008);
static_assert(offsetof(FVoltageMatchingElementRow, ElementSockets) == 0x0000);
static_assert(offsetof(AVoltageMatchingMinigame, _switchboardComponent) == 0x0360);
static_assert(offsetof(AVoltageMatchingMinigame, _bodyMesh) == 0x0368);
static_assert(offsetof(AVoltageMatchingMinigame, _leftDoor) == 0x0370);
static_assert(offsetof(AVoltageMatchingMinigame, _rightDoor) == 0x0378);
static_assert(offsetof(AVoltageMatchingMinigame, _screens) == 0x0380);
static_assert(offsetof(AVoltageMatchingMinigame, _screenWidget) == 0x0388);
static_assert(offsetof(AVoltageMatchingMinigame, _screenMaterialInstance) == 0x0390);
static_assert(offsetof(AVoltageMatchingMinigame, _baseColorMaterialParameterName) == 0x0398);
static_assert(offsetof(AVoltageMatchingMinigame, _masterSwitchTag) == 0x03A0);
static_assert(offsetof(AVoltageMatchingMinigame, _masterSwitchLightColorPropertyName) == 0x03AC);
static_assert(offsetof(AVoltageMatchingMinigame, _masterSwitchLightOffColor) == 0x03B4);
static_assert(offsetof(AVoltageMatchingMinigame, _masterSwitchLightOnColor) == 0x03C4);
static_assert(offsetof(AVoltageMatchingMinigame, _neutralMesh) == 0x03D8);
static_assert(offsetof(AVoltageMatchingMinigame, _plusMesh) == 0x03E0);
static_assert(offsetof(AVoltageMatchingMinigame, _minusMesh) == 0x03E8);
static_assert(offsetof(AVoltageMatchingMinigame, _multiplicationMesh) == 0x03F0);
static_assert(offsetof(AVoltageMatchingMinigame, _divisionMesh) == 0x03F8);
static_assert(offsetof(AVoltageMatchingMinigame, _switchPairings) == 0x0400);
static_assert(offsetof(AVoltageMatchingMinigame, _electricalElementsMeshComponents) == 0x0410);
static_assert(offsetof(AVoltageMatchingMinigame, _elementRows) == 0x0420);
static_assert(offsetof(AVoltageMatchingMinigame, _switchFlipAudioEvent) == 0x0438);
static_assert(offsetof(AVoltageMatchingMinigame, _failAudioEvent) == 0x0440);
static_assert(offsetof(AVoltageMatchingMinigame, _successAudioEvent) == 0x0448);
static_assert(offsetof(AVoltageMatchingMinigame, _additionValues) == 0x0450);
static_assert(offsetof(AVoltageMatchingMinigame, _subtractionValues) == 0x0460);
static_assert(offsetof(AVoltageMatchingMinigame, _multiplicationValues) == 0x0470);
static_assert(offsetof(AVoltageMatchingMinigame, _divisionValues) == 0x0480);
static_assert(offsetof(AVoltageMatchingMinigame, _inputValues) == 0x0490);
static_assert(offsetof(FVoltageMatchingElementIndicator, SocketId) == 0x0000);
static_assert(offsetof(FVoltageMatchingElementIndicator, IndicatorWidgetName) == 0x0008);
static_assert(offsetof(UVoltageMatchingScreensWidget, _input) == 0x0268);
static_assert(offsetof(UVoltageMatchingScreensWidget, _timer) == 0x0270);
static_assert(offsetof(UVoltageMatchingScreensWidget, _correctOutputsWidgetNames) == 0x0278);
static_assert(offsetof(UVoltageMatchingScreensWidget, _currentOutputWidgetNames) == 0x0288);
static_assert(offsetof(UVoltageMatchingScreensWidget, _elementIndicators) == 0x0298);
static_assert(offsetof(UVoltageMatchingWidget, _instructionsOverlay) == 0x0280);
static_assert(offsetof(AVolumeZone, configuration) == 0x0258);
static_assert(offsetof(AVoteSystemManager, VoteTopics) == 0x0220);
static_assert(offsetof(AVoteSystemManager, _activeTopicDesc) == 0x0230);
static_assert(offsetof(AVoteSystemManager, _activeTopic) == 0x0238);
static_assert(offsetof(FMessageStruct, Text) == 0x0000);
static_assert(offsetof(FMessageStruct, Color) == 0x001C);
static_assert(offsetof(UWarning, MessageQueue) == 0x0268);
static_assert(offsetof(UWarningNotificationDescription, Message) == 0x0040);
static_assert(offsetof(UWarningNotificationDescription, Color) == 0x0054);
static_assert(offsetof(UWarningSignWidget, _type) == 0x0268);
static_assert(offsetof(UWaypointScreenWidget, WaypointClass) == 0x0268);
static_assert(offsetof(UWaypointScreenWidget, _waypoints) == 0x0270);
static_assert(offsetof(UWaypointScreenWidget, WaypointPanel) == 0x0280);
static_assert(offsetof(UWaypointWidget, Emphasis) == 0x0340);
static_assert(offsetof(UWaypointWidget, BarBG) == 0x0348);
static_assert(offsetof(UWaypointWidget, Bar) == 0x0350);
static_assert(offsetof(UWaypointWidget, Background) == 0x0358);
static_assert(offsetof(UWaypointWidget, BigPointer) == 0x0360);
static_assert(offsetof(UWaypointWidget, SmallPointer) == 0x0368);
static_assert(offsetof(UWaypointWidget, Icon) == 0x0370);
static_assert(offsetof(UWaypointWidget, Accent) == 0x0378);
static_assert(offsetof(UWaypointWidget, Label) == 0x0380);
static_assert(offsetof(UWaypointWidget, Distance) == 0x0388);
static_assert(offsetof(UWaypointWidget, _barBrushMaterial) == 0x0390);
static_assert(offsetof(UWeaponActionSequence, Animations) == 0x0040);
static_assert(offsetof(UWeaponAmmoDisplayContainerWidget, _ammoDisplayWidgetClass) == 0x0268);
static_assert(offsetof(UWeaponAmmoDisplayContainerWidget, _displayList) == 0x0270);
static_assert(offsetof(UWeaponAmmoDisplayContainerWidget, _displayListCentered) == 0x0278);
static_assert(offsetof(UWeaponAmmoDisplayWidget, _ammoCountText) == 0x0268);
static_assert(offsetof(UWeaponAmmoDisplayWidget, _ammoIcon) == 0x0270);
static_assert(offsetof(UWeaponAnimInstance, _malfunction) == 0x02EE);
static_assert(offsetof(UWeaponAnimInstance, _firingModeBoneRotation) == 0x02F0);
static_assert(offsetof(UWeaponAnimInstance, _aiminDownTheSightsMode) == 0x0304);
static_assert(offsetof(AWeaponAttachmentMagazine, AmmunitionTags) == 0x09D8);
static_assert(offsetof(AWeaponAttachmentMagazine, DefaultFillAmmo) == 0x0A00);
static_assert(offsetof(AWeaponAttachmentMagazine, _ammoData) == 0x0A10);
static_assert(offsetof(AWeaponAttachmentMagazine, _ammoOwnerHelper) == 0x0A20);
static_assert(offsetof(AWeaponAttachmentMagazine, _cartridgeMeshComponents) == 0x0A40);
static_assert(offsetof(AWeaponAttachmentMagazine, _loadAmmoSequences) == 0x0A50);
static_assert(offsetof(AWeaponAttachmentMagazine, _rangedWeaponsSkillClass) == 0x0A60);
static_assert(offsetof(AWeaponAttachmentMagazine, _inventoryIconFull) == 0x0A70);
static_assert(offsetof(AWeaponAttachmentFlashlight, _lightSocketName) == 0x09D8);
static_assert(offsetof(AWeaponAttachmentFlashlight, _batterySlot) == 0x09E0);
static_assert(offsetof(AWeaponAttachmentFlashlight, _batteryPoweredLightItemComponent) == 0x09E8);
static_assert(offsetof(FMeshMaterialPair, SkeletalMesh) == 0x0000);
static_assert(offsetof(FMeshMaterialPair, EquippedMaterialOverride) == 0x0008);
static_assert(offsetof(AWeaponAttachmentGhillie, EquippedSkeletalMeshComponent) == 0x09D0);
static_assert(offsetof(AWeaponAttachmentGhillie, WeaponToSkeletalMeshMapping) == 0x09D8);
static_assert(offsetof(AWeaponAttachmentSight, _weaponSightItemComponent) == 0x09D0);
static_assert(offsetof(AWeaponAttachmentScope, _weaponScopeItemComponent) == 0x09D8);
static_assert(offsetof(AWeaponAttachmentNightVisionScope, _batterySlot) == 0x09E8);
static_assert(offsetof(AWeaponAttachmentScopeRail, ScopeSocketName) == 0x09D0);
static_assert(offsetof(AWeaponAttachmentSuppressor, MuzzleSocketName) == 0x09D0);
static_assert(offsetof(AWeaponAutoCrossbow, FireState) == 0x3010);
static_assert(offsetof(AWeaponAutoCrossbow, _autoCrossbowFireAnimation) == 0x3020);
static_assert(offsetof(AWeaponAutoCrossbow, _autoCrossbowLaughingAudioEvent) == 0x3030);
static_assert(offsetof(AWeaponAutoCrossbow, _autoCrossbowActiveState) == 0x3038);
static_assert(offsetof(AWeaponAutoCrossbow, _fuelType) == 0x43E0);
static_assert(offsetof(AWeaponAutoCrossbow, _inFuelingSocketTypes) == 0x43E8);
static_assert(offsetof(FWeaponBowAimOffsets, DrawPercentage) == 0x0000);
static_assert(offsetof(FWeaponBowArmsShake, ThirdPerson) == 0x0000);
static_assert(offsetof(FWeaponBowArmsShake, FirstPerson) == 0x0018);
static_assert(offsetof(FWeaponBowStateDataReplicated, BowDrawPercentage) == 0x0000);
static_assert(offsetof(FWeaponBowStateDataReplicated, WeaponBowState) == 0x0008);
static_assert(offsetof(AWeaponBow, InsertArrowAnimations) == 0x3008);
static_assert(offsetof(AWeaponBow, RemoveArrowAnimations) == 0x3018);
static_assert(offsetof(AWeaponBow, UnableToDrawAnimations) == 0x3028);
static_assert(offsetof(AWeaponBow, DrawAnimations2) == 0x3038);
static_assert(offsetof(AWeaponBow, DrawWhileAnticipatingDrawAnimations2) == 0x3068);
static_assert(offsetof(AWeaponBow, CancelDrawAnimations2) == 0x3098);
static_assert(offsetof(AWeaponBow, LooseAnimations2) == 0x30C8);
static_assert(offsetof(AWeaponBow, LooseLastShotAnimations2) == 0x30F8);
static_assert(offsetof(AWeaponBow, AimOffsets) == 0x3128);
static_assert(offsetof(AWeaponBow, ArmsShakeAnimamtion) == 0x31D0);
static_assert(offsetof(AWeaponBow, DrawAnimations) == 0x3260);
static_assert(offsetof(AWeaponBow, DrawWhileAnticipatingDrawAnimations) == 0x3270);
static_assert(offsetof(AWeaponBow, CancelDrawAnimations) == 0x3280);
static_assert(offsetof(AWeaponBow, LooseAnimations) == 0x3290);
static_assert(offsetof(AWeaponBow, LooseLastShotAnimations) == 0x32A0);
static_assert(offsetof(AWeaponBow, WeaponAimingDownTheSightsAnimationPose) == 0x32B0);
static_assert(offsetof(AWeaponBow, WeaponAimingDownTheSightsStillAnimationPose) == 0x32B8);
static_assert(offsetof(AWeaponBow, AnticipateDrawState2) == 0x32C0);
static_assert(offsetof(AWeaponBow, DrawState3) == 0x32C8);
static_assert(offsetof(AWeaponBow, CancelFiringState) == 0x32D0);
static_assert(offsetof(AWeaponBow, AnticipateFiringState) == 0x32D8);
static_assert(offsetof(AWeaponBow, FireState) == 0x32E0);
static_assert(offsetof(AWeaponBow, FireAndInsertArrowState) == 0x32E8);
static_assert(offsetof(AWeaponBow, _fireNoArrowAudioEvent) == 0x3308);
static_assert(offsetof(AWeaponBow, _arrowSocketName) == 0x3310);
static_assert(offsetof(AWeaponBow, _bowActiveState2) == 0x3330);
static_assert(offsetof(AWeaponBow, _bowInsertArrowState) == 0x3338);
static_assert(offsetof(AWeaponBow, _bowRemoveArrowState) == 0x3340);
static_assert(offsetof(AWeaponBow, _bowFiringState2) == 0x3348);
static_assert(offsetof(AWeaponBow, _weaponBowStateDataReplicated) == 0x337C);
static_assert(offsetof(AWeaponBow, _arrowMeshComponent) == 0x3388);
static_assert(offsetof(AWeaponBow, _projectileArrowData) == 0x3390);
static_assert(offsetof(AWeaponBow, _handTriggerMeshComponent) == 0x3408);
static_assert(offsetof(AWeaponBow, _handTriggerBoneName) == 0x3418);
static_assert(offsetof(UWeaponBowAnimInstance, _aimingDownTheSightsAnimation) == 0x0318);
static_assert(offsetof(UWeaponBowAnimInstance, _aimingDownTheSightsStillAnimation) == 0x0320);
static_assert(offsetof(AWeaponCrossbow, FireState) == 0x3008);
static_assert(offsetof(AWeaponCrossbow, FireAndInsertArrowState) == 0x3010);
static_assert(offsetof(AWeaponCrossbow, _crossbowFireAnimation) == 0x3020);
static_assert(offsetof(AWeaponCrossbow, _crossbowFireAudioEvent) == 0x3030);
static_assert(offsetof(AWeaponCrossbow, _crossbowDryFireAudioEvent) == 0x3038);
static_assert(offsetof(AWeaponCrossbow, _crossbowActiveState) == 0x3040);
static_assert(offsetof(AWeaponFlamethrower, _flamethrowerComponent) == 0x3010);
static_assert(offsetof(AWeaponFlamethrower, _fuelType) == 0x3088);
static_assert(offsetof(AWeaponFlamethrower, _fuelFillingMontage) == 0x30A0);
static_assert(offsetof(AWeaponFlamethrower, _inFuelingSocketTypes) == 0x30A8);
static_assert(offsetof(AWeaponFlamethrower, _fuelStartFillingAudioEvent) == 0x30D0);
static_assert(offsetof(AWeaponFlamethrower, _fuelStopFillingAudioEvent) == 0x30D8);
static_assert(offsetof(AWeaponFlamethrower, _checkFuelStatus) == 0x30E0);
static_assert(offsetof(AWeaponHolsterItem, _holsteredWeaponRep) == 0x0A48);
static_assert(offsetof(AWeaponHolsterItem, _maxLocationSocketName) == 0x0A50);
static_assert(offsetof(AWeaponHolsterItem, _minLocationSocketName) == 0x0A58);
static_assert(offsetof(AWeaponHolsterItem, _fatLocationSocketName) == 0x0A60);
static_assert(offsetof(AWeaponHolsterItem, _muscleLocationSocketName) == 0x0A68);
static_assert(offsetof(AWeaponHolsterItem, _leanLocationSocketName) == 0x0A70);
static_assert(offsetof(AWeaponHolsterItem, _staticMeshSocketName) == 0x0A78);
static_assert(offsetof(UWeaponScopeItemComponent, ScopeViewOffset) == 0x0120);
static_assert(offsetof(UWeaponScopeItemComponent, IronSightsViewSocket) == 0x012C);
static_assert(offsetof(UWeaponScopeItemComponent, ScopeLensPostProcess) == 0x0140);
static_assert(offsetof(UWeaponScopeItemComponent, LensZoomParameterName) == 0x0148);
static_assert(offsetof(UWeaponScopeItemComponent, ScopeViewMesh) == 0x0158);
static_assert(offsetof(UWeaponScopeItemComponent, ScopeViewLensMesh) == 0x0160);
static_assert(offsetof(UWeaponScopeItemComponent, TextRenderTarget) == 0x0170);
static_assert(offsetof(UWeaponScopeItemComponent, WindageClickAudioEvent) == 0x0180);
static_assert(offsetof(UWeaponScopeItemComponent, _scopeViewMesh) == 0x0188);
static_assert(offsetof(UWeaponScopeItemComponent, _scopeViewLensMesh) == 0x0190);
static_assert(offsetof(UWeaponNightVisionScopeItemComponent, _activatedSound) == 0x0270);
static_assert(offsetof(UWeaponNightVisionScopeItemComponent, _deactivatedSound) == 0x0278);
static_assert(offsetof(UWeaponNightVisionScopeItemComponent, _batteryPercentageToGlitchStrengthCurve) == 0x0280);
static_assert(offsetof(FWeaponPaintjobPatternParams, Name) == 0x0000);
static_assert(offsetof(FWeaponPaintjobPatternParams, Texture) == 0x0018);
static_assert(offsetof(FWeaponPaintjobPatternParams, DeluxeVersionRequired) == 0x0028);
static_assert(offsetof(UWeaponPaintjobCommonData, Patterns) == 0x0030);
static_assert(offsetof(UWeaponPaintjobItemComponent, _patterns) == 0x00C8);
static_assert(offsetof(AWeaponRevolver, FireState) == 0x3008);
static_assert(offsetof(AWeaponRevolver, _revolverActiveState) == 0x3010);
static_assert(offsetof(AWeaponRevolver, _fireAnimation) == 0x3018);
static_assert(offsetof(AWeaponRevolver, _dryFireAnimation) == 0x3028);
static_assert(offsetof(AWeaponRevolver, _rollDrumAnimation) == 0x3038);
static_assert(offsetof(AWeaponRevolver, _russianRouletteMontage) == 0x3048);
static_assert(offsetof(AWeaponRevolver, _drumRotationDirection) == 0x306C);
static_assert(offsetof(AWeaponRocketLauncher, ArmState) == 0x3008);
static_assert(offsetof(AWeaponRocketLauncher, UnarmState) == 0x3010);
static_assert(offsetof(AWeaponRocketLauncher, ArmedState) == 0x3018);
static_assert(offsetof(AWeaponRocketLauncher, _armActionSequenceClass) == 0x3020);
static_assert(offsetof(AWeaponRocketLauncher, _unarmActionSequenceClass) == 0x3028);
static_assert(offsetof(AWeaponRocketLauncher, _backMuzzlerSocketName) == 0x3034);
static_assert(offsetof(AWeaponRocketLauncher, _baskMuzzlePS) == 0x3040);
static_assert(offsetof(AWeaponRocketLauncher, _armActionSequence) == 0x3048);
static_assert(offsetof(AWeaponRocketLauncher, _unarmActionSequence) == 0x3050);
static_assert(offsetof(AWeaponRocketLauncher, _unarmedState) == 0x3058);
static_assert(offsetof(UWeaponScopeWidget, ReticleTexture) == 0x0268);
static_assert(offsetof(UWeaponScopeWidget, TextRenderTarget) == 0x0270);
static_assert(offsetof(UWeaponFirstPersonAnimationsDataAsset, UpperBodyAimingHip) == 0x0098);
static_assert(offsetof(UWeaponSightItemComponent, ViewCenterSocketName) == 0x00C8);
static_assert(offsetof(UWeaponSightItemComponent, AimingDownTheSightsLocationOffset) == 0x00D0);
static_assert(offsetof(UWeaponStateReload, _currentReloadActionSequence) == 0x0030);
static_assert(offsetof(UWeaponStateReload, _reloadData) == 0x0038);
static_assert(offsetof(AWeatherAmbientSounds, RainAudioEvent) == 0x0230);
static_assert(offsetof(AWeatherAmbientSounds, WindAudioEvent) == 0x0238);
static_assert(offsetof(FRandomRollStage, BaseValueRollInterval) == 0x0000);
static_assert(offsetof(FRandomRollStage, BaseValueTargetCurve) == 0x0008);
static_assert(offsetof(FMultistageRandomRoll, _valueRange) == 0x0000);
static_assert(offsetof(FMultistageRandomRoll, _baseValueRollStages) == 0x0010);
static_assert(offsetof(FMultistageRandomRoll, _varianceRollInterval) == 0x0024);
static_assert(offsetof(FMultistageRandomRoll, _varianceTargetInterval) == 0x002C);
static_assert(offsetof(AWeatherController2, _sun) == 0x0288);
static_assert(offsetof(AWeatherController2, _quantizedSunMovementLevelsPerSunHeight) == 0x02D8);
static_assert(offsetof(AWeatherController2, _moon) == 0x02E0);
static_assert(offsetof(AWeatherController2, _moonLightTint) == 0x02F0);
static_assert(offsetof(AWeatherController2, _moonStarsMaterial) == 0x0338);
static_assert(offsetof(AWeatherController2, _moonStarsMaterialDynamic) == 0x0340);
static_assert(offsetof(AWeatherController2, _starsSphere) == 0x0348);
static_assert(offsetof(AWeatherController2, _starsSphereRotation) == 0x0354);
static_assert(offsetof(AWeatherController2, _nightLight) == 0x0368);
static_assert(offsetof(AWeatherController2, _nightLightIntensityRange) == 0x0374);
static_assert(offsetof(AWeatherController2, _nightLightColor) == 0x037C);
static_assert(offsetof(AWeatherController2, _skyAmbientReflEnv) == 0x0390);
static_assert(offsetof(AWeatherController2, _skyAtmosphere) == 0x0398);
static_assert(offsetof(AWeatherController2, _skyAmbientOcclusionTint) == 0x03A8);
static_assert(offsetof(AWeatherController2, _skyAmbientReflEnvLowerHemisphereColor) == 0x0430);
static_assert(offsetof(AWeatherController2, _skyAmbientReflEnvLowerHemisphereIntensitySun) == 0x0440);
static_assert(offsetof(AWeatherController2, _skyAmbientReflEnvLowerHemisphereIntensityMoon) == 0x04C8);
static_assert(offsetof(AWeatherController2, _skyAmbientReflEnvLowerHemisphereIntensityCloudCoverage) == 0x0550);
static_assert(offsetof(AWeatherController2, _skyAmbientReflEnvUpperHemisphereAdditiveIntensityCloudCoverage) == 0x05D8);
static_assert(offsetof(AWeatherController2, _skyAmbientReflEnvUpperHemisphereAdditiveColor) == 0x0660);
static_assert(offsetof(AWeatherController2, _additiveAmbientCubemapIntensity) == 0x0678);
static_assert(offsetof(AWeatherController2, _skyRayleighScattering) == 0x0700);
static_assert(offsetof(AWeatherController2, _mieExponentialDistribution) == 0x071C);
static_assert(offsetof(AWeatherController2, _volumetricClouds) == 0x0728);
static_assert(offsetof(AWeatherController2, _volumetricCloudsMaterialLQ) == 0x0730);
static_assert(offsetof(AWeatherController2, _volumetricCloudsMaterialHQ) == 0x0738);
static_assert(offsetof(AWeatherController2, _volumetricCloudsMaterialDynamic) == 0x0740);
static_assert(offsetof(AWeatherController2, _cirrostratusCoverageMaterialParamRemap) == 0x07A0);
static_assert(offsetof(AWeatherController2, _cumulonimbusCoverageMaterialParamRemap) == 0x0830);
static_assert(offsetof(AWeatherController2, _nimbostratusCoverageMaterialParamRemap) == 0x08C0);
static_assert(offsetof(AWeatherController2, _volumetricCloudsViewSampleCount) == 0x0958);
static_assert(offsetof(AWeatherController2, _volumetricCloudsReflectionSampleCount) == 0x0960);
static_assert(offsetof(AWeatherController2, _volumetricCloudsShadowViewSampleCount) == 0x0968);
static_assert(offsetof(AWeatherController2, _volumetricCloudsShadowReflectionSampleCount) == 0x0970);
static_assert(offsetof(AWeatherController2, _sunCloudShadowRaySampleCount) == 0x0978);
static_assert(offsetof(AWeatherController2, _moonCloudShadowRaySampleCount) == 0x0980);
static_assert(offsetof(AWeatherController2, _lightningParticleSystem) == 0x0988);
static_assert(offsetof(AWeatherController2, _lightningParticleLifetime) == 0x0990);
static_assert(offsetof(AWeatherController2, _thunderSoundEmitter) == 0x0998);
static_assert(offsetof(AWeatherController2, _thunderSoundDuration) == 0x09A0);
static_assert(offsetof(AWeatherController2, _precipitationEmittersRoot) == 0x09D8);
static_assert(offsetof(AWeatherController2, _precipitationMaskCapture) == 0x09E0);
static_assert(offsetof(AWeatherController2, _rainParticleSystem) == 0x0A00);
static_assert(offsetof(AWeatherController2, _rainEmitter) == 0x0A08);
static_assert(offsetof(AWeatherController2, _rainSpriteSizeAtLowRain) == 0x0A20);
static_assert(offsetof(AWeatherController2, _rainSpriteSizeAtHighRain) == 0x0A30);
static_assert(offsetof(AWeatherController2, _rainSpriteSplashSizeAtLowRain) == 0x0A40);
static_assert(offsetof(AWeatherController2, _rainSpriteSplashSizeAtHighRain) == 0x0A50);
static_assert(offsetof(AWeatherController2, _rainCylinderMesh) == 0x0A78);
static_assert(offsetof(AWeatherController2, _rainCylinderScaleWidthHeight) == 0x0A80);
static_assert(offsetof(AWeatherController2, _rainCylinder) == 0x0A90);
static_assert(offsetof(AWeatherController2, _surfaceWetnessEvaporationSpeedVsSunHeigth) == 0x0AA8);
static_assert(offsetof(AWeatherController2, _surfaceWetnessEvaporationSpeedVsCloudCoverageMult) == 0x0B30);
static_assert(offsetof(AWeatherController2, _surfaceRaindropsPostProcess) == 0x0BC0);
static_assert(offsetof(AWeatherController2, _surfaceRaindropsPostProcessDynamicInstance) == 0x0BC8);
static_assert(offsetof(AWeatherController2, _snowParticleSystems) == 0x0BD0);
static_assert(offsetof(AWeatherController2, _snowEmitters) == 0x0BE0);
static_assert(offsetof(AWeatherController2, _mainMPC) == 0x0C00);
static_assert(offsetof(AWeatherController2, _foliageMPC) == 0x0C08);
static_assert(offsetof(AWeatherController2, _foliageMPCSubsurfaceColorIntensityCurve) == 0x0C10);
static_assert(offsetof(AWeatherController2, _wetnessMPC) == 0x0C98);
static_assert(offsetof(AWeatherController2, _wetnessMPCEmissiveIntensityCurve) == 0x0CA0);
static_assert(offsetof(AWeatherController2, _particlesMPC) == 0x0D28);
static_assert(offsetof(AWeatherController2, _particlesMPCGlobalParticlesColorCurve) == 0x0D30);
static_assert(offsetof(AWeatherController2, _baseAirTemperatureRange) == 0x0F3C);
static_assert(offsetof(AWeatherController2, _waterTemperatureRange) == 0x0F4C);
static_assert(offsetof(AWeatherController2, _waterEvaporationRate) == 0x0F60);
static_assert(offsetof(AWeatherController2, _windSourceComponent) == 0x0FF0);
static_assert(offsetof(AWeatherController2, _heightFog) == 0x1010);
static_assert(offsetof(AWeatherController2, _fogBaseInscatteringColor) == 0x1024);
static_assert(offsetof(AWeatherController2, _fogBaseDirectionalInscatteringColor) == 0x1034);
static_assert(offsetof(AWeatherController2, _postProcessVolume) == 0x1048);
static_assert(offsetof(AWeatherController2, _exposureMinBrightness) == 0x1050);
static_assert(offsetof(AWeatherController2, _exposureMaxBrightness) == 0x10D8);
static_assert(offsetof(AWeatherController2, _exposureSpeedUp) == 0x1160);
static_assert(offsetof(AWeatherController2, _exposureSpeedDown) == 0x11E8);
static_assert(offsetof(AWeatherController2, _ambientOcclusionPostProcessSettings) == 0x1274);
static_assert(offsetof(AWeatherController2, _windAzimuthRandom) == 0x12B0);
static_assert(offsetof(AWeatherController2, _windIntensityRandom) == 0x1318);
static_assert(offsetof(AWeatherController2, _cirrostratusCoverageRandom) == 0x1380);
static_assert(offsetof(AWeatherController2, _cumulonimbusCoverageRandom) == 0x13E8);
static_assert(offsetof(AWeatherController2, _nimbostratusCoverageRandom) == 0x1450);
static_assert(offsetof(AWeatherController2, _baseAirTemperatureVsTimeOfDay) == 0x14B8);
static_assert(offsetof(AWeatherController2, _fogDensityVsSunIntensity) == 0x1540);
static_assert(offsetof(AWetnessManager, WettingRateFromRainVsRainIntensity) == 0x0230);
static_assert(offsetof(AWetnessManager, DryingRateModifierVsTemperature) == 0x0248);
static_assert(offsetof(AWetnessManager, DryingRateModifierVsRelativeHumidity) == 0x0250);
static_assert(offsetof(AWheelBarrow, _driverCapsuleRelativeLocation) == 0x1D74);
static_assert(offsetof(AWheelBarrow, _driverCapsuleConstraintRelativeLocation) == 0x1D8C);
static_assert(offsetof(AWheelBarrow, _driverTransformRelativeToCapsule) == 0x1DA0);
static_assert(offsetof(AWheelBarrow, _driverActionDifficultyVsSpeed) == 0x1DD0);
static_assert(offsetof(AWheelBarrow, _driverActionDifficultyVsSpeedWhenLimping) == 0x1E58);
static_assert(offsetof(AWheelBarrow, _driverBaseConstitutionChangeRateModifierVsSpeed) == 0x1EE0);
static_assert(offsetof(AWheelBarrow, _driverBaseConstitutionChangeRateModifierVsSpeedWhenLimping) == 0x1F68);
static_assert(offsetof(AWheelBarrow, _driverStrengthGainSpeedInfluenceVsSpeed) == 0x1FF0);
static_assert(offsetof(AWheelBarrow, _driverStrengthGainSpeedInfluenceVsSpeedWhenLimping) == 0x2078);
static_assert(offsetof(AWheelBarrow, _loadModifierInterpedWithDriverStrength) == 0x2100);
static_assert(offsetof(AWheelBarrow, _parametersPerMovementPace) == 0x2108);
static_assert(offsetof(AWheelBarrow, _maxSpeedModifierInterpedWithDriverDexterity) == 0x2168);
static_assert(offsetof(AWheelBarrow, _weightLoadFactorVsFloorSlopeAngle) == 0x2170);
static_assert(offsetof(AWheelBarrow, _startedMovingAudioEvent) == 0x2250);
static_assert(offsetof(AWheelBarrow, _stoppedMovingAudioEvent) == 0x2258);
static_assert(offsetof(AWheelBarrow, _driverPhysicsConstraintComponent) == 0x2268);
static_assert(offsetof(AWheelBarrow, _physicsMaterialWhenDriven) == 0x2278);
static_assert(offsetof(AWheelBarrow, _driverPhysicsCapsuleComponent) == 0x2428);
static_assert(offsetof(AWheelBarrow, _wheelMesh) == 0x2480);
static_assert(offsetof(UWheelBarrowDriverMountSlot, _walkJogLimpingAnimation) == 0x0188);
static_assert(offsetof(UWindowFortificationsType, MeshForFortification) == 0x0030);
static_assert(offsetof(UWindowMarkersComponent, _windowMarkers) == 0x01F8);
static_assert(offsetof(AWindVane, _column) == 0x0220);
static_assert(offsetof(AWindVane, _body) == 0x0228);
static_assert(offsetof(AWindVane, _propeller) == 0x0230);
static_assert(offsetof(AWindVane, _rotationRateRTPC) == 0x0240);
static_assert(offsetof(UWorldCraftingMarkerWidget, _craftingInfo) == 0x0340);
static_assert(offsetof(UWorldCraftingMarkerWidget, Label) == 0x0348);
static_assert(offsetof(UWorldCraftingMarkerWidget, Distance) == 0x0350);
static_assert(offsetof(UWorldCraftingMarkerWidget, SmallPointer) == 0x0358);
static_assert(offsetof(UWorldCraftingMarkerWidget, Icon) == 0x0360);
static_assert(offsetof(UWorldCraftingMarkerWidget, Emphasis) == 0x0368);
static_assert(offsetof(UWorldCraftingMarkerWidget, Switcher) == 0x0370);
static_assert(offsetof(AWorldEventManager, EventTypes) == 0x0220);
static_assert(offsetof(AWorldEventManager, _events) == 0x0240);
static_assert(offsetof(AWorldItemSpawner, _spawnerComponent) == 0x0220);
static_assert(offsetof(UWorldItemSpawnerComponent, _item) == 0x0470);
static_assert(offsetof(UWorldQuestMarkerWidget, _distance) == 0x0340);
static_assert(offsetof(UWorldQuestMarkerWidget, _verticalBox) == 0x0348);
static_assert(offsetof(UWorldQuestMarkerWidget, _icon) == 0x0350);
static_assert(offsetof(UWorldQuestMarkerWidget, _pointer) == 0x0358);
static_assert(offsetof(UWorldQuestMarkerWidget, _emphasis) == 0x0360);
static_assert(offsetof(AWristwatch, SkeletalMesh) == 0x0220);
static_assert(offsetof(AWristwatch, TextRenderTarget) == 0x0228);
static_assert(offsetof(AWristwatch, TimeFont) == 0x0230);
static_assert(offsetof(AWristwatch, AlarmSound) == 0x0240);
static_assert(offsetof(AWristwatch, _maleWristwatchMesh) == 0x0248);
static_assert(offsetof(AWristwatch, _femaleWristwatchMesh) == 0x0250);
static_assert(offsetof(UYesNoDialog, _textDialog) == 0x0298);
static_assert(offsetof(UYesNoDialog, _buttonYes) == 0x02A0);
static_assert(offsetof(UYesNoDialog, _buttonNo) == 0x02A8);
static_assert(offsetof(UYesNoDialog, _dialogMessage) == 0x02B0);
static_assert(offsetof(UZombie2AIControllerEncounterSaveState, ZombieState) == 0x0080);
static_assert(offsetof(AZombieAIController2, _lyingSightSenseConfig) == 0x0450);
static_assert(offsetof(AZombieAIController2, _lyingHearingSenseConfig) == 0x0458);
static_assert(offsetof(AZombieAIController2, _lyingDamageSenseConfig) == 0x0460);
static_assert(offsetof(AZombieAIController2, _noiseAccumulationMultiplierPerNoiseTag) == 0x0480);
static_assert(offsetof(AZombieAIController2, _relaxedIdleSightSenseConfig) == 0x0510);
static_assert(offsetof(AZombieAIController2, _relaxedIdleHearingSenseConfig) == 0x0518);
static_assert(offsetof(AZombieAIController2, _relaxedIdleDamageSenseConfig) == 0x0520);
static_assert(offsetof(AZombieAIController2, _relaxedWanderSightSenseConfig) == 0x0528);
static_assert(offsetof(AZombieAIController2, _relaxedWanderHearingSenseConfig) == 0x0530);
static_assert(offsetof(AZombieAIController2, _relaxedWanderDamageSenseConfig) == 0x0538);
static_assert(offsetof(AZombieAIController2, _observingCurve) == 0x0568);
static_assert(offsetof(AZombieAIController2, _alertedSightSenseConfig) == 0x0580);
static_assert(offsetof(AZombieAIController2, _alertedHearingSenseConfig) == 0x0588);
static_assert(offsetof(AZombieAIController2, _alertedDamageSenseConfig) == 0x0590);
static_assert(offsetof(AZombieAIController2, _foeLocationPredictionStrengthVsDistanceToFoe) == 0x05A0);
static_assert(offsetof(AZombieAIController2, _detectionDelayTimerData) == 0x05F4);
static_assert(offsetof(AZombieAIController2, _zombie) == 0x0610);
static_assert(offsetof(UZombieAnimInstance2, stance) == 0x02BC);
static_assert(offsetof(UZombieAnimInstance2, Acceleration) == 0x02C8);
static_assert(offsetof(UZombieAnimInstance2, Velocity) == 0x02D8);
static_assert(offsetof(UZombieAnimInstance2, AimOffset) == 0x0300);
static_assert(offsetof(UZombieAnimInstance2, RelaxedWalkLoopAnimation) == 0x0310);
static_assert(offsetof(UZombieAnimInstance2, CombatRunStartAnimation) == 0x0320);
static_assert(offsetof(UZombieAnimInstance2, CombatRunLoopAnimation) == 0x0330);
static_assert(offsetof(UZombieAnimInstance2, CombatRunStopAnimation) == 0x0340);
static_assert(offsetof(UZombieAnimInstance2, SleepingLoopAnimation) == 0x0360);
static_assert(offsetof(UZombieAnimInstance2, _hiddenSpawnType) == 0x0368);
static_assert(offsetof(UZombieAnimInstance2, _hiddenSpawnMeshOffset) == 0x036C);
static_assert(offsetof(UZombieAnimInstance2, _hiddenSpawnMeshScale) == 0x037C);
static_assert(offsetof(UZombieAnimInstance2, _hiddenSpawnMeshStartScale) == 0x0394);
static_assert(offsetof(UZombieKamikazeComponent, _owningCharacter) == 0x00B0);
static_assert(offsetof(UZombieKamikazeComponent, _targetTypeMultiplier) == 0x00E8);
static_assert(offsetof(UZombieKamikazeComponent, _explosionAudioEvent) == 0x0100);
static_assert(offsetof(UZombieKamikazeComponent, _beepingStartAudioEvent) == 0x0108);
static_assert(offsetof(UZombieKamikazeComponent, _beepingEndAudioEvent) == 0x0110);
static_assert(offsetof(UZombieKamikazeComponent, _beepingAudioComponent) == 0x0118);
static_assert(offsetof(UZombieKamikazeComponent, _explosionPS) == 0x0120);
static_assert(offsetof(UZombieKamikazeComponent, _explosionCameraShakeClass) == 0x0128);
static_assert(offsetof(UZombieKamikazeComponent, _sootDecal) == 0x0130);
static_assert(offsetof(UZombieKamikazeComponent, _sootScalarParameterValueName) == 0x0148);
static_assert(offsetof(UZombieKamikazeComponent, _bodyPartChunks) == 0x0170);
static_assert(offsetof(UZombieKamikazeComponent, _minigameClass) == 0x0180);
static_assert(offsetof(UZombieKamikazeComponent, _minigameToolTag) == 0x0188);
static_assert(offsetof(UZombieKamikazeComponent, _dummyTrapItemClass) == 0x0190);
static_assert(offsetof(UZombieKamikazeComponent, _spawnerPresets) == 0x0198);
static_assert(offsetof(UZombieKamikazeComponent, _spawnerPresets2) == 0x01A8);
static_assert(offsetof(AZombieKamikazeDummyTrap, _owningComponent) == 0x0AD0);
static_assert(offsetof(UZombieSoundComponent2, RelaxedStanceEnteredAudioEvent) == 0x0128);
static_assert(offsetof(UZombieSoundComponent2, AlertedStanceEnteredAudioEvent) == 0x0130);
static_assert(offsetof(UZombieSoundComponent2, CombatStanceEnteredAudioEvent) == 0x0138);
static_assert(offsetof(UZombieSoundComponent2, FootstepAudioEvent) == 0x0140);
static_assert(offsetof(UZombieSoundComponent2, StopAllAudioEvent) == 0x0148);
static_assert(offsetof(UZombieSoundComponent2, DeathAudioEvent) == 0x0150);
static_assert(offsetof(UZombieSoundComponent2, StartSearchCorpseAudioEvent) == 0x0158);
static_assert(offsetof(UZombieSoundComponent2, StopSearchCorpseAudioEvent) == 0x0160);
static_assert(offsetof(FZoneConfiguration, InteractionsToDisable) == 0x0008);
static_assert(offsetof(UZoneConfigurationDataAsset, configuration) == 0x0030);
static_assert(offsetof(FWidgetDisplayInfo, DisplayType) == 0x0000);
static_assert(offsetof(FInteractionData, PointerData) == 0x0010);
static_assert(offsetof(FInteractionData, TextData) == 0x0020);
static_assert(offsetof(FInteractionData, InteractionLocation) == 0x0038);
static_assert(offsetof(FInteractionData, InteractionNormal) == 0x0044);
static_assert(offsetof(FInteractionData, VectorData) == 0x0050);
static_assert(offsetof(FEnvironmentDescription, EnvironmentClass) == 0x0000);
static_assert(offsetof(FCharacterActionAck, Type) == 0x000C);
static_assert(offsetof(FCharacterActionAck, EndState) == 0x000D);
static_assert(offsetof(FMeleeAttackCapsule, AttachParent) == 0x0000);
static_assert(offsetof(FMeleeAttackCapsule, Attachment) == 0x0008);
static_assert(offsetof(FMeleeAttackCapsule, RelativeTransform) == 0x0010);
static_assert(offsetof(FMeleeAttackCapsule, WeaponDesc) == 0x0048);
static_assert(offsetof(FMeleeAttackCapsuleHitInfo, MeleeAttackCapsule) == 0x0000);
static_assert(offsetof(FMeleeAttackCapsuleHitInfo, HitResult) == 0x0080);
static_assert(offsetof(FMeleeAttackCapsuleHitInfo, HitSeverity) == 0x0118);
static_assert(offsetof(FMeleeAttackCapsuleHitInfo, AttackType) == 0x0119);
static_assert(offsetof(FMeleeAttackCapsuleHitInfo, AttackerLocation) == 0x011C);
static_assert(offsetof(FMeleeAttackCapsuleHitInfo, VictimLocation) == 0x0128);
static_assert(offsetof(FMeleeAttackCapsuleHitInfo, Tags) == 0x0138);
static_assert(offsetof(FBaseInteractionParams, ElementID) == 0x0000);
static_assert(offsetof(FWeaponMalfunctionProbability, malfunction) == 0x0000);
static_assert(offsetof(FFireShotProjectileData, StartLocation) == 0x0000);
static_assert(offsetof(FFireShotProjectileData, shootDirection) == 0x000C);
static_assert(offsetof(FFireShotProjectileData, Description) == 0x002C);
static_assert(offsetof(FBasicNotificationDescriptionData, Message) == 0x0000);
static_assert(offsetof(FBasicNotificationDescriptionData, Icon) == 0x0020);
static_assert(offsetof(FBrennerUpperBodyPitchRangeData, ActualPitchRange) == 0x0000);
static_assert(offsetof(FBrennerAttackDescription, Type) == 0x0000);
static_assert(offsetof(FBrennerAttackDescription, Montage) == 0x0008);
static_assert(offsetof(FBuildingsArray, _buildings) == 0x0000);
static_assert(offsetof(FCharacterMeshClassArray, Classes) == 0x0000);
static_assert(offsetof(FHitByMeleeImpactSoundsInfo, ImpactSourceSoundCategory) == 0x0000);
static_assert(offsetof(FHitByMeleeImpactSoundsInfo, HitSeverity) == 0x0001);
static_assert(offsetof(FHitByMeleeImpactSoundsInfo, ImpactBodyPart) == 0x0002);
static_assert(offsetof(FHitByMeleeImpactSoundsInfo, ImpactPoint) == 0x0004);
static_assert(offsetof(FCharacterStatsItem, PlayerName) == 0x0008);
static_assert(offsetof(FCharacterStatsItem, CharacterStats) == 0x0018);
static_assert(offsetof(FSelectedChoppingTool, Item) == 0x0000);
static_assert(offsetof(FSelectedChoppingTool, Tool) == 0x0008);
static_assert(offsetof(FNetPackedProjectileDamageEvent, DealerLocation) == 0x00C0);
static_assert(offsetof(FNetPackedProjectileDamageEvent, TargetLocation) == 0x00CC);
static_assert(offsetof(FNetPackedProjectileDamageEvent, WeaponClass) == 0x00E8);
static_assert(offsetof(FNetPackedProjectileDamageEvent, DamageDealer) == 0x00F0);
static_assert(offsetof(FNetPackedProjectileDamageEvent, DamageReceiverVehicleAttachment) == 0x00F8);
static_assert(offsetof(FNetPackedProjectileDamageEvent, overrideProjectileImpactEffects) == 0x0118);
static_assert(offsetof(FRepActionData, action) == 0x0000);
static_assert(offsetof(FBaseElementSpawnParams, ShelterId) == 0x0008);
static_assert(offsetof(FBaseElementSpawnParams, EntityId) == 0x0010);
static_assert(offsetof(FConZOnDemandElementData, ElementIdentifier) == 0x0000);
static_assert(offsetof(FConZOnDemandElementData, OwnerName) == 0x0020);
static_assert(offsetof(FConZPlacementQueryParams, User) == 0x0000);
static_assert(offsetof(FConZPlacementQueryParams, ClassToSpawn) == 0x0008);
static_assert(offsetof(FConZBaseElementInteractionData, BaseElementLocation) == 0x000C);
static_assert(offsetof(FConZBaseElementInteractionData, PointerData) == 0x0030);
static_assert(offsetof(FConZBaseInteractionData, BaseLocation) == 0x0008);
static_assert(offsetof(FConZBaseData, BaseName) == 0x0008);
static_assert(offsetof(FConZBaseData, BaseSize) == 0x0018);
static_assert(offsetof(FConZBaseData, BaseLocation) == 0x0020);
static_assert(offsetof(FConZBaseData, BaseBoundsMin) == 0x003C);
static_assert(offsetof(FConZBaseData, BaseBoundsMax) == 0x0044);
static_assert(offsetof(FConZFlagElementData, OvertakerId) == 0x0008);
static_assert(offsetof(FConZBaseElementData, OwnerName) == 0x0018);
static_assert(offsetof(FConZBaseElementData, Transform) == 0x0030);
static_assert(offsetof(FConZBaseElementData, ElementClass) == 0x0060);
static_assert(offsetof(FConZBaseElementTransformData, Location) == 0x0008);
static_assert(offsetof(FConZBaseElementTransformData, Rotation) == 0x0020);
static_assert(offsetof(FWaterQueryResult, Location) == 0x0000);
static_assert(offsetof(FWaterQueryResult, Surface) == 0x0010);
static_assert(offsetof(FWaterQueryResult, Bottom) == 0x001C);
static_assert(offsetof(FWaterQueryResult, Velocity) == 0x0028);
static_assert(offsetof(FWaterQueryResult, WaveNormal) == 0x0038);
static_assert(offsetof(FWaterQueryResult, WaterSpline) == 0x0050);
static_assert(offsetof(FCookedFoodIngredientNetData, Resource) == 0x0000);
static_assert(offsetof(FCookingUtilitySlotInstance_UserSetData, InternalCoordinates) == 0x0008);
static_assert(offsetof(FCookingUtilityUITableRow, UtilitySlotType) == 0x0008);
static_assert(offsetof(FCookingUtilityUITableRow, CookingUtilityUIDataAsset) == 0x0010);
static_assert(offsetof(FCraftingIngredientConsumptionData, Ingredient) == 0x0000);
static_assert(offsetof(FCraftingIngredientConsumptionData, Type) == 0x0008);
static_assert(offsetof(FCutsceneSubtitlesTableRow, _subtitleText) == 0x0008);
static_assert(offsetof(FCutsceneSubtitlesTableRow, _startTime) == 0x0020);
static_assert(offsetof(FCutsceneSubtitlesTableRow, _endTime) == 0x0028);
static_assert(offsetof(FRadialDamageDescription, BlastDirection) == 0x000C);
static_assert(offsetof(FDamageMultiplierTracker, _appliedMultiplierNames) == 0x0008);
static_assert(offsetof(FDamageMultiplierTracker, _appliedMultiplierValues) == 0x0018);
static_assert(offsetof(FDummyCollisionCapsuleInfo, AttachParent) == 0x0000);
static_assert(offsetof(FDummyCollisionCapsuleInfo, Attachment) == 0x0008);
static_assert(offsetof(FDummyCollisionCapsuleInfo, RelativeTransform) == 0x0010);
static_assert(offsetof(FEncounterSpawnTypeArrayData, HiddenSpawnTypeDataArray) == 0x0000);
static_assert(offsetof(FEventsRankingStatsItem, PlayerName) == 0x0008);
static_assert(offsetof(FEventsRankingStatsItem, CharacterStats) == 0x0018);
static_assert(offsetof(FExplosionRadialDamageEvent, DamageCustomizationClass) == 0x0048);
static_assert(offsetof(FExplosionRadialDamageEvent, TargetTypeMultiplier) == 0x0058);
static_assert(offsetof(FExplosionRadialDamageEvent, DamageDealer) == 0x0068);
static_assert(offsetof(FExplosionRadialDamageEvent, DirectlyHitActor) == 0x0070);
static_assert(offsetof(FExplosionRadialDamageEvent, BoneName) == 0x0078);
static_assert(offsetof(FExplosionRadialDamageEvent, OriginatingWeapon) == 0x0088);
static_assert(offsetof(FFilteredPrimaryAssetId, Value) == 0x0000);
static_assert(offsetof(FFishingData, Location) == 0x0000);
static_assert(offsetof(FAttachComponentData, MeshComponent) == 0x0000);
static_assert(offsetof(FAttachComponentData, SocketName) == 0x0010);
static_assert(offsetof(FHitReactResult, MontageToPlay) == 0x0000);
static_assert(offsetof(FHitReactResult, FollowupMontage) == 0x0008);
static_assert(offsetof(FInteractionQueryParameters, InteractionLocation) == 0x0000);
static_assert(offsetof(FInteractionQueryParameters, InteractionNormal) == 0x000C);
static_assert(offsetof(FInteractionQueryParameters, Component) == 0x0018);
static_assert(offsetof(FInventoryNodeWidgetData, Slot) == 0x0000);
static_assert(offsetof(FInventoryNodeWidgetData, Type) == 0x0008);
static_assert(offsetof(FInventoryNodeWidgetData, TextData) == 0x0018);
static_assert(offsetof(FInventoryNodeWidgetData, IconData) == 0x0030);
static_assert(offsetof(FInventoryNodeWidgetData, VisibilityData) == 0x0038);
static_assert(offsetof(FItemGeneralParametersTableRow, _caption) == 0x0008);
static_assert(offsetof(FItemGeneralParametersTableRow, _description) == 0x0020);
static_assert(offsetof(FItemGeneralParametersTableRow, _outsideInventoryIcon) == 0x0038);
static_assert(offsetof(FItemGeneralParametersTableRow, _craftingIngredientInstances) == 0x0060);
static_assert(offsetof(FItemGeneralParametersTableRow, _requiredDLC) == 0x0071);
static_assert(offsetof(FItemLootTreeNodeTableRow, Rarity) == 0x0020);
static_assert(offsetof(FItemSpawningParametersTableRow, AllowedLocations) == 0x000C);
static_assert(offsetof(FItemSpawningParametersTableRow, CooldownPerSquadMember) == 0x001C);
static_assert(offsetof(FItemSpawningParametersTableRow, CooldownGroup) == 0x0028);
static_assert(offsetof(FItemSpawningParametersTableRow, SpawnLocationOffset) == 0x005C);
static_assert(offsetof(FItemSpawningParametersTableRow, SpawnRotationOffset) == 0x0068);
static_assert(offsetof(FItemSpawningCooldownGroupTableRow, cooldown) == 0x0008);
static_assert(offsetof(FLazyLoadedObjectPtr, Object) == 0x0000);
static_assert(offsetof(FLazyLoadedObjectPtr, _loadedObject) == 0x0028);
static_assert(offsetof(FMeleeAction, ActionType) == 0x0000);
static_assert(offsetof(FMeleeAction, Montage) == 0x0004);
static_assert(offsetof(FAttackedByMeleeData, attacker) == 0x0000);
static_assert(offsetof(FAttackedByMeleeData, Montage) == 0x0008);
static_assert(offsetof(FModularTooltipSectionData, Elements) == 0x0018);
static_assert(offsetof(FNPCGuardAttackDescription, Type) == 0x0000);
static_assert(offsetof(FNPCGuardAttackDescription, Montage) == 0x0008);
static_assert(offsetof(FPlayerLoginInfo, UserId) == 0x0000);
static_assert(offsetof(FPlayerLoginInfo, UserProfileId) == 0x0010);
static_assert(offsetof(FPlayerLoginInfo, UserProfileName) == 0x0018);
static_assert(offsetof(FPlayerLoginInfo, DeluxeVersion) == 0x002B);
static_assert(offsetof(FPlayerLoginInfo, ServerUserProfileId) == 0x0040);
static_assert(offsetof(FTrackedQuest, ID) == 0x0000);
static_assert(offsetof(FTrackedQuest, Type) == 0x0008);
static_assert(offsetof(FPrisonerAppearanceId, Gender) == 0x0000);
static_assert(offsetof(FPrisonerBodySimulationData_BodyPartMappingArray, BodyParts) == 0x0000);
static_assert(offsetof(FWindowInfo, Transform) == 0x0000);
static_assert(offsetof(FWindowInfo, TransformInverse) == 0x0030);
static_assert(offsetof(FWindowInfo, Anchor) == 0x0060);
static_assert(offsetof(FWindowInfo, AnimationInfo) == 0x0070);
static_assert(offsetof(FWindowDetectionParams, CharacterHeadLocation) == 0x0000);
static_assert(offsetof(FWindowDetectionParams, CharacterFeetLocation) == 0x000C);
static_assert(offsetof(FWindowDetectionParams, CharacterForwardVector) == 0x0018);
static_assert(offsetof(FLadderDetectionParams, RayOrigin) == 0x0000);
static_assert(offsetof(FLadderDetectionParams, RayDirection) == 0x000C);
static_assert(offsetof(FClimbableObstacleInfo, CapsuleLocationAtAnchorZero) == 0x0000);
static_assert(offsetof(FClimbableObstacleInfo, CapsuleRotationAtAnchor) == 0x000C);
static_assert(offsetof(FClimbableObstacleInfo, BaseComponent) == 0x0018);
static_assert(offsetof(FClimbableObstacleInfo, AnimationInfo) == 0x0020);
static_assert(offsetof(FPrisonerConditionalSpawnEquipment, Condition) == 0x0000);
static_assert(offsetof(FPrisonerConditionalSpawnEquipment, ItemClass) == 0x0048);
static_assert(offsetof(FPrisonerConditionalSpawnEquipment, BiomeRequirement) == 0x0070);
static_assert(offsetof(FMusicPlayerPlaybackOptions, MusicPlaylist) == 0x0000);
static_assert(offsetof(FPrisonerViewInfo, WeaponFoveationOffset) == 0x05F4);
static_assert(offsetof(FAreaResourceLockNetwork, LockOwnerGUID) == 0x0000);
static_assert(offsetof(FAreaResourceLockNetwork, Area) == 0x0004);
static_assert(offsetof(FActorResourceLockNetwork, LockOwnerGUID) == 0x0000);
static_assert(offsetof(FActorResourceLockNetwork, ResourceGUID) == 0x0004);
static_assert(offsetof(FMultiplierByClass, ObjectClass) == 0x0000);
static_assert(offsetof(FDamageMultipliers, DamageCauserClass) == 0x0000);
static_assert(offsetof(FDamageMultipliers, DamageMultipliers) == 0x0008);
static_assert(offsetof(FSkillEventWeapon, WeaponCategory) == 0x0000);
static_assert(offsetof(FSkillEventWeaponClearedMalfunction, malfunction) == 0x0001);
static_assert(offsetof(FSkillEventWeaponProjectileHitTarget, Target) == 0x0008);
static_assert(offsetof(FSkillEventWeaponProjectileHitTarget, stance) == 0x001B);
static_assert(offsetof(FSkillEventWeaponProjectileHitTarget, WindSpeedCategory) == 0x001C);
static_assert(offsetof(FSquadLeaveInfo, LastProbationStartTimestamp) == 0x0000);
static_assert(offsetof(FCaughtFishData, fishSpecies) == 0x0000);
static_assert(offsetof(FFishingStats, FishSpeciesCaught) == 0x0018);
static_assert(offsetof(FSurvivalStats, FishingStats) == 0x0148);
static_assert(offsetof(FSurvivalTipData, Text) == 0x0008);
static_assert(offsetof(FSurvivalTipData, DeenaDialogueName) == 0x0020);
static_assert(offsetof(FSurvivalTipData, Level) == 0x002D);
static_assert(offsetof(FSurvivalTipData, Category) == 0x002E);
static_assert(offsetof(FConZWeaponDescRow, TargetTypeMultiplier) == 0x0010);
static_assert(offsetof(FConZWeaponDescRow, ImpactSoundCategory) == 0x002C);
static_assert(offsetof(FConZWeaponDescRow, ImpactEffects) == 0x0030);
static_assert(offsetof(FConZConsoleVariableRow, ConsoleVariable) == 0x0008);
static_assert(offsetof(FConZConsoleVariableRow, Description) == 0x0018);
static_assert(offsetof(FConZDimensionRow, Description) == 0x0010);
static_assert(offsetof(FConZFontRow, Font) == 0x0008);
static_assert(offsetof(FConZFontRow, Description) == 0x0060);
static_assert(offsetof(FConZColorRow, Color) == 0x0008);
static_assert(offsetof(FConZColorRow, Description) == 0x0018);
static_assert(offsetof(FTeleportRequest, Subject) == 0x0000);
static_assert(offsetof(FTeleportRequest, TargetLocation) == 0x0008);
static_assert(offsetof(FTeleportRequest, TargetRotation) == 0x0014);
static_assert(offsetof(FTeleportRequest, UserData) == 0x0020);
static_assert(offsetof(FConZTradeableDescRow, TradeableClass) == 0x0008);
static_assert(offsetof(FConZTradeableDescRow, TradeCategory) == 0x0032);
static_assert(offsetof(FConZTradeableDescRow, PurchaseCurrencyType) == 0x0090);
static_assert(offsetof(FConZTradeableDescRow, SpawnType) == 0x0098);
static_assert(offsetof(FConZTradeableDescRow, TradingEntryCaption) == 0x00A0);
static_assert(offsetof(FConZTradeableDescRow, TradingEntryIconTexture) == 0x00B8);
static_assert(offsetof(FConZTradeableDescRow, TradeableFamePointPenaltyGroup) == 0x00E8);
static_assert(offsetof(FConZTradeableDescRow, TradeableRotationRarity) == 0x00F4);
static_assert(offsetof(FConZTradeableDescRow, TradeableDiscountCondition) == 0x0108);
static_assert(offsetof(FConZTradeableDescRow, TraderSearchTypes) == 0x0110);
static_assert(offsetof(FConZTradeableDescRow, TraderSearchRelated) == 0x0130);
static_assert(offsetof(FConZTradeableDescRow, RequiredDLC) == 0x0151);
static_assert(offsetof(FLegalTender, Currency) == 0x0004);
static_assert(offsetof(FTrapTriggerParams, TriggeredActor) == 0x0000);
static_assert(offsetof(FUserProfileAuthorityInfo, Name) == 0x0000);
static_assert(offsetof(FUserProfileAuthorityInfo, Ip) == 0x0010);
static_assert(offsetof(FUserProfileAuthorityInfo, UserProfileId) == 0x0028);
static_assert(offsetof(FUserProfileAuthorityInfo, AuthToken) == 0x0030);
static_assert(offsetof(FUserServerHistoryItem, Name) == 0x0000);
static_assert(offsetof(FUserServerHistoryItem, Host) == 0x0010);
static_assert(offsetof(FInputValue, Name) == 0x0000);
static_assert(offsetof(FVehicleSpawnerInfo, VehicleEntityId) == 0x0000);
static_assert(offsetof(FVehicleSpawnerInfo, VehicleAssetId) == 0x0008);
static_assert(offsetof(FVehicleSpawnerInfo, ContainerId) == 0x0018);
static_assert(offsetof(FVehicleSpawnerInfo, VehicleBase) == 0x0020);
static_assert(offsetof(FVehicleSpawnerInfo, VehicleAlias) == 0x0028);
static_assert(offsetof(FVehicleSpawnerInfo, VehicleTransform) == 0x0040);
static_assert(offsetof(FVehiclePartDescription, PartType) == 0x0000);
static_assert(offsetof(FVehicleTireEffectProperties, TireLocalOffset) == 0x0000);
static_assert(offsetof(FVehicleMaterialParameterDescription, ParameterName) == 0x0000);
static_assert(offsetof(FVehicleEngineStallingParameters, ThrottleCurve) == 0x0010);
static_assert(offsetof(FVehicleEngineStallingParameters, BrakeCurve) == 0x0020);
static_assert(offsetof(FVehicleEngineStallingParameters, ForceMagnitudeScaleCurve) == 0x0030);
static_assert(offsetof(FVehicleEngineStallingParameters, AudioEvent) == 0x0040);
static_assert(offsetof(FVehicleEngineStallingParameters, AudioEventTriggerTimeRatios) == 0x0048);
static_assert(offsetof(FVehicleExhaustParticles, AttachSocketName) == 0x0000);
static_assert(offsetof(FVehicleExhaustParticles, ParticleSystem) == 0x0008);
static_assert(offsetof(FVehicleExhaustEffects, Particles) == 0x0000);
static_assert(offsetof(FVehicleExhaustEffectsParameters, Transform) == 0x0000);
static_assert(offsetof(FVehicleExhaustEffectsParameters, EngineStartedParticleSystem) == 0x0030);
static_assert(offsetof(FVehicleExhaustEffectsParameters, EngineIdleParticleSystem) == 0x0038);
static_assert(offsetof(FVehicleExhaustEffectsParameters, ThrottlePressedParticleSystem) == 0x0040);
static_assert(offsetof(FVehicleExhaustEffectsParameters, ThrottlePressedAudioEvent) == 0x0048);
static_assert(offsetof(FVehicleDamagedEffectsParameters, HealthRatioRange) == 0x0000);
static_assert(offsetof(FVehicleDamagedEffectsParameters, Transform) == 0x0010);
static_assert(offsetof(FVehicleDamagedEffectsParameters, ParticleSystem) == 0x0040);
static_assert(offsetof(FVehicleDamagedEffectsParameters, StartAudioEvent) == 0x0048);
static_assert(offsetof(FVehicleDamagedEffectsParameters, StopAudioEvent) == 0x0050);
static_assert(offsetof(FClassesArray, Classes) == 0x0000);
static_assert(offsetof(FClassesArray, ProhibitedClasses) == 0x0010);
static_assert(offsetof(FWeaponTypeAimOffset, WeaponType) == 0x0000);
static_assert(offsetof(FWeaponTypeAimOffset, AimOffset) == 0x0008);
static_assert(offsetof(FWeaponCheckAmmoData, ActionSequenceClass) == 0x0000);
static_assert(offsetof(FWeaponUnloadAmmoData, ActionSequenceClass) == 0x0000);
static_assert(offsetof(FZombieRagdollAutoRecovery, Type) == 0x0000);
